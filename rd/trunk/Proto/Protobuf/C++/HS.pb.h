// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HS.proto

#ifndef PROTOBUF_HS_2eproto__INCLUDED
#define PROTOBUF_HS_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HS_2eproto();
void protobuf_AssignDesc_HS_2eproto();
void protobuf_ShutdownFile_HS_2eproto();


enum sys {
  DATA_WRAPPER = 1,
  KEY_EXCHANGE = 2,
  HEART_BEAT = 3,
  ERROR_CODE = 4
};
bool sys_IsValid(int value);
const sys sys_MIN = DATA_WRAPPER;
const sys sys_MAX = ERROR_CODE;
const int sys_ARRAYSIZE = sys_MAX + 1;

const ::google::protobuf::EnumDescriptor* sys_descriptor();
inline const ::std::string& sys_Name(sys value) {
  return ::google::protobuf::internal::NameOfEnum(
    sys_descriptor(), value);
}
inline bool sys_Parse(
    const ::std::string& name, sys* value) {
  return ::google::protobuf::internal::ParseNamedEnum<sys>(
    sys_descriptor(), name, value);
}
enum code {
  LOGIN_C = 1000,
  LOGIN_S = 1001,
  LOGOUT_C = 1002,
  LOGOUT_S = 1003,
  KICKOUT_S = 1004,
  ROLE_CREATE_C = 1010,
  ROLE_CREATE_S = 1011,
  ROLE_SELECT_C = 1012
};
bool code_IsValid(int value);
const code code_MIN = LOGIN_C;
const code code_MAX = ROLE_SELECT_C;
const int code_ARRAYSIZE = code_MAX + 1;

const ::google::protobuf::EnumDescriptor* code_descriptor();
inline const ::std::string& code_Name(code value) {
  return ::google::protobuf::internal::NameOfEnum(
    code_descriptor(), value);
}
inline bool code_Parse(
    const ::std::string& name, code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<code>(
    code_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sys>() {
  return ::sys_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::code>() {
  return ::code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HS_2eproto__INCLUDED
