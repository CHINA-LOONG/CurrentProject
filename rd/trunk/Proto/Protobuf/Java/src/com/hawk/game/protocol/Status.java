// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/Status.proto

package com.hawk.game.protocol;

public final class Status {
  private Status() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code errorMask}
   */
  public enum errorMask
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NORMAL_ERROR = 0;</code>
     */
    NORMAL_ERROR(0, 0),
    /**
     * <code>LOGIN_ERROR = 65536;</code>
     */
    LOGIN_ERROR(1, 65536),
    /**
     * <code>PLAYER_ERROR = 131072;</code>
     */
    PLAYER_ERROR(2, 131072),
    /**
     * <code>MONSTER_ERROR = 196608;</code>
     */
    MONSTER_ERROR(3, 196608),
    ;

    /**
     * <code>NORMAL_ERROR = 0;</code>
     */
    public static final int NORMAL_ERROR_VALUE = 0;
    /**
     * <code>LOGIN_ERROR = 65536;</code>
     */
    public static final int LOGIN_ERROR_VALUE = 65536;
    /**
     * <code>PLAYER_ERROR = 131072;</code>
     */
    public static final int PLAYER_ERROR_VALUE = 131072;
    /**
     * <code>MONSTER_ERROR = 196608;</code>
     */
    public static final int MONSTER_ERROR_VALUE = 196608;


    public final int getNumber() { return value; }

    public static errorMask valueOf(int value) {
      switch (value) {
        case 0: return NORMAL_ERROR;
        case 65536: return LOGIN_ERROR;
        case 131072: return PLAYER_ERROR;
        case 196608: return MONSTER_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<errorMask>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<errorMask>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<errorMask>() {
            public errorMask findValueByNumber(int number) {
              return errorMask.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(0);
    }

    private static final errorMask[] VALUES = values();

    public static errorMask valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private errorMask(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:errorMask)
  }

  /**
   * Protobuf enum {@code error}
   */
  public enum error
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NONE_ERROR = 0;</code>
     *
     * <pre>
     * 没有错误
     * </pre>
     */
    NONE_ERROR(0, 0),
    /**
     * <code>CONFIG_ERROR = 1;</code>
     *
     * <pre>
     * 配置文件错误
     * </pre>
     */
    CONFIG_ERROR(1, 1),
    /**
     * <code>ONLINE_MAX_LIMIT = 2;</code>
     *
     * <pre>
     * 在线人数达到上限
     * </pre>
     */
    ONLINE_MAX_LIMIT(2, 2),
    /**
     * <code>REGISTER_MAX_LIMIT = 3;</code>
     *
     * <pre>
     * 注册人数达到上限
     * </pre>
     */
    REGISTER_MAX_LIMIT(3, 3),
    /**
     * <code>SERVER_GRAY_STATE = 4;</code>
     *
     * <pre>
     * 服务器灰度状态中
     * </pre>
     */
    SERVER_GRAY_STATE(4, 4),
    /**
     * <code>DATA_BASE_ERROR = 5;</code>
     *
     * <pre>
     * 数据库错误
     * </pre>
     */
    DATA_BASE_ERROR(5, 5),
    /**
     * <code>PARAMS_INVALID = 6;</code>
     *
     * <pre>
     * 参数错误
     * </pre>
     */
    PARAMS_INVALID(6, 6),
    /**
     * <code>CONFIG_NOT_FOUND = 7;</code>
     *
     * <pre>
     * 配置错误
     * </pre>
     */
    CONFIG_NOT_FOUND(7, 7),
    /**
     * <code>SERVER_ERROR = 4096;</code>
     *
     * <pre>
     * 服务器错误
     * </pre>
     */
    SERVER_ERROR(8, 4096),
    ;

    /**
     * <code>NONE_ERROR = 0;</code>
     *
     * <pre>
     * 没有错误
     * </pre>
     */
    public static final int NONE_ERROR_VALUE = 0;
    /**
     * <code>CONFIG_ERROR = 1;</code>
     *
     * <pre>
     * 配置文件错误
     * </pre>
     */
    public static final int CONFIG_ERROR_VALUE = 1;
    /**
     * <code>ONLINE_MAX_LIMIT = 2;</code>
     *
     * <pre>
     * 在线人数达到上限
     * </pre>
     */
    public static final int ONLINE_MAX_LIMIT_VALUE = 2;
    /**
     * <code>REGISTER_MAX_LIMIT = 3;</code>
     *
     * <pre>
     * 注册人数达到上限
     * </pre>
     */
    public static final int REGISTER_MAX_LIMIT_VALUE = 3;
    /**
     * <code>SERVER_GRAY_STATE = 4;</code>
     *
     * <pre>
     * 服务器灰度状态中
     * </pre>
     */
    public static final int SERVER_GRAY_STATE_VALUE = 4;
    /**
     * <code>DATA_BASE_ERROR = 5;</code>
     *
     * <pre>
     * 数据库错误
     * </pre>
     */
    public static final int DATA_BASE_ERROR_VALUE = 5;
    /**
     * <code>PARAMS_INVALID = 6;</code>
     *
     * <pre>
     * 参数错误
     * </pre>
     */
    public static final int PARAMS_INVALID_VALUE = 6;
    /**
     * <code>CONFIG_NOT_FOUND = 7;</code>
     *
     * <pre>
     * 配置错误
     * </pre>
     */
    public static final int CONFIG_NOT_FOUND_VALUE = 7;
    /**
     * <code>SERVER_ERROR = 4096;</code>
     *
     * <pre>
     * 服务器错误
     * </pre>
     */
    public static final int SERVER_ERROR_VALUE = 4096;


    public final int getNumber() { return value; }

    public static error valueOf(int value) {
      switch (value) {
        case 0: return NONE_ERROR;
        case 1: return CONFIG_ERROR;
        case 2: return ONLINE_MAX_LIMIT;
        case 3: return REGISTER_MAX_LIMIT;
        case 4: return SERVER_GRAY_STATE;
        case 5: return DATA_BASE_ERROR;
        case 6: return PARAMS_INVALID;
        case 7: return CONFIG_NOT_FOUND;
        case 4096: return SERVER_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<error>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<error>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<error>() {
            public error findValueByNumber(int number) {
              return error.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(1);
    }

    private static final error[] VALUES = values();

    public static error valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private error(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:error)
  }

  /**
   * Protobuf enum {@code PlayerError}
   */
  public enum PlayerError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PLAYER_NOT_EXIST = 131073;</code>
     *
     * <pre>
     * 角色不存在
     * </pre>
     */
    PLAYER_NOT_EXIST(0, 131073),
    /**
     * <code>PLAYER_NICKNAME_EXIST = 131074;</code>
     *
     * <pre>
     * 昵称存在
     * </pre>
     */
    PLAYER_NICKNAME_EXIST(1, 131074),
    ;

    /**
     * <code>PLAYER_NOT_EXIST = 131073;</code>
     *
     * <pre>
     * 角色不存在
     * </pre>
     */
    public static final int PLAYER_NOT_EXIST_VALUE = 131073;
    /**
     * <code>PLAYER_NICKNAME_EXIST = 131074;</code>
     *
     * <pre>
     * 昵称存在
     * </pre>
     */
    public static final int PLAYER_NICKNAME_EXIST_VALUE = 131074;


    public final int getNumber() { return value; }

    public static PlayerError valueOf(int value) {
      switch (value) {
        case 131073: return PLAYER_NOT_EXIST;
        case 131074: return PLAYER_NICKNAME_EXIST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PlayerError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<PlayerError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PlayerError>() {
            public PlayerError findValueByNumber(int number) {
              return PlayerError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(2);
    }

    private static final PlayerError[] VALUES = values();

    public static PlayerError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private PlayerError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PlayerError)
  }

  /**
   * Protobuf enum {@code monsterError}
   */
  public enum monsterError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MONSTER_MAX_SIZE = 196609;</code>
     *
     * <pre>
     * 怪物数量达到上限
     * </pre>
     */
    MONSTER_MAX_SIZE(0, 196609),
    /**
     * <code>MONSTER_NOT_EXIST = 196610;</code>
     *
     * <pre>
     * 怪物不存在
     * </pre>
     */
    MONSTER_NOT_EXIST(1, 196610),
    ;

    /**
     * <code>MONSTER_MAX_SIZE = 196609;</code>
     *
     * <pre>
     * 怪物数量达到上限
     * </pre>
     */
    public static final int MONSTER_MAX_SIZE_VALUE = 196609;
    /**
     * <code>MONSTER_NOT_EXIST = 196610;</code>
     *
     * <pre>
     * 怪物不存在
     * </pre>
     */
    public static final int MONSTER_NOT_EXIST_VALUE = 196610;


    public final int getNumber() { return value; }

    public static monsterError valueOf(int value) {
      switch (value) {
        case 196609: return MONSTER_MAX_SIZE;
        case 196610: return MONSTER_NOT_EXIST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<monsterError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<monsterError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<monsterError>() {
            public monsterError findValueByNumber(int number) {
              return monsterError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(3);
    }

    private static final monsterError[] VALUES = values();

    public static monsterError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private monsterError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:monsterError)
  }

  /**
   * Protobuf enum {@code itemError}
   */
  public enum itemError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ITEM_NOT_FOUND = 262145;</code>
     *
     * <pre>
     * 道具不存在
     * </pre>
     */
    ITEM_NOT_FOUND(0, 262145),
    /**
     * <code>COINS_NOT_ENOUGH = 131074;</code>
     *
     * <pre>
     * 金币不足
     * </pre>
     */
    COINS_NOT_ENOUGH(1, 131074),
    /**
     * <code>GOLD_NOT_ENOUGH = 131075;</code>
     *
     * <pre>
     * 钻石不足
     * </pre>
     */
    GOLD_NOT_ENOUGH(2, 131075),
    /**
     * <code>EQUIP_NOT_FOUND = 131076;</code>
     *
     * <pre>
     * 装备不足
     * </pre>
     */
    EQUIP_NOT_FOUND(3, 131076),
    /**
     * <code>ITEM_NOT_ENOUGH = 262149;</code>
     *
     * <pre>
     * 道具数量不足
     * </pre>
     */
    ITEM_NOT_ENOUGH(4, 262149),
    /**
     * <code>ITEM_BUY_NOT_ALLOW = 262150;</code>
     *
     * <pre>
     * 道具不能买
     * </pre>
     */
    ITEM_BUY_NOT_ALLOW(5, 262150),
    /**
     * <code>ITEM_SELL_NOT_ALLOW = 262151;</code>
     *
     * <pre>
     * 道具不能卖
     * </pre>
     */
    ITEM_SELL_NOT_ALLOW(6, 262151),
    /**
     * <code>EQUIP_MAX_LEVEL_ALREADY = 262152;</code>
     *
     * <pre>
     * 装备最大等级
     * </pre>
     */
    EQUIP_MAX_LEVEL_ALREADY(7, 262152),
    /**
     * <code>EQUIP_LEVEL_NOT_ENOUGH = 262153;</code>
     *
     * <pre>
     * 装备等级不够进阶
     * </pre>
     */
    EQUIP_LEVEL_NOT_ENOUGH(8, 262153),
    /**
     * <code>EQUIP_MAX_STAGE_ALREADY = 262154;</code>
     *
     * <pre>
     * 装备最大品级
     * </pre>
     */
    EQUIP_MAX_STAGE_ALREADY(9, 262154),
    /**
     * <code>EQUIP_DRESS_ALREADY = 262160;</code>
     *
     * <pre>
     * 装备不在背包
     * </pre>
     */
    EQUIP_DRESS_ALREADY(10, 262160),
    /**
     * <code>EQUIP_NOT_DRESS_OTHER = 262161;</code>
     *
     * <pre>
     * 该位置没有其他装备
     * </pre>
     */
    EQUIP_NOT_DRESS_OTHER(11, 262161),
    /**
     * <code>EQUIP_DRESS_OTHER_ALREADY = 262162;</code>
     *
     * <pre>
     * 该位置已经有其他装备
     * </pre>
     */
    EQUIP_DRESS_OTHER_ALREADY(12, 262162),
    /**
     * <code>EQUIP_NOT_DRESSED = 262163;</code>
     *
     * <pre>
     * 装备不在身上
     * </pre>
     */
    EQUIP_NOT_DRESSED(13, 262163),
    ;

    /**
     * <code>ITEM_NOT_FOUND = 262145;</code>
     *
     * <pre>
     * 道具不存在
     * </pre>
     */
    public static final int ITEM_NOT_FOUND_VALUE = 262145;
    /**
     * <code>COINS_NOT_ENOUGH = 131074;</code>
     *
     * <pre>
     * 金币不足
     * </pre>
     */
    public static final int COINS_NOT_ENOUGH_VALUE = 131074;
    /**
     * <code>GOLD_NOT_ENOUGH = 131075;</code>
     *
     * <pre>
     * 钻石不足
     * </pre>
     */
    public static final int GOLD_NOT_ENOUGH_VALUE = 131075;
    /**
     * <code>EQUIP_NOT_FOUND = 131076;</code>
     *
     * <pre>
     * 装备不足
     * </pre>
     */
    public static final int EQUIP_NOT_FOUND_VALUE = 131076;
    /**
     * <code>ITEM_NOT_ENOUGH = 262149;</code>
     *
     * <pre>
     * 道具数量不足
     * </pre>
     */
    public static final int ITEM_NOT_ENOUGH_VALUE = 262149;
    /**
     * <code>ITEM_BUY_NOT_ALLOW = 262150;</code>
     *
     * <pre>
     * 道具不能买
     * </pre>
     */
    public static final int ITEM_BUY_NOT_ALLOW_VALUE = 262150;
    /**
     * <code>ITEM_SELL_NOT_ALLOW = 262151;</code>
     *
     * <pre>
     * 道具不能卖
     * </pre>
     */
    public static final int ITEM_SELL_NOT_ALLOW_VALUE = 262151;
    /**
     * <code>EQUIP_MAX_LEVEL_ALREADY = 262152;</code>
     *
     * <pre>
     * 装备最大等级
     * </pre>
     */
    public static final int EQUIP_MAX_LEVEL_ALREADY_VALUE = 262152;
    /**
     * <code>EQUIP_LEVEL_NOT_ENOUGH = 262153;</code>
     *
     * <pre>
     * 装备等级不够进阶
     * </pre>
     */
    public static final int EQUIP_LEVEL_NOT_ENOUGH_VALUE = 262153;
    /**
     * <code>EQUIP_MAX_STAGE_ALREADY = 262154;</code>
     *
     * <pre>
     * 装备最大品级
     * </pre>
     */
    public static final int EQUIP_MAX_STAGE_ALREADY_VALUE = 262154;
    /**
     * <code>EQUIP_DRESS_ALREADY = 262160;</code>
     *
     * <pre>
     * 装备不在背包
     * </pre>
     */
    public static final int EQUIP_DRESS_ALREADY_VALUE = 262160;
    /**
     * <code>EQUIP_NOT_DRESS_OTHER = 262161;</code>
     *
     * <pre>
     * 该位置没有其他装备
     * </pre>
     */
    public static final int EQUIP_NOT_DRESS_OTHER_VALUE = 262161;
    /**
     * <code>EQUIP_DRESS_OTHER_ALREADY = 262162;</code>
     *
     * <pre>
     * 该位置已经有其他装备
     * </pre>
     */
    public static final int EQUIP_DRESS_OTHER_ALREADY_VALUE = 262162;
    /**
     * <code>EQUIP_NOT_DRESSED = 262163;</code>
     *
     * <pre>
     * 装备不在身上
     * </pre>
     */
    public static final int EQUIP_NOT_DRESSED_VALUE = 262163;


    public final int getNumber() { return value; }

    public static itemError valueOf(int value) {
      switch (value) {
        case 262145: return ITEM_NOT_FOUND;
        case 131074: return COINS_NOT_ENOUGH;
        case 131075: return GOLD_NOT_ENOUGH;
        case 131076: return EQUIP_NOT_FOUND;
        case 262149: return ITEM_NOT_ENOUGH;
        case 262150: return ITEM_BUY_NOT_ALLOW;
        case 262151: return ITEM_SELL_NOT_ALLOW;
        case 262152: return EQUIP_MAX_LEVEL_ALREADY;
        case 262153: return EQUIP_LEVEL_NOT_ENOUGH;
        case 262154: return EQUIP_MAX_STAGE_ALREADY;
        case 262160: return EQUIP_DRESS_ALREADY;
        case 262161: return EQUIP_NOT_DRESS_OTHER;
        case 262162: return EQUIP_DRESS_OTHER_ALREADY;
        case 262163: return EQUIP_NOT_DRESSED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<itemError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<itemError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<itemError>() {
            public itemError findValueByNumber(int number) {
              return itemError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(4);
    }

    private static final itemError[] VALUES = values();

    public static itemError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private itemError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:itemError)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025Protocol/Status.proto*Y\n\terrorMask\022\020\n\014" +
      "NORMAL_ERROR\020\000\022\021\n\013LOGIN_ERROR\020\200\200\004\022\022\n\014PLA" +
      "YER_ERROR\020\200\200\010\022\023\n\rMONSTER_ERROR\020\200\200\014*\300\001\n\005e" +
      "rror\022\016\n\nNONE_ERROR\020\000\022\020\n\014CONFIG_ERROR\020\001\022\024" +
      "\n\020ONLINE_MAX_LIMIT\020\002\022\026\n\022REGISTER_MAX_LIM" +
      "IT\020\003\022\025\n\021SERVER_GRAY_STATE\020\004\022\023\n\017DATA_BASE" +
      "_ERROR\020\005\022\022\n\016PARAMS_INVALID\020\006\022\024\n\020CONFIG_N" +
      "OT_FOUND\020\007\022\021\n\014SERVER_ERROR\020\200 *B\n\013PlayerE" +
      "rror\022\026\n\020PLAYER_NOT_EXIST\020\201\200\010\022\033\n\025PLAYER_N" +
      "ICKNAME_EXIST\020\202\200\010*?\n\014monsterError\022\026\n\020MON",
      "STER_MAX_SIZE\020\201\200\014\022\027\n\021MONSTER_NOT_EXIST\020\202" +
      "\200\014*\201\003\n\titemError\022\024\n\016ITEM_NOT_FOUND\020\201\200\020\022\026" +
      "\n\020COINS_NOT_ENOUGH\020\202\200\010\022\025\n\017GOLD_NOT_ENOUG" +
      "H\020\203\200\010\022\025\n\017EQUIP_NOT_FOUND\020\204\200\010\022\025\n\017ITEM_NOT" +
      "_ENOUGH\020\205\200\020\022\030\n\022ITEM_BUY_NOT_ALLOW\020\206\200\020\022\031\n" +
      "\023ITEM_SELL_NOT_ALLOW\020\207\200\020\022\035\n\027EQUIP_MAX_LE" +
      "VEL_ALREADY\020\210\200\020\022\034\n\026EQUIP_LEVEL_NOT_ENOUG" +
      "H\020\211\200\020\022\035\n\027EQUIP_MAX_STAGE_ALREADY\020\212\200\020\022\031\n\023" +
      "EQUIP_DRESS_ALREADY\020\220\200\020\022\033\n\025EQUIP_NOT_DRE" +
      "SS_OTHER\020\221\200\020\022\037\n\031EQUIP_DRESS_OTHER_ALREAD",
      "Y\020\222\200\020\022\027\n\021EQUIP_NOT_DRESSED\020\223\200\020B\030\n\026com.ha" +
      "wk.game.protocol"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
