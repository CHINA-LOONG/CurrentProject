// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/Status.proto

package com.hawk.game.protocol;

public final class Status {
  private Status() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code errorMask}
   */
  public enum errorMask
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NORMAL_ERROR = 0;</code>
     */
    NORMAL_ERROR(0, 0),
    /**
     * <code>LOGIN_ERROR = 65536;</code>
     */
    LOGIN_ERROR(1, 65536),
    /**
     * <code>PLAYER_ERROR = 131072;</code>
     */
    PLAYER_ERROR(2, 131072),
    /**
     * <code>MONSTER_ERROR = 196608;</code>
     */
    MONSTER_ERROR(3, 196608),
    /**
     * <code>ITEM_ERROR = 262144;</code>
     */
    ITEM_ERROR(4, 262144),
    /**
     * <code>QUEST_ERROR = 327680;</code>
     */
    QUEST_ERROR(5, 327680),
    /**
     * <code>INSTANCE_ERROR = 393216;</code>
     */
    INSTANCE_ERROR(6, 393216),
    /**
     * <code>MAIL_ERROR = 458752;</code>
     */
    MAIL_ERROR(7, 458752),
    /**
     * <code>ALLIANCE_ERROR = 524288;</code>
     */
    ALLIANCE_ERROR(8, 524288),
    /**
     * <code>SHOP_ERROR = 589824;</code>
     */
    SHOP_ERROR(9, 589824),
    /**
     * <code>IM_ERROR = 1048576;</code>
     */
    IM_ERROR(10, 1048576),
    ;

    /**
     * <code>NORMAL_ERROR = 0;</code>
     */
    public static final int NORMAL_ERROR_VALUE = 0;
    /**
     * <code>LOGIN_ERROR = 65536;</code>
     */
    public static final int LOGIN_ERROR_VALUE = 65536;
    /**
     * <code>PLAYER_ERROR = 131072;</code>
     */
    public static final int PLAYER_ERROR_VALUE = 131072;
    /**
     * <code>MONSTER_ERROR = 196608;</code>
     */
    public static final int MONSTER_ERROR_VALUE = 196608;
    /**
     * <code>ITEM_ERROR = 262144;</code>
     */
    public static final int ITEM_ERROR_VALUE = 262144;
    /**
     * <code>QUEST_ERROR = 327680;</code>
     */
    public static final int QUEST_ERROR_VALUE = 327680;
    /**
     * <code>INSTANCE_ERROR = 393216;</code>
     */
    public static final int INSTANCE_ERROR_VALUE = 393216;
    /**
     * <code>MAIL_ERROR = 458752;</code>
     */
    public static final int MAIL_ERROR_VALUE = 458752;
    /**
     * <code>ALLIANCE_ERROR = 524288;</code>
     */
    public static final int ALLIANCE_ERROR_VALUE = 524288;
    /**
     * <code>SHOP_ERROR = 589824;</code>
     */
    public static final int SHOP_ERROR_VALUE = 589824;
    /**
     * <code>IM_ERROR = 1048576;</code>
     */
    public static final int IM_ERROR_VALUE = 1048576;


    public final int getNumber() { return value; }

    public static errorMask valueOf(int value) {
      switch (value) {
        case 0: return NORMAL_ERROR;
        case 65536: return LOGIN_ERROR;
        case 131072: return PLAYER_ERROR;
        case 196608: return MONSTER_ERROR;
        case 262144: return ITEM_ERROR;
        case 327680: return QUEST_ERROR;
        case 393216: return INSTANCE_ERROR;
        case 458752: return MAIL_ERROR;
        case 524288: return ALLIANCE_ERROR;
        case 589824: return SHOP_ERROR;
        case 1048576: return IM_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<errorMask>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<errorMask>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<errorMask>() {
            public errorMask findValueByNumber(int number) {
              return errorMask.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(0);
    }

    private static final errorMask[] VALUES = values();

    public static errorMask valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private errorMask(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:errorMask)
  }

  /**
   * Protobuf enum {@code error}
   */
  public enum error
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NONE_ERROR = 0;</code>
     *
     * <pre>
     * 没有错误
     * </pre>
     */
    NONE_ERROR(0, 0),
    /**
     * <code>CONFIG_ERROR = 1;</code>
     *
     * <pre>
     * 配置文件错误
     * </pre>
     */
    CONFIG_ERROR(1, 1),
    /**
     * <code>ONLINE_MAX_LIMIT = 2;</code>
     *
     * <pre>
     * 在线人数达到上限
     * </pre>
     */
    ONLINE_MAX_LIMIT(2, 2),
    /**
     * <code>REGISTER_MAX_LIMIT = 3;</code>
     *
     * <pre>
     * 注册人数达到上限
     * </pre>
     */
    REGISTER_MAX_LIMIT(3, 3),
    /**
     * <code>SERVER_GRAY_STATE = 4;</code>
     *
     * <pre>
     * 服务器灰度状态中
     * </pre>
     */
    SERVER_GRAY_STATE(4, 4),
    /**
     * <code>DATA_BASE_ERROR = 5;</code>
     *
     * <pre>
     * 数据库错误
     * </pre>
     */
    DATA_BASE_ERROR(5, 5),
    /**
     * <code>PARAMS_INVALID = 6;</code>
     *
     * <pre>
     * 参数错误
     * </pre>
     */
    PARAMS_INVALID(6, 6),
    /**
     * <code>CONFIG_NOT_FOUND = 7;</code>
     *
     * <pre>
     * 配置错误
     * </pre>
     */
    CONFIG_NOT_FOUND(7, 7),
    /**
     * <code>UNSUPPORT_ACTION = 8;</code>
     *
     * <pre>
     * 配置错误
     * </pre>
     */
    UNSUPPORT_ACTION(8, 8),
    /**
     * <code>SERVER_ERROR = 4096;</code>
     *
     * <pre>
     * 服务器错误
     * </pre>
     */
    SERVER_ERROR(9, 4096),
    ;

    /**
     * <code>NONE_ERROR = 0;</code>
     *
     * <pre>
     * 没有错误
     * </pre>
     */
    public static final int NONE_ERROR_VALUE = 0;
    /**
     * <code>CONFIG_ERROR = 1;</code>
     *
     * <pre>
     * 配置文件错误
     * </pre>
     */
    public static final int CONFIG_ERROR_VALUE = 1;
    /**
     * <code>ONLINE_MAX_LIMIT = 2;</code>
     *
     * <pre>
     * 在线人数达到上限
     * </pre>
     */
    public static final int ONLINE_MAX_LIMIT_VALUE = 2;
    /**
     * <code>REGISTER_MAX_LIMIT = 3;</code>
     *
     * <pre>
     * 注册人数达到上限
     * </pre>
     */
    public static final int REGISTER_MAX_LIMIT_VALUE = 3;
    /**
     * <code>SERVER_GRAY_STATE = 4;</code>
     *
     * <pre>
     * 服务器灰度状态中
     * </pre>
     */
    public static final int SERVER_GRAY_STATE_VALUE = 4;
    /**
     * <code>DATA_BASE_ERROR = 5;</code>
     *
     * <pre>
     * 数据库错误
     * </pre>
     */
    public static final int DATA_BASE_ERROR_VALUE = 5;
    /**
     * <code>PARAMS_INVALID = 6;</code>
     *
     * <pre>
     * 参数错误
     * </pre>
     */
    public static final int PARAMS_INVALID_VALUE = 6;
    /**
     * <code>CONFIG_NOT_FOUND = 7;</code>
     *
     * <pre>
     * 配置错误
     * </pre>
     */
    public static final int CONFIG_NOT_FOUND_VALUE = 7;
    /**
     * <code>UNSUPPORT_ACTION = 8;</code>
     *
     * <pre>
     * 配置错误
     * </pre>
     */
    public static final int UNSUPPORT_ACTION_VALUE = 8;
    /**
     * <code>SERVER_ERROR = 4096;</code>
     *
     * <pre>
     * 服务器错误
     * </pre>
     */
    public static final int SERVER_ERROR_VALUE = 4096;


    public final int getNumber() { return value; }

    public static error valueOf(int value) {
      switch (value) {
        case 0: return NONE_ERROR;
        case 1: return CONFIG_ERROR;
        case 2: return ONLINE_MAX_LIMIT;
        case 3: return REGISTER_MAX_LIMIT;
        case 4: return SERVER_GRAY_STATE;
        case 5: return DATA_BASE_ERROR;
        case 6: return PARAMS_INVALID;
        case 7: return CONFIG_NOT_FOUND;
        case 8: return UNSUPPORT_ACTION;
        case 4096: return SERVER_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<error>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<error>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<error>() {
            public error findValueByNumber(int number) {
              return error.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(1);
    }

    private static final error[] VALUES = values();

    public static error valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private error(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:error)
  }

  /**
   * Protobuf enum {@code PlayerError}
   */
  public enum PlayerError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PLAYER_NOT_EXIST = 131073;</code>
     *
     * <pre>
     * 角色不存在
     * </pre>
     */
    PLAYER_NOT_EXIST(0, 131073),
    /**
     * <code>PLAYER_NICKNAME_EXIST = 131074;</code>
     *
     * <pre>
     * 昵称存在
     * </pre>
     */
    PLAYER_NICKNAME_EXIST(1, 131074),
    /**
     * <code>PUID_EXIST = 131075;</code>
     *
     * <pre>
     * 账号名成重复
     * </pre>
     */
    PUID_EXIST(2, 131075),
    /**
     * <code>COINS_NOT_ENOUGH = 131076;</code>
     *
     * <pre>
     * 金币不足
     * </pre>
     */
    COINS_NOT_ENOUGH(3, 131076),
    /**
     * <code>GOLD_NOT_ENOUGH = 131077;</code>
     *
     * <pre>
     * 钻石不足
     * </pre>
     */
    GOLD_NOT_ENOUGH(4, 131077),
    /**
     * <code>FATIGUE_NOT_ENOUGH = 131078;</code>
     *
     * <pre>
     * 疲劳值不足
     * </pre>
     */
    FATIGUE_NOT_ENOUGH(5, 131078),
    ;

    /**
     * <code>PLAYER_NOT_EXIST = 131073;</code>
     *
     * <pre>
     * 角色不存在
     * </pre>
     */
    public static final int PLAYER_NOT_EXIST_VALUE = 131073;
    /**
     * <code>PLAYER_NICKNAME_EXIST = 131074;</code>
     *
     * <pre>
     * 昵称存在
     * </pre>
     */
    public static final int PLAYER_NICKNAME_EXIST_VALUE = 131074;
    /**
     * <code>PUID_EXIST = 131075;</code>
     *
     * <pre>
     * 账号名成重复
     * </pre>
     */
    public static final int PUID_EXIST_VALUE = 131075;
    /**
     * <code>COINS_NOT_ENOUGH = 131076;</code>
     *
     * <pre>
     * 金币不足
     * </pre>
     */
    public static final int COINS_NOT_ENOUGH_VALUE = 131076;
    /**
     * <code>GOLD_NOT_ENOUGH = 131077;</code>
     *
     * <pre>
     * 钻石不足
     * </pre>
     */
    public static final int GOLD_NOT_ENOUGH_VALUE = 131077;
    /**
     * <code>FATIGUE_NOT_ENOUGH = 131078;</code>
     *
     * <pre>
     * 疲劳值不足
     * </pre>
     */
    public static final int FATIGUE_NOT_ENOUGH_VALUE = 131078;


    public final int getNumber() { return value; }

    public static PlayerError valueOf(int value) {
      switch (value) {
        case 131073: return PLAYER_NOT_EXIST;
        case 131074: return PLAYER_NICKNAME_EXIST;
        case 131075: return PUID_EXIST;
        case 131076: return COINS_NOT_ENOUGH;
        case 131077: return GOLD_NOT_ENOUGH;
        case 131078: return FATIGUE_NOT_ENOUGH;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PlayerError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<PlayerError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PlayerError>() {
            public PlayerError findValueByNumber(int number) {
              return PlayerError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(2);
    }

    private static final PlayerError[] VALUES = values();

    public static PlayerError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private PlayerError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PlayerError)
  }

  /**
   * Protobuf enum {@code monsterError}
   */
  public enum monsterError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MONSTER_MAX_SIZE = 196609;</code>
     *
     * <pre>
     * 怪物数量达到上限
     * </pre>
     */
    MONSTER_MAX_SIZE(0, 196609),
    /**
     * <code>MONSTER_NOT_EXIST = 196610;</code>
     *
     * <pre>
     * 怪物不存在
     * </pre>
     */
    MONSTER_NOT_EXIST(1, 196610),
    /**
     * <code>SKILL_POINT_NOT_ENOUGH = 196611;</code>
     *
     * <pre>
     * 技能点不足
     * </pre>
     */
    SKILL_POINT_NOT_ENOUGH(2, 196611),
    /**
     * <code>SKILL_LEVEL_LIMIT = 196612;</code>
     *
     * <pre>
     * 技能等级达到上限
     * </pre>
     */
    SKILL_LEVEL_LIMIT(3, 196612),
    /**
     * <code>STAGE_LIMIT = 196613;</code>
     *
     * <pre>
     * 品级达到上限
     * </pre>
     */
    STAGE_LIMIT(4, 196613),
    /**
     * <code>STAGE_LEVEL_NOT_ENOUGH = 196614;</code>
     *
     * <pre>
     * 进阶等级不足
     * </pre>
     */
    STAGE_LEVEL_NOT_ENOUGH(5, 196614),
    /**
     * <code>STAGE_CONSUME = 196615;</code>
     *
     * <pre>
     * 进阶材料不足
     * </pre>
     */
    STAGE_CONSUME(6, 196615),
    /**
     * <code>BATTLE_MONSTER_COUNT = 196616;</code>
     *
     * <pre>
     * 上阵怪物数量错误
     * </pre>
     */
    BATTLE_MONSTER_COUNT(7, 196616),
    /**
     * <code>MONSTER_LOCKED = 196617;</code>
     *
     * <pre>
     * 锁定
     * </pre>
     */
    MONSTER_LOCKED(8, 196617),
    /**
     * <code>LOCK_ALREADY = 196618;</code>
     *
     * <pre>
     * 已经锁定
     * </pre>
     */
    LOCK_ALREADY(9, 196618),
    /**
     * <code>UNLOCK_ALREADY = 196619;</code>
     *
     * <pre>
     * 已经解锁
     * </pre>
     */
    UNLOCK_ALREADY(10, 196619),
    ;

    /**
     * <code>MONSTER_MAX_SIZE = 196609;</code>
     *
     * <pre>
     * 怪物数量达到上限
     * </pre>
     */
    public static final int MONSTER_MAX_SIZE_VALUE = 196609;
    /**
     * <code>MONSTER_NOT_EXIST = 196610;</code>
     *
     * <pre>
     * 怪物不存在
     * </pre>
     */
    public static final int MONSTER_NOT_EXIST_VALUE = 196610;
    /**
     * <code>SKILL_POINT_NOT_ENOUGH = 196611;</code>
     *
     * <pre>
     * 技能点不足
     * </pre>
     */
    public static final int SKILL_POINT_NOT_ENOUGH_VALUE = 196611;
    /**
     * <code>SKILL_LEVEL_LIMIT = 196612;</code>
     *
     * <pre>
     * 技能等级达到上限
     * </pre>
     */
    public static final int SKILL_LEVEL_LIMIT_VALUE = 196612;
    /**
     * <code>STAGE_LIMIT = 196613;</code>
     *
     * <pre>
     * 品级达到上限
     * </pre>
     */
    public static final int STAGE_LIMIT_VALUE = 196613;
    /**
     * <code>STAGE_LEVEL_NOT_ENOUGH = 196614;</code>
     *
     * <pre>
     * 进阶等级不足
     * </pre>
     */
    public static final int STAGE_LEVEL_NOT_ENOUGH_VALUE = 196614;
    /**
     * <code>STAGE_CONSUME = 196615;</code>
     *
     * <pre>
     * 进阶材料不足
     * </pre>
     */
    public static final int STAGE_CONSUME_VALUE = 196615;
    /**
     * <code>BATTLE_MONSTER_COUNT = 196616;</code>
     *
     * <pre>
     * 上阵怪物数量错误
     * </pre>
     */
    public static final int BATTLE_MONSTER_COUNT_VALUE = 196616;
    /**
     * <code>MONSTER_LOCKED = 196617;</code>
     *
     * <pre>
     * 锁定
     * </pre>
     */
    public static final int MONSTER_LOCKED_VALUE = 196617;
    /**
     * <code>LOCK_ALREADY = 196618;</code>
     *
     * <pre>
     * 已经锁定
     * </pre>
     */
    public static final int LOCK_ALREADY_VALUE = 196618;
    /**
     * <code>UNLOCK_ALREADY = 196619;</code>
     *
     * <pre>
     * 已经解锁
     * </pre>
     */
    public static final int UNLOCK_ALREADY_VALUE = 196619;


    public final int getNumber() { return value; }

    public static monsterError valueOf(int value) {
      switch (value) {
        case 196609: return MONSTER_MAX_SIZE;
        case 196610: return MONSTER_NOT_EXIST;
        case 196611: return SKILL_POINT_NOT_ENOUGH;
        case 196612: return SKILL_LEVEL_LIMIT;
        case 196613: return STAGE_LIMIT;
        case 196614: return STAGE_LEVEL_NOT_ENOUGH;
        case 196615: return STAGE_CONSUME;
        case 196616: return BATTLE_MONSTER_COUNT;
        case 196617: return MONSTER_LOCKED;
        case 196618: return LOCK_ALREADY;
        case 196619: return UNLOCK_ALREADY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<monsterError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<monsterError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<monsterError>() {
            public monsterError findValueByNumber(int number) {
              return monsterError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(3);
    }

    private static final monsterError[] VALUES = values();

    public static monsterError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private monsterError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:monsterError)
  }

  /**
   * Protobuf enum {@code itemError}
   */
  public enum itemError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ITEM_NOT_FOUND = 262145;</code>
     *
     * <pre>
     * 道具不存在
     * </pre>
     */
    ITEM_NOT_FOUND(0, 262145),
    /**
     * <code>ITEM_NOT_ENOUGH = 262147;</code>
     *
     * <pre>
     * 道具数量不足
     * </pre>
     */
    ITEM_NOT_ENOUGH(1, 262147),
    /**
     * <code>ITEM_BUY_NOT_ALLOW = 262148;</code>
     *
     * <pre>
     * 道具不能买
     * </pre>
     */
    ITEM_BUY_NOT_ALLOW(2, 262148),
    /**
     * <code>ITEM_SELL_NOT_ALLOW = 262149;</code>
     *
     * <pre>
     * 道具不能卖
     * </pre>
     */
    ITEM_SELL_NOT_ALLOW(3, 262149),
    /**
     * <code>ITEM_EXP_LEFT_TIMES = 262150;</code>
     *
     * <pre>
     * 多倍经验还有剩余
     * </pre>
     */
    ITEM_EXP_LEFT_TIMES(4, 262150),
    /**
     * <code>EQUIP_NOT_FOUND = 266241;</code>
     *
     * <pre>
     * 装备不足
     * </pre>
     */
    EQUIP_NOT_FOUND(5, 266241),
    /**
     * <code>EQUIP_MAX_LEVEL_ALREADY = 266242;</code>
     *
     * <pre>
     * 装备最大等级
     * </pre>
     */
    EQUIP_MAX_LEVEL_ALREADY(6, 266242),
    /**
     * <code>EQUIP_LEVEL_NOT_ENOUGH = 266243;</code>
     *
     * <pre>
     * 装备等级不够进阶
     * </pre>
     */
    EQUIP_LEVEL_NOT_ENOUGH(7, 266243),
    /**
     * <code>EQUIP_MAX_STAGE_ALREADY = 266244;</code>
     *
     * <pre>
     * 装备最大品级
     * </pre>
     */
    EQUIP_MAX_STAGE_ALREADY(8, 266244),
    /**
     * <code>EQUIP_DRESS_ALREADY = 266245;</code>
     *
     * <pre>
     * 装备不在背包
     * </pre>
     */
    EQUIP_DRESS_ALREADY(9, 266245),
    /**
     * <code>EQUIP_NOT_DRESS_OTHER = 266246;</code>
     *
     * <pre>
     * 该位置没有其他装备
     * </pre>
     */
    EQUIP_NOT_DRESS_OTHER(10, 266246),
    /**
     * <code>EQUIP_DRESS_OTHER_ALREADY = 266247;</code>
     *
     * <pre>
     * 该位置已经有其他装备
     * </pre>
     */
    EQUIP_DRESS_OTHER_ALREADY(11, 266247),
    /**
     * <code>EQUIP_NOT_DRESSED = 266248;</code>
     *
     * <pre>
     * 装备不在身上
     * </pre>
     */
    EQUIP_NOT_DRESSED(12, 266248),
    /**
     * <code>EQUIP_SLOT_NOT_EMPTY = 266249;</code>
     *
     * <pre>
     * 槽位已经镶嵌宝石
     * </pre>
     */
    EQUIP_SLOT_NOT_EMPTY(13, 266249),
    /**
     * <code>EQUIP_SLOT_EMPTY = 266250;</code>
     *
     * <pre>
     * 槽位没有镶嵌宝石
     * </pre>
     */
    EQUIP_SLOT_EMPTY(14, 266250),
    /**
     * <code>EQUIP_GEM_NOT_FOUND = 266251;</code>
     *
     * <pre>
     * 宝石不存在
     * </pre>
     */
    EQUIP_GEM_NOT_FOUND(15, 266251),
    /**
     * <code>EQUIP_CAN_NOT_OPEN_SLOT = 266252;</code>
     *
     * <pre>
     * 装备不能开孔
     * </pre>
     */
    EQUIP_CAN_NOT_OPEN_SLOT(16, 266252),
    /**
     * <code>EQUIP_GEM_MISMATCH = 266253;</code>
     *
     * <pre>
     * 镶嵌宝石不符
     * </pre>
     */
    EQUIP_GEM_MISMATCH(17, 266253),
    /**
     * <code>EQUIP_SLOT_NOT_PUNCH = 266254;</code>
     *
     * <pre>
     * 槽位没有开孔
     * </pre>
     */
    EQUIP_SLOT_NOT_PUNCH(18, 266254),
    /**
     * <code>EQUIP_PLAYER_LEVEL_DEMAND = 266256;</code>
     *
     * <pre>
     * 玩家等级限制
     * </pre>
     */
    EQUIP_PLAYER_LEVEL_DEMAND(19, 266256),
    ;

    /**
     * <code>ITEM_NOT_FOUND = 262145;</code>
     *
     * <pre>
     * 道具不存在
     * </pre>
     */
    public static final int ITEM_NOT_FOUND_VALUE = 262145;
    /**
     * <code>ITEM_NOT_ENOUGH = 262147;</code>
     *
     * <pre>
     * 道具数量不足
     * </pre>
     */
    public static final int ITEM_NOT_ENOUGH_VALUE = 262147;
    /**
     * <code>ITEM_BUY_NOT_ALLOW = 262148;</code>
     *
     * <pre>
     * 道具不能买
     * </pre>
     */
    public static final int ITEM_BUY_NOT_ALLOW_VALUE = 262148;
    /**
     * <code>ITEM_SELL_NOT_ALLOW = 262149;</code>
     *
     * <pre>
     * 道具不能卖
     * </pre>
     */
    public static final int ITEM_SELL_NOT_ALLOW_VALUE = 262149;
    /**
     * <code>ITEM_EXP_LEFT_TIMES = 262150;</code>
     *
     * <pre>
     * 多倍经验还有剩余
     * </pre>
     */
    public static final int ITEM_EXP_LEFT_TIMES_VALUE = 262150;
    /**
     * <code>EQUIP_NOT_FOUND = 266241;</code>
     *
     * <pre>
     * 装备不足
     * </pre>
     */
    public static final int EQUIP_NOT_FOUND_VALUE = 266241;
    /**
     * <code>EQUIP_MAX_LEVEL_ALREADY = 266242;</code>
     *
     * <pre>
     * 装备最大等级
     * </pre>
     */
    public static final int EQUIP_MAX_LEVEL_ALREADY_VALUE = 266242;
    /**
     * <code>EQUIP_LEVEL_NOT_ENOUGH = 266243;</code>
     *
     * <pre>
     * 装备等级不够进阶
     * </pre>
     */
    public static final int EQUIP_LEVEL_NOT_ENOUGH_VALUE = 266243;
    /**
     * <code>EQUIP_MAX_STAGE_ALREADY = 266244;</code>
     *
     * <pre>
     * 装备最大品级
     * </pre>
     */
    public static final int EQUIP_MAX_STAGE_ALREADY_VALUE = 266244;
    /**
     * <code>EQUIP_DRESS_ALREADY = 266245;</code>
     *
     * <pre>
     * 装备不在背包
     * </pre>
     */
    public static final int EQUIP_DRESS_ALREADY_VALUE = 266245;
    /**
     * <code>EQUIP_NOT_DRESS_OTHER = 266246;</code>
     *
     * <pre>
     * 该位置没有其他装备
     * </pre>
     */
    public static final int EQUIP_NOT_DRESS_OTHER_VALUE = 266246;
    /**
     * <code>EQUIP_DRESS_OTHER_ALREADY = 266247;</code>
     *
     * <pre>
     * 该位置已经有其他装备
     * </pre>
     */
    public static final int EQUIP_DRESS_OTHER_ALREADY_VALUE = 266247;
    /**
     * <code>EQUIP_NOT_DRESSED = 266248;</code>
     *
     * <pre>
     * 装备不在身上
     * </pre>
     */
    public static final int EQUIP_NOT_DRESSED_VALUE = 266248;
    /**
     * <code>EQUIP_SLOT_NOT_EMPTY = 266249;</code>
     *
     * <pre>
     * 槽位已经镶嵌宝石
     * </pre>
     */
    public static final int EQUIP_SLOT_NOT_EMPTY_VALUE = 266249;
    /**
     * <code>EQUIP_SLOT_EMPTY = 266250;</code>
     *
     * <pre>
     * 槽位没有镶嵌宝石
     * </pre>
     */
    public static final int EQUIP_SLOT_EMPTY_VALUE = 266250;
    /**
     * <code>EQUIP_GEM_NOT_FOUND = 266251;</code>
     *
     * <pre>
     * 宝石不存在
     * </pre>
     */
    public static final int EQUIP_GEM_NOT_FOUND_VALUE = 266251;
    /**
     * <code>EQUIP_CAN_NOT_OPEN_SLOT = 266252;</code>
     *
     * <pre>
     * 装备不能开孔
     * </pre>
     */
    public static final int EQUIP_CAN_NOT_OPEN_SLOT_VALUE = 266252;
    /**
     * <code>EQUIP_GEM_MISMATCH = 266253;</code>
     *
     * <pre>
     * 镶嵌宝石不符
     * </pre>
     */
    public static final int EQUIP_GEM_MISMATCH_VALUE = 266253;
    /**
     * <code>EQUIP_SLOT_NOT_PUNCH = 266254;</code>
     *
     * <pre>
     * 槽位没有开孔
     * </pre>
     */
    public static final int EQUIP_SLOT_NOT_PUNCH_VALUE = 266254;
    /**
     * <code>EQUIP_PLAYER_LEVEL_DEMAND = 266256;</code>
     *
     * <pre>
     * 玩家等级限制
     * </pre>
     */
    public static final int EQUIP_PLAYER_LEVEL_DEMAND_VALUE = 266256;


    public final int getNumber() { return value; }

    public static itemError valueOf(int value) {
      switch (value) {
        case 262145: return ITEM_NOT_FOUND;
        case 262147: return ITEM_NOT_ENOUGH;
        case 262148: return ITEM_BUY_NOT_ALLOW;
        case 262149: return ITEM_SELL_NOT_ALLOW;
        case 262150: return ITEM_EXP_LEFT_TIMES;
        case 266241: return EQUIP_NOT_FOUND;
        case 266242: return EQUIP_MAX_LEVEL_ALREADY;
        case 266243: return EQUIP_LEVEL_NOT_ENOUGH;
        case 266244: return EQUIP_MAX_STAGE_ALREADY;
        case 266245: return EQUIP_DRESS_ALREADY;
        case 266246: return EQUIP_NOT_DRESS_OTHER;
        case 266247: return EQUIP_DRESS_OTHER_ALREADY;
        case 266248: return EQUIP_NOT_DRESSED;
        case 266249: return EQUIP_SLOT_NOT_EMPTY;
        case 266250: return EQUIP_SLOT_EMPTY;
        case 266251: return EQUIP_GEM_NOT_FOUND;
        case 266252: return EQUIP_CAN_NOT_OPEN_SLOT;
        case 266253: return EQUIP_GEM_MISMATCH;
        case 266254: return EQUIP_SLOT_NOT_PUNCH;
        case 266256: return EQUIP_PLAYER_LEVEL_DEMAND;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<itemError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<itemError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<itemError>() {
            public itemError findValueByNumber(int number) {
              return itemError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(4);
    }

    private static final itemError[] VALUES = values();

    public static itemError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private itemError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:itemError)
  }

  /**
   * Protobuf enum {@code questError}
   */
  public enum questError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>QUEST_NOT_ACCEPT = 327681;</code>
     *
     * <pre>
     * 当前没有该任务
     * </pre>
     */
    QUEST_NOT_ACCEPT(0, 327681),
    /**
     * <code>QUEST_NOT_COMPLETE = 327682;</code>
     *
     * <pre>
     * 任务未完成
     * </pre>
     */
    QUEST_NOT_COMPLETE(1, 327682),
    /**
     * <code>QUEST_NOT_OPEN = 327683;</code>
     *
     * <pre>
     * 现在不可领奖
     * </pre>
     */
    QUEST_NOT_OPEN(2, 327683),
    ;

    /**
     * <code>QUEST_NOT_ACCEPT = 327681;</code>
     *
     * <pre>
     * 当前没有该任务
     * </pre>
     */
    public static final int QUEST_NOT_ACCEPT_VALUE = 327681;
    /**
     * <code>QUEST_NOT_COMPLETE = 327682;</code>
     *
     * <pre>
     * 任务未完成
     * </pre>
     */
    public static final int QUEST_NOT_COMPLETE_VALUE = 327682;
    /**
     * <code>QUEST_NOT_OPEN = 327683;</code>
     *
     * <pre>
     * 现在不可领奖
     * </pre>
     */
    public static final int QUEST_NOT_OPEN_VALUE = 327683;


    public final int getNumber() { return value; }

    public static questError valueOf(int value) {
      switch (value) {
        case 327681: return QUEST_NOT_ACCEPT;
        case 327682: return QUEST_NOT_COMPLETE;
        case 327683: return QUEST_NOT_OPEN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<questError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<questError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<questError>() {
            public questError findValueByNumber(int number) {
              return questError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(5);
    }

    private static final questError[] VALUES = values();

    public static questError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private questError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:questError)
  }

  /**
   * Protobuf enum {@code instanceError}
   */
  public enum instanceError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>INSTANCE_NOT_OPEN = 393217;</code>
     *
     * <pre>
     * 副本未开启
     * </pre>
     */
    INSTANCE_NOT_OPEN(0, 393217),
    /**
     * <code>INSTANCE_LEVEL = 393218;</code>
     */
    INSTANCE_LEVEL(1, 393218),
    /**
     * <code>INSTANCE_COUNT = 393219;</code>
     */
    INSTANCE_COUNT(2, 393219),
    /**
     * <code>INSTANCE_FATIGUE = 393220;</code>
     */
    INSTANCE_FATIGUE(3, 393220),
    /**
     * <code>INSTANCE_REVIVE_COUNT = 393221;</code>
     */
    INSTANCE_REVIVE_COUNT(4, 393221),
    ;

    /**
     * <code>INSTANCE_NOT_OPEN = 393217;</code>
     *
     * <pre>
     * 副本未开启
     * </pre>
     */
    public static final int INSTANCE_NOT_OPEN_VALUE = 393217;
    /**
     * <code>INSTANCE_LEVEL = 393218;</code>
     */
    public static final int INSTANCE_LEVEL_VALUE = 393218;
    /**
     * <code>INSTANCE_COUNT = 393219;</code>
     */
    public static final int INSTANCE_COUNT_VALUE = 393219;
    /**
     * <code>INSTANCE_FATIGUE = 393220;</code>
     */
    public static final int INSTANCE_FATIGUE_VALUE = 393220;
    /**
     * <code>INSTANCE_REVIVE_COUNT = 393221;</code>
     */
    public static final int INSTANCE_REVIVE_COUNT_VALUE = 393221;


    public final int getNumber() { return value; }

    public static instanceError valueOf(int value) {
      switch (value) {
        case 393217: return INSTANCE_NOT_OPEN;
        case 393218: return INSTANCE_LEVEL;
        case 393219: return INSTANCE_COUNT;
        case 393220: return INSTANCE_FATIGUE;
        case 393221: return INSTANCE_REVIVE_COUNT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<instanceError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<instanceError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<instanceError>() {
            public instanceError findValueByNumber(int number) {
              return instanceError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(6);
    }

    private static final instanceError[] VALUES = values();

    public static instanceError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private instanceError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:instanceError)
  }

  /**
   * Protobuf enum {@code mailError}
   */
  public enum mailError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MAIL_NOT_EXIST = 458753;</code>
     *
     * <pre>
     * 邮件不存在
     * </pre>
     */
    MAIL_NOT_EXIST(0, 458753),
    /**
     * <code>MAIL_NONE = 458754;</code>
     *
     * <pre>
     * 没有邮件
     * </pre>
     */
    MAIL_NONE(1, 458754),
    /**
     * <code>MAIL_COIN_FULL = 458755;</code>
     *
     * <pre>
     * 金币已满收取失败
     * </pre>
     */
    MAIL_COIN_FULL(2, 458755),
    /**
     * <code>MAIL_GOLD_FULL = 458756;</code>
     *
     * <pre>
     * 钻石已满收取失败
     * </pre>
     */
    MAIL_GOLD_FULL(3, 458756),
    ;

    /**
     * <code>MAIL_NOT_EXIST = 458753;</code>
     *
     * <pre>
     * 邮件不存在
     * </pre>
     */
    public static final int MAIL_NOT_EXIST_VALUE = 458753;
    /**
     * <code>MAIL_NONE = 458754;</code>
     *
     * <pre>
     * 没有邮件
     * </pre>
     */
    public static final int MAIL_NONE_VALUE = 458754;
    /**
     * <code>MAIL_COIN_FULL = 458755;</code>
     *
     * <pre>
     * 金币已满收取失败
     * </pre>
     */
    public static final int MAIL_COIN_FULL_VALUE = 458755;
    /**
     * <code>MAIL_GOLD_FULL = 458756;</code>
     *
     * <pre>
     * 钻石已满收取失败
     * </pre>
     */
    public static final int MAIL_GOLD_FULL_VALUE = 458756;


    public final int getNumber() { return value; }

    public static mailError valueOf(int value) {
      switch (value) {
        case 458753: return MAIL_NOT_EXIST;
        case 458754: return MAIL_NONE;
        case 458755: return MAIL_COIN_FULL;
        case 458756: return MAIL_GOLD_FULL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<mailError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<mailError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<mailError>() {
            public mailError findValueByNumber(int number) {
              return mailError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(7);
    }

    private static final mailError[] VALUES = values();

    public static mailError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private mailError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:mailError)
  }

  /**
   * Protobuf enum {@code allianceError}
   */
  public enum allianceError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ALLIANCE_LEVEL_NOT_ENOUGH = 524289;</code>
     *
     * <pre>
     * 创建公会等级不足
     * </pre>
     */
    ALLIANCE_LEVEL_NOT_ENOUGH(0, 524289),
    /**
     * <code>ALLIANCE_ALREADY_IN = 524290;</code>
     *
     * <pre>
     * 已经在公会中
     * </pre>
     */
    ALLIANCE_ALREADY_IN(1, 524290),
    /**
     * <code>ALLIANCE_NAME_ERROR = 524291;</code>
     *
     * <pre>
     * 公会名称错误
     * </pre>
     */
    ALLIANCE_NAME_ERROR(2, 524291),
    /**
     * <code>ALLIANCE_NAME_EXIST = 524292;</code>
     *
     * <pre>
     * 已经名称重复
     * </pre>
     */
    ALLIANCE_NAME_EXIST(3, 524292),
    /**
     * <code>ALLIANCE_NOT_JOIN = 524293;</code>
     *
     * <pre>
     * 未加入公会
     * </pre>
     */
    ALLIANCE_NOT_JOIN(4, 524293),
    ;

    /**
     * <code>ALLIANCE_LEVEL_NOT_ENOUGH = 524289;</code>
     *
     * <pre>
     * 创建公会等级不足
     * </pre>
     */
    public static final int ALLIANCE_LEVEL_NOT_ENOUGH_VALUE = 524289;
    /**
     * <code>ALLIANCE_ALREADY_IN = 524290;</code>
     *
     * <pre>
     * 已经在公会中
     * </pre>
     */
    public static final int ALLIANCE_ALREADY_IN_VALUE = 524290;
    /**
     * <code>ALLIANCE_NAME_ERROR = 524291;</code>
     *
     * <pre>
     * 公会名称错误
     * </pre>
     */
    public static final int ALLIANCE_NAME_ERROR_VALUE = 524291;
    /**
     * <code>ALLIANCE_NAME_EXIST = 524292;</code>
     *
     * <pre>
     * 已经名称重复
     * </pre>
     */
    public static final int ALLIANCE_NAME_EXIST_VALUE = 524292;
    /**
     * <code>ALLIANCE_NOT_JOIN = 524293;</code>
     *
     * <pre>
     * 未加入公会
     * </pre>
     */
    public static final int ALLIANCE_NOT_JOIN_VALUE = 524293;


    public final int getNumber() { return value; }

    public static allianceError valueOf(int value) {
      switch (value) {
        case 524289: return ALLIANCE_LEVEL_NOT_ENOUGH;
        case 524290: return ALLIANCE_ALREADY_IN;
        case 524291: return ALLIANCE_NAME_ERROR;
        case 524292: return ALLIANCE_NAME_EXIST;
        case 524293: return ALLIANCE_NOT_JOIN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<allianceError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<allianceError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<allianceError>() {
            public allianceError findValueByNumber(int number) {
              return allianceError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(8);
    }

    private static final allianceError[] VALUES = values();

    public static allianceError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private allianceError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:allianceError)
  }

  /**
   * Protobuf enum {@code shopError}
   */
  public enum shopError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SHOP_REFRESH_TIMEOUT = 589825;</code>
     *
     * <pre>
     * 商店过期
     * </pre>
     */
    SHOP_REFRESH_TIMEOUT(0, 589825),
    /**
     * <code>SHOP_ITEM_ALREADY_BUY = 589826;</code>
     *
     * <pre>
     * 商品已经买过了
     * </pre>
     */
    SHOP_ITEM_ALREADY_BUY(1, 589826),
    /**
     * <code>SHOP_REFRESH_MAX_COUNT = 589827;</code>
     *
     * <pre>
     * 商品刷新最大次数
     * </pre>
     */
    SHOP_REFRESH_MAX_COUNT(2, 589827),
    /**
     * <code>SHOP_GOLD2COIN_MAX_COUNT = 589828;</code>
     *
     * <pre>
     * 钻石购买最大次数
     * </pre>
     */
    SHOP_GOLD2COIN_MAX_COUNT(3, 589828),
    ;

    /**
     * <code>SHOP_REFRESH_TIMEOUT = 589825;</code>
     *
     * <pre>
     * 商店过期
     * </pre>
     */
    public static final int SHOP_REFRESH_TIMEOUT_VALUE = 589825;
    /**
     * <code>SHOP_ITEM_ALREADY_BUY = 589826;</code>
     *
     * <pre>
     * 商品已经买过了
     * </pre>
     */
    public static final int SHOP_ITEM_ALREADY_BUY_VALUE = 589826;
    /**
     * <code>SHOP_REFRESH_MAX_COUNT = 589827;</code>
     *
     * <pre>
     * 商品刷新最大次数
     * </pre>
     */
    public static final int SHOP_REFRESH_MAX_COUNT_VALUE = 589827;
    /**
     * <code>SHOP_GOLD2COIN_MAX_COUNT = 589828;</code>
     *
     * <pre>
     * 钻石购买最大次数
     * </pre>
     */
    public static final int SHOP_GOLD2COIN_MAX_COUNT_VALUE = 589828;


    public final int getNumber() { return value; }

    public static shopError valueOf(int value) {
      switch (value) {
        case 589825: return SHOP_REFRESH_TIMEOUT;
        case 589826: return SHOP_ITEM_ALREADY_BUY;
        case 589827: return SHOP_REFRESH_MAX_COUNT;
        case 589828: return SHOP_GOLD2COIN_MAX_COUNT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<shopError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<shopError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<shopError>() {
            public shopError findValueByNumber(int number) {
              return shopError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(9);
    }

    private static final shopError[] VALUES = values();

    public static shopError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private shopError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:shopError)
  }

  /**
   * Protobuf enum {@code imError}
   */
  public enum imError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>IM_CHAT_LENGTH = 1048577;</code>
     *
     * <pre>
     * 聊天内容太长
     * </pre>
     */
    IM_CHAT_LENGTH(0, 1048577),
    ;

    /**
     * <code>IM_CHAT_LENGTH = 1048577;</code>
     *
     * <pre>
     * 聊天内容太长
     * </pre>
     */
    public static final int IM_CHAT_LENGTH_VALUE = 1048577;


    public final int getNumber() { return value; }

    public static imError valueOf(int value) {
      switch (value) {
        case 1048577: return IM_CHAT_LENGTH;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<imError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<imError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<imError>() {
            public imError findValueByNumber(int number) {
              return imError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(10);
    }

    private static final imError[] VALUES = values();

    public static imError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private imError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:imError)
  }

  /**
   * Protobuf enum {@code settingError}
   */
  public enum settingError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SETTING_BLOCK_FULL = 1114113;</code>
     *
     * <pre>
     * 屏蔽列表已满
     * </pre>
     */
    SETTING_BLOCK_FULL(0, 1114113),
    ;

    /**
     * <code>SETTING_BLOCK_FULL = 1114113;</code>
     *
     * <pre>
     * 屏蔽列表已满
     * </pre>
     */
    public static final int SETTING_BLOCK_FULL_VALUE = 1114113;


    public final int getNumber() { return value; }

    public static settingError valueOf(int value) {
      switch (value) {
        case 1114113: return SETTING_BLOCK_FULL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<settingError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<settingError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<settingError>() {
            public settingError findValueByNumber(int number) {
              return settingError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(11);
    }

    private static final settingError[] VALUES = values();

    public static settingError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private settingError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:settingError)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025Protocol/Status.proto*\336\001\n\terrorMask\022\020\n" +
      "\014NORMAL_ERROR\020\000\022\021\n\013LOGIN_ERROR\020\200\200\004\022\022\n\014PL" +
      "AYER_ERROR\020\200\200\010\022\023\n\rMONSTER_ERROR\020\200\200\014\022\020\n\nI" +
      "TEM_ERROR\020\200\200\020\022\021\n\013QUEST_ERROR\020\200\200\024\022\024\n\016INST" +
      "ANCE_ERROR\020\200\200\030\022\020\n\nMAIL_ERROR\020\200\200\034\022\024\n\016ALLI" +
      "ANCE_ERROR\020\200\200 \022\020\n\nSHOP_ERROR\020\200\200$\022\016\n\010IM_E" +
      "RROR\020\200\200@*\326\001\n\005error\022\016\n\nNONE_ERROR\020\000\022\020\n\014CO" +
      "NFIG_ERROR\020\001\022\024\n\020ONLINE_MAX_LIMIT\020\002\022\026\n\022RE" +
      "GISTER_MAX_LIMIT\020\003\022\025\n\021SERVER_GRAY_STATE\020" +
      "\004\022\023\n\017DATA_BASE_ERROR\020\005\022\022\n\016PARAMS_INVALID",
      "\020\006\022\024\n\020CONFIG_NOT_FOUND\020\007\022\024\n\020UNSUPPORT_AC" +
      "TION\020\010\022\021\n\014SERVER_ERROR\020\200 *\235\001\n\013PlayerErro" +
      "r\022\026\n\020PLAYER_NOT_EXIST\020\201\200\010\022\033\n\025PLAYER_NICK" +
      "NAME_EXIST\020\202\200\010\022\020\n\nPUID_EXIST\020\203\200\010\022\026\n\020COIN" +
      "S_NOT_ENOUGH\020\204\200\010\022\025\n\017GOLD_NOT_ENOUGH\020\205\200\010\022" +
      "\030\n\022FATIGUE_NOT_ENOUGH\020\206\200\010*\230\002\n\014monsterErr" +
      "or\022\026\n\020MONSTER_MAX_SIZE\020\201\200\014\022\027\n\021MONSTER_NO" +
      "T_EXIST\020\202\200\014\022\034\n\026SKILL_POINT_NOT_ENOUGH\020\203\200" +
      "\014\022\027\n\021SKILL_LEVEL_LIMIT\020\204\200\014\022\021\n\013STAGE_LIMI" +
      "T\020\205\200\014\022\034\n\026STAGE_LEVEL_NOT_ENOUGH\020\206\200\014\022\023\n\rS",
      "TAGE_CONSUME\020\207\200\014\022\032\n\024BATTLE_MONSTER_COUNT" +
      "\020\210\200\014\022\024\n\016MONSTER_LOCKED\020\211\200\014\022\022\n\014LOCK_ALREA" +
      "DY\020\212\200\014\022\024\n\016UNLOCK_ALREADY\020\213\200\014*\262\004\n\titemErr" +
      "or\022\024\n\016ITEM_NOT_FOUND\020\201\200\020\022\025\n\017ITEM_NOT_ENO" +
      "UGH\020\203\200\020\022\030\n\022ITEM_BUY_NOT_ALLOW\020\204\200\020\022\031\n\023ITE" +
      "M_SELL_NOT_ALLOW\020\205\200\020\022\031\n\023ITEM_EXP_LEFT_TI" +
      "MES\020\206\200\020\022\025\n\017EQUIP_NOT_FOUND\020\201\240\020\022\035\n\027EQUIP_" +
      "MAX_LEVEL_ALREADY\020\202\240\020\022\034\n\026EQUIP_LEVEL_NOT" +
      "_ENOUGH\020\203\240\020\022\035\n\027EQUIP_MAX_STAGE_ALREADY\020\204" +
      "\240\020\022\031\n\023EQUIP_DRESS_ALREADY\020\205\240\020\022\033\n\025EQUIP_N",
      "OT_DRESS_OTHER\020\206\240\020\022\037\n\031EQUIP_DRESS_OTHER_" +
      "ALREADY\020\207\240\020\022\027\n\021EQUIP_NOT_DRESSED\020\210\240\020\022\032\n\024" +
      "EQUIP_SLOT_NOT_EMPTY\020\211\240\020\022\026\n\020EQUIP_SLOT_E" +
      "MPTY\020\212\240\020\022\031\n\023EQUIP_GEM_NOT_FOUND\020\213\240\020\022\035\n\027E" +
      "QUIP_CAN_NOT_OPEN_SLOT\020\214\240\020\022\030\n\022EQUIP_GEM_" +
      "MISMATCH\020\215\240\020\022\032\n\024EQUIP_SLOT_NOT_PUNCH\020\216\240\020" +
      "\022\037\n\031EQUIP_PLAYER_LEVEL_DEMAND\020\220\240\020*T\n\nque" +
      "stError\022\026\n\020QUEST_NOT_ACCEPT\020\201\200\024\022\030\n\022QUEST" +
      "_NOT_COMPLETE\020\202\200\024\022\024\n\016QUEST_NOT_OPEN\020\203\200\024*" +
      "\211\001\n\rinstanceError\022\027\n\021INSTANCE_NOT_OPEN\020\201",
      "\200\030\022\024\n\016INSTANCE_LEVEL\020\202\200\030\022\024\n\016INSTANCE_COU" +
      "NT\020\203\200\030\022\026\n\020INSTANCE_FATIGUE\020\204\200\030\022\033\n\025INSTAN" +
      "CE_REVIVE_COUNT\020\205\200\030*^\n\tmailError\022\024\n\016MAIL" +
      "_NOT_EXIST\020\201\200\034\022\017\n\tMAIL_NONE\020\202\200\034\022\024\n\016MAIL_" +
      "COIN_FULL\020\203\200\034\022\024\n\016MAIL_GOLD_FULL\020\204\200\034*\232\001\n\r" +
      "allianceError\022\037\n\031ALLIANCE_LEVEL_NOT_ENOU" +
      "GH\020\201\200 \022\031\n\023ALLIANCE_ALREADY_IN\020\202\200 \022\031\n\023ALL" +
      "IANCE_NAME_ERROR\020\203\200 \022\031\n\023ALLIANCE_NAME_EX" +
      "IST\020\204\200 \022\027\n\021ALLIANCE_NOT_JOIN\020\205\200 *\202\001\n\tsho" +
      "pError\022\032\n\024SHOP_REFRESH_TIMEOUT\020\201\200$\022\033\n\025SH",
      "OP_ITEM_ALREADY_BUY\020\202\200$\022\034\n\026SHOP_REFRESH_" +
      "MAX_COUNT\020\203\200$\022\036\n\030SHOP_GOLD2COIN_MAX_COUN" +
      "T\020\204\200$*\037\n\007imError\022\024\n\016IM_CHAT_LENGTH\020\201\200@*(" +
      "\n\014settingError\022\030\n\022SETTING_BLOCK_FULL\020\201\200D" +
      "B\030\n\026com.hawk.game.protocol"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
