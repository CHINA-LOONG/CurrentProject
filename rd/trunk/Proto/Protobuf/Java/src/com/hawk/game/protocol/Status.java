// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/Status.proto

package com.hawk.game.protocol;

public final class Status {
  private Status() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code errorMask}
   */
  public enum errorMask
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NORMAL_ERROR = 0;</code>
     */
    NORMAL_ERROR(0, 0),
    /**
     * <code>LOGIN_ERROR = 65536;</code>
     */
    LOGIN_ERROR(1, 65536),
    /**
     * <code>PLAYER_ERROR = 131072;</code>
     */
    PLAYER_ERROR(2, 131072),
    /**
     * <code>MONSTER_ERROR = 196608;</code>
     */
    MONSTER_ERROR(3, 196608),
    /**
     * <code>QUEST_ERROR = 262144;</code>
     */
    QUEST_ERROR(5, 262144),
    /**
     * <code>INSTANCE_ERROR = 327680;</code>
     */
    INSTANCE_ERROR(6, 327680),
    /**
     * <code>MAIL_ERROR = 393216;</code>
     */
    MAIL_ERROR(7, 393216),
    /**
     * <code>ALLIANCE_ERROR = 589824;</code>
     */
    ALLIANCE_ERROR(8, 589824),
    /**
     * <code>SHOP_ERROR = 524288;</code>
     */
    SHOP_ERROR(9, 524288),
    /**
     * <code>SETTING_ERROR = 720896;</code>
     */
    SETTING_ERROR(11, 720896),
    /**
     * <code>ADVENTURE_ERROR = 655360;</code>
     */
    ADVENTURE_ERROR(12, 655360),
    /**
     * <code>SUMMON_ERROR = 851968;</code>
     */
    SUMMON_ERROR(13, 851968),
    /**
     * <code>PVP_ERROR = 917504;</code>
     */
    PVP_ERROR(14, 917504),
    ;

    /**
     * <code>ITEM_ERROR = 196608;</code>
     */
    public static final errorMask ITEM_ERROR = MONSTER_ERROR;
    /**
     * <code>IM_ERROR = 589824;</code>
     */
    public static final errorMask IM_ERROR = ALLIANCE_ERROR;
    /**
     * <code>NORMAL_ERROR = 0;</code>
     */
    public static final int NORMAL_ERROR_VALUE = 0;
    /**
     * <code>LOGIN_ERROR = 65536;</code>
     */
    public static final int LOGIN_ERROR_VALUE = 65536;
    /**
     * <code>PLAYER_ERROR = 131072;</code>
     */
    public static final int PLAYER_ERROR_VALUE = 131072;
    /**
     * <code>MONSTER_ERROR = 196608;</code>
     */
    public static final int MONSTER_ERROR_VALUE = 196608;
    /**
     * <code>ITEM_ERROR = 196608;</code>
     */
    public static final int ITEM_ERROR_VALUE = 196608;
    /**
     * <code>QUEST_ERROR = 262144;</code>
     */
    public static final int QUEST_ERROR_VALUE = 262144;
    /**
     * <code>INSTANCE_ERROR = 327680;</code>
     */
    public static final int INSTANCE_ERROR_VALUE = 327680;
    /**
     * <code>MAIL_ERROR = 393216;</code>
     */
    public static final int MAIL_ERROR_VALUE = 393216;
    /**
     * <code>ALLIANCE_ERROR = 589824;</code>
     */
    public static final int ALLIANCE_ERROR_VALUE = 589824;
    /**
     * <code>SHOP_ERROR = 524288;</code>
     */
    public static final int SHOP_ERROR_VALUE = 524288;
    /**
     * <code>IM_ERROR = 589824;</code>
     */
    public static final int IM_ERROR_VALUE = 589824;
    /**
     * <code>SETTING_ERROR = 720896;</code>
     */
    public static final int SETTING_ERROR_VALUE = 720896;
    /**
     * <code>ADVENTURE_ERROR = 655360;</code>
     */
    public static final int ADVENTURE_ERROR_VALUE = 655360;
    /**
     * <code>SUMMON_ERROR = 851968;</code>
     */
    public static final int SUMMON_ERROR_VALUE = 851968;
    /**
     * <code>PVP_ERROR = 917504;</code>
     */
    public static final int PVP_ERROR_VALUE = 917504;


    public final int getNumber() { return value; }

    public static errorMask valueOf(int value) {
      switch (value) {
        case 0: return NORMAL_ERROR;
        case 65536: return LOGIN_ERROR;
        case 131072: return PLAYER_ERROR;
        case 196608: return MONSTER_ERROR;
        case 262144: return QUEST_ERROR;
        case 327680: return INSTANCE_ERROR;
        case 393216: return MAIL_ERROR;
        case 589824: return ALLIANCE_ERROR;
        case 524288: return SHOP_ERROR;
        case 720896: return SETTING_ERROR;
        case 655360: return ADVENTURE_ERROR;
        case 851968: return SUMMON_ERROR;
        case 917504: return PVP_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<errorMask>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<errorMask>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<errorMask>() {
            public errorMask findValueByNumber(int number) {
              return errorMask.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(0);
    }

    private static final errorMask[] VALUES = {
      NORMAL_ERROR, LOGIN_ERROR, PLAYER_ERROR, MONSTER_ERROR, ITEM_ERROR, QUEST_ERROR, INSTANCE_ERROR, MAIL_ERROR, ALLIANCE_ERROR, SHOP_ERROR, IM_ERROR, SETTING_ERROR, ADVENTURE_ERROR, SUMMON_ERROR, PVP_ERROR, 
    };

    public static errorMask valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private errorMask(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:errorMask)
  }

  /**
   * Protobuf enum {@code error}
   */
  public enum error
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NONE_ERROR = 0;</code>
     *
     * <pre>
     * 没有错误
     * </pre>
     */
    NONE_ERROR(0, 0),
    /**
     * <code>CONFIG_ERROR = 1;</code>
     *
     * <pre>
     * 配置文件错误
     * </pre>
     */
    CONFIG_ERROR(1, 1),
    /**
     * <code>ONLINE_MAX_LIMIT = 2;</code>
     *
     * <pre>
     * 在线人数达到上限
     * </pre>
     */
    ONLINE_MAX_LIMIT(2, 2),
    /**
     * <code>REGISTER_MAX_LIMIT = 3;</code>
     *
     * <pre>
     * 注册人数达到上限
     * </pre>
     */
    REGISTER_MAX_LIMIT(3, 3),
    /**
     * <code>SERVER_GRAY_STATE = 4;</code>
     *
     * <pre>
     * 服务器灰度状态中
     * </pre>
     */
    SERVER_GRAY_STATE(4, 4),
    /**
     * <code>DATA_BASE_ERROR = 5;</code>
     *
     * <pre>
     * 数据库错误
     * </pre>
     */
    DATA_BASE_ERROR(5, 5),
    /**
     * <code>PARAMS_INVALID = 6;</code>
     *
     * <pre>
     * 参数错误
     * </pre>
     */
    PARAMS_INVALID(6, 6),
    /**
     * <code>CONFIG_NOT_FOUND = 7;</code>
     *
     * <pre>
     * 配置错误
     * </pre>
     */
    CONFIG_NOT_FOUND(7, 7),
    /**
     * <code>UNSUPPORT_ACTION = 8;</code>
     *
     * <pre>
     * 无效请求
     * </pre>
     */
    UNSUPPORT_ACTION(8, 8),
    /**
     * <code>LOGIN_INTERVAL_SHORT = 9;</code>
     *
     * <pre>
     * 登录太频繁
     * </pre>
     */
    LOGIN_INTERVAL_SHORT(9, 9),
    /**
     * <code>LOGIN_LOCK = 10;</code>
     *
     * <pre>
     * 登录被锁定
     * </pre>
     */
    LOGIN_LOCK(10, 10),
    /**
     * <code>SERVER_ERROR = 4096;</code>
     *
     * <pre>
     * 服务器错误
     * </pre>
     */
    SERVER_ERROR(11, 4096),
    ;

    /**
     * <code>NONE_ERROR = 0;</code>
     *
     * <pre>
     * 没有错误
     * </pre>
     */
    public static final int NONE_ERROR_VALUE = 0;
    /**
     * <code>CONFIG_ERROR = 1;</code>
     *
     * <pre>
     * 配置文件错误
     * </pre>
     */
    public static final int CONFIG_ERROR_VALUE = 1;
    /**
     * <code>ONLINE_MAX_LIMIT = 2;</code>
     *
     * <pre>
     * 在线人数达到上限
     * </pre>
     */
    public static final int ONLINE_MAX_LIMIT_VALUE = 2;
    /**
     * <code>REGISTER_MAX_LIMIT = 3;</code>
     *
     * <pre>
     * 注册人数达到上限
     * </pre>
     */
    public static final int REGISTER_MAX_LIMIT_VALUE = 3;
    /**
     * <code>SERVER_GRAY_STATE = 4;</code>
     *
     * <pre>
     * 服务器灰度状态中
     * </pre>
     */
    public static final int SERVER_GRAY_STATE_VALUE = 4;
    /**
     * <code>DATA_BASE_ERROR = 5;</code>
     *
     * <pre>
     * 数据库错误
     * </pre>
     */
    public static final int DATA_BASE_ERROR_VALUE = 5;
    /**
     * <code>PARAMS_INVALID = 6;</code>
     *
     * <pre>
     * 参数错误
     * </pre>
     */
    public static final int PARAMS_INVALID_VALUE = 6;
    /**
     * <code>CONFIG_NOT_FOUND = 7;</code>
     *
     * <pre>
     * 配置错误
     * </pre>
     */
    public static final int CONFIG_NOT_FOUND_VALUE = 7;
    /**
     * <code>UNSUPPORT_ACTION = 8;</code>
     *
     * <pre>
     * 无效请求
     * </pre>
     */
    public static final int UNSUPPORT_ACTION_VALUE = 8;
    /**
     * <code>LOGIN_INTERVAL_SHORT = 9;</code>
     *
     * <pre>
     * 登录太频繁
     * </pre>
     */
    public static final int LOGIN_INTERVAL_SHORT_VALUE = 9;
    /**
     * <code>LOGIN_LOCK = 10;</code>
     *
     * <pre>
     * 登录被锁定
     * </pre>
     */
    public static final int LOGIN_LOCK_VALUE = 10;
    /**
     * <code>SERVER_ERROR = 4096;</code>
     *
     * <pre>
     * 服务器错误
     * </pre>
     */
    public static final int SERVER_ERROR_VALUE = 4096;


    public final int getNumber() { return value; }

    public static error valueOf(int value) {
      switch (value) {
        case 0: return NONE_ERROR;
        case 1: return CONFIG_ERROR;
        case 2: return ONLINE_MAX_LIMIT;
        case 3: return REGISTER_MAX_LIMIT;
        case 4: return SERVER_GRAY_STATE;
        case 5: return DATA_BASE_ERROR;
        case 6: return PARAMS_INVALID;
        case 7: return CONFIG_NOT_FOUND;
        case 8: return UNSUPPORT_ACTION;
        case 9: return LOGIN_INTERVAL_SHORT;
        case 10: return LOGIN_LOCK;
        case 4096: return SERVER_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<error>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<error>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<error>() {
            public error findValueByNumber(int number) {
              return error.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(1);
    }

    private static final error[] VALUES = values();

    public static error valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private error(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:error)
  }

  /**
   * Protobuf enum {@code PlayerError}
   */
  public enum PlayerError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PLAYER_NOT_EXIST = 65537;</code>
     *
     * <pre>
     * 角色不存在
     * </pre>
     */
    PLAYER_NOT_EXIST(0, 65537),
    /**
     * <code>PUID_EXIST = 65538;</code>
     *
     * <pre>
     * puid重复
     * </pre>
     */
    PUID_EXIST(1, 65538),
    /**
     * <code>NICKNAME_EXIST = 65539;</code>
     *
     * <pre>
     * 昵称存在
     * </pre>
     */
    NICKNAME_EXIST(2, 65539),
    /**
     * <code>NICKNAME_INVALID = 65540;</code>
     *
     * <pre>
     * 昵称不符合规定
     * </pre>
     */
    NICKNAME_INVALID(3, 65540),
    /**
     * <code>COIN_NOT_ENOUGH = 69636;</code>
     *
     * <pre>
     * 金币不足
     * </pre>
     */
    COIN_NOT_ENOUGH(4, 69636),
    /**
     * <code>COIN_LIMIT = 69637;</code>
     *
     * <pre>
     * 金币上限
     * </pre>
     */
    COIN_LIMIT(5, 69637),
    /**
     * <code>GOLD_NOT_ENOUGH = 69638;</code>
     *
     * <pre>
     * 钻石不足
     * </pre>
     */
    GOLD_NOT_ENOUGH(6, 69638),
    /**
     * <code>GOLD_LIMIT = 69639;</code>
     *
     * <pre>
     * 钻石上限
     * </pre>
     */
    GOLD_LIMIT(7, 69639),
    /**
     * <code>FATIGUE_NOT_ENOUGH = 69640;</code>
     *
     * <pre>
     * 疲劳值不足
     * </pre>
     */
    FATIGUE_NOT_ENOUGH(8, 69640),
    /**
     * <code>FATIGUE_LIMIT = 69641;</code>
     *
     * <pre>
     * 疲劳值上限
     * </pre>
     */
    FATIGUE_LIMIT(9, 69641),
    /**
     * <code>TOWER_COIN_NOT_ENOUGH = 69642;</code>
     *
     * <pre>
     * 通天塔币不足
     * </pre>
     */
    TOWER_COIN_NOT_ENOUGH(10, 69642),
    /**
     * <code>TOWER_COIN_LIMIT = 69643;</code>
     *
     * <pre>
     * 通天塔币上限
     * </pre>
     */
    TOWER_COIN_LIMIT(11, 69643),
    /**
     * <code>ARENA_COIN_NOT_ENOUGH = 69644;</code>
     *
     * <pre>
     * 竞技场币不足
     * </pre>
     */
    ARENA_COIN_NOT_ENOUGH(12, 69644),
    /**
     * <code>ARENA_COIN_LIMIT = 69645;</code>
     *
     * <pre>
     * 竞技场币上限
     * </pre>
     */
    ARENA_COIN_LIMIT(13, 69645),
    /**
     * <code>CONTRIBUTION_NOT_ENOUGH = 69646;</code>
     *
     * <pre>
     * 公会贡献值不足
     * </pre>
     */
    CONTRIBUTION_NOT_ENOUGH(14, 69646),
    /**
     * <code>CONTRIBUTION_LIMIT = 69647;</code>
     *
     * <pre>
     * 公会贡献值上限
     * </pre>
     */
    CONTRIBUTION_LIMIT(15, 69647),
    /**
     * <code>HONOR_POINT_LIMIT = 69648;</code>
     *
     * <pre>
     * 荣誉点上限
     * </pre>
     */
    HONOR_POINT_LIMIT(16, 69648),
    /**
     * <code>HONOR_POINT_NOT_ENOUGH = 69649;</code>
     *
     * <pre>
     * 荣誉点不足
     * </pre>
     */
    HONOR_POINT_NOT_ENOUGH(17, 69649),
    /**
     * <code>SIGNIN_ALREADY = 73729;</code>
     *
     * <pre>
     * 今日已签到
     * </pre>
     */
    SIGNIN_ALREADY(18, 73729),
    /**
     * <code>SIGNIN_NOT_YET = 73730;</code>
     *
     * <pre>
     * 今日还未签到
     * </pre>
     */
    SIGNIN_NOT_YET(19, 73730),
    /**
     * <code>SIGNIN_FILL_ZERO = 73731;</code>
     *
     * <pre>
     * 没有补签次数
     * </pre>
     */
    SIGNIN_FILL_ZERO(20, 73731),
    /**
     * <code>SIGNIN_FINISH = 73732;</code>
     *
     * <pre>
     * 本月签到已完成
     * </pre>
     */
    SIGNIN_FINISH(21, 73732),
    /**
     * <code>SIGNIN_STOP = 73733;</code>
     *
     * <pre>
     * 本月签到已结束
     * </pre>
     */
    SIGNIN_STOP(22, 73733),
    ;

    /**
     * <code>PLAYER_NOT_EXIST = 65537;</code>
     *
     * <pre>
     * 角色不存在
     * </pre>
     */
    public static final int PLAYER_NOT_EXIST_VALUE = 65537;
    /**
     * <code>PUID_EXIST = 65538;</code>
     *
     * <pre>
     * puid重复
     * </pre>
     */
    public static final int PUID_EXIST_VALUE = 65538;
    /**
     * <code>NICKNAME_EXIST = 65539;</code>
     *
     * <pre>
     * 昵称存在
     * </pre>
     */
    public static final int NICKNAME_EXIST_VALUE = 65539;
    /**
     * <code>NICKNAME_INVALID = 65540;</code>
     *
     * <pre>
     * 昵称不符合规定
     * </pre>
     */
    public static final int NICKNAME_INVALID_VALUE = 65540;
    /**
     * <code>COIN_NOT_ENOUGH = 69636;</code>
     *
     * <pre>
     * 金币不足
     * </pre>
     */
    public static final int COIN_NOT_ENOUGH_VALUE = 69636;
    /**
     * <code>COIN_LIMIT = 69637;</code>
     *
     * <pre>
     * 金币上限
     * </pre>
     */
    public static final int COIN_LIMIT_VALUE = 69637;
    /**
     * <code>GOLD_NOT_ENOUGH = 69638;</code>
     *
     * <pre>
     * 钻石不足
     * </pre>
     */
    public static final int GOLD_NOT_ENOUGH_VALUE = 69638;
    /**
     * <code>GOLD_LIMIT = 69639;</code>
     *
     * <pre>
     * 钻石上限
     * </pre>
     */
    public static final int GOLD_LIMIT_VALUE = 69639;
    /**
     * <code>FATIGUE_NOT_ENOUGH = 69640;</code>
     *
     * <pre>
     * 疲劳值不足
     * </pre>
     */
    public static final int FATIGUE_NOT_ENOUGH_VALUE = 69640;
    /**
     * <code>FATIGUE_LIMIT = 69641;</code>
     *
     * <pre>
     * 疲劳值上限
     * </pre>
     */
    public static final int FATIGUE_LIMIT_VALUE = 69641;
    /**
     * <code>TOWER_COIN_NOT_ENOUGH = 69642;</code>
     *
     * <pre>
     * 通天塔币不足
     * </pre>
     */
    public static final int TOWER_COIN_NOT_ENOUGH_VALUE = 69642;
    /**
     * <code>TOWER_COIN_LIMIT = 69643;</code>
     *
     * <pre>
     * 通天塔币上限
     * </pre>
     */
    public static final int TOWER_COIN_LIMIT_VALUE = 69643;
    /**
     * <code>ARENA_COIN_NOT_ENOUGH = 69644;</code>
     *
     * <pre>
     * 竞技场币不足
     * </pre>
     */
    public static final int ARENA_COIN_NOT_ENOUGH_VALUE = 69644;
    /**
     * <code>ARENA_COIN_LIMIT = 69645;</code>
     *
     * <pre>
     * 竞技场币上限
     * </pre>
     */
    public static final int ARENA_COIN_LIMIT_VALUE = 69645;
    /**
     * <code>CONTRIBUTION_NOT_ENOUGH = 69646;</code>
     *
     * <pre>
     * 公会贡献值不足
     * </pre>
     */
    public static final int CONTRIBUTION_NOT_ENOUGH_VALUE = 69646;
    /**
     * <code>CONTRIBUTION_LIMIT = 69647;</code>
     *
     * <pre>
     * 公会贡献值上限
     * </pre>
     */
    public static final int CONTRIBUTION_LIMIT_VALUE = 69647;
    /**
     * <code>HONOR_POINT_LIMIT = 69648;</code>
     *
     * <pre>
     * 荣誉点上限
     * </pre>
     */
    public static final int HONOR_POINT_LIMIT_VALUE = 69648;
    /**
     * <code>HONOR_POINT_NOT_ENOUGH = 69649;</code>
     *
     * <pre>
     * 荣誉点不足
     * </pre>
     */
    public static final int HONOR_POINT_NOT_ENOUGH_VALUE = 69649;
    /**
     * <code>SIGNIN_ALREADY = 73729;</code>
     *
     * <pre>
     * 今日已签到
     * </pre>
     */
    public static final int SIGNIN_ALREADY_VALUE = 73729;
    /**
     * <code>SIGNIN_NOT_YET = 73730;</code>
     *
     * <pre>
     * 今日还未签到
     * </pre>
     */
    public static final int SIGNIN_NOT_YET_VALUE = 73730;
    /**
     * <code>SIGNIN_FILL_ZERO = 73731;</code>
     *
     * <pre>
     * 没有补签次数
     * </pre>
     */
    public static final int SIGNIN_FILL_ZERO_VALUE = 73731;
    /**
     * <code>SIGNIN_FINISH = 73732;</code>
     *
     * <pre>
     * 本月签到已完成
     * </pre>
     */
    public static final int SIGNIN_FINISH_VALUE = 73732;
    /**
     * <code>SIGNIN_STOP = 73733;</code>
     *
     * <pre>
     * 本月签到已结束
     * </pre>
     */
    public static final int SIGNIN_STOP_VALUE = 73733;


    public final int getNumber() { return value; }

    public static PlayerError valueOf(int value) {
      switch (value) {
        case 65537: return PLAYER_NOT_EXIST;
        case 65538: return PUID_EXIST;
        case 65539: return NICKNAME_EXIST;
        case 65540: return NICKNAME_INVALID;
        case 69636: return COIN_NOT_ENOUGH;
        case 69637: return COIN_LIMIT;
        case 69638: return GOLD_NOT_ENOUGH;
        case 69639: return GOLD_LIMIT;
        case 69640: return FATIGUE_NOT_ENOUGH;
        case 69641: return FATIGUE_LIMIT;
        case 69642: return TOWER_COIN_NOT_ENOUGH;
        case 69643: return TOWER_COIN_LIMIT;
        case 69644: return ARENA_COIN_NOT_ENOUGH;
        case 69645: return ARENA_COIN_LIMIT;
        case 69646: return CONTRIBUTION_NOT_ENOUGH;
        case 69647: return CONTRIBUTION_LIMIT;
        case 69648: return HONOR_POINT_LIMIT;
        case 69649: return HONOR_POINT_NOT_ENOUGH;
        case 73729: return SIGNIN_ALREADY;
        case 73730: return SIGNIN_NOT_YET;
        case 73731: return SIGNIN_FILL_ZERO;
        case 73732: return SIGNIN_FINISH;
        case 73733: return SIGNIN_STOP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PlayerError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<PlayerError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PlayerError>() {
            public PlayerError findValueByNumber(int number) {
              return PlayerError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(2);
    }

    private static final PlayerError[] VALUES = values();

    public static PlayerError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private PlayerError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PlayerError)
  }

  /**
   * Protobuf enum {@code monsterError}
   */
  public enum monsterError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MONSTER_MAX_SIZE = 131073;</code>
     *
     * <pre>
     * 怪物数量达到上限
     * </pre>
     */
    MONSTER_MAX_SIZE(0, 131073),
    /**
     * <code>MONSTER_NOT_EXIST = 131074;</code>
     *
     * <pre>
     * 怪物不存在                     
     * </pre>
     */
    MONSTER_NOT_EXIST(1, 131074),
    /**
     * <code>SKILL_POINT_NOT_ENOUGH = 131075;</code>
     *
     * <pre>
     * 技能点不足                     
     * </pre>
     */
    SKILL_POINT_NOT_ENOUGH(2, 131075),
    /**
     * <code>SKILL_LEVEL_LIMIT = 131076;</code>
     *
     * <pre>
     * 技能等级达到上限               
     * </pre>
     */
    SKILL_LEVEL_LIMIT(3, 131076),
    /**
     * <code>STAGE_LIMIT = 131077;</code>
     *
     * <pre>
     * 品级达到上限                   
     * </pre>
     */
    STAGE_LIMIT(4, 131077),
    /**
     * <code>STAGE_LEVEL_NOT_ENOUGH = 131078;</code>
     *
     * <pre>
     * 进阶等级不足                   
     * </pre>
     */
    STAGE_LEVEL_NOT_ENOUGH(5, 131078),
    /**
     * <code>STAGE_CONSUME = 131079;</code>
     *
     * <pre>
     * 进阶材料不足                   
     * </pre>
     */
    STAGE_CONSUME(6, 131079),
    /**
     * <code>BATTLE_MONSTER_COUNT = 131080;</code>
     *
     * <pre>
     * 上阵怪物数量错误               
     * </pre>
     */
    BATTLE_MONSTER_COUNT(7, 131080),
    /**
     * <code>MONSTER_LOCKED = 131081;</code>
     *
     * <pre>
     * 锁定                           
     * </pre>
     */
    MONSTER_LOCKED(8, 131081),
    /**
     * <code>LOCK_ALREADY = 131082;</code>
     *
     * <pre>
     * 已经锁定                       
     * </pre>
     */
    LOCK_ALREADY(9, 131082),
    /**
     * <code>UNLOCK_ALREADY = 131083;</code>
     *
     * <pre>
     * 已经解锁                       
     * </pre>
     */
    UNLOCK_ALREADY(10, 131083),
    /**
     * <code>MONSTER_BUSY = 131084;</code>
     *
     * <pre>
     * 不可上阵                       
     * </pre>
     */
    MONSTER_BUSY(11, 131084),
    ;

    /**
     * <code>MONSTER_MAX_SIZE = 131073;</code>
     *
     * <pre>
     * 怪物数量达到上限
     * </pre>
     */
    public static final int MONSTER_MAX_SIZE_VALUE = 131073;
    /**
     * <code>MONSTER_NOT_EXIST = 131074;</code>
     *
     * <pre>
     * 怪物不存在                     
     * </pre>
     */
    public static final int MONSTER_NOT_EXIST_VALUE = 131074;
    /**
     * <code>SKILL_POINT_NOT_ENOUGH = 131075;</code>
     *
     * <pre>
     * 技能点不足                     
     * </pre>
     */
    public static final int SKILL_POINT_NOT_ENOUGH_VALUE = 131075;
    /**
     * <code>SKILL_LEVEL_LIMIT = 131076;</code>
     *
     * <pre>
     * 技能等级达到上限               
     * </pre>
     */
    public static final int SKILL_LEVEL_LIMIT_VALUE = 131076;
    /**
     * <code>STAGE_LIMIT = 131077;</code>
     *
     * <pre>
     * 品级达到上限                   
     * </pre>
     */
    public static final int STAGE_LIMIT_VALUE = 131077;
    /**
     * <code>STAGE_LEVEL_NOT_ENOUGH = 131078;</code>
     *
     * <pre>
     * 进阶等级不足                   
     * </pre>
     */
    public static final int STAGE_LEVEL_NOT_ENOUGH_VALUE = 131078;
    /**
     * <code>STAGE_CONSUME = 131079;</code>
     *
     * <pre>
     * 进阶材料不足                   
     * </pre>
     */
    public static final int STAGE_CONSUME_VALUE = 131079;
    /**
     * <code>BATTLE_MONSTER_COUNT = 131080;</code>
     *
     * <pre>
     * 上阵怪物数量错误               
     * </pre>
     */
    public static final int BATTLE_MONSTER_COUNT_VALUE = 131080;
    /**
     * <code>MONSTER_LOCKED = 131081;</code>
     *
     * <pre>
     * 锁定                           
     * </pre>
     */
    public static final int MONSTER_LOCKED_VALUE = 131081;
    /**
     * <code>LOCK_ALREADY = 131082;</code>
     *
     * <pre>
     * 已经锁定                       
     * </pre>
     */
    public static final int LOCK_ALREADY_VALUE = 131082;
    /**
     * <code>UNLOCK_ALREADY = 131083;</code>
     *
     * <pre>
     * 已经解锁                       
     * </pre>
     */
    public static final int UNLOCK_ALREADY_VALUE = 131083;
    /**
     * <code>MONSTER_BUSY = 131084;</code>
     *
     * <pre>
     * 不可上阵                       
     * </pre>
     */
    public static final int MONSTER_BUSY_VALUE = 131084;


    public final int getNumber() { return value; }

    public static monsterError valueOf(int value) {
      switch (value) {
        case 131073: return MONSTER_MAX_SIZE;
        case 131074: return MONSTER_NOT_EXIST;
        case 131075: return SKILL_POINT_NOT_ENOUGH;
        case 131076: return SKILL_LEVEL_LIMIT;
        case 131077: return STAGE_LIMIT;
        case 131078: return STAGE_LEVEL_NOT_ENOUGH;
        case 131079: return STAGE_CONSUME;
        case 131080: return BATTLE_MONSTER_COUNT;
        case 131081: return MONSTER_LOCKED;
        case 131082: return LOCK_ALREADY;
        case 131083: return UNLOCK_ALREADY;
        case 131084: return MONSTER_BUSY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<monsterError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<monsterError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<monsterError>() {
            public monsterError findValueByNumber(int number) {
              return monsterError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(3);
    }

    private static final monsterError[] VALUES = values();

    public static monsterError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private monsterError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:monsterError)
  }

  /**
   * Protobuf enum {@code itemError}
   */
  public enum itemError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ITEM_NOT_FOUND = 196609;</code>
     *
     * <pre>
     * 道具不存在
     * </pre>
     */
    ITEM_NOT_FOUND(0, 196609),
    /**
     * <code>ITEM_NOT_ENOUGH = 196610;</code>
     *
     * <pre>
     * 道具数量不足
     * </pre>
     */
    ITEM_NOT_ENOUGH(1, 196610),
    /**
     * <code>ITEM_BUY_NOT_ALLOW = 196611;</code>
     *
     * <pre>
     * 道具不能买
     * </pre>
     */
    ITEM_BUY_NOT_ALLOW(2, 196611),
    /**
     * <code>ITEM_SELL_NOT_ALLOW = 196612;</code>
     *
     * <pre>
     * 道具不能卖
     * </pre>
     */
    ITEM_SELL_NOT_ALLOW(3, 196612),
    /**
     * <code>ITEM_EXP_LEFT_TIMES = 196613;</code>
     *
     * <pre>
     * 多倍经验还有剩余
     * </pre>
     */
    ITEM_EXP_LEFT_TIMES(4, 196613),
    /**
     * <code>ITEM_USE_COUNT = 196614;</code>
     *
     * <pre>
     * 物品使用次数已满
     * </pre>
     */
    ITEM_USE_COUNT(5, 196614),
    /**
     * <code>EQUIP_NOT_FOUND = 200705;</code>
     *
     * <pre>
     * 装备不足
     * </pre>
     */
    EQUIP_NOT_FOUND(6, 200705),
    /**
     * <code>EQUIP_MAX_LEVEL_ALREADY = 200706;</code>
     *
     * <pre>
     * 装备最大等级
     * </pre>
     */
    EQUIP_MAX_LEVEL_ALREADY(7, 200706),
    /**
     * <code>EQUIP_LEVEL_NOT_ENOUGH = 200707;</code>
     *
     * <pre>
     * 装备等级不够进阶
     * </pre>
     */
    EQUIP_LEVEL_NOT_ENOUGH(8, 200707),
    /**
     * <code>EQUIP_MAX_STAGE_ALREADY = 200708;</code>
     *
     * <pre>
     * 装备最大品级
     * </pre>
     */
    EQUIP_MAX_STAGE_ALREADY(9, 200708),
    /**
     * <code>EQUIP_DRESS_ALREADY = 200709;</code>
     *
     * <pre>
     * 装备不在背包
     * </pre>
     */
    EQUIP_DRESS_ALREADY(10, 200709),
    /**
     * <code>EQUIP_NOT_DRESS_OTHER = 200710;</code>
     *
     * <pre>
     * 该位置没有其他装备
     * </pre>
     */
    EQUIP_NOT_DRESS_OTHER(11, 200710),
    /**
     * <code>EQUIP_DRESS_OTHER_ALREADY = 200711;</code>
     *
     * <pre>
     * 该位置已经有其他装备
     * </pre>
     */
    EQUIP_DRESS_OTHER_ALREADY(12, 200711),
    /**
     * <code>EQUIP_NOT_DRESSED = 200712;</code>
     *
     * <pre>
     * 装备不在身上
     * </pre>
     */
    EQUIP_NOT_DRESSED(13, 200712),
    /**
     * <code>EQUIP_SLOT_NOT_EMPTY = 200713;</code>
     *
     * <pre>
     * 槽位已经镶嵌宝石
     * </pre>
     */
    EQUIP_SLOT_NOT_EMPTY(14, 200713),
    /**
     * <code>EQUIP_SLOT_EMPTY = 200714;</code>
     *
     * <pre>
     * 槽位没有镶嵌宝石
     * </pre>
     */
    EQUIP_SLOT_EMPTY(15, 200714),
    /**
     * <code>EQUIP_GEM_NOT_FOUND = 200715;</code>
     *
     * <pre>
     * 宝石不存在
     * </pre>
     */
    EQUIP_GEM_NOT_FOUND(16, 200715),
    /**
     * <code>EQUIP_CAN_NOT_OPEN_SLOT = 200716;</code>
     *
     * <pre>
     * 装备不能开孔
     * </pre>
     */
    EQUIP_CAN_NOT_OPEN_SLOT(17, 200716),
    /**
     * <code>EQUIP_GEM_MISMATCH = 200717;</code>
     *
     * <pre>
     * 镶嵌宝石不符
     * </pre>
     */
    EQUIP_GEM_MISMATCH(18, 200717),
    /**
     * <code>EQUIP_SLOT_NOT_PUNCH = 200718;</code>
     *
     * <pre>
     * 槽位没有开孔
     * </pre>
     */
    EQUIP_SLOT_NOT_PUNCH(19, 200718),
    /**
     * <code>EQUIP_PLAYER_LEVEL_DEMAND = 200719;</code>
     *
     * <pre>
     * 玩家等级限制
     * </pre>
     */
    EQUIP_PLAYER_LEVEL_DEMAND(20, 200719),
    ;

    /**
     * <code>ITEM_NOT_FOUND = 196609;</code>
     *
     * <pre>
     * 道具不存在
     * </pre>
     */
    public static final int ITEM_NOT_FOUND_VALUE = 196609;
    /**
     * <code>ITEM_NOT_ENOUGH = 196610;</code>
     *
     * <pre>
     * 道具数量不足
     * </pre>
     */
    public static final int ITEM_NOT_ENOUGH_VALUE = 196610;
    /**
     * <code>ITEM_BUY_NOT_ALLOW = 196611;</code>
     *
     * <pre>
     * 道具不能买
     * </pre>
     */
    public static final int ITEM_BUY_NOT_ALLOW_VALUE = 196611;
    /**
     * <code>ITEM_SELL_NOT_ALLOW = 196612;</code>
     *
     * <pre>
     * 道具不能卖
     * </pre>
     */
    public static final int ITEM_SELL_NOT_ALLOW_VALUE = 196612;
    /**
     * <code>ITEM_EXP_LEFT_TIMES = 196613;</code>
     *
     * <pre>
     * 多倍经验还有剩余
     * </pre>
     */
    public static final int ITEM_EXP_LEFT_TIMES_VALUE = 196613;
    /**
     * <code>ITEM_USE_COUNT = 196614;</code>
     *
     * <pre>
     * 物品使用次数已满
     * </pre>
     */
    public static final int ITEM_USE_COUNT_VALUE = 196614;
    /**
     * <code>EQUIP_NOT_FOUND = 200705;</code>
     *
     * <pre>
     * 装备不足
     * </pre>
     */
    public static final int EQUIP_NOT_FOUND_VALUE = 200705;
    /**
     * <code>EQUIP_MAX_LEVEL_ALREADY = 200706;</code>
     *
     * <pre>
     * 装备最大等级
     * </pre>
     */
    public static final int EQUIP_MAX_LEVEL_ALREADY_VALUE = 200706;
    /**
     * <code>EQUIP_LEVEL_NOT_ENOUGH = 200707;</code>
     *
     * <pre>
     * 装备等级不够进阶
     * </pre>
     */
    public static final int EQUIP_LEVEL_NOT_ENOUGH_VALUE = 200707;
    /**
     * <code>EQUIP_MAX_STAGE_ALREADY = 200708;</code>
     *
     * <pre>
     * 装备最大品级
     * </pre>
     */
    public static final int EQUIP_MAX_STAGE_ALREADY_VALUE = 200708;
    /**
     * <code>EQUIP_DRESS_ALREADY = 200709;</code>
     *
     * <pre>
     * 装备不在背包
     * </pre>
     */
    public static final int EQUIP_DRESS_ALREADY_VALUE = 200709;
    /**
     * <code>EQUIP_NOT_DRESS_OTHER = 200710;</code>
     *
     * <pre>
     * 该位置没有其他装备
     * </pre>
     */
    public static final int EQUIP_NOT_DRESS_OTHER_VALUE = 200710;
    /**
     * <code>EQUIP_DRESS_OTHER_ALREADY = 200711;</code>
     *
     * <pre>
     * 该位置已经有其他装备
     * </pre>
     */
    public static final int EQUIP_DRESS_OTHER_ALREADY_VALUE = 200711;
    /**
     * <code>EQUIP_NOT_DRESSED = 200712;</code>
     *
     * <pre>
     * 装备不在身上
     * </pre>
     */
    public static final int EQUIP_NOT_DRESSED_VALUE = 200712;
    /**
     * <code>EQUIP_SLOT_NOT_EMPTY = 200713;</code>
     *
     * <pre>
     * 槽位已经镶嵌宝石
     * </pre>
     */
    public static final int EQUIP_SLOT_NOT_EMPTY_VALUE = 200713;
    /**
     * <code>EQUIP_SLOT_EMPTY = 200714;</code>
     *
     * <pre>
     * 槽位没有镶嵌宝石
     * </pre>
     */
    public static final int EQUIP_SLOT_EMPTY_VALUE = 200714;
    /**
     * <code>EQUIP_GEM_NOT_FOUND = 200715;</code>
     *
     * <pre>
     * 宝石不存在
     * </pre>
     */
    public static final int EQUIP_GEM_NOT_FOUND_VALUE = 200715;
    /**
     * <code>EQUIP_CAN_NOT_OPEN_SLOT = 200716;</code>
     *
     * <pre>
     * 装备不能开孔
     * </pre>
     */
    public static final int EQUIP_CAN_NOT_OPEN_SLOT_VALUE = 200716;
    /**
     * <code>EQUIP_GEM_MISMATCH = 200717;</code>
     *
     * <pre>
     * 镶嵌宝石不符
     * </pre>
     */
    public static final int EQUIP_GEM_MISMATCH_VALUE = 200717;
    /**
     * <code>EQUIP_SLOT_NOT_PUNCH = 200718;</code>
     *
     * <pre>
     * 槽位没有开孔
     * </pre>
     */
    public static final int EQUIP_SLOT_NOT_PUNCH_VALUE = 200718;
    /**
     * <code>EQUIP_PLAYER_LEVEL_DEMAND = 200719;</code>
     *
     * <pre>
     * 玩家等级限制
     * </pre>
     */
    public static final int EQUIP_PLAYER_LEVEL_DEMAND_VALUE = 200719;


    public final int getNumber() { return value; }

    public static itemError valueOf(int value) {
      switch (value) {
        case 196609: return ITEM_NOT_FOUND;
        case 196610: return ITEM_NOT_ENOUGH;
        case 196611: return ITEM_BUY_NOT_ALLOW;
        case 196612: return ITEM_SELL_NOT_ALLOW;
        case 196613: return ITEM_EXP_LEFT_TIMES;
        case 196614: return ITEM_USE_COUNT;
        case 200705: return EQUIP_NOT_FOUND;
        case 200706: return EQUIP_MAX_LEVEL_ALREADY;
        case 200707: return EQUIP_LEVEL_NOT_ENOUGH;
        case 200708: return EQUIP_MAX_STAGE_ALREADY;
        case 200709: return EQUIP_DRESS_ALREADY;
        case 200710: return EQUIP_NOT_DRESS_OTHER;
        case 200711: return EQUIP_DRESS_OTHER_ALREADY;
        case 200712: return EQUIP_NOT_DRESSED;
        case 200713: return EQUIP_SLOT_NOT_EMPTY;
        case 200714: return EQUIP_SLOT_EMPTY;
        case 200715: return EQUIP_GEM_NOT_FOUND;
        case 200716: return EQUIP_CAN_NOT_OPEN_SLOT;
        case 200717: return EQUIP_GEM_MISMATCH;
        case 200718: return EQUIP_SLOT_NOT_PUNCH;
        case 200719: return EQUIP_PLAYER_LEVEL_DEMAND;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<itemError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<itemError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<itemError>() {
            public itemError findValueByNumber(int number) {
              return itemError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(4);
    }

    private static final itemError[] VALUES = values();

    public static itemError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private itemError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:itemError)
  }

  /**
   * Protobuf enum {@code questError}
   */
  public enum questError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>QUEST_NOT_ACCEPT = 262145;</code>
     *
     * <pre>
     * 当前没有该任务
     * </pre>
     */
    QUEST_NOT_ACCEPT(0, 262145),
    /**
     * <code>QUEST_NOT_COMPLETE = 262146;</code>
     *
     * <pre>
     * 任务未完成
     * </pre>
     */
    QUEST_NOT_COMPLETE(1, 262146),
    /**
     * <code>QUEST_NOT_OPEN = 262147;</code>
     *
     * <pre>
     * 现在不可领奖
     * </pre>
     */
    QUEST_NOT_OPEN(2, 262147),
    ;

    /**
     * <code>QUEST_NOT_ACCEPT = 262145;</code>
     *
     * <pre>
     * 当前没有该任务
     * </pre>
     */
    public static final int QUEST_NOT_ACCEPT_VALUE = 262145;
    /**
     * <code>QUEST_NOT_COMPLETE = 262146;</code>
     *
     * <pre>
     * 任务未完成
     * </pre>
     */
    public static final int QUEST_NOT_COMPLETE_VALUE = 262146;
    /**
     * <code>QUEST_NOT_OPEN = 262147;</code>
     *
     * <pre>
     * 现在不可领奖
     * </pre>
     */
    public static final int QUEST_NOT_OPEN_VALUE = 262147;


    public final int getNumber() { return value; }

    public static questError valueOf(int value) {
      switch (value) {
        case 262145: return QUEST_NOT_ACCEPT;
        case 262146: return QUEST_NOT_COMPLETE;
        case 262147: return QUEST_NOT_OPEN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<questError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<questError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<questError>() {
            public questError findValueByNumber(int number) {
              return questError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(5);
    }

    private static final questError[] VALUES = values();

    public static questError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private questError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:questError)
  }

  /**
   * Protobuf enum {@code instanceError}
   */
  public enum instanceError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>INSTANCE_NOT_OPEN = 327681;</code>
     *
     * <pre>
     * 副本未开启
     * </pre>
     */
    INSTANCE_NOT_OPEN(0, 327681),
    /**
     * <code>INSTANCE_LEVEL = 327682;</code>
     *
     * <pre>
     * 等级不足
     * </pre>
     */
    INSTANCE_LEVEL(1, 327682),
    /**
     * <code>INSTANCE_COUNT = 327683;</code>
     *
     * <pre>
     * 挑战次数已用完
     * </pre>
     */
    INSTANCE_COUNT(2, 327683),
    /**
     * <code>INSTANCE_FATIGUE = 327684;</code>
     *
     * <pre>
     * 体力不足
     * </pre>
     */
    INSTANCE_FATIGUE(3, 327684),
    /**
     * <code>INSTANCE_REVIVE_COUNT = 327685;</code>
     *
     * <pre>
     * 复活次数已用完
     * </pre>
     */
    INSTANCE_REVIVE_COUNT(4, 327685),
    /**
     * <code>SWEEP_STAR_COUNT = 327686;</code>
     *
     * <pre>
     * 扫荡未满星
     * </pre>
     */
    SWEEP_STAR_COUNT(5, 327686),
    /**
     * <code>CHAPTER_BOX_STAR_COUNT = 327687;</code>
     *
     * <pre>
     * 章节未满星
     * </pre>
     */
    CHAPTER_BOX_STAR_COUNT(6, 327687),
    /**
     * <code>CHAPTER_BOX_ALREADY_OPEN = 327688;</code>
     *
     * <pre>
     * 章节宝箱已领取
     * </pre>
     */
    CHAPTER_BOX_ALREADY_OPEN(7, 327688),
    /**
     * <code>INSTANCE_NOT_ENTER = 327689;</code>
     *
     * <pre>
     * 结算时未进入副本
     * </pre>
     */
    INSTANCE_NOT_ENTER(8, 327689),
    /**
     * <code>TOWER_FLOOR = 327690;</code>
     *
     * <pre>
     * 通天塔层数错误
     * </pre>
     */
    TOWER_FLOOR(9, 327690),
    ;

    /**
     * <code>INSTANCE_NOT_OPEN = 327681;</code>
     *
     * <pre>
     * 副本未开启
     * </pre>
     */
    public static final int INSTANCE_NOT_OPEN_VALUE = 327681;
    /**
     * <code>INSTANCE_LEVEL = 327682;</code>
     *
     * <pre>
     * 等级不足
     * </pre>
     */
    public static final int INSTANCE_LEVEL_VALUE = 327682;
    /**
     * <code>INSTANCE_COUNT = 327683;</code>
     *
     * <pre>
     * 挑战次数已用完
     * </pre>
     */
    public static final int INSTANCE_COUNT_VALUE = 327683;
    /**
     * <code>INSTANCE_FATIGUE = 327684;</code>
     *
     * <pre>
     * 体力不足
     * </pre>
     */
    public static final int INSTANCE_FATIGUE_VALUE = 327684;
    /**
     * <code>INSTANCE_REVIVE_COUNT = 327685;</code>
     *
     * <pre>
     * 复活次数已用完
     * </pre>
     */
    public static final int INSTANCE_REVIVE_COUNT_VALUE = 327685;
    /**
     * <code>SWEEP_STAR_COUNT = 327686;</code>
     *
     * <pre>
     * 扫荡未满星
     * </pre>
     */
    public static final int SWEEP_STAR_COUNT_VALUE = 327686;
    /**
     * <code>CHAPTER_BOX_STAR_COUNT = 327687;</code>
     *
     * <pre>
     * 章节未满星
     * </pre>
     */
    public static final int CHAPTER_BOX_STAR_COUNT_VALUE = 327687;
    /**
     * <code>CHAPTER_BOX_ALREADY_OPEN = 327688;</code>
     *
     * <pre>
     * 章节宝箱已领取
     * </pre>
     */
    public static final int CHAPTER_BOX_ALREADY_OPEN_VALUE = 327688;
    /**
     * <code>INSTANCE_NOT_ENTER = 327689;</code>
     *
     * <pre>
     * 结算时未进入副本
     * </pre>
     */
    public static final int INSTANCE_NOT_ENTER_VALUE = 327689;
    /**
     * <code>TOWER_FLOOR = 327690;</code>
     *
     * <pre>
     * 通天塔层数错误
     * </pre>
     */
    public static final int TOWER_FLOOR_VALUE = 327690;


    public final int getNumber() { return value; }

    public static instanceError valueOf(int value) {
      switch (value) {
        case 327681: return INSTANCE_NOT_OPEN;
        case 327682: return INSTANCE_LEVEL;
        case 327683: return INSTANCE_COUNT;
        case 327684: return INSTANCE_FATIGUE;
        case 327685: return INSTANCE_REVIVE_COUNT;
        case 327686: return SWEEP_STAR_COUNT;
        case 327687: return CHAPTER_BOX_STAR_COUNT;
        case 327688: return CHAPTER_BOX_ALREADY_OPEN;
        case 327689: return INSTANCE_NOT_ENTER;
        case 327690: return TOWER_FLOOR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<instanceError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<instanceError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<instanceError>() {
            public instanceError findValueByNumber(int number) {
              return instanceError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(6);
    }

    private static final instanceError[] VALUES = values();

    public static instanceError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private instanceError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:instanceError)
  }

  /**
   * Protobuf enum {@code mailError}
   */
  public enum mailError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MAIL_NOT_EXIST = 393217;</code>
     *
     * <pre>
     * 邮件不存在
     * </pre>
     */
    MAIL_NOT_EXIST(0, 393217),
    /**
     * <code>MAIL_NONE = 393218;</code>
     *
     * <pre>
     * 没有邮件
     * </pre>
     */
    MAIL_NONE(1, 393218),
    /**
     * <code>MAIL_COIN_FULL = 393219;</code>
     *
     * <pre>
     * 金币已满收取失败
     * </pre>
     */
    MAIL_COIN_FULL(2, 393219),
    /**
     * <code>MAIL_GOLD_FULL = 393220;</code>
     *
     * <pre>
     * 钻石已满收取失败
     * </pre>
     */
    MAIL_GOLD_FULL(3, 393220),
    ;

    /**
     * <code>MAIL_NOT_EXIST = 393217;</code>
     *
     * <pre>
     * 邮件不存在
     * </pre>
     */
    public static final int MAIL_NOT_EXIST_VALUE = 393217;
    /**
     * <code>MAIL_NONE = 393218;</code>
     *
     * <pre>
     * 没有邮件
     * </pre>
     */
    public static final int MAIL_NONE_VALUE = 393218;
    /**
     * <code>MAIL_COIN_FULL = 393219;</code>
     *
     * <pre>
     * 金币已满收取失败
     * </pre>
     */
    public static final int MAIL_COIN_FULL_VALUE = 393219;
    /**
     * <code>MAIL_GOLD_FULL = 393220;</code>
     *
     * <pre>
     * 钻石已满收取失败
     * </pre>
     */
    public static final int MAIL_GOLD_FULL_VALUE = 393220;


    public final int getNumber() { return value; }

    public static mailError valueOf(int value) {
      switch (value) {
        case 393217: return MAIL_NOT_EXIST;
        case 393218: return MAIL_NONE;
        case 393219: return MAIL_COIN_FULL;
        case 393220: return MAIL_GOLD_FULL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<mailError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<mailError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<mailError>() {
            public mailError findValueByNumber(int number) {
              return mailError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(7);
    }

    private static final mailError[] VALUES = values();

    public static mailError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private mailError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:mailError)
  }

  /**
   * Protobuf enum {@code imError}
   */
  public enum imError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>IM_CHAT_LENGTH = 458753;</code>
     *
     * <pre>
     * 聊天内容太长
     * </pre>
     */
    IM_CHAT_LENGTH(0, 458753),
    /**
     * <code>IM_DUMP_ERROR = 458754;</code>
     *
     * <pre>
     * 禁言
     * </pre>
     */
    IM_DUMP_ERROR(1, 458754),
    ;

    /**
     * <code>IM_CHAT_LENGTH = 458753;</code>
     *
     * <pre>
     * 聊天内容太长
     * </pre>
     */
    public static final int IM_CHAT_LENGTH_VALUE = 458753;
    /**
     * <code>IM_DUMP_ERROR = 458754;</code>
     *
     * <pre>
     * 禁言
     * </pre>
     */
    public static final int IM_DUMP_ERROR_VALUE = 458754;


    public final int getNumber() { return value; }

    public static imError valueOf(int value) {
      switch (value) {
        case 458753: return IM_CHAT_LENGTH;
        case 458754: return IM_DUMP_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<imError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<imError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<imError>() {
            public imError findValueByNumber(int number) {
              return imError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(8);
    }

    private static final imError[] VALUES = values();

    public static imError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private imError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:imError)
  }

  /**
   * Protobuf enum {@code shopError}
   */
  public enum shopError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SHOP_REFRESH_TIMEOUT = 524289;</code>
     *
     * <pre>
     * 商店过期
     * </pre>
     */
    SHOP_REFRESH_TIMEOUT(0, 524289),
    /**
     * <code>SHOP_ITEM_ALREADY_BUY = 524290;</code>
     *
     * <pre>
     * 商品已经买过了
     * </pre>
     */
    SHOP_ITEM_ALREADY_BUY(1, 524290),
    /**
     * <code>SHOP_REFRESH_MAX_COUNT = 524291;</code>
     *
     * <pre>
     * 商品刷新最大次数
     * </pre>
     */
    SHOP_REFRESH_MAX_COUNT(2, 524291),
    /**
     * <code>SHOP_GOLD2COIN_MAX_COUNT = 524292;</code>
     *
     * <pre>
     * 钻石购买最大次数
     * </pre>
     */
    SHOP_GOLD2COIN_MAX_COUNT(3, 524292),
    ;

    /**
     * <code>SHOP_REFRESH_TIMEOUT = 524289;</code>
     *
     * <pre>
     * 商店过期
     * </pre>
     */
    public static final int SHOP_REFRESH_TIMEOUT_VALUE = 524289;
    /**
     * <code>SHOP_ITEM_ALREADY_BUY = 524290;</code>
     *
     * <pre>
     * 商品已经买过了
     * </pre>
     */
    public static final int SHOP_ITEM_ALREADY_BUY_VALUE = 524290;
    /**
     * <code>SHOP_REFRESH_MAX_COUNT = 524291;</code>
     *
     * <pre>
     * 商品刷新最大次数
     * </pre>
     */
    public static final int SHOP_REFRESH_MAX_COUNT_VALUE = 524291;
    /**
     * <code>SHOP_GOLD2COIN_MAX_COUNT = 524292;</code>
     *
     * <pre>
     * 钻石购买最大次数
     * </pre>
     */
    public static final int SHOP_GOLD2COIN_MAX_COUNT_VALUE = 524292;


    public final int getNumber() { return value; }

    public static shopError valueOf(int value) {
      switch (value) {
        case 524289: return SHOP_REFRESH_TIMEOUT;
        case 524290: return SHOP_ITEM_ALREADY_BUY;
        case 524291: return SHOP_REFRESH_MAX_COUNT;
        case 524292: return SHOP_GOLD2COIN_MAX_COUNT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<shopError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<shopError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<shopError>() {
            public shopError findValueByNumber(int number) {
              return shopError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(9);
    }

    private static final shopError[] VALUES = values();

    public static shopError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private shopError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:shopError)
  }

  /**
   * Protobuf enum {@code allianceError}
   */
  public enum allianceError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ALLIANCE_LEVEL_NOT_ENOUGH = 589825;</code>
     *
     * <pre>
     * 创建公会等级不足
     * </pre>
     */
    ALLIANCE_LEVEL_NOT_ENOUGH(0, 589825),
    /**
     * <code>ALLIANCE_ALREADY_IN = 589826;</code>
     *
     * <pre>
     * 已经在公会中
     * </pre>
     */
    ALLIANCE_ALREADY_IN(1, 589826),
    /**
     * <code>ALLIANCE_NOT_EXIST = 589827;</code>
     *
     * <pre>
     * 工会不存在
     * </pre>
     */
    ALLIANCE_NOT_EXIST(2, 589827),
    /**
     * <code>ALLIANCE_NAME_ERROR = 589828;</code>
     *
     * <pre>
     * 公会名称错误
     * </pre>
     */
    ALLIANCE_NAME_ERROR(3, 589828),
    /**
     * <code>ALLIANCE_NAME_EXIST = 589829;</code>
     *
     * <pre>
     * 已经名称重复
     * </pre>
     */
    ALLIANCE_NAME_EXIST(4, 589829),
    /**
     * <code>ALLIANCE_NOT_JOIN = 589830;</code>
     *
     * <pre>
     * 未加入公会
     * </pre>
     */
    ALLIANCE_NOT_JOIN(5, 589830),
    /**
     * <code>ALLIANCE_NO_MAIN = 589831;</code>
     *
     * <pre>
     * 非会长
     * </pre>
     */
    ALLIANCE_NO_MAIN(6, 589831),
    /**
     * <code>ALLIANCE_NOTICE_ERROR = 589832;</code>
     *
     * <pre>
     * 通告错误
     * </pre>
     */
    ALLIANCE_NOTICE_ERROR(7, 589832),
    /**
     * <code>ALLIANCE_ALREADY_APPLY = 589833;</code>
     *
     * <pre>
     * 已经申请过了
     * </pre>
     */
    ALLIANCE_ALREADY_APPLY(8, 589833),
    /**
     * <code>ALLIANCE_ALREADY_FULL = 589834;</code>
     *
     * <pre>
     * 工会已满
     * </pre>
     */
    ALLIANCE_ALREADY_FULL(9, 589834),
    /**
     * <code>ALLIANCE_APPLY_NOT_EXIST = 589835;</code>
     *
     * <pre>
     * 申请不存在
     * </pre>
     */
    ALLIANCE_APPLY_NOT_EXIST(10, 589835),
    /**
     * <code>ALLIANCE_POSITION_ERROR = 589836;</code>
     *
     * <pre>
     * 工会职位有误
     * </pre>
     */
    ALLIANCE_POSITION_ERROR(11, 589836),
    /**
     * <code>ALLIANCE__LEAVE_NOT_EMPTY = 589837;</code>
     *
     * <pre>
     * 公会会长退出时不空
     * </pre>
     */
    ALLIANCE__LEAVE_NOT_EMPTY(12, 589837),
    /**
     * <code>ALLIANCE_TARGET_NOT_JOIN = 589838;</code>
     *
     * <pre>
     * 操作对象未加入公会
     * </pre>
     */
    ALLIANCE_TARGET_NOT_JOIN(13, 589838),
    /**
     * <code>ALLIANCE_TARGET_ALREADY_JOIN = 589839;</code>
     *
     * <pre>
     * 操作对象已加入公会
     * </pre>
     */
    ALLIANCE_TARGET_ALREADY_JOIN(14, 589839),
    /**
     * <code>ALLIANCE_TECH_FULL = 589840;</code>
     *
     * <pre>
     * 工会科技等级满级
     * </pre>
     */
    ALLIANCE_TECH_FULL(15, 589840),
    /**
     * <code>ALLIANCE_LEVEL_LIMIT = 589841;</code>
     *
     * <pre>
     * 工会等级不足
     * </pre>
     */
    ALLIANCE_LEVEL_LIMIT(16, 589841),
    /**
     * <code>ALLIANCE_CONTRI_NOT_ENOUGH = 589842;</code>
     *
     * <pre>
     * 公会贡献值不足
     * </pre>
     */
    ALLIANCE_CONTRI_NOT_ENOUGH(17, 589842),
    /**
     * <code>ALLIANCE_PRAY_MAX_COUNT = 589843;</code>
     *
     * <pre>
     * 公会祈福最大值
     * </pre>
     */
    ALLIANCE_PRAY_MAX_COUNT(18, 589843),
    /**
     * <code>ALLIANCE_FRIZEN_TIME = 589844;</code>
     *
     * <pre>
     * 退出公会冻结时间
     * </pre>
     */
    ALLIANCE_FRIZEN_TIME(19, 589844),
    /**
     * <code>ALLIANCE_MAX_FAGIGUE_COUNT = 589845;</code>
     *
     * <pre>
     * 赠送次数已满
     * </pre>
     */
    ALLIANCE_MAX_FAGIGUE_COUNT(20, 589845),
    /**
     * <code>ALLIANCE_FAGIGUE_GIVE_ALREADY = 589846;</code>
     *
     * <pre>
     * 已经赠送过疲劳值
     * </pre>
     */
    ALLIANCE_FAGIGUE_GIVE_ALREADY(21, 589846),
    /**
     * <code>ALLIANCE_CAPACITY_NOT_ENOUGH = 589847;</code>
     *
     * <pre>
     * 容量不足
     * </pre>
     */
    ALLIANCE_CAPACITY_NOT_ENOUGH(22, 589847),
    /**
     * <code>ALLIANCE_SAME_POSITION = 589848;</code>
     *
     * <pre>
     * 职位相同
     * </pre>
     */
    ALLIANCE_SAME_POSITION(23, 589848),
    /**
     * <code>ALLIANCE_MAX_APPLY = 589849;</code>
     *
     * <pre>
     * 申请上限
     * </pre>
     */
    ALLIANCE_MAX_APPLY(24, 589849),
    /**
     * <code>ALLIANCE_ALREADY_IN_TEAM = 589850;</code>
     *
     * <pre>
     * 已经在队伍中
     * </pre>
     */
    ALLIANCE_ALREADY_IN_TEAM(25, 589850),
    /**
     * <code>ALLIANCE_TEAM_NOT_EXIST = 589851;</code>
     *
     * <pre>
     * 队伍不存在
     * </pre>
     */
    ALLIANCE_TEAM_NOT_EXIST(26, 589851),
    /**
     * <code>ALLIANCE_TEAM_FINISH = 589852;</code>
     *
     * <pre>
     * 队伍任务全部完成
     * </pre>
     */
    ALLIANCE_TEAM_FINISH(27, 589852),
    /**
     * <code>ALLIANCE_TEAM_FULL = 589853;</code>
     *
     * <pre>
     * 队伍满员
     * </pre>
     */
    ALLIANCE_TEAM_FULL(28, 589853),
    /**
     * <code>ALLIANCE_TASK_FINISH = 589854;</code>
     *
     * <pre>
     * 大任务已完成
     * </pre>
     */
    ALLIANCE_TASK_FINISH(29, 589854),
    /**
     * <code>ALLIANCE_NOT_IN_TEAM = 589855;</code>
     *
     * <pre>
     * 不再队伍中
     * </pre>
     */
    ALLIANCE_NOT_IN_TEAM(30, 589855),
    /**
     * <code>ALLIANCE_TASK_NOT_EXIST = 589856;</code>
     *
     * <pre>
     * 大任务不存在
     * </pre>
     */
    ALLIANCE_TASK_NOT_EXIST(31, 589856),
    /**
     * <code>ALLIANCE_MAX_BIG_TASK = 589857;</code>
     *
     * <pre>
     * 大任务最大值
     * </pre>
     */
    ALLIANCE_MAX_BIG_TASK(32, 589857),
    /**
     * <code>ALLIANCE_MAX_SMALL_TASK = 589858;</code>
     *
     * <pre>
     * 小任务最大值
     * </pre>
     */
    ALLIANCE_MAX_SMALL_TASK(33, 589858),
    /**
     * <code>ALLIANCE_QUEST_NOT_EXIST = 589859;</code>
     *
     * <pre>
     * 小任务不存在
     * </pre>
     */
    ALLIANCE_QUEST_NOT_EXIST(34, 589859),
    /**
     * <code>ALLIANCE_QUEST_FINISH = 589860;</code>
     *
     * <pre>
     * 小任务已完成
     * </pre>
     */
    ALLIANCE_QUEST_FINISH(35, 589860),
    /**
     * <code>ALLIANCE_TASK_NOT_FINISH = 589861;</code>
     *
     * <pre>
     * 大任务未完成
     * </pre>
     */
    ALLIANCE_TASK_NOT_FINISH(36, 589861),
    /**
     * <code>ALLIANCE_NOT_CAPTAIN = 589862;</code>
     *
     * <pre>
     * 不是队长
     * </pre>
     */
    ALLIANCE_NOT_CAPTAIN(37, 589862),
    /**
     * <code>ALLIANCE_HAVE_MEMBER = 589863;</code>
     *
     * <pre>
     * 队伍中有队友
     * </pre>
     */
    ALLIANCE_HAVE_MEMBER(38, 589863),
    /**
     * <code>ALLIANCE_REWARD_ALREADY_GIVE = 589864;</code>
     *
     * <pre>
     * 奖励已领取
     * </pre>
     */
    ALLIANCE_REWARD_ALREADY_GIVE(39, 589864),
    /**
     * <code>ALLIANCE_MAX_COPY_MAIN = 589865;</code>
     *
     * <pre>
     * 副会长最大值
     * </pre>
     */
    ALLIANCE_MAX_COPY_MAIN(40, 589865),
    /**
     * <code>ALLIANCE_APPLY_LIST_EMPTY = 589866;</code>
     *
     * <pre>
     * 申请列表为空
     * </pre>
     */
    ALLIANCE_APPLY_LIST_EMPTY(41, 589866),
    /**
     * <code>ALLIANCE_BASE_HAVE_MONSTER = 589867;</code>
     *
     * <pre>
     * 基地对应位置已经派兵
     * </pre>
     */
    ALLIANCE_BASE_HAVE_MONSTER(42, 589867),
    /**
     * <code>ALLIANCE_BASE_HAVE_NO_MONSTER = 589868;</code>
     *
     * <pre>
     * 基地对应位置没有派兵
     * </pre>
     */
    ALLIANCE_BASE_HAVE_NO_MONSTER(43, 589868),
    /**
     * <code>ALLIANCE_BASE_POSITION_LOCK = 589869;</code>
     *
     * <pre>
     * 基地对应位置被锁定
     * </pre>
     */
    ALLIANCE_BASE_POSITION_LOCK(44, 589869),
    /**
     * <code>ALLIANCE_BASE_MONSTER_HAVE_SEND = 589870;</code>
     *
     * <pre>
     * 基地宠物已派出
     * </pre>
     */
    ALLIANCE_BASE_MONSTER_HAVE_SEND(45, 589870),
    /**
     * <code>ALLIANCE_BASE_TIME_LIMIT = 589871;</code>
     *
     * <pre>
     * 基地宠物最小时间限制
     * </pre>
     */
    ALLIANCE_BASE_TIME_LIMIT(46, 589871),
    ;

    /**
     * <code>ALLIANCE_LEVEL_NOT_ENOUGH = 589825;</code>
     *
     * <pre>
     * 创建公会等级不足
     * </pre>
     */
    public static final int ALLIANCE_LEVEL_NOT_ENOUGH_VALUE = 589825;
    /**
     * <code>ALLIANCE_ALREADY_IN = 589826;</code>
     *
     * <pre>
     * 已经在公会中
     * </pre>
     */
    public static final int ALLIANCE_ALREADY_IN_VALUE = 589826;
    /**
     * <code>ALLIANCE_NOT_EXIST = 589827;</code>
     *
     * <pre>
     * 工会不存在
     * </pre>
     */
    public static final int ALLIANCE_NOT_EXIST_VALUE = 589827;
    /**
     * <code>ALLIANCE_NAME_ERROR = 589828;</code>
     *
     * <pre>
     * 公会名称错误
     * </pre>
     */
    public static final int ALLIANCE_NAME_ERROR_VALUE = 589828;
    /**
     * <code>ALLIANCE_NAME_EXIST = 589829;</code>
     *
     * <pre>
     * 已经名称重复
     * </pre>
     */
    public static final int ALLIANCE_NAME_EXIST_VALUE = 589829;
    /**
     * <code>ALLIANCE_NOT_JOIN = 589830;</code>
     *
     * <pre>
     * 未加入公会
     * </pre>
     */
    public static final int ALLIANCE_NOT_JOIN_VALUE = 589830;
    /**
     * <code>ALLIANCE_NO_MAIN = 589831;</code>
     *
     * <pre>
     * 非会长
     * </pre>
     */
    public static final int ALLIANCE_NO_MAIN_VALUE = 589831;
    /**
     * <code>ALLIANCE_NOTICE_ERROR = 589832;</code>
     *
     * <pre>
     * 通告错误
     * </pre>
     */
    public static final int ALLIANCE_NOTICE_ERROR_VALUE = 589832;
    /**
     * <code>ALLIANCE_ALREADY_APPLY = 589833;</code>
     *
     * <pre>
     * 已经申请过了
     * </pre>
     */
    public static final int ALLIANCE_ALREADY_APPLY_VALUE = 589833;
    /**
     * <code>ALLIANCE_ALREADY_FULL = 589834;</code>
     *
     * <pre>
     * 工会已满
     * </pre>
     */
    public static final int ALLIANCE_ALREADY_FULL_VALUE = 589834;
    /**
     * <code>ALLIANCE_APPLY_NOT_EXIST = 589835;</code>
     *
     * <pre>
     * 申请不存在
     * </pre>
     */
    public static final int ALLIANCE_APPLY_NOT_EXIST_VALUE = 589835;
    /**
     * <code>ALLIANCE_POSITION_ERROR = 589836;</code>
     *
     * <pre>
     * 工会职位有误
     * </pre>
     */
    public static final int ALLIANCE_POSITION_ERROR_VALUE = 589836;
    /**
     * <code>ALLIANCE__LEAVE_NOT_EMPTY = 589837;</code>
     *
     * <pre>
     * 公会会长退出时不空
     * </pre>
     */
    public static final int ALLIANCE__LEAVE_NOT_EMPTY_VALUE = 589837;
    /**
     * <code>ALLIANCE_TARGET_NOT_JOIN = 589838;</code>
     *
     * <pre>
     * 操作对象未加入公会
     * </pre>
     */
    public static final int ALLIANCE_TARGET_NOT_JOIN_VALUE = 589838;
    /**
     * <code>ALLIANCE_TARGET_ALREADY_JOIN = 589839;</code>
     *
     * <pre>
     * 操作对象已加入公会
     * </pre>
     */
    public static final int ALLIANCE_TARGET_ALREADY_JOIN_VALUE = 589839;
    /**
     * <code>ALLIANCE_TECH_FULL = 589840;</code>
     *
     * <pre>
     * 工会科技等级满级
     * </pre>
     */
    public static final int ALLIANCE_TECH_FULL_VALUE = 589840;
    /**
     * <code>ALLIANCE_LEVEL_LIMIT = 589841;</code>
     *
     * <pre>
     * 工会等级不足
     * </pre>
     */
    public static final int ALLIANCE_LEVEL_LIMIT_VALUE = 589841;
    /**
     * <code>ALLIANCE_CONTRI_NOT_ENOUGH = 589842;</code>
     *
     * <pre>
     * 公会贡献值不足
     * </pre>
     */
    public static final int ALLIANCE_CONTRI_NOT_ENOUGH_VALUE = 589842;
    /**
     * <code>ALLIANCE_PRAY_MAX_COUNT = 589843;</code>
     *
     * <pre>
     * 公会祈福最大值
     * </pre>
     */
    public static final int ALLIANCE_PRAY_MAX_COUNT_VALUE = 589843;
    /**
     * <code>ALLIANCE_FRIZEN_TIME = 589844;</code>
     *
     * <pre>
     * 退出公会冻结时间
     * </pre>
     */
    public static final int ALLIANCE_FRIZEN_TIME_VALUE = 589844;
    /**
     * <code>ALLIANCE_MAX_FAGIGUE_COUNT = 589845;</code>
     *
     * <pre>
     * 赠送次数已满
     * </pre>
     */
    public static final int ALLIANCE_MAX_FAGIGUE_COUNT_VALUE = 589845;
    /**
     * <code>ALLIANCE_FAGIGUE_GIVE_ALREADY = 589846;</code>
     *
     * <pre>
     * 已经赠送过疲劳值
     * </pre>
     */
    public static final int ALLIANCE_FAGIGUE_GIVE_ALREADY_VALUE = 589846;
    /**
     * <code>ALLIANCE_CAPACITY_NOT_ENOUGH = 589847;</code>
     *
     * <pre>
     * 容量不足
     * </pre>
     */
    public static final int ALLIANCE_CAPACITY_NOT_ENOUGH_VALUE = 589847;
    /**
     * <code>ALLIANCE_SAME_POSITION = 589848;</code>
     *
     * <pre>
     * 职位相同
     * </pre>
     */
    public static final int ALLIANCE_SAME_POSITION_VALUE = 589848;
    /**
     * <code>ALLIANCE_MAX_APPLY = 589849;</code>
     *
     * <pre>
     * 申请上限
     * </pre>
     */
    public static final int ALLIANCE_MAX_APPLY_VALUE = 589849;
    /**
     * <code>ALLIANCE_ALREADY_IN_TEAM = 589850;</code>
     *
     * <pre>
     * 已经在队伍中
     * </pre>
     */
    public static final int ALLIANCE_ALREADY_IN_TEAM_VALUE = 589850;
    /**
     * <code>ALLIANCE_TEAM_NOT_EXIST = 589851;</code>
     *
     * <pre>
     * 队伍不存在
     * </pre>
     */
    public static final int ALLIANCE_TEAM_NOT_EXIST_VALUE = 589851;
    /**
     * <code>ALLIANCE_TEAM_FINISH = 589852;</code>
     *
     * <pre>
     * 队伍任务全部完成
     * </pre>
     */
    public static final int ALLIANCE_TEAM_FINISH_VALUE = 589852;
    /**
     * <code>ALLIANCE_TEAM_FULL = 589853;</code>
     *
     * <pre>
     * 队伍满员
     * </pre>
     */
    public static final int ALLIANCE_TEAM_FULL_VALUE = 589853;
    /**
     * <code>ALLIANCE_TASK_FINISH = 589854;</code>
     *
     * <pre>
     * 大任务已完成
     * </pre>
     */
    public static final int ALLIANCE_TASK_FINISH_VALUE = 589854;
    /**
     * <code>ALLIANCE_NOT_IN_TEAM = 589855;</code>
     *
     * <pre>
     * 不再队伍中
     * </pre>
     */
    public static final int ALLIANCE_NOT_IN_TEAM_VALUE = 589855;
    /**
     * <code>ALLIANCE_TASK_NOT_EXIST = 589856;</code>
     *
     * <pre>
     * 大任务不存在
     * </pre>
     */
    public static final int ALLIANCE_TASK_NOT_EXIST_VALUE = 589856;
    /**
     * <code>ALLIANCE_MAX_BIG_TASK = 589857;</code>
     *
     * <pre>
     * 大任务最大值
     * </pre>
     */
    public static final int ALLIANCE_MAX_BIG_TASK_VALUE = 589857;
    /**
     * <code>ALLIANCE_MAX_SMALL_TASK = 589858;</code>
     *
     * <pre>
     * 小任务最大值
     * </pre>
     */
    public static final int ALLIANCE_MAX_SMALL_TASK_VALUE = 589858;
    /**
     * <code>ALLIANCE_QUEST_NOT_EXIST = 589859;</code>
     *
     * <pre>
     * 小任务不存在
     * </pre>
     */
    public static final int ALLIANCE_QUEST_NOT_EXIST_VALUE = 589859;
    /**
     * <code>ALLIANCE_QUEST_FINISH = 589860;</code>
     *
     * <pre>
     * 小任务已完成
     * </pre>
     */
    public static final int ALLIANCE_QUEST_FINISH_VALUE = 589860;
    /**
     * <code>ALLIANCE_TASK_NOT_FINISH = 589861;</code>
     *
     * <pre>
     * 大任务未完成
     * </pre>
     */
    public static final int ALLIANCE_TASK_NOT_FINISH_VALUE = 589861;
    /**
     * <code>ALLIANCE_NOT_CAPTAIN = 589862;</code>
     *
     * <pre>
     * 不是队长
     * </pre>
     */
    public static final int ALLIANCE_NOT_CAPTAIN_VALUE = 589862;
    /**
     * <code>ALLIANCE_HAVE_MEMBER = 589863;</code>
     *
     * <pre>
     * 队伍中有队友
     * </pre>
     */
    public static final int ALLIANCE_HAVE_MEMBER_VALUE = 589863;
    /**
     * <code>ALLIANCE_REWARD_ALREADY_GIVE = 589864;</code>
     *
     * <pre>
     * 奖励已领取
     * </pre>
     */
    public static final int ALLIANCE_REWARD_ALREADY_GIVE_VALUE = 589864;
    /**
     * <code>ALLIANCE_MAX_COPY_MAIN = 589865;</code>
     *
     * <pre>
     * 副会长最大值
     * </pre>
     */
    public static final int ALLIANCE_MAX_COPY_MAIN_VALUE = 589865;
    /**
     * <code>ALLIANCE_APPLY_LIST_EMPTY = 589866;</code>
     *
     * <pre>
     * 申请列表为空
     * </pre>
     */
    public static final int ALLIANCE_APPLY_LIST_EMPTY_VALUE = 589866;
    /**
     * <code>ALLIANCE_BASE_HAVE_MONSTER = 589867;</code>
     *
     * <pre>
     * 基地对应位置已经派兵
     * </pre>
     */
    public static final int ALLIANCE_BASE_HAVE_MONSTER_VALUE = 589867;
    /**
     * <code>ALLIANCE_BASE_HAVE_NO_MONSTER = 589868;</code>
     *
     * <pre>
     * 基地对应位置没有派兵
     * </pre>
     */
    public static final int ALLIANCE_BASE_HAVE_NO_MONSTER_VALUE = 589868;
    /**
     * <code>ALLIANCE_BASE_POSITION_LOCK = 589869;</code>
     *
     * <pre>
     * 基地对应位置被锁定
     * </pre>
     */
    public static final int ALLIANCE_BASE_POSITION_LOCK_VALUE = 589869;
    /**
     * <code>ALLIANCE_BASE_MONSTER_HAVE_SEND = 589870;</code>
     *
     * <pre>
     * 基地宠物已派出
     * </pre>
     */
    public static final int ALLIANCE_BASE_MONSTER_HAVE_SEND_VALUE = 589870;
    /**
     * <code>ALLIANCE_BASE_TIME_LIMIT = 589871;</code>
     *
     * <pre>
     * 基地宠物最小时间限制
     * </pre>
     */
    public static final int ALLIANCE_BASE_TIME_LIMIT_VALUE = 589871;


    public final int getNumber() { return value; }

    public static allianceError valueOf(int value) {
      switch (value) {
        case 589825: return ALLIANCE_LEVEL_NOT_ENOUGH;
        case 589826: return ALLIANCE_ALREADY_IN;
        case 589827: return ALLIANCE_NOT_EXIST;
        case 589828: return ALLIANCE_NAME_ERROR;
        case 589829: return ALLIANCE_NAME_EXIST;
        case 589830: return ALLIANCE_NOT_JOIN;
        case 589831: return ALLIANCE_NO_MAIN;
        case 589832: return ALLIANCE_NOTICE_ERROR;
        case 589833: return ALLIANCE_ALREADY_APPLY;
        case 589834: return ALLIANCE_ALREADY_FULL;
        case 589835: return ALLIANCE_APPLY_NOT_EXIST;
        case 589836: return ALLIANCE_POSITION_ERROR;
        case 589837: return ALLIANCE__LEAVE_NOT_EMPTY;
        case 589838: return ALLIANCE_TARGET_NOT_JOIN;
        case 589839: return ALLIANCE_TARGET_ALREADY_JOIN;
        case 589840: return ALLIANCE_TECH_FULL;
        case 589841: return ALLIANCE_LEVEL_LIMIT;
        case 589842: return ALLIANCE_CONTRI_NOT_ENOUGH;
        case 589843: return ALLIANCE_PRAY_MAX_COUNT;
        case 589844: return ALLIANCE_FRIZEN_TIME;
        case 589845: return ALLIANCE_MAX_FAGIGUE_COUNT;
        case 589846: return ALLIANCE_FAGIGUE_GIVE_ALREADY;
        case 589847: return ALLIANCE_CAPACITY_NOT_ENOUGH;
        case 589848: return ALLIANCE_SAME_POSITION;
        case 589849: return ALLIANCE_MAX_APPLY;
        case 589850: return ALLIANCE_ALREADY_IN_TEAM;
        case 589851: return ALLIANCE_TEAM_NOT_EXIST;
        case 589852: return ALLIANCE_TEAM_FINISH;
        case 589853: return ALLIANCE_TEAM_FULL;
        case 589854: return ALLIANCE_TASK_FINISH;
        case 589855: return ALLIANCE_NOT_IN_TEAM;
        case 589856: return ALLIANCE_TASK_NOT_EXIST;
        case 589857: return ALLIANCE_MAX_BIG_TASK;
        case 589858: return ALLIANCE_MAX_SMALL_TASK;
        case 589859: return ALLIANCE_QUEST_NOT_EXIST;
        case 589860: return ALLIANCE_QUEST_FINISH;
        case 589861: return ALLIANCE_TASK_NOT_FINISH;
        case 589862: return ALLIANCE_NOT_CAPTAIN;
        case 589863: return ALLIANCE_HAVE_MEMBER;
        case 589864: return ALLIANCE_REWARD_ALREADY_GIVE;
        case 589865: return ALLIANCE_MAX_COPY_MAIN;
        case 589866: return ALLIANCE_APPLY_LIST_EMPTY;
        case 589867: return ALLIANCE_BASE_HAVE_MONSTER;
        case 589868: return ALLIANCE_BASE_HAVE_NO_MONSTER;
        case 589869: return ALLIANCE_BASE_POSITION_LOCK;
        case 589870: return ALLIANCE_BASE_MONSTER_HAVE_SEND;
        case 589871: return ALLIANCE_BASE_TIME_LIMIT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<allianceError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<allianceError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<allianceError>() {
            public allianceError findValueByNumber(int number) {
              return allianceError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(10);
    }

    private static final allianceError[] VALUES = values();

    public static allianceError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private allianceError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:allianceError)
  }

  /**
   * Protobuf enum {@code adventureError}
   */
  public enum adventureError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ADVENTURE_TEAM_COUNT = 655361;</code>
     *
     * <pre>
     * 队伍数量已达最大值
     * </pre>
     */
    ADVENTURE_TEAM_COUNT(0, 655361),
    /**
     * <code>ADVENTURE_CHANGE_ZERO = 655362;</code>
     *
     * <pre>
     * 没有刷新条件次数
     * </pre>
     */
    ADVENTURE_CHANGE_ZERO(1, 655362),
    /**
     * <code>ADVENTURE_CHANGE_NOT_ZERO = 655363;</code>
     *
     * <pre>
     * 还有刷新条件次数
     * </pre>
     */
    ADVENTURE_CHANGE_NOT_ZERO(2, 655363),
    /**
     * <code>ADVENTURE_MONSTER_COUNT = 655364;</code>
     *
     * <pre>
     * 上阵怪物数错误
     * </pre>
     */
    ADVENTURE_MONSTER_COUNT(3, 655364),
    /**
     * <code>ADVENTURE_TEAM_NOT_OPEN = 655365;</code>
     *
     * <pre>
     * 队伍未解锁
     * </pre>
     */
    ADVENTURE_TEAM_NOT_OPEN(4, 655365),
    /**
     * <code>ADVENTURE_TEAM_BUSY = 655366;</code>
     *
     * <pre>
     * 队伍已在冒险中
     * </pre>
     */
    ADVENTURE_TEAM_BUSY(5, 655366),
    /**
     * <code>ADVENTURE_TEAM_IDLE = 655367;</code>
     *
     * <pre>
     * 队伍未加入冒险
     * </pre>
     */
    ADVENTURE_TEAM_IDLE(6, 655367),
    /**
     * <code>ADVENTURE_NOT_END = 655368;</code>
     *
     * <pre>
     * 冒险未完成
     * </pre>
     */
    ADVENTURE_NOT_END(7, 655368),
    /**
     * <code>ADVENTURE_HIRE_ALREADY = 655369;</code>
     *
     * <pre>
     * 怪物今日已雇佣
     * </pre>
     */
    ADVENTURE_HIRE_ALREADY(8, 655369),
    ;

    /**
     * <code>ADVENTURE_TEAM_COUNT = 655361;</code>
     *
     * <pre>
     * 队伍数量已达最大值
     * </pre>
     */
    public static final int ADVENTURE_TEAM_COUNT_VALUE = 655361;
    /**
     * <code>ADVENTURE_CHANGE_ZERO = 655362;</code>
     *
     * <pre>
     * 没有刷新条件次数
     * </pre>
     */
    public static final int ADVENTURE_CHANGE_ZERO_VALUE = 655362;
    /**
     * <code>ADVENTURE_CHANGE_NOT_ZERO = 655363;</code>
     *
     * <pre>
     * 还有刷新条件次数
     * </pre>
     */
    public static final int ADVENTURE_CHANGE_NOT_ZERO_VALUE = 655363;
    /**
     * <code>ADVENTURE_MONSTER_COUNT = 655364;</code>
     *
     * <pre>
     * 上阵怪物数错误
     * </pre>
     */
    public static final int ADVENTURE_MONSTER_COUNT_VALUE = 655364;
    /**
     * <code>ADVENTURE_TEAM_NOT_OPEN = 655365;</code>
     *
     * <pre>
     * 队伍未解锁
     * </pre>
     */
    public static final int ADVENTURE_TEAM_NOT_OPEN_VALUE = 655365;
    /**
     * <code>ADVENTURE_TEAM_BUSY = 655366;</code>
     *
     * <pre>
     * 队伍已在冒险中
     * </pre>
     */
    public static final int ADVENTURE_TEAM_BUSY_VALUE = 655366;
    /**
     * <code>ADVENTURE_TEAM_IDLE = 655367;</code>
     *
     * <pre>
     * 队伍未加入冒险
     * </pre>
     */
    public static final int ADVENTURE_TEAM_IDLE_VALUE = 655367;
    /**
     * <code>ADVENTURE_NOT_END = 655368;</code>
     *
     * <pre>
     * 冒险未完成
     * </pre>
     */
    public static final int ADVENTURE_NOT_END_VALUE = 655368;
    /**
     * <code>ADVENTURE_HIRE_ALREADY = 655369;</code>
     *
     * <pre>
     * 怪物今日已雇佣
     * </pre>
     */
    public static final int ADVENTURE_HIRE_ALREADY_VALUE = 655369;


    public final int getNumber() { return value; }

    public static adventureError valueOf(int value) {
      switch (value) {
        case 655361: return ADVENTURE_TEAM_COUNT;
        case 655362: return ADVENTURE_CHANGE_ZERO;
        case 655363: return ADVENTURE_CHANGE_NOT_ZERO;
        case 655364: return ADVENTURE_MONSTER_COUNT;
        case 655365: return ADVENTURE_TEAM_NOT_OPEN;
        case 655366: return ADVENTURE_TEAM_BUSY;
        case 655367: return ADVENTURE_TEAM_IDLE;
        case 655368: return ADVENTURE_NOT_END;
        case 655369: return ADVENTURE_HIRE_ALREADY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<adventureError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<adventureError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<adventureError>() {
            public adventureError findValueByNumber(int number) {
              return adventureError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(11);
    }

    private static final adventureError[] VALUES = values();

    public static adventureError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private adventureError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adventureError)
  }

  /**
   * Protobuf enum {@code settingError}
   */
  public enum settingError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SETTING_BLOCK_FULL = 720897;</code>
     *
     * <pre>
     * 屏蔽列表已满
     * </pre>
     */
    SETTING_BLOCK_FULL(0, 720897),
    ;

    /**
     * <code>SETTING_BLOCK_FULL = 720897;</code>
     *
     * <pre>
     * 屏蔽列表已满
     * </pre>
     */
    public static final int SETTING_BLOCK_FULL_VALUE = 720897;


    public final int getNumber() { return value; }

    public static settingError valueOf(int value) {
      switch (value) {
        case 720897: return SETTING_BLOCK_FULL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<settingError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<settingError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<settingError>() {
            public settingError findValueByNumber(int number) {
              return settingError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(12);
    }

    private static final settingError[] VALUES = values();

    public static settingError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private settingError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:settingError)
  }

  /**
   * Protobuf enum {@code summonError}
   */
  public enum summonError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SUMMON_DIAMOND_NO_FREE = 786433;</code>
     *
     * <pre>
     * 没有免费钻石抽蛋次数
     * </pre>
     */
    SUMMON_DIAMOND_NO_FREE(0, 786433),
    /**
     * <code>SUMMON_COIN_NO_FREE = 786434;</code>
     *
     * <pre>
     * 没有免费金币抽蛋次数
     * </pre>
     */
    SUMMON_COIN_NO_FREE(1, 786434),
    /**
     * <code>SUMMON_COIN_FREE_CD = 786435;</code>
     *
     * <pre>
     * 免费金币抽蛋冷却中
     * </pre>
     */
    SUMMON_COIN_FREE_CD(2, 786435),
    ;

    /**
     * <code>SUMMON_DIAMOND_NO_FREE = 786433;</code>
     *
     * <pre>
     * 没有免费钻石抽蛋次数
     * </pre>
     */
    public static final int SUMMON_DIAMOND_NO_FREE_VALUE = 786433;
    /**
     * <code>SUMMON_COIN_NO_FREE = 786434;</code>
     *
     * <pre>
     * 没有免费金币抽蛋次数
     * </pre>
     */
    public static final int SUMMON_COIN_NO_FREE_VALUE = 786434;
    /**
     * <code>SUMMON_COIN_FREE_CD = 786435;</code>
     *
     * <pre>
     * 免费金币抽蛋冷却中
     * </pre>
     */
    public static final int SUMMON_COIN_FREE_CD_VALUE = 786435;


    public final int getNumber() { return value; }

    public static summonError valueOf(int value) {
      switch (value) {
        case 786433: return SUMMON_DIAMOND_NO_FREE;
        case 786434: return SUMMON_COIN_NO_FREE;
        case 786435: return SUMMON_COIN_FREE_CD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<summonError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<summonError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<summonError>() {
            public summonError findValueByNumber(int number) {
              return summonError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(13);
    }

    private static final summonError[] VALUES = values();

    public static summonError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private summonError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:summonError)
  }

  /**
   * Protobuf enum {@code pvpError}
   */
  public enum pvpError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PVP_NOT_MATCH_TARGET = 917505;</code>
     *
     * <pre>
     * 没有匹配到玩家
     * </pre>
     */
    PVP_NOT_MATCH_TARGET(0, 917505),
    /**
     * <code>PVP_NOT_SET_DEFENCE = 917506;</code>
     *
     * <pre>
     * 没有设置防守阵容
     * </pre>
     */
    PVP_NOT_SET_DEFENCE(1, 917506),
    /**
     * <code>PVP_NOT_MATCH_BEFORE = 917507;</code>
     *
     * <pre>
     * 没有匹配过玩家
     * </pre>
     */
    PVP_NOT_MATCH_BEFORE(2, 917507),
    /**
     * <code>PVP_TIMES_NOT_ENOUGH = 917508;</code>
     *
     * <pre>
     * pvp次数不足
     * </pre>
     */
    PVP_TIMES_NOT_ENOUGH(3, 917508),
    /**
     * <code>PVP_NOT_IN_RANK_LIST = 917509;</code>
     *
     * <pre>
     * 不在排行榜上
     * </pre>
     */
    PVP_NOT_IN_RANK_LIST(4, 917509),
    /**
     * <code>PVP_NOT_ENTER = 917510;</code>
     *
     * <pre>
     * 没有开始战斗
     * </pre>
     */
    PVP_NOT_ENTER(5, 917510),
    /**
     * <code>PVP_ENTER_BEFORE = 917511;</code>
     *
     * <pre>
     * 之前进入过房间
     * </pre>
     */
    PVP_ENTER_BEFORE(6, 917511),
    ;

    /**
     * <code>PVP_NOT_MATCH_TARGET = 917505;</code>
     *
     * <pre>
     * 没有匹配到玩家
     * </pre>
     */
    public static final int PVP_NOT_MATCH_TARGET_VALUE = 917505;
    /**
     * <code>PVP_NOT_SET_DEFENCE = 917506;</code>
     *
     * <pre>
     * 没有设置防守阵容
     * </pre>
     */
    public static final int PVP_NOT_SET_DEFENCE_VALUE = 917506;
    /**
     * <code>PVP_NOT_MATCH_BEFORE = 917507;</code>
     *
     * <pre>
     * 没有匹配过玩家
     * </pre>
     */
    public static final int PVP_NOT_MATCH_BEFORE_VALUE = 917507;
    /**
     * <code>PVP_TIMES_NOT_ENOUGH = 917508;</code>
     *
     * <pre>
     * pvp次数不足
     * </pre>
     */
    public static final int PVP_TIMES_NOT_ENOUGH_VALUE = 917508;
    /**
     * <code>PVP_NOT_IN_RANK_LIST = 917509;</code>
     *
     * <pre>
     * 不在排行榜上
     * </pre>
     */
    public static final int PVP_NOT_IN_RANK_LIST_VALUE = 917509;
    /**
     * <code>PVP_NOT_ENTER = 917510;</code>
     *
     * <pre>
     * 没有开始战斗
     * </pre>
     */
    public static final int PVP_NOT_ENTER_VALUE = 917510;
    /**
     * <code>PVP_ENTER_BEFORE = 917511;</code>
     *
     * <pre>
     * 之前进入过房间
     * </pre>
     */
    public static final int PVP_ENTER_BEFORE_VALUE = 917511;


    public final int getNumber() { return value; }

    public static pvpError valueOf(int value) {
      switch (value) {
        case 917505: return PVP_NOT_MATCH_TARGET;
        case 917506: return PVP_NOT_SET_DEFENCE;
        case 917507: return PVP_NOT_MATCH_BEFORE;
        case 917508: return PVP_TIMES_NOT_ENOUGH;
        case 917509: return PVP_NOT_IN_RANK_LIST;
        case 917510: return PVP_NOT_ENTER;
        case 917511: return PVP_ENTER_BEFORE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<pvpError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<pvpError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<pvpError>() {
            public pvpError findValueByNumber(int number) {
              return pvpError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.Status.getDescriptor().getEnumTypes().get(14);
    }

    private static final pvpError[] VALUES = values();

    public static pvpError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private pvpError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pvpError)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025Protocol/Status.proto*\257\002\n\terrorMask\022\020\n" +
      "\014NORMAL_ERROR\020\000\022\021\n\013LOGIN_ERROR\020\200\200\004\022\022\n\014PL" +
      "AYER_ERROR\020\200\200\010\022\023\n\rMONSTER_ERROR\020\200\200\014\022\020\n\nI" +
      "TEM_ERROR\020\200\200\014\022\021\n\013QUEST_ERROR\020\200\200\020\022\024\n\016INST" +
      "ANCE_ERROR\020\200\200\024\022\020\n\nMAIL_ERROR\020\200\200\030\022\024\n\016ALLI" +
      "ANCE_ERROR\020\200\200$\022\020\n\nSHOP_ERROR\020\200\200 \022\016\n\010IM_E" +
      "RROR\020\200\200$\022\023\n\rSETTING_ERROR\020\200\200,\022\025\n\017ADVENTU" +
      "RE_ERROR\020\200\200(\022\022\n\014SUMMON_ERROR\020\200\2004\022\017\n\tPVP_" +
      "ERROR\020\200\2008*\200\002\n\005error\022\016\n\nNONE_ERROR\020\000\022\020\n\014C" +
      "ONFIG_ERROR\020\001\022\024\n\020ONLINE_MAX_LIMIT\020\002\022\026\n\022R",
      "EGISTER_MAX_LIMIT\020\003\022\025\n\021SERVER_GRAY_STATE" +
      "\020\004\022\023\n\017DATA_BASE_ERROR\020\005\022\022\n\016PARAMS_INVALI" +
      "D\020\006\022\024\n\020CONFIG_NOT_FOUND\020\007\022\024\n\020UNSUPPORT_A" +
      "CTION\020\010\022\030\n\024LOGIN_INTERVAL_SHORT\020\t\022\016\n\nLOG" +
      "IN_LOCK\020\n\022\021\n\014SERVER_ERROR\020\200 *\254\004\n\013PlayerE" +
      "rror\022\026\n\020PLAYER_NOT_EXIST\020\201\200\004\022\020\n\nPUID_EXI" +
      "ST\020\202\200\004\022\024\n\016NICKNAME_EXIST\020\203\200\004\022\026\n\020NICKNAME" +
      "_INVALID\020\204\200\004\022\025\n\017COIN_NOT_ENOUGH\020\204\240\004\022\020\n\nC" +
      "OIN_LIMIT\020\205\240\004\022\025\n\017GOLD_NOT_ENOUGH\020\206\240\004\022\020\n\n" +
      "GOLD_LIMIT\020\207\240\004\022\030\n\022FATIGUE_NOT_ENOUGH\020\210\240\004",
      "\022\023\n\rFATIGUE_LIMIT\020\211\240\004\022\033\n\025TOWER_COIN_NOT_" +
      "ENOUGH\020\212\240\004\022\026\n\020TOWER_COIN_LIMIT\020\213\240\004\022\033\n\025AR" +
      "ENA_COIN_NOT_ENOUGH\020\214\240\004\022\026\n\020ARENA_COIN_LI" +
      "MIT\020\215\240\004\022\035\n\027CONTRIBUTION_NOT_ENOUGH\020\216\240\004\022\030" +
      "\n\022CONTRIBUTION_LIMIT\020\217\240\004\022\027\n\021HONOR_POINT_" +
      "LIMIT\020\220\240\004\022\034\n\026HONOR_POINT_NOT_ENOUGH\020\221\240\004\022" +
      "\024\n\016SIGNIN_ALREADY\020\201\300\004\022\024\n\016SIGNIN_NOT_YET\020" +
      "\202\300\004\022\026\n\020SIGNIN_FILL_ZERO\020\203\300\004\022\023\n\rSIGNIN_FI" +
      "NISH\020\204\300\004\022\021\n\013SIGNIN_STOP\020\205\300\004*\254\002\n\014monsterE" +
      "rror\022\026\n\020MONSTER_MAX_SIZE\020\201\200\010\022\027\n\021MONSTER_",
      "NOT_EXIST\020\202\200\010\022\034\n\026SKILL_POINT_NOT_ENOUGH\020" +
      "\203\200\010\022\027\n\021SKILL_LEVEL_LIMIT\020\204\200\010\022\021\n\013STAGE_LI" +
      "MIT\020\205\200\010\022\034\n\026STAGE_LEVEL_NOT_ENOUGH\020\206\200\010\022\023\n" +
      "\rSTAGE_CONSUME\020\207\200\010\022\032\n\024BATTLE_MONSTER_COU" +
      "NT\020\210\200\010\022\024\n\016MONSTER_LOCKED\020\211\200\010\022\022\n\014LOCK_ALR" +
      "EADY\020\212\200\010\022\024\n\016UNLOCK_ALREADY\020\213\200\010\022\022\n\014MONSTE" +
      "R_BUSY\020\214\200\010*\310\004\n\titemError\022\024\n\016ITEM_NOT_FOU" +
      "ND\020\201\200\014\022\025\n\017ITEM_NOT_ENOUGH\020\202\200\014\022\030\n\022ITEM_BU" +
      "Y_NOT_ALLOW\020\203\200\014\022\031\n\023ITEM_SELL_NOT_ALLOW\020\204" +
      "\200\014\022\031\n\023ITEM_EXP_LEFT_TIMES\020\205\200\014\022\024\n\016ITEM_US",
      "E_COUNT\020\206\200\014\022\025\n\017EQUIP_NOT_FOUND\020\201\240\014\022\035\n\027EQ" +
      "UIP_MAX_LEVEL_ALREADY\020\202\240\014\022\034\n\026EQUIP_LEVEL" +
      "_NOT_ENOUGH\020\203\240\014\022\035\n\027EQUIP_MAX_STAGE_ALREA" +
      "DY\020\204\240\014\022\031\n\023EQUIP_DRESS_ALREADY\020\205\240\014\022\033\n\025EQU" +
      "IP_NOT_DRESS_OTHER\020\206\240\014\022\037\n\031EQUIP_DRESS_OT" +
      "HER_ALREADY\020\207\240\014\022\027\n\021EQUIP_NOT_DRESSED\020\210\240\014" +
      "\022\032\n\024EQUIP_SLOT_NOT_EMPTY\020\211\240\014\022\026\n\020EQUIP_SL" +
      "OT_EMPTY\020\212\240\014\022\031\n\023EQUIP_GEM_NOT_FOUND\020\213\240\014\022" +
      "\035\n\027EQUIP_CAN_NOT_OPEN_SLOT\020\214\240\014\022\030\n\022EQUIP_" +
      "GEM_MISMATCH\020\215\240\014\022\032\n\024EQUIP_SLOT_NOT_PUNCH",
      "\020\216\240\014\022\037\n\031EQUIP_PLAYER_LEVEL_DEMAND\020\217\240\014*T\n" +
      "\nquestError\022\026\n\020QUEST_NOT_ACCEPT\020\201\200\020\022\030\n\022Q" +
      "UEST_NOT_COMPLETE\020\202\200\020\022\024\n\016QUEST_NOT_OPEN\020" +
      "\203\200\020*\214\002\n\rinstanceError\022\027\n\021INSTANCE_NOT_OP" +
      "EN\020\201\200\024\022\024\n\016INSTANCE_LEVEL\020\202\200\024\022\024\n\016INSTANCE" +
      "_COUNT\020\203\200\024\022\026\n\020INSTANCE_FATIGUE\020\204\200\024\022\033\n\025IN" +
      "STANCE_REVIVE_COUNT\020\205\200\024\022\026\n\020SWEEP_STAR_CO" +
      "UNT\020\206\200\024\022\034\n\026CHAPTER_BOX_STAR_COUNT\020\207\200\024\022\036\n" +
      "\030CHAPTER_BOX_ALREADY_OPEN\020\210\200\024\022\030\n\022INSTANC" +
      "E_NOT_ENTER\020\211\200\024\022\021\n\013TOWER_FLOOR\020\212\200\024*^\n\tma",
      "ilError\022\024\n\016MAIL_NOT_EXIST\020\201\200\030\022\017\n\tMAIL_NO" +
      "NE\020\202\200\030\022\024\n\016MAIL_COIN_FULL\020\203\200\030\022\024\n\016MAIL_GOL" +
      "D_FULL\020\204\200\030*4\n\007imError\022\024\n\016IM_CHAT_LENGTH\020" +
      "\201\200\034\022\023\n\rIM_DUMP_ERROR\020\202\200\034*\202\001\n\tshopError\022\032" +
      "\n\024SHOP_REFRESH_TIMEOUT\020\201\200 \022\033\n\025SHOP_ITEM_" +
      "ALREADY_BUY\020\202\200 \022\034\n\026SHOP_REFRESH_MAX_COUN" +
      "T\020\203\200 \022\036\n\030SHOP_GOLD2COIN_MAX_COUNT\020\204\200 *\257\013" +
      "\n\rallianceError\022\037\n\031ALLIANCE_LEVEL_NOT_EN" +
      "OUGH\020\201\200$\022\031\n\023ALLIANCE_ALREADY_IN\020\202\200$\022\030\n\022A" +
      "LLIANCE_NOT_EXIST\020\203\200$\022\031\n\023ALLIANCE_NAME_E",
      "RROR\020\204\200$\022\031\n\023ALLIANCE_NAME_EXIST\020\205\200$\022\027\n\021A" +
      "LLIANCE_NOT_JOIN\020\206\200$\022\026\n\020ALLIANCE_NO_MAIN" +
      "\020\207\200$\022\033\n\025ALLIANCE_NOTICE_ERROR\020\210\200$\022\034\n\026ALL" +
      "IANCE_ALREADY_APPLY\020\211\200$\022\033\n\025ALLIANCE_ALRE" +
      "ADY_FULL\020\212\200$\022\036\n\030ALLIANCE_APPLY_NOT_EXIST" +
      "\020\213\200$\022\035\n\027ALLIANCE_POSITION_ERROR\020\214\200$\022\037\n\031A" +
      "LLIANCE__LEAVE_NOT_EMPTY\020\215\200$\022\036\n\030ALLIANCE" +
      "_TARGET_NOT_JOIN\020\216\200$\022\"\n\034ALLIANCE_TARGET_" +
      "ALREADY_JOIN\020\217\200$\022\030\n\022ALLIANCE_TECH_FULL\020\220" +
      "\200$\022\032\n\024ALLIANCE_LEVEL_LIMIT\020\221\200$\022 \n\032ALLIAN",
      "CE_CONTRI_NOT_ENOUGH\020\222\200$\022\035\n\027ALLIANCE_PRA" +
      "Y_MAX_COUNT\020\223\200$\022\032\n\024ALLIANCE_FRIZEN_TIME\020" +
      "\224\200$\022 \n\032ALLIANCE_MAX_FAGIGUE_COUNT\020\225\200$\022#\n" +
      "\035ALLIANCE_FAGIGUE_GIVE_ALREADY\020\226\200$\022\"\n\034AL" +
      "LIANCE_CAPACITY_NOT_ENOUGH\020\227\200$\022\034\n\026ALLIAN" +
      "CE_SAME_POSITION\020\230\200$\022\030\n\022ALLIANCE_MAX_APP" +
      "LY\020\231\200$\022\036\n\030ALLIANCE_ALREADY_IN_TEAM\020\232\200$\022\035" +
      "\n\027ALLIANCE_TEAM_NOT_EXIST\020\233\200$\022\032\n\024ALLIANC" +
      "E_TEAM_FINISH\020\234\200$\022\030\n\022ALLIANCE_TEAM_FULL\020" +
      "\235\200$\022\032\n\024ALLIANCE_TASK_FINISH\020\236\200$\022\032\n\024ALLIA",
      "NCE_NOT_IN_TEAM\020\237\200$\022\035\n\027ALLIANCE_TASK_NOT" +
      "_EXIST\020\240\200$\022\033\n\025ALLIANCE_MAX_BIG_TASK\020\241\200$\022" +
      "\035\n\027ALLIANCE_MAX_SMALL_TASK\020\242\200$\022\036\n\030ALLIAN" +
      "CE_QUEST_NOT_EXIST\020\243\200$\022\033\n\025ALLIANCE_QUEST" +
      "_FINISH\020\244\200$\022\036\n\030ALLIANCE_TASK_NOT_FINISH\020" +
      "\245\200$\022\032\n\024ALLIANCE_NOT_CAPTAIN\020\246\200$\022\032\n\024ALLIA" +
      "NCE_HAVE_MEMBER\020\247\200$\022\"\n\034ALLIANCE_REWARD_A" +
      "LREADY_GIVE\020\250\200$\022\034\n\026ALLIANCE_MAX_COPY_MAI" +
      "N\020\251\200$\022\037\n\031ALLIANCE_APPLY_LIST_EMPTY\020\252\200$\022 " +
      "\n\032ALLIANCE_BASE_HAVE_MONSTER\020\253\200$\022#\n\035ALLI",
      "ANCE_BASE_HAVE_NO_MONSTER\020\254\200$\022!\n\033ALLIANC" +
      "E_BASE_POSITION_LOCK\020\255\200$\022%\n\037ALLIANCE_BAS" +
      "E_MONSTER_HAVE_SEND\020\256\200$\022\036\n\030ALLIANCE_BASE" +
      "_TIME_LIMIT\020\257\200$*\225\002\n\016adventureError\022\032\n\024AD" +
      "VENTURE_TEAM_COUNT\020\201\200(\022\033\n\025ADVENTURE_CHAN" +
      "GE_ZERO\020\202\200(\022\037\n\031ADVENTURE_CHANGE_NOT_ZERO" +
      "\020\203\200(\022\035\n\027ADVENTURE_MONSTER_COUNT\020\204\200(\022\035\n\027A" +
      "DVENTURE_TEAM_NOT_OPEN\020\205\200(\022\031\n\023ADVENTURE_" +
      "TEAM_BUSY\020\206\200(\022\031\n\023ADVENTURE_TEAM_IDLE\020\207\200(" +
      "\022\027\n\021ADVENTURE_NOT_END\020\210\200(\022\034\n\026ADVENTURE_H",
      "IRE_ALREADY\020\211\200(*(\n\014settingError\022\030\n\022SETTI" +
      "NG_BLOCK_FULL\020\201\200,*a\n\013summonError\022\034\n\026SUMM" +
      "ON_DIAMOND_NO_FREE\020\201\2000\022\031\n\023SUMMON_COIN_NO" +
      "_FREE\020\202\2000\022\031\n\023SUMMON_COIN_FREE_CD\020\203\2000*\302\001\n" +
      "\010pvpError\022\032\n\024PVP_NOT_MATCH_TARGET\020\201\2008\022\031\n" +
      "\023PVP_NOT_SET_DEFENCE\020\202\2008\022\032\n\024PVP_NOT_MATC" +
      "H_BEFORE\020\203\2008\022\032\n\024PVP_TIMES_NOT_ENOUGH\020\204\2008" +
      "\022\032\n\024PVP_NOT_IN_RANK_LIST\020\205\2008\022\023\n\rPVP_NOT_" +
      "ENTER\020\206\2008\022\026\n\020PVP_ENTER_BEFORE\020\207\2008B\030\n\026com" +
      ".hawk.game.protocol"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
