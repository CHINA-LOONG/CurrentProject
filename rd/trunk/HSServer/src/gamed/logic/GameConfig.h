//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : GameConfig.h
//  @ Date : 2011/5/18
//  @ Author : 
//
//


#if !defined(_GAMECONFIG_H)
#define _GAMECONFIG_H
#include "GameConfig.pb.h"
#include <string>
#include "common/const_def.h"

class GameConfig
{
public:
    GameConfig();
    virtual ~GameConfig();

    static GameConfig*	CreateInstance(void );
    static void			ReleaseInstance(void );
    static GameConfig*	GetInstance(void );
    bool				LoadInfo(void );
    CFG_GameConfig*		GetInfo(int nID);
    int					GetTotalCnt(void );
    bool				LoadVersion(void);
    bool                LoadWebPath();
    bool                LoadTimerConfig();
    //group buying
    int					GetCashierPathLength(void);
    int					GetLoseBagItemPer(void);
    int					GetLoseBagMoneyPer(void);
    int					GetMaxBuyPer(void);
    int					GetMinBuyPer(void);
    int					GetMaxGroupBuyingTime(void);
    int					GetMinGroupBuyingTime(void);
    float				GetEveryUnitSpeed(void);
    int					GetMaxGuestCntEveryTimes(void);
    int					GetMaxGroupBuyingTimes(void);
    int					GetGuestIncreaseTimeTick(void);
    int                 GetGuestIncreaseTimeReduse(void);
    int					GetCostMoneyTakeAwayGuest(void);
    int					GetFriendsTakeGuestAwayMinCnt(void);
    bool                GetEnabledCheckedFlag(void);
    bool                GetEnableSpecailGuest(void);
    float				GetPublicPraisePer(void);
    //employee
    int					GetEmployeeTiLiMax(void);
    int					GetCostMoneyAddEmployee(void);
    //public praise
    int					GetPublicPraiseOrigon(void);
    int					GetPublicPraiseMax(void);
    int					GetPublicPraiseMin(void);
    //fresh man
    int                 GetMaxFreshManStep(void);
    bool                GetEnabledFreshManFlag(void);
    int                 GetNewInitUserGold();
    int                 GetMaxFreshManStepInLevel2();
    //item
    int					GetGarbageProduceTime(void);
    int					GetGarbageProduceMax(void);
    int					GetGarbageRemoveMoney(void);

    //hire friend
    int                 GetHireFriendCost();
    int                 GetBeHiredReward();

    //fluent price
    int					GetEnableSysytemFluentPrice(void);

    //everyday award
    int					GetEverydayAwardEnableFlag(void);

    int                 GetHistoryGusetIncreaseTime();
    int                 GetHistoryGuestMax();

    int                 GetMaxPickGuestPerDay();
    int                 GetMaxWaterPerDay();
    int                 GetTreasureBoxHelpReward();
    bool                EnableGuestBox();
    //christmas day
    ActivetyConfig*		GetChristmasActivetyInfo();
    ActivetyConfig*		GetFreshBossActivetyInfo();
    ActivetyConfig*		GetTreeActivetyInfo();
    ActivetyConfig*		GetBallActivetyInfo();
    ActivetyConfig*		GetADActivetyInfo();
    //free user
    int					GetFreeUpdateTime();
    int					GetEnableFreeFlag();
    int					GetMaxUserCnt();
    int					GetMaxNoUseTime();
    int					GetMaxFreeCnt();
    int					GetEnableUserFreeStatFlag();
    //friend cache
    int					GetMaxFriendCacheCnt();
    //guestspeed
    int					GetMaxGuestSpeed();
    bool                EnableFriendInfoServer();
    bool				EnableFriendInfoServerThread();
    //guest time check
    int					GetGuestTimeCheckFlag();
    int                 GetFriendInviteVersion();
    //cdkey
    int					GetCDKeyWorldID();
    int					GetCDKeyEnableFlag();
    //data to qq
    int					GetDataToQQEnableFlag();
    int					GetSafeDataToQQMax();
    //netcache
    int					GetNetCacheEnableFlag();
    //game version
    std::string			GetGameVersion();

    bool                GetAlarmFlag();
    bool                GetAlarmDebugFlag();
    std::string&        GetAlarmIp();

    int					GetDuanWuGuestNum();
    int					GetFortuneCostDay();
    int					GetFortuneStealNum();
    int					GetFortuneCostRate();

    int					GetReturnGiftId_1();
    int					GetReturnGiftId_2();
    int					GetReturnGiftId_3();

    int					GetReturnGiftYId_1();
    int					GetReturnGiftYId_2();

    int					GetRankWorldId();
    int					GetMinClearSecond();
    //mem cache
    bool				GetEnableMemCache();
    int					GetMemCacheUpdateTime();
    int					GetMemCacheFreeCnt();
    int					GetMemCacheSaveInterval();
    int					GetMemCacheSaveUpdateTime();
    int					GetMemCacheRemoveTime();

	//
	int					GetJieRiIndex();
	int					GetJieRiItemId();
	int					GetJieRiExchangeItemId_1();
	int					GetJieRiExchangeItemId_2();
	int					GetJieRiExchangeItemId_3();
	int					GetJieRiExchangeItemId_4();
	int					GetJieRiExchangeItemNum_1();
	int					GetJieRiExchangeItemNum_2();
	int					GetJieRiExchangeItemNum_3();
	int					GetJieRiExchangeItemNum_4();
	int					GetJieRiGuestIdBegin();
	int					GetJieRiGuestIdEnd();
	int					GetJieRiCachierId();
	int					GetJieRiCachierTableId();
	
    //
    int	GetFsgItemId_1();
    int	GetFsgPacketMe_1();
    int	GetFsgPacketFriend_1();
    int	GetFsgItemId_2();
    int	GetFsgPacketMe_2();
    int	GetFsgPacketFriend_2();

    bool                GetSendGuestOnAuth();
    bool                GetSendKickOnAuth();
    bool                GetSendKickOnWebLogin();
    bool                GetSendNoConnectOnInit();
    int64               GetTokenRefalshTime();
    std::string&        GetFuncAccString();

    bool				GetWapEnable();
	int					GetWapInterval();

    int                 GetSaveInterval();
    bool                LoadNotice();
    bool                SaveNotice(int nNoticeNumber, const std::string& dat, const std::string& msg);

	bool				GetCupResetEnableFlag();
private:
    CFG_GameConfig		m_GameConfig;
    int                 m_nInitGold;
    int                 m_nGuestIncreaseTimeReduse;
    int                 m_nHireFriendCost;
    int                 m_nHireFriendSystemRatePer;
    int                 m_nFlashManStepInLv2;
    int                 m_nHistoryGuestIncreaseTime;
    int                 m_nHistoryGuestMax;
    int                 m_nMaxPickGuestPerDay;
    int                 m_nMaxWaterPerDay;
    int                 m_nTreasureBoxHelpReward;
    int                 m_nInviteVersion;
    bool                m_bGuestBoxEnable;
    bool                m_bFriendInfoServerEnable;
    bool				m_bFriendInfoServerEnableThread;
    bool                m_bAlarmEnable;
    bool                m_bAlarmDebugEnable;
    bool				m_bMemCacheEnable;
    int					m_nMemCacheUpdateTime;
    int					m_nMemCacheFreeCnt;
    int					m_nMemCacheSaveInterval;
    int					m_nMemCacheSaveUpdateTime;
    int					m_nMemCacheRemoveTime;
    std::string         m_czAlarmServerAddr;
    std::string			m_GameVersion;
    static GameConfig *_sMgr;
    static const char *szConfigFile;

    int					m_nRankWorldId;
    int					m_nMinClearSecond;

    int					m_fsg_itemId_1;
    int					m_fsg_packetMe_1;
    int					m_fsg_packetFriend_1;
    int					m_fsg_itemId_2;
    int					m_fsg_packetMe_2;
    int					m_fsg_packetFriend_2;

    int					m_nDuanWuGuestNum;
    int					m_nFortuneCostDay;
    int					m_nFortuneStealNum;
    int					m_nFortuneCostRate;
    
    int					m_jieRiIndex;
    int					m_jieRiItemId;
    int					m_jieRiExchangeItemId_1;
    int					m_jieRiExchangeItemId_2;
    int					m_jieRiExchangeItemId_3;
    int					m_jieRiExchangeItemId_4;
	int					m_jieRiExchangeItemNum_1;
	int					m_jieRiExchangeItemNum_2;
	int					m_jieRiExchangeItemNum_3;
	int					m_jieRiExchangeItemNum_4;
    int					m_jieRiGuestIdBegin;
    int					m_jieRiGuestIdEnd;
    int					m_jieRiCachierId;
    int					m_jieRiCachierTableId;

    int					m_nReturnGiftId_1;
    int					m_nReturnGiftId_2;
    int					m_nReturnGiftId_3;

    int					m_nReturnGiftYId_1;
    int					m_nReturnGiftYId_2;

    bool                m_bReconnectSendNoConnectOnInit;
    bool                m_bReconnectSendKickOnAuth;
    bool                m_bReconnectSendGuestOnAuth;
    int64               m_llTokenRefalshTime;
    bool                m_bReconnectSendKickOnWebLogin;

    int                 m_nSaveIntervalMinute;
	int					m_nCupResetEnableFlag;
public:
    std::string         m_czFuncAdd;
public:
    typedef std::map<std::string, std::string> StringPair;
    int                 m_nYellowDmdDallyTaskVersion;
    std::map<int, std::string> m_xHotCacheIpList;
    std::map<int, int>  m_xHotCachePortList;
    StringPair          m_xWebPath;
    bool                m_bHotCacheEnableWrite;
    bool                m_bHotCacheEnableLoad;
    int					m_nWapEnable;
	int					m_nWapInterval;
    bool                m_bShelfGemAllOpenAtLevel10;

    int                 m_nMaxKeepOnlineGiftCnt;
    std::string         m_czLocation;
    bool                m_bSendEmptyAlarmOnLogin;
    int                 m_nAlarmBusAdd;
    int                 m_nAlarmGuestAdd;
    int                 m_nAlarmQueueMax;
    int                 m_nFactoryLoadRandom;
    int                 m_nFactoryMaxType;
    int                 m_nFactorySaveSpan;
    int                 m_nFactoryRoomMaxPlayer;
    int                 m_nFactoryRoomFistNotEmpty;

    int                 m_nFactoryRoomSitCost1;
    int                 m_nFactoryRoomSitCost2;
    int                 m_nFactoryRoomSitCost3;
    int                 m_nFactoryGoodCostRate1;
    int                 m_nFactoryGoodCostRate2;
    int                 m_nFactoryGoodCostRate3;
    int                 m_nFactoryItemDropTime1;
    int                 m_nFactoryItemDropTime2;
    int                 m_nFactoryItemDropTime3;
    int                 m_nFactoryDallyFinishTime;
    int                 m_nFactoryItemHavRate;
    bool                m_bFactoryFriendLimit;
    int                 m_nFactoryLibTime;
    bool                m_bFactoryFakeReward;
    bool                m_bFactoryFakeLostFound;
    int                 m_nNoticeNum;
    std::string         m_strNoticeMsg;
    std::string         m_strNoticeDate;

    bool               m_bTimerFactoryAutoReward;
} ;

#endif  //_GAMECONFIG_H
