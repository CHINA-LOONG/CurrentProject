// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbinterface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dbinterface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DB_BitCache_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BitCache_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeLimitedUidSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeLimitedUidSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryLimited_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryLimited_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_MaxSizedUidList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_MaxSizedUidList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_ExpLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_ExpLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_DailyCounter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_DailyCounter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_VersionCounter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_VersionCounter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_KingOfStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_KingOfStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_ItemOnMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_ItemOnMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Map_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_TaskList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_TaskList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_TaskStateList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_TaskStateList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BanChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BanChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_BanLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_BanLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Bag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Bag_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_ActionRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_ActionRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_FakeFriendActionSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_FakeFriendActionSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_FreindFirstVist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_FreindFirstVist_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Option_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Option_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WebBuyDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WebBuyDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_WebBuyRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_WebBuyRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_LimitRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_LimitRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Limit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Limit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_StepWithTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_StepWithTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_NewFunc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_NewFunc_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_CDKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_CDKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Weibo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Weibo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_CallBackCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_CallBackCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_CallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_CallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_FuncSwitch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_FuncSwitch_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_FriendGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_FriendGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Universe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Universe_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_DallyUniverse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_DallyUniverse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_DallyLogInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_DallyLogInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_DallyUniverseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_DallyUniverseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_LivesInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_LivesInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_UniverseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_UniverseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_StrKeyProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_StrKeyProperties_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_CandyProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_CandyProperties_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Singed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Singed_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Yelldmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Yelldmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_SignHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_SignHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_EasyTimeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_EasyTimeSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_ContinuousDays_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_ContinuousDays_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_DragboatFvl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_DragboatFvl_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_ActiveInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_ActiveInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_ActiveInviteself_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_ActiveInviteself_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_ActiveCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_ActiveCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_User_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dbinterface_2eproto() {
  protobuf_AddDesc_dbinterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dbinterface.proto");
  GOOGLE_CHECK(file != NULL);
  DB_BitCache_descriptor_ = file->message_type(0);
  static const int DB_BitCache_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BitCache, bit_),
  };
  DB_BitCache_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_BitCache_descriptor_,
      DB_BitCache::default_instance_,
      DB_BitCache_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BitCache, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_BitCache), 
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BitCache, _internal_metadata_),
      -1);
  TimeLimitedUidSet_descriptor_ = file->message_type(1);
  static const int TimeLimitedUidSet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitedUidSet, uids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitedUidSet, checttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitedUidSet, uid_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitedUidSet, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitedUidSet, head_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitedUidSet, openids_),
  };
  TimeLimitedUidSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeLimitedUidSet_descriptor_,
      TimeLimitedUidSet::default_instance_,
      TimeLimitedUidSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitedUidSet, _has_bits_[0]),
      -1,
      -1,
      sizeof(TimeLimitedUidSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitedUidSet, _internal_metadata_),
      -1);
  LotteryLimited_descriptor_ = file->message_type(2);
  static const int LotteryLimited_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryLimited, pvecounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryLimited, daytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryLimited, secondtime_),
  };
  LotteryLimited_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LotteryLimited_descriptor_,
      LotteryLimited::default_instance_,
      LotteryLimited_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryLimited, _has_bits_[0]),
      -1,
      -1,
      sizeof(LotteryLimited),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryLimited, _internal_metadata_),
      -1);
  DB_MaxSizedUidList_descriptor_ = file->message_type(3);
  static const int DB_MaxSizedUidList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MaxSizedUidList, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MaxSizedUidList, pos_),
  };
  DB_MaxSizedUidList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_MaxSizedUidList_descriptor_,
      DB_MaxSizedUidList::default_instance_,
      DB_MaxSizedUidList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MaxSizedUidList, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_MaxSizedUidList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MaxSizedUidList, _internal_metadata_),
      -1);
  DB_ExpLevel_descriptor_ = file->message_type(4);
  static const int DB_ExpLevel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ExpLevel, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ExpLevel, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ExpLevel, exp_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ExpLevel, exp_next_),
  };
  DB_ExpLevel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_ExpLevel_descriptor_,
      DB_ExpLevel::default_instance_,
      DB_ExpLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ExpLevel, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_ExpLevel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ExpLevel, _internal_metadata_),
      -1);
  DB_DailyCounter_descriptor_ = file->message_type(5);
  static const int DB_DailyCounter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DailyCounter, num_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DailyCounter, name_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DailyCounter, day_),
  };
  DB_DailyCounter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_DailyCounter_descriptor_,
      DB_DailyCounter::default_instance_,
      DB_DailyCounter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DailyCounter, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_DailyCounter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DailyCounter, _internal_metadata_),
      -1);
  DB_VersionCounter_descriptor_ = file->message_type(6);
  static const int DB_VersionCounter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_VersionCounter, num_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_VersionCounter, name_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_VersionCounter, ver_set_),
  };
  DB_VersionCounter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_VersionCounter_descriptor_,
      DB_VersionCounter::default_instance_,
      DB_VersionCounter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_VersionCounter, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_VersionCounter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_VersionCounter, _internal_metadata_),
      -1);
  DB_KingOfStar_descriptor_ = file->message_type(7);
  static const int DB_KingOfStar_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_KingOfStar, total_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_KingOfStar, star_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_KingOfStar, score_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_KingOfStar, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_KingOfStar, now_playing_),
  };
  DB_KingOfStar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_KingOfStar_descriptor_,
      DB_KingOfStar::default_instance_,
      DB_KingOfStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_KingOfStar, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_KingOfStar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_KingOfStar, _internal_metadata_),
      -1);
  DB_ItemOnMap_descriptor_ = file->message_type(8);
  static const int DB_ItemOnMap_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ItemOnMap, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ItemOnMap, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ItemOnMap, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ItemOnMap, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ItemOnMap, direction_),
  };
  DB_ItemOnMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_ItemOnMap_descriptor_,
      DB_ItemOnMap::default_instance_,
      DB_ItemOnMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ItemOnMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_ItemOnMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ItemOnMap, _internal_metadata_),
      -1);
  DB_Map_descriptor_ = file->message_type(9);
  static const int DB_Map_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Map, groundlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Map, walllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Map, alloc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Map, back_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Map, wall_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Map, floor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Map, reward_time_),
  };
  DB_Map_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_Map_descriptor_,
      DB_Map::default_instance_,
      DB_Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Map, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_Map),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Map, _internal_metadata_),
      -1);
  DB_Task_descriptor_ = file->message_type(10);
  static const int DB_Task_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Task, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Task, taskstep_),
  };
  DB_Task_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_Task_descriptor_,
      DB_Task::default_instance_,
      DB_Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Task, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_Task),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Task, _internal_metadata_),
      -1);
  DB_TaskList_descriptor_ = file->message_type(11);
  static const int DB_TaskList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TaskList, task_),
  };
  DB_TaskList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_TaskList_descriptor_,
      DB_TaskList::default_instance_,
      DB_TaskList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TaskList, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_TaskList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TaskList, _internal_metadata_),
      -1);
  DB_TaskStateList_descriptor_ = file->message_type(12);
  static const int DB_TaskStateList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TaskStateList, taskstate_),
  };
  DB_TaskStateList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_TaskStateList_descriptor_,
      DB_TaskStateList::default_instance_,
      DB_TaskStateList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TaskStateList, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_TaskStateList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_TaskStateList, _internal_metadata_),
      -1);
  DB_BanChat_descriptor_ = file->message_type(13);
  static const int DB_BanChat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanChat, banchat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanChat, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanChat, totaltime_),
  };
  DB_BanChat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_BanChat_descriptor_,
      DB_BanChat::default_instance_,
      DB_BanChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanChat, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_BanChat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanChat, _internal_metadata_),
      -1);
  DB_BanLogin_descriptor_ = file->message_type(14);
  static const int DB_BanLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanLogin, banlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanLogin, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanLogin, totaltime_),
  };
  DB_BanLogin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_BanLogin_descriptor_,
      DB_BanLogin::default_instance_,
      DB_BanLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanLogin, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_BanLogin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_BanLogin, _internal_metadata_),
      -1);
  DB_Item_descriptor_ = file->message_type(15);
  static const int DB_Item_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, unlockvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, unlocksended_),
  };
  DB_Item_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_Item_descriptor_,
      DB_Item::default_instance_,
      DB_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_Item),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Item, _internal_metadata_),
      -1);
  DB_Bag_descriptor_ = file->message_type(16);
  static const int DB_Bag_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, maxspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, cash_),
  };
  DB_Bag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_Bag_descriptor_,
      DB_Bag::default_instance_,
      DB_Bag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_Bag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Bag, _internal_metadata_),
      -1);
  DB_ActionRecord_descriptor_ = file->message_type(17);
  static const int DB_ActionRecord_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, item_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, dealed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, head_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, guest_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, value_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, value_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, time_sec_),
  };
  DB_ActionRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_ActionRecord_descriptor_,
      DB_ActionRecord::default_instance_,
      DB_ActionRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_ActionRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActionRecord, _internal_metadata_),
      -1);
  DB_FakeFriendActionSet_descriptor_ = file->message_type(18);
  static const int DB_FakeFriendActionSet_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FakeFriendActionSet, fake_action_uids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FakeFriendActionSet, fake_action_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FakeFriendActionSet, fack_action_totle_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FakeFriendActionSet, last_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FakeFriendActionSet, fake_action_picked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FakeFriendActionSet, fake_reward_guest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FakeFriendActionSet, fake_reward_gold_),
  };
  DB_FakeFriendActionSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_FakeFriendActionSet_descriptor_,
      DB_FakeFriendActionSet::default_instance_,
      DB_FakeFriendActionSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FakeFriendActionSet, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_FakeFriendActionSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FakeFriendActionSet, _internal_metadata_),
      -1);
  DB_FreindFirstVist_descriptor_ = file->message_type(19);
  static const int DB_FreindFirstVist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FreindFirstVist, uids_),
  };
  DB_FreindFirstVist_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_FreindFirstVist_descriptor_,
      DB_FreindFirstVist::default_instance_,
      DB_FreindFirstVist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FreindFirstVist, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_FreindFirstVist),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FreindFirstVist, _internal_metadata_),
      -1);
  DB_Option_descriptor_ = file->message_type(20);
  static const int DB_Option_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Option, high_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Option, music_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Option, sound_),
  };
  DB_Option_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_Option_descriptor_,
      DB_Option::default_instance_,
      DB_Option_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Option, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_Option),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Option, _internal_metadata_),
      -1);
  DB_WebBuyDetail_descriptor_ = file->message_type(21);
  static const int DB_WebBuyDetail_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyDetail, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyDetail, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyDetail, indate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyDetail, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyDetail, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyDetail, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyDetail, direction_),
  };
  DB_WebBuyDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_WebBuyDetail_descriptor_,
      DB_WebBuyDetail::default_instance_,
      DB_WebBuyDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyDetail, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_WebBuyDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyDetail, _internal_metadata_),
      -1);
  DB_WebBuyRecord_descriptor_ = file->message_type(22);
  static const int DB_WebBuyRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyRecord, details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyRecord, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyRecord, time_),
  };
  DB_WebBuyRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_WebBuyRecord_descriptor_,
      DB_WebBuyRecord::default_instance_,
      DB_WebBuyRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyRecord, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_WebBuyRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_WebBuyRecord, _internal_metadata_),
      -1);
  DB_LimitRecord_descriptor_ = file->message_type(23);
  static const int DB_LimitRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LimitRecord, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LimitRecord, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LimitRecord, limittype_),
  };
  DB_LimitRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_LimitRecord_descriptor_,
      DB_LimitRecord::default_instance_,
      DB_LimitRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LimitRecord, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_LimitRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LimitRecord, _internal_metadata_),
      -1);
  DB_Limit_descriptor_ = file->message_type(24);
  static const int DB_Limit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Limit, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Limit, items_),
  };
  DB_Limit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_Limit_descriptor_,
      DB_Limit::default_instance_,
      DB_Limit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Limit, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_Limit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Limit, _internal_metadata_),
      -1);
  DB_StepWithTime_descriptor_ = file->message_type(25);
  static const int DB_StepWithTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StepWithTime, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StepWithTime, update_),
  };
  DB_StepWithTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_StepWithTime_descriptor_,
      DB_StepWithTime::default_instance_,
      DB_StepWithTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StepWithTime, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_StepWithTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StepWithTime, _internal_metadata_),
      -1);
  DB_NewFunc_descriptor_ = file->message_type(26);
  static const int DB_NewFunc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NewFunc, system_info_),
  };
  DB_NewFunc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_NewFunc_descriptor_,
      DB_NewFunc::default_instance_,
      DB_NewFunc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NewFunc, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_NewFunc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_NewFunc, _internal_metadata_),
      -1);
  DB_CDKey_descriptor_ = file->message_type(27);
  static const int DB_CDKey_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CDKey, cd_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CDKey, used_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CDKey, active_id_),
  };
  DB_CDKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_CDKey_descriptor_,
      DB_CDKey::default_instance_,
      DB_CDKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CDKey, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_CDKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CDKey, _internal_metadata_),
      -1);
  DB_Weibo_descriptor_ = file->message_type(28);
  static const int DB_Weibo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Weibo, listened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Weibo, listened_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Weibo, forwarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Weibo, forwarded_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Weibo, qzone_followed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Weibo, qzone_day_),
  };
  DB_Weibo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_Weibo_descriptor_,
      DB_Weibo::default_instance_,
      DB_Weibo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Weibo, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_Weibo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Weibo, _internal_metadata_),
      -1);
  DB_CallBackCell_descriptor_ = file->message_type(29);
  static const int DB_CallBackCell_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBackCell, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBackCell, openid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBackCell, name_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBackCell, url_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBackCell, rewarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBackCell, totallevel_),
  };
  DB_CallBackCell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_CallBackCell_descriptor_,
      DB_CallBackCell::default_instance_,
      DB_CallBackCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBackCell, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_CallBackCell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBackCell, _internal_metadata_),
      -1);
  DB_CallBack_descriptor_ = file->message_type(30);
  static const int DB_CallBack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBack, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBack, cbcell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBack, cell_update_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBack, callback_sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBack, reward_cnt_as_taker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBack, cache_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBack, send_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBack, cell_build_day_),
  };
  DB_CallBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_CallBack_descriptor_,
      DB_CallBack::default_instance_,
      DB_CallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBack, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_CallBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CallBack, _internal_metadata_),
      -1);
  DB_FuncSwitch_descriptor_ = file->message_type(31);
  static const int DB_FuncSwitch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FuncSwitch, time_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FuncSwitch, time_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FuncSwitch, daytimes_),
  };
  DB_FuncSwitch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_FuncSwitch_descriptor_,
      DB_FuncSwitch::default_instance_,
      DB_FuncSwitch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FuncSwitch, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_FuncSwitch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FuncSwitch, _internal_metadata_),
      -1);
  DB_FriendGift_descriptor_ = file->message_type(32);
  static const int DB_FriendGift_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FriendGift, friend_action_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FriendGift, friend_actions_allread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FriendGift, friend_action_unread_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FriendGift, friend_actions_),
  };
  DB_FriendGift_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_FriendGift_descriptor_,
      DB_FriendGift::default_instance_,
      DB_FriendGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FriendGift, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_FriendGift),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FriendGift, _internal_metadata_),
      -1);
  DB_Universe_descriptor_ = file->message_type(33);
  static const int DB_Universe_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, unlocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, json_unlockconditiondatalist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, failed_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, first_unlock_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, top_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, first_pass_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, value_kos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, stars_kos_),
  };
  DB_Universe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_Universe_descriptor_,
      DB_Universe::default_instance_,
      DB_Universe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_Universe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Universe, _internal_metadata_),
      -1);
  DB_DallyUniverse_descriptor_ = file->message_type(34);
  static const int DB_DallyUniverse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverse, uni_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverse, played_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverse, succ_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverse, unlocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverse, pay_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverse, pay_open_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverse, pay_cash_),
  };
  DB_DallyUniverse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_DallyUniverse_descriptor_,
      DB_DallyUniverse::default_instance_,
      DB_DallyUniverse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverse, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_DallyUniverse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverse, _internal_metadata_),
      -1);
  DB_DallyLogInfo_descriptor_ = file->message_type(35);
  static const int DB_DallyLogInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyLogInfo, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyLogInfo, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyLogInfo, unlocked_cnt_),
  };
  DB_DallyLogInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_DallyLogInfo_descriptor_,
      DB_DallyLogInfo::default_instance_,
      DB_DallyLogInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyLogInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_DallyLogInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyLogInfo, _internal_metadata_),
      -1);
  DB_DallyUniverseInfo_descriptor_ = file->message_type(36);
  static const int DB_DallyUniverseInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverseInfo, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverseInfo, uniset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverseInfo, totalsocre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverseInfo, rewardpicked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverseInfo, historylogs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverseInfo, cheat_bit_),
  };
  DB_DallyUniverseInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_DallyUniverseInfo_descriptor_,
      DB_DallyUniverseInfo::default_instance_,
      DB_DallyUniverseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverseInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_DallyUniverseInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DallyUniverseInfo, _internal_metadata_),
      -1);
  DB_LivesInfo_descriptor_ = file->message_type(37);
  static const int DB_LivesInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LivesInfo, lives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LivesInfo, last_cost_time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LivesInfo, lives_max_),
  };
  DB_LivesInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_LivesInfo_descriptor_,
      DB_LivesInfo::default_instance_,
      DB_LivesInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LivesInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_LivesInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LivesInfo, _internal_metadata_),
      -1);
  DB_UniverseInfo_descriptor_ = file->message_type(38);
  static const int DB_UniverseInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, total_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, top_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, lvl_start_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, universe_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, now_total_levl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, checkval_first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, checkval_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, passval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, lvlstockeditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, egg_logic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, mobile_submit_socres_),
  };
  DB_UniverseInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_UniverseInfo_descriptor_,
      DB_UniverseInfo::default_instance_,
      DB_UniverseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_UniverseInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_UniverseInfo, _internal_metadata_),
      -1);
  DB_StrKeyProperties_descriptor_ = file->message_type(39);
  static const int DB_StrKeyProperties_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StrKeyProperties, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StrKeyProperties, bool_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StrKeyProperties, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StrKeyProperties, str_value_),
  };
  DB_StrKeyProperties_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_StrKeyProperties_descriptor_,
      DB_StrKeyProperties::default_instance_,
      DB_StrKeyProperties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StrKeyProperties, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_StrKeyProperties),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_StrKeyProperties, _internal_metadata_),
      -1);
  DB_CandyProperties_descriptor_ = file->message_type(40);
  static const int DB_CandyProperties_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CandyProperties, atts_),
  };
  DB_CandyProperties_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_CandyProperties_descriptor_,
      DB_CandyProperties::default_instance_,
      DB_CandyProperties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CandyProperties, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_CandyProperties),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CandyProperties, _internal_metadata_),
      -1);
  DB_Events_descriptor_ = file->message_type(41);
  static const int DB_Events_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Events, atts_),
  };
  DB_Events_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_Events_descriptor_,
      DB_Events::default_instance_,
      DB_Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Events, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_Events),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Events, _internal_metadata_),
      -1);
  DB_Singed_descriptor_ = file->message_type(42);
  static const int DB_Singed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Singed, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Singed, data_),
  };
  DB_Singed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_Singed_descriptor_,
      DB_Singed::default_instance_,
      DB_Singed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Singed, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_Singed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Singed, _internal_metadata_),
      -1);
  DB_Yelldmd_descriptor_ = file->message_type(43);
  static const int DB_Yelldmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Yelldmd, last_reword_time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Yelldmd, newer_gift_),
  };
  DB_Yelldmd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_Yelldmd_descriptor_,
      DB_Yelldmd::default_instance_,
      DB_Yelldmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Yelldmd, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_Yelldmd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Yelldmd, _internal_metadata_),
      -1);
  DB_SignHistory_descriptor_ = file->message_type(44);
  static const int DB_SignHistory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SignHistory, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SignHistory, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SignHistory, reward_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SignHistory, last_reword_time_sec_),
  };
  DB_SignHistory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_SignHistory_descriptor_,
      DB_SignHistory::default_instance_,
      DB_SignHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SignHistory, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_SignHistory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_SignHistory, _internal_metadata_),
      -1);
  DB_EasyTimeSet_descriptor_ = file->message_type(45);
  static const int DB_EasyTimeSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EasyTimeSet, seconds_),
  };
  DB_EasyTimeSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_EasyTimeSet_descriptor_,
      DB_EasyTimeSet::default_instance_,
      DB_EasyTimeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EasyTimeSet, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_EasyTimeSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EasyTimeSet, _internal_metadata_),
      -1);
  DB_ContinuousDays_descriptor_ = file->message_type(46);
  static const int DB_ContinuousDays_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ContinuousDays, continuousdays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ContinuousDays, reward_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ContinuousDays, start_pos_),
  };
  DB_ContinuousDays_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_ContinuousDays_descriptor_,
      DB_ContinuousDays::default_instance_,
      DB_ContinuousDays_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ContinuousDays, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_ContinuousDays),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ContinuousDays, _internal_metadata_),
      -1);
  DB_DragboatFvl_descriptor_ = file->message_type(47);
  static const int DB_DragboatFvl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DragboatFvl, lastricecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DragboatFvl, isacquired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DragboatFvl, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DragboatFvl, totalricecount_),
  };
  DB_DragboatFvl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_DragboatFvl_descriptor_,
      DB_DragboatFvl::default_instance_,
      DB_DragboatFvl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DragboatFvl, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_DragboatFvl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_DragboatFvl, _internal_metadata_),
      -1);
  DB_ActiveInvite_descriptor_ = file->message_type(48);
  static const int DB_ActiveInvite_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInvite, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInvite, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInvite, lastlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInvite, lastloginday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInvite, nowloginday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInvite, isreceive1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInvite, isreceive2_),
  };
  DB_ActiveInvite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_ActiveInvite_descriptor_,
      DB_ActiveInvite::default_instance_,
      DB_ActiveInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInvite, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_ActiveInvite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInvite, _internal_metadata_),
      -1);
  DB_ActiveInviteself_descriptor_ = file->message_type(49);
  static const int DB_ActiveInviteself_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInviteself, isreceive3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInviteself, completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInviteself, idcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInviteself, other_),
  };
  DB_ActiveInviteself_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_ActiveInviteself_descriptor_,
      DB_ActiveInviteself::default_instance_,
      DB_ActiveInviteself_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInviteself, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_ActiveInviteself),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveInviteself, _internal_metadata_),
      -1);
  DB_ActiveCallBack_descriptor_ = file->message_type(50);
  static const int DB_ActiveCallBack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveCallBack, totaldays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveCallBack, hastkbgnum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveCallBack, hastkbgnum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveCallBack, hastkbgnum3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveCallBack, hastkbgnum4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveCallBack, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveCallBack, user_type_),
  };
  DB_ActiveCallBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_ActiveCallBack_descriptor_,
      DB_ActiveCallBack::default_instance_,
      DB_ActiveCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveCallBack, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_ActiveCallBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ActiveCallBack, _internal_metadata_),
      -1);
  DB_Player_descriptor_ = file->message_type(51);
  static const int DB_Player_offsets_[56] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, lives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, universeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, inited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, candy_properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, message_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, friend_action_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, friend_actions_allread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, friend_action_unread_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, friend_actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, onceoperating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, last_login_reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, web_buy_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, cdkey_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, weibo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, qqunion_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, new_func_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, dallygiftday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, share_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, friend_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, banlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, broadcast_unread_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, messages_unread_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, friendgiftlivehistory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, singedhistory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, invite_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, invite_count_o1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, inviter_openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, yelldmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, sign_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, cdkey_pickhistory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, new_user_save_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, easytimeset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, skiplog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, invite_send_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, dally_universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, now_playing_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, dailycounter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, rewared_bit_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, callback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, from_zynga_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, friendgiftlivesendhistory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, continouslogindays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, invite_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, dragboatfestivl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, activeinviteself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, qpoint_usage_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, mobiledevicesynccnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, activecallback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, kingofstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, exp_level_),
  };
  DB_Player_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_Player_descriptor_,
      DB_Player::default_instance_,
      DB_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_Player),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Player, _internal_metadata_),
      -1);
  DB_User_descriptor_ = file->message_type(52);
  static const int DB_User_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, profile_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, last_login_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, regist_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, yellowdmdlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, isyellowdmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, isyellowdmdyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, qpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, secret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, secret_gentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, platformtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, checkval_first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, checkval_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, passval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, openkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, logincnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, active_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, total_login_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, user_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, user_cmem_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, last_active_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, ingame_cash_),
  };
  DB_User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DB_User_descriptor_,
      DB_User::default_instance_,
      DB_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, _has_bits_[0]),
      -1,
      -1,
      sizeof(DB_User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_User, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dbinterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_BitCache_descriptor_, &DB_BitCache::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeLimitedUidSet_descriptor_, &TimeLimitedUidSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LotteryLimited_descriptor_, &LotteryLimited::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_MaxSizedUidList_descriptor_, &DB_MaxSizedUidList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_ExpLevel_descriptor_, &DB_ExpLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_DailyCounter_descriptor_, &DB_DailyCounter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_VersionCounter_descriptor_, &DB_VersionCounter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_KingOfStar_descriptor_, &DB_KingOfStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_ItemOnMap_descriptor_, &DB_ItemOnMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_Map_descriptor_, &DB_Map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_Task_descriptor_, &DB_Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_TaskList_descriptor_, &DB_TaskList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_TaskStateList_descriptor_, &DB_TaskStateList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_BanChat_descriptor_, &DB_BanChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_BanLogin_descriptor_, &DB_BanLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_Item_descriptor_, &DB_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_Bag_descriptor_, &DB_Bag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_ActionRecord_descriptor_, &DB_ActionRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_FakeFriendActionSet_descriptor_, &DB_FakeFriendActionSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_FreindFirstVist_descriptor_, &DB_FreindFirstVist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_Option_descriptor_, &DB_Option::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_WebBuyDetail_descriptor_, &DB_WebBuyDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_WebBuyRecord_descriptor_, &DB_WebBuyRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_LimitRecord_descriptor_, &DB_LimitRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_Limit_descriptor_, &DB_Limit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_StepWithTime_descriptor_, &DB_StepWithTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_NewFunc_descriptor_, &DB_NewFunc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_CDKey_descriptor_, &DB_CDKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_Weibo_descriptor_, &DB_Weibo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_CallBackCell_descriptor_, &DB_CallBackCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_CallBack_descriptor_, &DB_CallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_FuncSwitch_descriptor_, &DB_FuncSwitch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_FriendGift_descriptor_, &DB_FriendGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_Universe_descriptor_, &DB_Universe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_DallyUniverse_descriptor_, &DB_DallyUniverse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_DallyLogInfo_descriptor_, &DB_DallyLogInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_DallyUniverseInfo_descriptor_, &DB_DallyUniverseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_LivesInfo_descriptor_, &DB_LivesInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_UniverseInfo_descriptor_, &DB_UniverseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_StrKeyProperties_descriptor_, &DB_StrKeyProperties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_CandyProperties_descriptor_, &DB_CandyProperties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_Events_descriptor_, &DB_Events::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_Singed_descriptor_, &DB_Singed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_Yelldmd_descriptor_, &DB_Yelldmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_SignHistory_descriptor_, &DB_SignHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_EasyTimeSet_descriptor_, &DB_EasyTimeSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_ContinuousDays_descriptor_, &DB_ContinuousDays::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_DragboatFvl_descriptor_, &DB_DragboatFvl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_ActiveInvite_descriptor_, &DB_ActiveInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_ActiveInviteself_descriptor_, &DB_ActiveInviteself::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_ActiveCallBack_descriptor_, &DB_ActiveCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_Player_descriptor_, &DB_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DB_User_descriptor_, &DB_User::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dbinterface_2eproto() {
  delete DB_BitCache::default_instance_;
  delete DB_BitCache_reflection_;
  delete TimeLimitedUidSet::default_instance_;
  delete TimeLimitedUidSet_reflection_;
  delete LotteryLimited::default_instance_;
  delete LotteryLimited_reflection_;
  delete DB_MaxSizedUidList::default_instance_;
  delete DB_MaxSizedUidList_reflection_;
  delete DB_ExpLevel::default_instance_;
  delete DB_ExpLevel_reflection_;
  delete DB_DailyCounter::default_instance_;
  delete DB_DailyCounter_reflection_;
  delete DB_VersionCounter::default_instance_;
  delete DB_VersionCounter_reflection_;
  delete DB_KingOfStar::default_instance_;
  delete DB_KingOfStar_reflection_;
  delete DB_ItemOnMap::default_instance_;
  delete DB_ItemOnMap_reflection_;
  delete DB_Map::default_instance_;
  delete DB_Map_reflection_;
  delete DB_Task::default_instance_;
  delete DB_Task_reflection_;
  delete DB_TaskList::default_instance_;
  delete DB_TaskList_reflection_;
  delete DB_TaskStateList::default_instance_;
  delete DB_TaskStateList_reflection_;
  delete DB_BanChat::default_instance_;
  delete DB_BanChat_reflection_;
  delete DB_BanLogin::default_instance_;
  delete DB_BanLogin_reflection_;
  delete DB_Item::default_instance_;
  delete DB_Item_reflection_;
  delete DB_Bag::default_instance_;
  delete DB_Bag_reflection_;
  delete DB_ActionRecord::default_instance_;
  delete DB_ActionRecord_reflection_;
  delete DB_FakeFriendActionSet::default_instance_;
  delete DB_FakeFriendActionSet_reflection_;
  delete DB_FreindFirstVist::default_instance_;
  delete DB_FreindFirstVist_reflection_;
  delete DB_Option::default_instance_;
  delete DB_Option_reflection_;
  delete DB_WebBuyDetail::default_instance_;
  delete DB_WebBuyDetail_reflection_;
  delete DB_WebBuyRecord::default_instance_;
  delete DB_WebBuyRecord_reflection_;
  delete DB_LimitRecord::default_instance_;
  delete DB_LimitRecord_reflection_;
  delete DB_Limit::default_instance_;
  delete DB_Limit_reflection_;
  delete DB_StepWithTime::default_instance_;
  delete DB_StepWithTime_reflection_;
  delete DB_NewFunc::default_instance_;
  delete DB_NewFunc_reflection_;
  delete DB_CDKey::default_instance_;
  delete DB_CDKey_reflection_;
  delete DB_Weibo::default_instance_;
  delete DB_Weibo_reflection_;
  delete DB_CallBackCell::default_instance_;
  delete DB_CallBackCell_reflection_;
  delete DB_CallBack::default_instance_;
  delete DB_CallBack_reflection_;
  delete DB_FuncSwitch::default_instance_;
  delete DB_FuncSwitch_reflection_;
  delete DB_FriendGift::default_instance_;
  delete DB_FriendGift_reflection_;
  delete DB_Universe::default_instance_;
  delete DB_Universe_reflection_;
  delete DB_DallyUniverse::default_instance_;
  delete DB_DallyUniverse_reflection_;
  delete DB_DallyLogInfo::default_instance_;
  delete DB_DallyLogInfo_reflection_;
  delete DB_DallyUniverseInfo::default_instance_;
  delete DB_DallyUniverseInfo_reflection_;
  delete DB_LivesInfo::default_instance_;
  delete DB_LivesInfo_reflection_;
  delete DB_UniverseInfo::default_instance_;
  delete DB_UniverseInfo_reflection_;
  delete DB_StrKeyProperties::default_instance_;
  delete DB_StrKeyProperties_reflection_;
  delete DB_CandyProperties::default_instance_;
  delete DB_CandyProperties_reflection_;
  delete DB_Events::default_instance_;
  delete DB_Events_reflection_;
  delete DB_Singed::default_instance_;
  delete DB_Singed_reflection_;
  delete DB_Yelldmd::default_instance_;
  delete DB_Yelldmd_reflection_;
  delete DB_SignHistory::default_instance_;
  delete DB_SignHistory_reflection_;
  delete DB_EasyTimeSet::default_instance_;
  delete DB_EasyTimeSet_reflection_;
  delete DB_ContinuousDays::default_instance_;
  delete DB_ContinuousDays_reflection_;
  delete DB_DragboatFvl::default_instance_;
  delete DB_DragboatFvl_reflection_;
  delete DB_ActiveInvite::default_instance_;
  delete DB_ActiveInvite_reflection_;
  delete DB_ActiveInviteself::default_instance_;
  delete DB_ActiveInviteself_reflection_;
  delete DB_ActiveCallBack::default_instance_;
  delete DB_ActiveCallBack_reflection_;
  delete DB_Player::default_instance_;
  delete DB_Player_reflection_;
  delete DB_User::default_instance_;
  delete DB_User_reflection_;
}

void protobuf_AddDesc_dbinterface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021dbinterface.proto\"\032\n\013DB_BitCache\022\013\n\003bi"
    "t\030\001 \003(\005\"{\n\021TimeLimitedUidSet\022\014\n\004uids\030\006 \003"
    "(\003\022\021\n\tchecttime\030\007 \001(\003\022\022\n\007uid_max\030\010 \001(\005:\001"
    "0\022\r\n\005names\030\t \003(\t\022\021\n\thead_urls\030\n \003(\t\022\017\n\007o"
    "penids\030\013 \003(\t\"Q\n\016LotteryLimited\022\024\n\tpvecou"
    "nts\030\001 \001(\003:\0010\022\022\n\007daytime\030\002 \001(\003:\0010\022\025\n\nseco"
    "ndtime\030\003 \001(\003:\0010\"1\n\022DB_MaxSizedUidList\022\013\n"
    "\003uid\030\001 \003(\003\022\016\n\003pos\030\002 \001(\005:\0010\"X\n\013DB_ExpLeve"
    "l\022\016\n\003lvl\030\001 \001(\005:\0010\022\016\n\003exp\030\002 \001(\005:\0010\022\024\n\texp"
    "_total\030\003 \001(\005:\0010\022\023\n\010exp_next\030\004 \001(\005:\0010\"A\n\017"
    "DB_DailyCounter\022\017\n\007num_set\030\001 \003(\005\022\020\n\010name"
    "_set\030\002 \003(\t\022\013\n\003day\030\003 \001(\003\"G\n\021DB_VersionCou"
    "nter\022\017\n\007num_set\030\001 \003(\005\022\020\n\010name_set\030\002 \003(\t\022"
    "\017\n\007ver_set\030\003 \003(\005\"\200\001\n\rDB_KingOfStar\022\026\n\013to"
    "tal_value\030\001 \001(\005:\0010\022\025\n\nstar_value\030\002 \001(\005:\001"
    "0\022\026\n\013score_value\030\003 \001(\005:\0010\022\020\n\005index\030\004 \001(\005"
    ":\0010\022\026\n\013now_playing\030\005 \001(\005:\0010\"]\n\014DB_ItemOn"
    "Map\022\n\n\002id\030\001 \002(\005\022\022\n\006typeid\030\002 \001(\005:\002-1\022\014\n\004p"
    "osx\030\003 \001(\005\022\014\n\004posy\030\004 \001(\005\022\021\n\tdirection\030\005 \001"
    "(\005\"\274\001\n\006DB_Map\022!\n\nGroundList\030\001 \003(\0132\r.DB_I"
    "temOnMap\022\037\n\010WallList\030\002 \003(\0132\r.DB_ItemOnMa"
    "p\022\023\n\010alloc_id\030\003 \001(\005:\0010\022\022\n\007back_id\030\004 \001(\005:"
    "\0010\022\025\n\007wall_id\030\005 \001(\005:\0045006\022\026\n\010floor_id\030\006 "
    "\001(\005:\0045003\022\026\n\013reward_time\030\007 \001(\003:\0010\"+\n\007DB_"
    "Task\022\016\n\006taskID\030\001 \001(\005\022\020\n\010taskStep\030\002 \001(\005\"%"
    "\n\013DB_TaskList\022\026\n\004task\030\001 \003(\0132\010.DB_Task\"%\n"
    "\020DB_TaskStateList\022\021\n\ttaskstate\030\001 \003(\003\"H\n\n"
    "DB_BanChat\022\026\n\007banchat\030\001 \001(\010:\005false\022\014\n\004ti"
    "me\030\002 \001(\003\022\024\n\ttotaltime\030\003 \001(\003:\0010\"J\n\013DB_Ban"
    "Login\022\027\n\010banlogin\030\001 \001(\010:\005false\022\014\n\004time\030\002"
    " \001(\003\022\024\n\ttotaltime\030\003 \001(\003:\0010\"^\n\007DB_Item\022\016\n"
    "\006typeid\030\001 \001(\005\022\016\n\003num\030\002 \001(\005:\0010\022\026\n\013unlockv"
    "alue\030\003 \001(\005:\0010\022\033\n\014unlockSended\030\004 \001(\010:\005fal"
    "se\"Y\n\006DB_Bag\022\027\n\005items\030\001 \003(\0132\010.DB_Item\022\020\n"
    "\005money\030\003 \001(\003:\0010\022\023\n\010maxspace\030\004 \001(\005:\0010\022\017\n\004"
    "cash\030\005 \001(\003:\0010\"\353\002\n\017DB_ActionRecord\022\017\n\003uid"
    "\030\001 \001(\003:\002-1\022\017\n\004time\030\002 \001(\003:\0010\022\016\n\004name\030\003 \001("
    "\t:\000\022\025\n\nactiontype\030\004 \001(\005:\0010\022\017\n\004gold\030\005 \001(\005"
    ":\0010\022\026\n\013item_typeid\030\006 \001(\005:\0010\022\025\n\006dealed\030\007 "
    "\001(\010:\005false\022\020\n\005count\030\010 \001(\005:\0011\022\014\n\002id\030\t \001(\t"
    ":\000\022\022\n\010head_url\030\n \001(\t:\000\022\017\n\007item_id\030\013 \003(\005\022"
    "\020\n\010item_num\030\014 \003(\005\022\021\n\007context\030\r \001(\t:\000\022\024\n\t"
    "guest_add\030\016 \001(\005:\0010\022\020\n\006openid\030\017 \001(\t:\000\022\023\n\007"
    "value_a\030\020 \001(\005:\002-1\022\023\n\007value_b\030\021 \001(\005:\002-1\022\023"
    "\n\010time_sec\030\022 \001(\003:\0010\"\346\001\n\026DB_FakeFriendAct"
    "ionSet\022\030\n\020fake_action_uids\030\001 \003(\003\022\032\n\022fake"
    "_action_counts\030\002 \003(\005\022\"\n\027fack_action_totl"
    "e_count\030\003 \001(\005:\0010\022\033\n\020last_update_time\030\004 \001"
    "(\003:\0010\022\032\n\022fake_action_picked\030\005 \003(\010\022\034\n\021fak"
    "e_reward_guest\030\006 \001(\005:\0010\022\033\n\020fake_reward_g"
    "old\030\007 \001(\005:\0010\"\"\n\022DB_FreindFirstVist\022\014\n\004ui"
    "ds\030\001 \003(\003\"Q\n\tDB_Option\022\032\n\014high_quality\030\001 "
    "\001(\010:\004true\022\023\n\005music\030\002 \001(\010:\004true\022\023\n\005sound\030"
    "\003 \001(\010:\004true\"~\n\017DB_WebBuyDetail\022\016\n\006shopid"
    "\030\001 \002(\003\022\r\n\005count\030\002 \002(\005\022\016\n\006indate\030\003 \002(\005\022\r\n"
    "\005price\030\004 \002(\005\022\014\n\004posx\030\005 \001(\005\022\014\n\004posy\030\006 \001(\005"
    "\022\021\n\tdirection\030\007 \001(\005\"O\n\017DB_WebBuyRecord\022!"
    "\n\007details\030\002 \003(\0132\020.DB_WebBuyDetail\022\013\n\003key"
    "\030\001 \001(\t\022\014\n\004time\030\003 \001(\003\"J\n\016DB_LimitRecord\022\022"
    "\n\007type_id\030\001 \001(\005:\0010\022\016\n\003num\030\002 \001(\005:\0010\022\024\n\tli"
    "mittype\030\003 \001(\005:\0010\"=\n\010DB_Limit\022\021\n\006update\030\001"
    " \001(\003:\0010\022\036\n\005items\030\002 \003(\0132\017.DB_LimitRecord\""
    "5\n\017DB_StepWithTime\022\017\n\004step\030\003 \001(\005:\0010\022\021\n\006u"
    "pdate\030\004 \001(\003:\0010\"/\n\nDB_NewFunc\022!\n\013system_i"
    "nfo\030\001 \001(\0132\014.DB_BitCache\"@\n\010DB_CDKey\022\016\n\006c"
    "d_key\030\001 \001(\t\022\021\n\tused_flag\030\002 \001(\005\022\021\n\tactive"
    "_id\030\003 \001(\005\"\257\001\n\010DB_Weibo\022\027\n\010listened\030\001 \001(\010"
    ":\005false\022\034\n\rlistened_gift\030\002 \001(\010:\005false\022\030\n"
    "\tforwarded\030\003 \001(\010:\005false\022\035\n\016forwarded_gif"
    "t\030\004 \001(\010:\005false\022\035\n\016qzone_followed\030\005 \001(\010:\005"
    "false\022\024\n\tqzone_day\030\006 \001(\003:\0010\"\215\001\n\017DB_CallB"
    "ackCell\022\020\n\005timer\030\001 \001(\003:\0010\022\023\n\013openid_list"
    "\030\004 \003(\t\022\021\n\tname_list\030\005 \003(\t\022\020\n\010url_list\030\006 "
    "\003(\t\022\027\n\010rewarded\030\002 \001(\010:\005false\022\025\n\ntotallev"
    "el\030\003 \001(\005:\0010\"\334\001\n\013DB_CallBack\022\022\n\007version\030\001"
    " \001(\005:\0010\022 \n\006cbcell\030\002 \003(\0132\020.DB_CallBackCel"
    "l\022\032\n\017cell_update_day\030\003 \001(\005:\0010\022\031\n\017callbac"
    "k_sender\030\004 \001(\t:\000\022\036\n\023reward_cnt_as_taker\030"
    "\005 \001(\005:\0010\022\022\n\ncache_list\030\007 \003(\t\022\021\n\tsend_lis"
    "t\030\010 \003(\t\022\031\n\016cell_build_day\030\t \001(\005:\0010\"Q\n\rDB"
    "_FuncSwitch\022\023\n\010time_day\030\001 \001(\003:\0010\022\026\n\013time"
    "_second\030\003 \001(\003:\0010\022\023\n\010daytimes\030\002 \001(\005:\0010\"\243\001"
    "\n\rDB_FriendGift\022\034\n\021friend_action_pos\030\004 \001"
    "(\005:\0010\022%\n\026friend_actions_allread\030\001 \001(\010:\005f"
    "alse\022#\n\030friend_action_unread_cnt\030\002 \001(\005:\001"
    "0\022(\n\016friend_actions\030\003 \003(\0132\020.DB_ActionRec"
    "ord\"\205\002\n\013DB_Universe\022\n\n\002id\030\001 \001(\005\022\r\n\005value"
    "\030\002 \001(\005\022\r\n\005stars\030\003 \001(\005\022\020\n\010unlocked\030\004 \001(\010\022"
    "$\n\034json_unlockConditionDataList\030\005 \001(\t\022\025\n"
    "\nfailed_cnt\030\007 \001(\005:\0010\022\036\n\023first_unlock_sec"
    "ond\030\010 \001(\003:\0010\022\025\n\ntop_player\030\t \001(\003:\0010\022\032\n\017f"
    "irst_pass_from\030\n \001(\005:\0010\022\024\n\tvalue_kos\030\013 \001"
    "(\005:\0010\022\024\n\tstars_kos\030\014 \001(\005:\0010\"\242\001\n\020DB_Dally"
    "Universe\022\031\n\003uni\030\001 \001(\0132\014.DB_Universe\022\022\n\np"
    "layed_cnt\030\002 \001(\005\022\020\n\010succ_cnt\030\003 \001(\005\022\020\n\010unl"
    "ocked\030\004 \001(\010\022\020\n\010pay_open\030\005 \001(\010\022\027\n\014pay_ope"
    "n_day\030\006 \001(\003:\0010\022\020\n\010pay_cash\030\007 \001(\005\"L\n\017DB_D"
    "allyLogInfo\022\017\n\004week\030\001 \001(\005:\0010\022\022\n\ntotalsco"
    "re\030\002 \001(\005\022\024\n\014unlocked_cnt\030\003 \001(\005\"\271\001\n\024DB_Da"
    "llyUniverseInfo\022\014\n\004week\030\001 \001(\005\022!\n\006uniset\030"
    "\002 \003(\0132\021.DB_DallyUniverse\022\022\n\ntotalsocre\030\003"
    " \001(\005\022\033\n\014rewardpicked\030\004 \001(\010:\005false\022%\n\013his"
    "toryLogs\030\005 \003(\0132\020.DB_DallyLogInfo\022\030\n\tchea"
    "t_bit\030\006 \001(\010:\005false\"L\n\014DB_LivesInfo\022\r\n\005li"
    "ves\030\001 \001(\005\022\032\n\022last_cost_time_sec\030\002 \001(\003\022\021\n"
    "\tlives_max\030\003 \001(\005\"\264\002\n\017DB_UniverseInfo\022\023\n\013"
    "total_level\030\001 \001(\005\022\021\n\ttop_level\030\002 \001(\005\022\014\n\004"
    "seed\030\003 \001(\005\022\030\n\rlvl_start_sec\030\005 \001(\003:\0010\022\"\n\014"
    "universe_set\030\004 \003(\0132\014.DB_Universe\022\031\n\016now_"
    "total_levl\030\006 \001(\005:\0010\022\031\n\016checkval_first\030\007 "
    "\001(\005:\0010\022\032\n\017checkval_second\030\010 \001(\005:\0010\022\022\n\007pa"
    "ssval\030\t \001(\005:\0010\022\026\n\016lvlStockedItem\030\n \003(\005\022\021"
    "\n\tegg_logic\030\013 \003(\005\022\034\n\024mobile_submit_socre"
    "s\030\014 \003(\005\"\\\n\023DB_StrKeyProperties\022\013\n\003key\030\001 "
    "\001(\t\022\022\n\nbool_value\030\002 \001(\010\022\021\n\tint_value\030\003 \001"
    "(\005\022\021\n\tstr_value\030\004 \001(\t\"8\n\022DB_CandyPropert"
    "ies\022\"\n\004atts\030\001 \003(\0132\024.DB_StrKeyProperties\""
    "/\n\tDB_Events\022\"\n\004atts\030\001 \003(\0132\024.DB_StrKeyPr"
    "operties\")\n\tDB_Singed\022\016\n\003pos\030\001 \001(\005:\0010\022\014\n"
    "\004data\030\002 \003(\005\"H\n\nDB_Yelldmd\022\037\n\024last_reword"
    "_time_sec\030\001 \001(\003:\0010\022\031\n\nnewer_gift\030\002 \001(\010:\005"
    "false\"u\n\016DB_SignHistory\022\020\n\005month\030\001 \001(\005:\001"
    "0\022\014\n\004days\030\002 \003(\005\022\"\n\014reward_cache\030\003 \001(\0132\014."
    "DB_BitCache\022\037\n\024last_reword_time_sec\030\004 \001("
    "\003:\0010\"!\n\016DB_EasyTimeSet\022\017\n\007seconds\030\001 \003(\003\""
    "j\n\021DB_ContinuousDays\022\031\n\016ContinuousDays\030\001"
    " \001(\005:\0010\022$\n\016reward_history\030\002 \001(\0132\014.DB_Bit"
    "Cache\022\024\n\tstart_pos\030\003 \001(\005:\0010\"u\n\016DB_Dragbo"
    "atFvl\022\030\n\rlastricecount\030\001 \001(\005:\0010\022\031\n\nisacq"
    "uired\030\002 \001(\010:\005false\022\023\n\010lasttime\030\003 \001(\003:\0010\022"
    "\031\n\016totalricecount\030\004 \001(\005:\0010\"\231\001\n\017DB_Active"
    "Invite\022\016\n\006userid\030\001 \001(\003\022\013\n\003url\030\002 \001(\t\022\017\n\007l"
    "astlvl\030\003 \001(\005\022\024\n\014lastloginday\030\004 \001(\005\022\023\n\013no"
    "wloginday\030\005 \001(\005\022\022\n\nisReceive1\030\006 \003(\005\022\031\n\ni"
    "sReceive2\030\007 \001(\010:\005false\"o\n\023DB_ActiveInvit"
    "eself\022\022\n\nisReceive3\030\001 \003(\005\022\021\n\tcompleted\030\002"
    " \003(\005\022\020\n\005idCnt\030\003 \001(\005:\0010\022\037\n\005other\030\004 \003(\0132\020."
    "DB_ActiveInvite\"\301\001\n\021DB_ActiveCallBack\022\024\n"
    "\ttotaldays\030\001 \001(\005:\0010\022\032\n\013hasTKbgnum1\030\002 \001(\010"
    ":\005false\022\032\n\013hasTKbgnum2\030\003 \001(\010:\005false\022\032\n\013h"
    "asTKbgnum3\030\004 \001(\010:\005false\022\032\n\013hasTKbgnum4\030\005"
    " \001(\010:\005false\022\020\n\010lasttime\030\006 \001(\003\022\024\n\tuser_ty"
    "pe\030\007 \001(\005:\0010\"\211\017\n\tDB_Player\022\022\n\010nickname\030\001 "
    "\001(\t:\000\022\024\n\003bag\030\002 \001(\0132\007.DB_Bag\022\034\n\005lives\030\003 \001"
    "(\0132\r.DB_LivesInfo\022&\n\014universeinfo\030\004 \001(\0132"
    "\020.DB_UniverseInfo\022\025\n\006inited\030\005 \001(\010:\005false"
    "\022-\n\020candy_properties\030\006 \001(\0132\023.DB_CandyPro"
    "perties\022\"\n\016message_events\030\007 \001(\0132\n.DB_Eve"
    "nts\022\034\n\021friend_action_pos\030\010 \001(\005:\0010\022%\n\026fri"
    "end_actions_allread\030\t \001(\010:\005false\022#\n\030frie"
    "nd_action_unread_cnt\030\n \001(\005:\0010\022(\n\016friend_"
    "actions\030\013 \003(\0132\020.DB_ActionRecord\022\032\n\006optio"
    "n\030\014 \001(\0132\n.DB_Option\022#\n\rOnceOperating\030\r \001"
    "(\0132\014.DB_BitCache\022!\n\026last_login_reward_ti"
    "me\030\016 \001(\003:\0010\022\030\n\005limit\030\017 \001(\0132\t.DB_Limit\022(\n"
    "\016web_buy_record\030\020 \003(\0132\020.DB_WebBuyRecord\022"
    " \n\rcdkey_counter\030\022 \003(\0132\t.DB_CDKey\022\030\n\005wei"
    "bo\030\023 \001(\0132\t.DB_Weibo\022\023\n\013qqunion_key\030\024 \003(\t"
    "\022$\n\017new_func_record\030\025 \001(\0132\013.DB_NewFunc\022\027"
    "\n\014dallygiftday\030\026 \001(\005:\0010\022\034\n\004func\030\027 \001(\0132\016."
    "DB_FuncSwitch\022\030\n\005share\030\030 \001(\0132\t.DB_Limit\022"
    "#\n\013friend_gift\030\031 \001(\0132\016.DB_FriendGift\022\036\n\010"
    "banlogin\030\032 \001(\0132\014.DB_BanLogin\022\037\n\024broadcas"
    "t_unread_cnt\030  \001(\005:\0010\022\036\n\023messages_unread"
    "_cnt\030\" \001(\005:\0010\0221\n\025FriendGiftLiveHistory\030#"
    " \001(\0132\022.TimeLimitedUidSet\022!\n\rSingedHistor"
    "y\030$ \001(\0132\n.DB_Singed\022\031\n\016invite_version\030\021 "
    "\001(\005:\0010\022\032\n\017invite_count_o1\0302 \001(\005:\0010\022\030\n\016in"
    "viter_openid\030& \001(\t:\000\022\034\n\007yelldmd\030\' \001(\0132\013."
    "DB_Yelldmd\022%\n\014sign_history\030( \001(\0132\017.DB_Si"
    "gnHistory\022\'\n\021cdkey_pickhistory\030) \001(\0132\014.D"
    "B_BitCache\022(\n\022new_user_save_gift\030* \001(\0132\014"
    ".DB_BitCache\022$\n\013easytimeset\030+ \001(\0132\017.DB_E"
    "asyTimeSet\022\026\n\007SkipLog\030, \001(\010:\005false\022\034\n\021in"
    "vite_send_count\030- \001(\005:\0010\022-\n\016dally_univer"
    "se\030. \001(\0132\025.DB_DallyUniverseInfo\022\031\n\021now_p"
    "laying_level\030/ \001(\005\022&\n\014dailycounter\0300 \001(\013"
    "2\020.DB_DailyCounter\022\'\n\021rewared_bit_cache\030"
    "1 \001(\0132\014.DB_BitCache\022\036\n\010callback\0303 \001(\0132\014."
    "DB_CallBack\022\036\n\017from_zynga_city\0304 \001(\010:\005fa"
    "lse\0225\n\031FriendGiftLiveSendHistory\0305 \001(\0132\022"
    ".TimeLimitedUidSet\022.\n\022ContinousLoginDays"
    "\0306 \001(\0132\022.DB_ContinuousDays\022\025\n\004Room\0307 \001(\013"
    "2\007.DB_Map\022\027\n\014invite_count\0308 \001(\005:\0010\022(\n\017Dr"
    "agboatfestivl\0309 \001(\0132\017.DB_DragboatFvl\022.\n\020"
    "ActiveInviteself\030: \001(\0132\024.DB_ActiveInvite"
    "self\022 \n\025qpoint_usage_feedback\030; \001(\005:\0010\022\036"
    "\n\023MobileDeviceSyncCnt\030< \001(\005:\0010\022*\n\016Active"
    "CallBack\030= \001(\0132\022.DB_ActiveCallBack\022\"\n\nKi"
    "ngOfStar\030> \001(\0132\016.DB_KingOfStar\022\037\n\texp_le"
    "vel\030\? \001(\0132\014.DB_ExpLevel\"\226\005\n\007DB_User\022\r\n\002i"
    "d\030\001 \002(\003:\0010\022\025\n\013platform_id\030\002 \002(\t:\000\022\014\n\004nam"
    "e\030\003 \003(\t\022\024\n\014profile_link\030\004 \003(\t\022\016\n\006gender\030"
    "\005 \003(\005\022\032\n\017last_login_time\030\010 \002(\003:\0010\022\027\n\rlas"
    "t_login_ip\030\t \002(\t:\000\022\026\n\013regist_time\030\n \002(\003:"
    "\0010\022\027\n\014yellowDmdLvl\030\r \001(\005:\0010\022\032\n\013isYellowD"
    "md\030\016 \001(\010:\005false\022\036\n\017isYellowDmdYear\030\017 \001(\010"
    ":\005false\022\032\n\006player\030\023 \001(\0132\n.DB_Player\022\021\n\006Q"
    "Point\030\024 \001(\005:\0010\022\017\n\007version\030\025 \001(\005\022\021\n\006secre"
    "t\030\026 \001(\003:\0010\022\031\n\016secret_gentime\030\027 \001(\003:\0010\022\027\n"
    "\014platformtype\030\032 \001(\005:\0011\022\031\n\016checkval_first"
    "\030\033 \001(\005:\0010\022\032\n\017checkval_second\030\034 \001(\005:\0010\022\022\n"
    "\007passval\030\035 \001(\005:\0010\022\021\n\007openkey\030\036 \001(\t:\000\022\023\n\010"
    "logincnt\030\037 \001(\005:\0010\022\026\n\013active_days\030  \001(\005:\001"
    "0\022\033\n\020total_login_days\030! \001(\005:\0010\022\024\n\tuser_f"
    "rom\030\" \001(\005:\0010\022\026\n\013user_cmem_v\030# \001(\005:\0010\022\032\n\017"
    "last_active_day\030$ \001(\003:\0010\022\026\n\013ingame_cash\030"
    "% \001(\005:\0010", 8288);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbinterface.proto", &protobuf_RegisterTypes);
  DB_BitCache::default_instance_ = new DB_BitCache();
  TimeLimitedUidSet::default_instance_ = new TimeLimitedUidSet();
  LotteryLimited::default_instance_ = new LotteryLimited();
  DB_MaxSizedUidList::default_instance_ = new DB_MaxSizedUidList();
  DB_ExpLevel::default_instance_ = new DB_ExpLevel();
  DB_DailyCounter::default_instance_ = new DB_DailyCounter();
  DB_VersionCounter::default_instance_ = new DB_VersionCounter();
  DB_KingOfStar::default_instance_ = new DB_KingOfStar();
  DB_ItemOnMap::default_instance_ = new DB_ItemOnMap();
  DB_Map::default_instance_ = new DB_Map();
  DB_Task::default_instance_ = new DB_Task();
  DB_TaskList::default_instance_ = new DB_TaskList();
  DB_TaskStateList::default_instance_ = new DB_TaskStateList();
  DB_BanChat::default_instance_ = new DB_BanChat();
  DB_BanLogin::default_instance_ = new DB_BanLogin();
  DB_Item::default_instance_ = new DB_Item();
  DB_Bag::default_instance_ = new DB_Bag();
  DB_ActionRecord::default_instance_ = new DB_ActionRecord();
  DB_FakeFriendActionSet::default_instance_ = new DB_FakeFriendActionSet();
  DB_FreindFirstVist::default_instance_ = new DB_FreindFirstVist();
  DB_Option::default_instance_ = new DB_Option();
  DB_WebBuyDetail::default_instance_ = new DB_WebBuyDetail();
  DB_WebBuyRecord::default_instance_ = new DB_WebBuyRecord();
  DB_LimitRecord::default_instance_ = new DB_LimitRecord();
  DB_Limit::default_instance_ = new DB_Limit();
  DB_StepWithTime::default_instance_ = new DB_StepWithTime();
  DB_NewFunc::default_instance_ = new DB_NewFunc();
  DB_CDKey::default_instance_ = new DB_CDKey();
  DB_Weibo::default_instance_ = new DB_Weibo();
  DB_CallBackCell::default_instance_ = new DB_CallBackCell();
  DB_CallBack::default_instance_ = new DB_CallBack();
  DB_FuncSwitch::default_instance_ = new DB_FuncSwitch();
  DB_FriendGift::default_instance_ = new DB_FriendGift();
  DB_Universe::default_instance_ = new DB_Universe();
  DB_DallyUniverse::default_instance_ = new DB_DallyUniverse();
  DB_DallyLogInfo::default_instance_ = new DB_DallyLogInfo();
  DB_DallyUniverseInfo::default_instance_ = new DB_DallyUniverseInfo();
  DB_LivesInfo::default_instance_ = new DB_LivesInfo();
  DB_UniverseInfo::default_instance_ = new DB_UniverseInfo();
  DB_StrKeyProperties::default_instance_ = new DB_StrKeyProperties();
  DB_CandyProperties::default_instance_ = new DB_CandyProperties();
  DB_Events::default_instance_ = new DB_Events();
  DB_Singed::default_instance_ = new DB_Singed();
  DB_Yelldmd::default_instance_ = new DB_Yelldmd();
  DB_SignHistory::default_instance_ = new DB_SignHistory();
  DB_EasyTimeSet::default_instance_ = new DB_EasyTimeSet();
  DB_ContinuousDays::default_instance_ = new DB_ContinuousDays();
  DB_DragboatFvl::default_instance_ = new DB_DragboatFvl();
  DB_ActiveInvite::default_instance_ = new DB_ActiveInvite();
  DB_ActiveInviteself::default_instance_ = new DB_ActiveInviteself();
  DB_ActiveCallBack::default_instance_ = new DB_ActiveCallBack();
  DB_Player::default_instance_ = new DB_Player();
  DB_User::default_instance_ = new DB_User();
  DB_BitCache::default_instance_->InitAsDefaultInstance();
  TimeLimitedUidSet::default_instance_->InitAsDefaultInstance();
  LotteryLimited::default_instance_->InitAsDefaultInstance();
  DB_MaxSizedUidList::default_instance_->InitAsDefaultInstance();
  DB_ExpLevel::default_instance_->InitAsDefaultInstance();
  DB_DailyCounter::default_instance_->InitAsDefaultInstance();
  DB_VersionCounter::default_instance_->InitAsDefaultInstance();
  DB_KingOfStar::default_instance_->InitAsDefaultInstance();
  DB_ItemOnMap::default_instance_->InitAsDefaultInstance();
  DB_Map::default_instance_->InitAsDefaultInstance();
  DB_Task::default_instance_->InitAsDefaultInstance();
  DB_TaskList::default_instance_->InitAsDefaultInstance();
  DB_TaskStateList::default_instance_->InitAsDefaultInstance();
  DB_BanChat::default_instance_->InitAsDefaultInstance();
  DB_BanLogin::default_instance_->InitAsDefaultInstance();
  DB_Item::default_instance_->InitAsDefaultInstance();
  DB_Bag::default_instance_->InitAsDefaultInstance();
  DB_ActionRecord::default_instance_->InitAsDefaultInstance();
  DB_FakeFriendActionSet::default_instance_->InitAsDefaultInstance();
  DB_FreindFirstVist::default_instance_->InitAsDefaultInstance();
  DB_Option::default_instance_->InitAsDefaultInstance();
  DB_WebBuyDetail::default_instance_->InitAsDefaultInstance();
  DB_WebBuyRecord::default_instance_->InitAsDefaultInstance();
  DB_LimitRecord::default_instance_->InitAsDefaultInstance();
  DB_Limit::default_instance_->InitAsDefaultInstance();
  DB_StepWithTime::default_instance_->InitAsDefaultInstance();
  DB_NewFunc::default_instance_->InitAsDefaultInstance();
  DB_CDKey::default_instance_->InitAsDefaultInstance();
  DB_Weibo::default_instance_->InitAsDefaultInstance();
  DB_CallBackCell::default_instance_->InitAsDefaultInstance();
  DB_CallBack::default_instance_->InitAsDefaultInstance();
  DB_FuncSwitch::default_instance_->InitAsDefaultInstance();
  DB_FriendGift::default_instance_->InitAsDefaultInstance();
  DB_Universe::default_instance_->InitAsDefaultInstance();
  DB_DallyUniverse::default_instance_->InitAsDefaultInstance();
  DB_DallyLogInfo::default_instance_->InitAsDefaultInstance();
  DB_DallyUniverseInfo::default_instance_->InitAsDefaultInstance();
  DB_LivesInfo::default_instance_->InitAsDefaultInstance();
  DB_UniverseInfo::default_instance_->InitAsDefaultInstance();
  DB_StrKeyProperties::default_instance_->InitAsDefaultInstance();
  DB_CandyProperties::default_instance_->InitAsDefaultInstance();
  DB_Events::default_instance_->InitAsDefaultInstance();
  DB_Singed::default_instance_->InitAsDefaultInstance();
  DB_Yelldmd::default_instance_->InitAsDefaultInstance();
  DB_SignHistory::default_instance_->InitAsDefaultInstance();
  DB_EasyTimeSet::default_instance_->InitAsDefaultInstance();
  DB_ContinuousDays::default_instance_->InitAsDefaultInstance();
  DB_DragboatFvl::default_instance_->InitAsDefaultInstance();
  DB_ActiveInvite::default_instance_->InitAsDefaultInstance();
  DB_ActiveInviteself::default_instance_->InitAsDefaultInstance();
  DB_ActiveCallBack::default_instance_->InitAsDefaultInstance();
  DB_Player::default_instance_->InitAsDefaultInstance();
  DB_User::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dbinterface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dbinterface_2eproto {
  StaticDescriptorInitializer_dbinterface_2eproto() {
    protobuf_AddDesc_dbinterface_2eproto();
  }
} static_descriptor_initializer_dbinterface_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int DB_BitCache::kBitFieldNumber;
#endif  // !_MSC_VER

DB_BitCache::DB_BitCache()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_BitCache)
}

void DB_BitCache::InitAsDefaultInstance() {
}

DB_BitCache::DB_BitCache(const DB_BitCache& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_BitCache)
}

void DB_BitCache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BitCache::~DB_BitCache() {
  // @@protoc_insertion_point(destructor:DB_BitCache)
  SharedDtor();
}

void DB_BitCache::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_BitCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_BitCache::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BitCache_descriptor_;
}

const DB_BitCache& DB_BitCache::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_BitCache* DB_BitCache::default_instance_ = NULL;

DB_BitCache* DB_BitCache::New(::google::protobuf::Arena* arena) const {
  DB_BitCache* n = new DB_BitCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_BitCache::Clear() {
  bit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_BitCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_BitCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 bit = 1;
      case 1: {
        if (tag == 8) {
         parse_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_bit())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bit())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_bit;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_BitCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_BitCache)
  return false;
#undef DO_
}

void DB_BitCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_BitCache)
  // repeated int32 bit = 1;
  for (int i = 0; i < this->bit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->bit(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_BitCache)
}

::google::protobuf::uint8* DB_BitCache::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_BitCache)
  // repeated int32 bit = 1;
  for (int i = 0; i < this->bit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->bit(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_BitCache)
  return target;
}

int DB_BitCache::ByteSize() const {
  int total_size = 0;

  // repeated int32 bit = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->bit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bit(i));
    }
    total_size += 1 * this->bit_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_BitCache::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_BitCache* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BitCache*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BitCache::MergeFrom(const DB_BitCache& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  bit_.MergeFrom(from.bit_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_BitCache::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BitCache::CopyFrom(const DB_BitCache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BitCache::IsInitialized() const {

  return true;
}

void DB_BitCache::Swap(DB_BitCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_BitCache::InternalSwap(DB_BitCache* other) {
  bit_.UnsafeArenaSwap(&other->bit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_BitCache::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BitCache_descriptor_;
  metadata.reflection = DB_BitCache_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_BitCache

// repeated int32 bit = 1;
 int DB_BitCache::bit_size() const {
  return bit_.size();
}
 void DB_BitCache::clear_bit() {
  bit_.Clear();
}
 ::google::protobuf::int32 DB_BitCache::bit(int index) const {
  // @@protoc_insertion_point(field_get:DB_BitCache.bit)
  return bit_.Get(index);
}
 void DB_BitCache::set_bit(int index, ::google::protobuf::int32 value) {
  bit_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_BitCache.bit)
}
 void DB_BitCache::add_bit(::google::protobuf::int32 value) {
  bit_.Add(value);
  // @@protoc_insertion_point(field_add:DB_BitCache.bit)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_BitCache::bit() const {
  // @@protoc_insertion_point(field_list:DB_BitCache.bit)
  return bit_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_BitCache::mutable_bit() {
  // @@protoc_insertion_point(field_mutable_list:DB_BitCache.bit)
  return &bit_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TimeLimitedUidSet::kUidsFieldNumber;
const int TimeLimitedUidSet::kChecttimeFieldNumber;
const int TimeLimitedUidSet::kUidMaxFieldNumber;
const int TimeLimitedUidSet::kNamesFieldNumber;
const int TimeLimitedUidSet::kHeadUrlsFieldNumber;
const int TimeLimitedUidSet::kOpenidsFieldNumber;
#endif  // !_MSC_VER

TimeLimitedUidSet::TimeLimitedUidSet()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TimeLimitedUidSet)
}

void TimeLimitedUidSet::InitAsDefaultInstance() {
}

TimeLimitedUidSet::TimeLimitedUidSet(const TimeLimitedUidSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TimeLimitedUidSet)
}

void TimeLimitedUidSet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  checttime_ = GOOGLE_LONGLONG(0);
  uid_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLimitedUidSet::~TimeLimitedUidSet() {
  // @@protoc_insertion_point(destructor:TimeLimitedUidSet)
  SharedDtor();
}

void TimeLimitedUidSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeLimitedUidSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeLimitedUidSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeLimitedUidSet_descriptor_;
}

const TimeLimitedUidSet& TimeLimitedUidSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

TimeLimitedUidSet* TimeLimitedUidSet::default_instance_ = NULL;

TimeLimitedUidSet* TimeLimitedUidSet::New(::google::protobuf::Arena* arena) const {
  TimeLimitedUidSet* n = new TimeLimitedUidSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeLimitedUidSet::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    checttime_ = GOOGLE_LONGLONG(0);
    uid_max_ = 0;
  }
  uids_.Clear();
  names_.Clear();
  head_urls_.Clear();
  openids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TimeLimitedUidSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TimeLimitedUidSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 uids = 6;
      case 6: {
        if (tag == 48) {
         parse_uids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_uids())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_uids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_uids;
        if (input->ExpectTag(56)) goto parse_checttime;
        break;
      }

      // optional int64 checttime = 7;
      case 7: {
        if (tag == 56) {
         parse_checttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &checttime_)));
          set_has_checttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_uid_max;
        break;
      }

      // optional int32 uid_max = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_uid_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_max_)));
          set_has_uid_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_names;
        break;
      }

      // repeated string names = 9;
      case 9: {
        if (tag == 74) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TimeLimitedUidSet.names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_names;
        if (input->ExpectTag(82)) goto parse_head_urls;
        break;
      }

      // repeated string head_urls = 10;
      case 10: {
        if (tag == 82) {
         parse_head_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_head_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->head_urls(this->head_urls_size() - 1).data(),
            this->head_urls(this->head_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TimeLimitedUidSet.head_urls");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_head_urls;
        if (input->ExpectTag(90)) goto parse_openids;
        break;
      }

      // repeated string openids = 11;
      case 11: {
        if (tag == 90) {
         parse_openids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_openids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openids(this->openids_size() - 1).data(),
            this->openids(this->openids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TimeLimitedUidSet.openids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_openids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TimeLimitedUidSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TimeLimitedUidSet)
  return false;
#undef DO_
}

void TimeLimitedUidSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TimeLimitedUidSet)
  // repeated int64 uids = 6;
  for (int i = 0; i < this->uids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->uids(i), output);
  }

  // optional int64 checttime = 7;
  if (has_checttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->checttime(), output);
  }

  // optional int32 uid_max = 8 [default = 0];
  if (has_uid_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->uid_max(), output);
  }

  // repeated string names = 9;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "TimeLimitedUidSet.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->names(i), output);
  }

  // repeated string head_urls = 10;
  for (int i = 0; i < this->head_urls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->head_urls(i).data(), this->head_urls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "TimeLimitedUidSet.head_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->head_urls(i), output);
  }

  // repeated string openids = 11;
  for (int i = 0; i < this->openids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->openids(i).data(), this->openids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "TimeLimitedUidSet.openids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->openids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TimeLimitedUidSet)
}

::google::protobuf::uint8* TimeLimitedUidSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TimeLimitedUidSet)
  // repeated int64 uids = 6;
  for (int i = 0; i < this->uids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->uids(i), target);
  }

  // optional int64 checttime = 7;
  if (has_checttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->checttime(), target);
  }

  // optional int32 uid_max = 8 [default = 0];
  if (has_uid_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->uid_max(), target);
  }

  // repeated string names = 9;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TimeLimitedUidSet.names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->names(i), target);
  }

  // repeated string head_urls = 10;
  for (int i = 0; i < this->head_urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->head_urls(i).data(), this->head_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TimeLimitedUidSet.head_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->head_urls(i), target);
  }

  // repeated string openids = 11;
  for (int i = 0; i < this->openids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openids(i).data(), this->openids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TimeLimitedUidSet.openids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->openids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TimeLimitedUidSet)
  return target;
}

int TimeLimitedUidSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & 6) {
    // optional int64 checttime = 7;
    if (has_checttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->checttime());
    }

    // optional int32 uid_max = 8 [default = 0];
    if (has_uid_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid_max());
    }

  }
  // repeated int64 uids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->uids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->uids(i));
    }
    total_size += 1 * this->uids_size() + data_size;
  }

  // repeated string names = 9;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  // repeated string head_urls = 10;
  total_size += 1 * this->head_urls_size();
  for (int i = 0; i < this->head_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->head_urls(i));
  }

  // repeated string openids = 11;
  total_size += 1 * this->openids_size();
  for (int i = 0; i < this->openids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->openids(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLimitedUidSet::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimeLimitedUidSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeLimitedUidSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeLimitedUidSet::MergeFrom(const TimeLimitedUidSet& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  uids_.MergeFrom(from.uids_);
  names_.MergeFrom(from.names_);
  head_urls_.MergeFrom(from.head_urls_);
  openids_.MergeFrom(from.openids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_checttime()) {
      set_checttime(from.checttime());
    }
    if (from.has_uid_max()) {
      set_uid_max(from.uid_max());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TimeLimitedUidSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeLimitedUidSet::CopyFrom(const TimeLimitedUidSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLimitedUidSet::IsInitialized() const {

  return true;
}

void TimeLimitedUidSet::Swap(TimeLimitedUidSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeLimitedUidSet::InternalSwap(TimeLimitedUidSet* other) {
  uids_.UnsafeArenaSwap(&other->uids_);
  std::swap(checttime_, other->checttime_);
  std::swap(uid_max_, other->uid_max_);
  names_.UnsafeArenaSwap(&other->names_);
  head_urls_.UnsafeArenaSwap(&other->head_urls_);
  openids_.UnsafeArenaSwap(&other->openids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeLimitedUidSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeLimitedUidSet_descriptor_;
  metadata.reflection = TimeLimitedUidSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeLimitedUidSet

// repeated int64 uids = 6;
 int TimeLimitedUidSet::uids_size() const {
  return uids_.size();
}
 void TimeLimitedUidSet::clear_uids() {
  uids_.Clear();
}
 ::google::protobuf::int64 TimeLimitedUidSet::uids(int index) const {
  // @@protoc_insertion_point(field_get:TimeLimitedUidSet.uids)
  return uids_.Get(index);
}
 void TimeLimitedUidSet::set_uids(int index, ::google::protobuf::int64 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:TimeLimitedUidSet.uids)
}
 void TimeLimitedUidSet::add_uids(::google::protobuf::int64 value) {
  uids_.Add(value);
  // @@protoc_insertion_point(field_add:TimeLimitedUidSet.uids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TimeLimitedUidSet::uids() const {
  // @@protoc_insertion_point(field_list:TimeLimitedUidSet.uids)
  return uids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TimeLimitedUidSet::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:TimeLimitedUidSet.uids)
  return &uids_;
}

// optional int64 checttime = 7;
 bool TimeLimitedUidSet::has_checttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void TimeLimitedUidSet::set_has_checttime() {
  _has_bits_[0] |= 0x00000002u;
}
 void TimeLimitedUidSet::clear_has_checttime() {
  _has_bits_[0] &= ~0x00000002u;
}
 void TimeLimitedUidSet::clear_checttime() {
  checttime_ = GOOGLE_LONGLONG(0);
  clear_has_checttime();
}
 ::google::protobuf::int64 TimeLimitedUidSet::checttime() const {
  // @@protoc_insertion_point(field_get:TimeLimitedUidSet.checttime)
  return checttime_;
}
 void TimeLimitedUidSet::set_checttime(::google::protobuf::int64 value) {
  set_has_checttime();
  checttime_ = value;
  // @@protoc_insertion_point(field_set:TimeLimitedUidSet.checttime)
}

// optional int32 uid_max = 8 [default = 0];
 bool TimeLimitedUidSet::has_uid_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void TimeLimitedUidSet::set_has_uid_max() {
  _has_bits_[0] |= 0x00000004u;
}
 void TimeLimitedUidSet::clear_has_uid_max() {
  _has_bits_[0] &= ~0x00000004u;
}
 void TimeLimitedUidSet::clear_uid_max() {
  uid_max_ = 0;
  clear_has_uid_max();
}
 ::google::protobuf::int32 TimeLimitedUidSet::uid_max() const {
  // @@protoc_insertion_point(field_get:TimeLimitedUidSet.uid_max)
  return uid_max_;
}
 void TimeLimitedUidSet::set_uid_max(::google::protobuf::int32 value) {
  set_has_uid_max();
  uid_max_ = value;
  // @@protoc_insertion_point(field_set:TimeLimitedUidSet.uid_max)
}

// repeated string names = 9;
 int TimeLimitedUidSet::names_size() const {
  return names_.size();
}
 void TimeLimitedUidSet::clear_names() {
  names_.Clear();
}
 const ::std::string& TimeLimitedUidSet::names(int index) const {
  // @@protoc_insertion_point(field_get:TimeLimitedUidSet.names)
  return names_.Get(index);
}
 ::std::string* TimeLimitedUidSet::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:TimeLimitedUidSet.names)
  return names_.Mutable(index);
}
 void TimeLimitedUidSet::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TimeLimitedUidSet.names)
  names_.Mutable(index)->assign(value);
}
 void TimeLimitedUidSet::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TimeLimitedUidSet.names)
}
 void TimeLimitedUidSet::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TimeLimitedUidSet.names)
}
 ::std::string* TimeLimitedUidSet::add_names() {
  return names_.Add();
}
 void TimeLimitedUidSet::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TimeLimitedUidSet.names)
}
 void TimeLimitedUidSet::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TimeLimitedUidSet.names)
}
 void TimeLimitedUidSet::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TimeLimitedUidSet.names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TimeLimitedUidSet::names() const {
  // @@protoc_insertion_point(field_list:TimeLimitedUidSet.names)
  return names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TimeLimitedUidSet::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:TimeLimitedUidSet.names)
  return &names_;
}

// repeated string head_urls = 10;
 int TimeLimitedUidSet::head_urls_size() const {
  return head_urls_.size();
}
 void TimeLimitedUidSet::clear_head_urls() {
  head_urls_.Clear();
}
 const ::std::string& TimeLimitedUidSet::head_urls(int index) const {
  // @@protoc_insertion_point(field_get:TimeLimitedUidSet.head_urls)
  return head_urls_.Get(index);
}
 ::std::string* TimeLimitedUidSet::mutable_head_urls(int index) {
  // @@protoc_insertion_point(field_mutable:TimeLimitedUidSet.head_urls)
  return head_urls_.Mutable(index);
}
 void TimeLimitedUidSet::set_head_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TimeLimitedUidSet.head_urls)
  head_urls_.Mutable(index)->assign(value);
}
 void TimeLimitedUidSet::set_head_urls(int index, const char* value) {
  head_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TimeLimitedUidSet.head_urls)
}
 void TimeLimitedUidSet::set_head_urls(int index, const char* value, size_t size) {
  head_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TimeLimitedUidSet.head_urls)
}
 ::std::string* TimeLimitedUidSet::add_head_urls() {
  return head_urls_.Add();
}
 void TimeLimitedUidSet::add_head_urls(const ::std::string& value) {
  head_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TimeLimitedUidSet.head_urls)
}
 void TimeLimitedUidSet::add_head_urls(const char* value) {
  head_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TimeLimitedUidSet.head_urls)
}
 void TimeLimitedUidSet::add_head_urls(const char* value, size_t size) {
  head_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TimeLimitedUidSet.head_urls)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TimeLimitedUidSet::head_urls() const {
  // @@protoc_insertion_point(field_list:TimeLimitedUidSet.head_urls)
  return head_urls_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TimeLimitedUidSet::mutable_head_urls() {
  // @@protoc_insertion_point(field_mutable_list:TimeLimitedUidSet.head_urls)
  return &head_urls_;
}

// repeated string openids = 11;
 int TimeLimitedUidSet::openids_size() const {
  return openids_.size();
}
 void TimeLimitedUidSet::clear_openids() {
  openids_.Clear();
}
 const ::std::string& TimeLimitedUidSet::openids(int index) const {
  // @@protoc_insertion_point(field_get:TimeLimitedUidSet.openids)
  return openids_.Get(index);
}
 ::std::string* TimeLimitedUidSet::mutable_openids(int index) {
  // @@protoc_insertion_point(field_mutable:TimeLimitedUidSet.openids)
  return openids_.Mutable(index);
}
 void TimeLimitedUidSet::set_openids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TimeLimitedUidSet.openids)
  openids_.Mutable(index)->assign(value);
}
 void TimeLimitedUidSet::set_openids(int index, const char* value) {
  openids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TimeLimitedUidSet.openids)
}
 void TimeLimitedUidSet::set_openids(int index, const char* value, size_t size) {
  openids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TimeLimitedUidSet.openids)
}
 ::std::string* TimeLimitedUidSet::add_openids() {
  return openids_.Add();
}
 void TimeLimitedUidSet::add_openids(const ::std::string& value) {
  openids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TimeLimitedUidSet.openids)
}
 void TimeLimitedUidSet::add_openids(const char* value) {
  openids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TimeLimitedUidSet.openids)
}
 void TimeLimitedUidSet::add_openids(const char* value, size_t size) {
  openids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TimeLimitedUidSet.openids)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TimeLimitedUidSet::openids() const {
  // @@protoc_insertion_point(field_list:TimeLimitedUidSet.openids)
  return openids_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TimeLimitedUidSet::mutable_openids() {
  // @@protoc_insertion_point(field_mutable_list:TimeLimitedUidSet.openids)
  return &openids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LotteryLimited::kPvecountsFieldNumber;
const int LotteryLimited::kDaytimeFieldNumber;
const int LotteryLimited::kSecondtimeFieldNumber;
#endif  // !_MSC_VER

LotteryLimited::LotteryLimited()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LotteryLimited)
}

void LotteryLimited::InitAsDefaultInstance() {
}

LotteryLimited::LotteryLimited(const LotteryLimited& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LotteryLimited)
}

void LotteryLimited::SharedCtor() {
  _cached_size_ = 0;
  pvecounts_ = GOOGLE_LONGLONG(0);
  daytime_ = GOOGLE_LONGLONG(0);
  secondtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryLimited::~LotteryLimited() {
  // @@protoc_insertion_point(destructor:LotteryLimited)
  SharedDtor();
}

void LotteryLimited::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotteryLimited::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryLimited::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryLimited_descriptor_;
}

const LotteryLimited& LotteryLimited::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

LotteryLimited* LotteryLimited::default_instance_ = NULL;

LotteryLimited* LotteryLimited::New(::google::protobuf::Arena* arena) const {
  LotteryLimited* n = new LotteryLimited;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LotteryLimited::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LotteryLimited*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pvecounts_, secondtime_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LotteryLimited::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LotteryLimited)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pvecounts = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pvecounts_)));
          set_has_pvecounts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_daytime;
        break;
      }

      // optional int64 daytime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_daytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &daytime_)));
          set_has_daytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_secondtime;
        break;
      }

      // optional int64 secondtime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_secondtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &secondtime_)));
          set_has_secondtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LotteryLimited)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LotteryLimited)
  return false;
#undef DO_
}

void LotteryLimited::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LotteryLimited)
  // optional int64 pvecounts = 1 [default = 0];
  if (has_pvecounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pvecounts(), output);
  }

  // optional int64 daytime = 2 [default = 0];
  if (has_daytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->daytime(), output);
  }

  // optional int64 secondtime = 3 [default = 0];
  if (has_secondtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->secondtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LotteryLimited)
}

::google::protobuf::uint8* LotteryLimited::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LotteryLimited)
  // optional int64 pvecounts = 1 [default = 0];
  if (has_pvecounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pvecounts(), target);
  }

  // optional int64 daytime = 2 [default = 0];
  if (has_daytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->daytime(), target);
  }

  // optional int64 secondtime = 3 [default = 0];
  if (has_secondtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->secondtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LotteryLimited)
  return target;
}

int LotteryLimited::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int64 pvecounts = 1 [default = 0];
    if (has_pvecounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pvecounts());
    }

    // optional int64 daytime = 2 [default = 0];
    if (has_daytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->daytime());
    }

    // optional int64 secondtime = 3 [default = 0];
    if (has_secondtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->secondtime());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryLimited::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LotteryLimited* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryLimited*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryLimited::MergeFrom(const LotteryLimited& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvecounts()) {
      set_pvecounts(from.pvecounts());
    }
    if (from.has_daytime()) {
      set_daytime(from.daytime());
    }
    if (from.has_secondtime()) {
      set_secondtime(from.secondtime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LotteryLimited::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryLimited::CopyFrom(const LotteryLimited& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryLimited::IsInitialized() const {

  return true;
}

void LotteryLimited::Swap(LotteryLimited* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LotteryLimited::InternalSwap(LotteryLimited* other) {
  std::swap(pvecounts_, other->pvecounts_);
  std::swap(daytime_, other->daytime_);
  std::swap(secondtime_, other->secondtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LotteryLimited::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryLimited_descriptor_;
  metadata.reflection = LotteryLimited_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LotteryLimited

// optional int64 pvecounts = 1 [default = 0];
 bool LotteryLimited::has_pvecounts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void LotteryLimited::set_has_pvecounts() {
  _has_bits_[0] |= 0x00000001u;
}
 void LotteryLimited::clear_has_pvecounts() {
  _has_bits_[0] &= ~0x00000001u;
}
 void LotteryLimited::clear_pvecounts() {
  pvecounts_ = GOOGLE_LONGLONG(0);
  clear_has_pvecounts();
}
 ::google::protobuf::int64 LotteryLimited::pvecounts() const {
  // @@protoc_insertion_point(field_get:LotteryLimited.pvecounts)
  return pvecounts_;
}
 void LotteryLimited::set_pvecounts(::google::protobuf::int64 value) {
  set_has_pvecounts();
  pvecounts_ = value;
  // @@protoc_insertion_point(field_set:LotteryLimited.pvecounts)
}

// optional int64 daytime = 2 [default = 0];
 bool LotteryLimited::has_daytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void LotteryLimited::set_has_daytime() {
  _has_bits_[0] |= 0x00000002u;
}
 void LotteryLimited::clear_has_daytime() {
  _has_bits_[0] &= ~0x00000002u;
}
 void LotteryLimited::clear_daytime() {
  daytime_ = GOOGLE_LONGLONG(0);
  clear_has_daytime();
}
 ::google::protobuf::int64 LotteryLimited::daytime() const {
  // @@protoc_insertion_point(field_get:LotteryLimited.daytime)
  return daytime_;
}
 void LotteryLimited::set_daytime(::google::protobuf::int64 value) {
  set_has_daytime();
  daytime_ = value;
  // @@protoc_insertion_point(field_set:LotteryLimited.daytime)
}

// optional int64 secondtime = 3 [default = 0];
 bool LotteryLimited::has_secondtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void LotteryLimited::set_has_secondtime() {
  _has_bits_[0] |= 0x00000004u;
}
 void LotteryLimited::clear_has_secondtime() {
  _has_bits_[0] &= ~0x00000004u;
}
 void LotteryLimited::clear_secondtime() {
  secondtime_ = GOOGLE_LONGLONG(0);
  clear_has_secondtime();
}
 ::google::protobuf::int64 LotteryLimited::secondtime() const {
  // @@protoc_insertion_point(field_get:LotteryLimited.secondtime)
  return secondtime_;
}
 void LotteryLimited::set_secondtime(::google::protobuf::int64 value) {
  set_has_secondtime();
  secondtime_ = value;
  // @@protoc_insertion_point(field_set:LotteryLimited.secondtime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_MaxSizedUidList::kUidFieldNumber;
const int DB_MaxSizedUidList::kPosFieldNumber;
#endif  // !_MSC_VER

DB_MaxSizedUidList::DB_MaxSizedUidList()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_MaxSizedUidList)
}

void DB_MaxSizedUidList::InitAsDefaultInstance() {
}

DB_MaxSizedUidList::DB_MaxSizedUidList(const DB_MaxSizedUidList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_MaxSizedUidList)
}

void DB_MaxSizedUidList::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_MaxSizedUidList::~DB_MaxSizedUidList() {
  // @@protoc_insertion_point(destructor:DB_MaxSizedUidList)
  SharedDtor();
}

void DB_MaxSizedUidList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_MaxSizedUidList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_MaxSizedUidList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_MaxSizedUidList_descriptor_;
}

const DB_MaxSizedUidList& DB_MaxSizedUidList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_MaxSizedUidList* DB_MaxSizedUidList::default_instance_ = NULL;

DB_MaxSizedUidList* DB_MaxSizedUidList::New(::google::protobuf::Arena* arena) const {
  DB_MaxSizedUidList* n = new DB_MaxSizedUidList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_MaxSizedUidList::Clear() {
  pos_ = 0;
  uid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_MaxSizedUidList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_MaxSizedUidList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 uid = 1;
      case 1: {
        if (tag == 8) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_uid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_uid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_uid;
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_MaxSizedUidList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_MaxSizedUidList)
  return false;
#undef DO_
}

void DB_MaxSizedUidList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_MaxSizedUidList)
  // repeated int64 uid = 1;
  for (int i = 0; i < this->uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->uid(i), output);
  }

  // optional int32 pos = 2 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_MaxSizedUidList)
}

::google::protobuf::uint8* DB_MaxSizedUidList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_MaxSizedUidList)
  // repeated int64 uid = 1;
  for (int i = 0; i < this->uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->uid(i), target);
  }

  // optional int32 pos = 2 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_MaxSizedUidList)
  return target;
}

int DB_MaxSizedUidList::ByteSize() const {
  int total_size = 0;

  // optional int32 pos = 2 [default = 0];
  if (has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  // repeated int64 uid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->uid(i));
    }
    total_size += 1 * this->uid_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_MaxSizedUidList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_MaxSizedUidList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_MaxSizedUidList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_MaxSizedUidList::MergeFrom(const DB_MaxSizedUidList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  uid_.MergeFrom(from.uid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_MaxSizedUidList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_MaxSizedUidList::CopyFrom(const DB_MaxSizedUidList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_MaxSizedUidList::IsInitialized() const {

  return true;
}

void DB_MaxSizedUidList::Swap(DB_MaxSizedUidList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_MaxSizedUidList::InternalSwap(DB_MaxSizedUidList* other) {
  uid_.UnsafeArenaSwap(&other->uid_);
  std::swap(pos_, other->pos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_MaxSizedUidList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_MaxSizedUidList_descriptor_;
  metadata.reflection = DB_MaxSizedUidList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_MaxSizedUidList

// repeated int64 uid = 1;
 int DB_MaxSizedUidList::uid_size() const {
  return uid_.size();
}
 void DB_MaxSizedUidList::clear_uid() {
  uid_.Clear();
}
 ::google::protobuf::int64 DB_MaxSizedUidList::uid(int index) const {
  // @@protoc_insertion_point(field_get:DB_MaxSizedUidList.uid)
  return uid_.Get(index);
}
 void DB_MaxSizedUidList::set_uid(int index, ::google::protobuf::int64 value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_MaxSizedUidList.uid)
}
 void DB_MaxSizedUidList::add_uid(::google::protobuf::int64 value) {
  uid_.Add(value);
  // @@protoc_insertion_point(field_add:DB_MaxSizedUidList.uid)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_MaxSizedUidList::uid() const {
  // @@protoc_insertion_point(field_list:DB_MaxSizedUidList.uid)
  return uid_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_MaxSizedUidList::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:DB_MaxSizedUidList.uid)
  return &uid_;
}

// optional int32 pos = 2 [default = 0];
 bool DB_MaxSizedUidList::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_MaxSizedUidList::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_MaxSizedUidList::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_MaxSizedUidList::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
 ::google::protobuf::int32 DB_MaxSizedUidList::pos() const {
  // @@protoc_insertion_point(field_get:DB_MaxSizedUidList.pos)
  return pos_;
}
 void DB_MaxSizedUidList::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:DB_MaxSizedUidList.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_ExpLevel::kLvlFieldNumber;
const int DB_ExpLevel::kExpFieldNumber;
const int DB_ExpLevel::kExpTotalFieldNumber;
const int DB_ExpLevel::kExpNextFieldNumber;
#endif  // !_MSC_VER

DB_ExpLevel::DB_ExpLevel()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_ExpLevel)
}

void DB_ExpLevel::InitAsDefaultInstance() {
}

DB_ExpLevel::DB_ExpLevel(const DB_ExpLevel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_ExpLevel)
}

void DB_ExpLevel::SharedCtor() {
  _cached_size_ = 0;
  lvl_ = 0;
  exp_ = 0;
  exp_total_ = 0;
  exp_next_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_ExpLevel::~DB_ExpLevel() {
  // @@protoc_insertion_point(destructor:DB_ExpLevel)
  SharedDtor();
}

void DB_ExpLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_ExpLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_ExpLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_ExpLevel_descriptor_;
}

const DB_ExpLevel& DB_ExpLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_ExpLevel* DB_ExpLevel::default_instance_ = NULL;

DB_ExpLevel* DB_ExpLevel::New(::google::protobuf::Arena* arena) const {
  DB_ExpLevel* n = new DB_ExpLevel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_ExpLevel::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_ExpLevel*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lvl_, exp_next_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_ExpLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_ExpLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lvl = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp_total;
        break;
      }

      // optional int32 exp_total = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_exp_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_total_)));
          set_has_exp_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp_next;
        break;
      }

      // optional int32 exp_next = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_exp_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_next_)));
          set_has_exp_next();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_ExpLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_ExpLevel)
  return false;
#undef DO_
}

void DB_ExpLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_ExpLevel)
  // optional int32 lvl = 1 [default = 0];
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lvl(), output);
  }

  // optional int32 exp = 2 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 exp_total = 3 [default = 0];
  if (has_exp_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp_total(), output);
  }

  // optional int32 exp_next = 4 [default = 0];
  if (has_exp_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp_next(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_ExpLevel)
}

::google::protobuf::uint8* DB_ExpLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_ExpLevel)
  // optional int32 lvl = 1 [default = 0];
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lvl(), target);
  }

  // optional int32 exp = 2 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 exp_total = 3 [default = 0];
  if (has_exp_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp_total(), target);
  }

  // optional int32 exp_next = 4 [default = 0];
  if (has_exp_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp_next(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_ExpLevel)
  return target;
}

int DB_ExpLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional int32 lvl = 1 [default = 0];
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvl());
    }

    // optional int32 exp = 2 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 exp_total = 3 [default = 0];
    if (has_exp_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_total());
    }

    // optional int32 exp_next = 4 [default = 0];
    if (has_exp_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_next());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_ExpLevel::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_ExpLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_ExpLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_ExpLevel::MergeFrom(const DB_ExpLevel& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_exp_total()) {
      set_exp_total(from.exp_total());
    }
    if (from.has_exp_next()) {
      set_exp_next(from.exp_next());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_ExpLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_ExpLevel::CopyFrom(const DB_ExpLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_ExpLevel::IsInitialized() const {

  return true;
}

void DB_ExpLevel::Swap(DB_ExpLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_ExpLevel::InternalSwap(DB_ExpLevel* other) {
  std::swap(lvl_, other->lvl_);
  std::swap(exp_, other->exp_);
  std::swap(exp_total_, other->exp_total_);
  std::swap(exp_next_, other->exp_next_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_ExpLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_ExpLevel_descriptor_;
  metadata.reflection = DB_ExpLevel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_ExpLevel

// optional int32 lvl = 1 [default = 0];
 bool DB_ExpLevel::has_lvl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_ExpLevel::set_has_lvl() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_ExpLevel::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_ExpLevel::clear_lvl() {
  lvl_ = 0;
  clear_has_lvl();
}
 ::google::protobuf::int32 DB_ExpLevel::lvl() const {
  // @@protoc_insertion_point(field_get:DB_ExpLevel.lvl)
  return lvl_;
}
 void DB_ExpLevel::set_lvl(::google::protobuf::int32 value) {
  set_has_lvl();
  lvl_ = value;
  // @@protoc_insertion_point(field_set:DB_ExpLevel.lvl)
}

// optional int32 exp = 2 [default = 0];
 bool DB_ExpLevel::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_ExpLevel::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_ExpLevel::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_ExpLevel::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
 ::google::protobuf::int32 DB_ExpLevel::exp() const {
  // @@protoc_insertion_point(field_get:DB_ExpLevel.exp)
  return exp_;
}
 void DB_ExpLevel::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:DB_ExpLevel.exp)
}

// optional int32 exp_total = 3 [default = 0];
 bool DB_ExpLevel::has_exp_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_ExpLevel::set_has_exp_total() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_ExpLevel::clear_has_exp_total() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_ExpLevel::clear_exp_total() {
  exp_total_ = 0;
  clear_has_exp_total();
}
 ::google::protobuf::int32 DB_ExpLevel::exp_total() const {
  // @@protoc_insertion_point(field_get:DB_ExpLevel.exp_total)
  return exp_total_;
}
 void DB_ExpLevel::set_exp_total(::google::protobuf::int32 value) {
  set_has_exp_total();
  exp_total_ = value;
  // @@protoc_insertion_point(field_set:DB_ExpLevel.exp_total)
}

// optional int32 exp_next = 4 [default = 0];
 bool DB_ExpLevel::has_exp_next() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_ExpLevel::set_has_exp_next() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_ExpLevel::clear_has_exp_next() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_ExpLevel::clear_exp_next() {
  exp_next_ = 0;
  clear_has_exp_next();
}
 ::google::protobuf::int32 DB_ExpLevel::exp_next() const {
  // @@protoc_insertion_point(field_get:DB_ExpLevel.exp_next)
  return exp_next_;
}
 void DB_ExpLevel::set_exp_next(::google::protobuf::int32 value) {
  set_has_exp_next();
  exp_next_ = value;
  // @@protoc_insertion_point(field_set:DB_ExpLevel.exp_next)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_DailyCounter::kNumSetFieldNumber;
const int DB_DailyCounter::kNameSetFieldNumber;
const int DB_DailyCounter::kDayFieldNumber;
#endif  // !_MSC_VER

DB_DailyCounter::DB_DailyCounter()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_DailyCounter)
}

void DB_DailyCounter::InitAsDefaultInstance() {
}

DB_DailyCounter::DB_DailyCounter(const DB_DailyCounter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_DailyCounter)
}

void DB_DailyCounter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  day_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_DailyCounter::~DB_DailyCounter() {
  // @@protoc_insertion_point(destructor:DB_DailyCounter)
  SharedDtor();
}

void DB_DailyCounter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_DailyCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_DailyCounter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_DailyCounter_descriptor_;
}

const DB_DailyCounter& DB_DailyCounter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_DailyCounter* DB_DailyCounter::default_instance_ = NULL;

DB_DailyCounter* DB_DailyCounter::New(::google::protobuf::Arena* arena) const {
  DB_DailyCounter* n = new DB_DailyCounter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_DailyCounter::Clear() {
  day_ = GOOGLE_LONGLONG(0);
  num_set_.Clear();
  name_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_DailyCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_DailyCounter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 num_set = 1;
      case 1: {
        if (tag == 8) {
         parse_num_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_num_set())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num_set())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_num_set;
        if (input->ExpectTag(18)) goto parse_name_set;
        break;
      }

      // repeated string name_set = 2;
      case 2: {
        if (tag == 18) {
         parse_name_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name_set()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_set(this->name_set_size() - 1).data(),
            this->name_set(this->name_set_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_DailyCounter.name_set");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name_set;
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // optional int64 day = 3;
      case 3: {
        if (tag == 24) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_DailyCounter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_DailyCounter)
  return false;
#undef DO_
}

void DB_DailyCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_DailyCounter)
  // repeated int32 num_set = 1;
  for (int i = 0; i < this->num_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->num_set(i), output);
  }

  // repeated string name_set = 2;
  for (int i = 0; i < this->name_set_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->name_set(i).data(), this->name_set(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "DB_DailyCounter.name_set");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name_set(i), output);
  }

  // optional int64 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->day(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_DailyCounter)
}

::google::protobuf::uint8* DB_DailyCounter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_DailyCounter)
  // repeated int32 num_set = 1;
  for (int i = 0; i < this->num_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->num_set(i), target);
  }

  // repeated string name_set = 2;
  for (int i = 0; i < this->name_set_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_set(i).data(), this->name_set(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_DailyCounter.name_set");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->name_set(i), target);
  }

  // optional int64 day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->day(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_DailyCounter)
  return target;
}

int DB_DailyCounter::ByteSize() const {
  int total_size = 0;

  // optional int64 day = 3;
  if (has_day()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->day());
  }

  // repeated int32 num_set = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_set_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num_set(i));
    }
    total_size += 1 * this->num_set_size() + data_size;
  }

  // repeated string name_set = 2;
  total_size += 1 * this->name_set_size();
  for (int i = 0; i < this->name_set_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name_set(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_DailyCounter::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_DailyCounter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_DailyCounter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_DailyCounter::MergeFrom(const DB_DailyCounter& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  num_set_.MergeFrom(from.num_set_);
  name_set_.MergeFrom(from.name_set_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_DailyCounter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_DailyCounter::CopyFrom(const DB_DailyCounter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_DailyCounter::IsInitialized() const {

  return true;
}

void DB_DailyCounter::Swap(DB_DailyCounter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_DailyCounter::InternalSwap(DB_DailyCounter* other) {
  num_set_.UnsafeArenaSwap(&other->num_set_);
  name_set_.UnsafeArenaSwap(&other->name_set_);
  std::swap(day_, other->day_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_DailyCounter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_DailyCounter_descriptor_;
  metadata.reflection = DB_DailyCounter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_DailyCounter

// repeated int32 num_set = 1;
 int DB_DailyCounter::num_set_size() const {
  return num_set_.size();
}
 void DB_DailyCounter::clear_num_set() {
  num_set_.Clear();
}
 ::google::protobuf::int32 DB_DailyCounter::num_set(int index) const {
  // @@protoc_insertion_point(field_get:DB_DailyCounter.num_set)
  return num_set_.Get(index);
}
 void DB_DailyCounter::set_num_set(int index, ::google::protobuf::int32 value) {
  num_set_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_DailyCounter.num_set)
}
 void DB_DailyCounter::add_num_set(::google::protobuf::int32 value) {
  num_set_.Add(value);
  // @@protoc_insertion_point(field_add:DB_DailyCounter.num_set)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_DailyCounter::num_set() const {
  // @@protoc_insertion_point(field_list:DB_DailyCounter.num_set)
  return num_set_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_DailyCounter::mutable_num_set() {
  // @@protoc_insertion_point(field_mutable_list:DB_DailyCounter.num_set)
  return &num_set_;
}

// repeated string name_set = 2;
 int DB_DailyCounter::name_set_size() const {
  return name_set_.size();
}
 void DB_DailyCounter::clear_name_set() {
  name_set_.Clear();
}
 const ::std::string& DB_DailyCounter::name_set(int index) const {
  // @@protoc_insertion_point(field_get:DB_DailyCounter.name_set)
  return name_set_.Get(index);
}
 ::std::string* DB_DailyCounter::mutable_name_set(int index) {
  // @@protoc_insertion_point(field_mutable:DB_DailyCounter.name_set)
  return name_set_.Mutable(index);
}
 void DB_DailyCounter::set_name_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_DailyCounter.name_set)
  name_set_.Mutable(index)->assign(value);
}
 void DB_DailyCounter::set_name_set(int index, const char* value) {
  name_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_DailyCounter.name_set)
}
 void DB_DailyCounter::set_name_set(int index, const char* value, size_t size) {
  name_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_DailyCounter.name_set)
}
 ::std::string* DB_DailyCounter::add_name_set() {
  return name_set_.Add();
}
 void DB_DailyCounter::add_name_set(const ::std::string& value) {
  name_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_DailyCounter.name_set)
}
 void DB_DailyCounter::add_name_set(const char* value) {
  name_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_DailyCounter.name_set)
}
 void DB_DailyCounter::add_name_set(const char* value, size_t size) {
  name_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_DailyCounter.name_set)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_DailyCounter::name_set() const {
  // @@protoc_insertion_point(field_list:DB_DailyCounter.name_set)
  return name_set_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_DailyCounter::mutable_name_set() {
  // @@protoc_insertion_point(field_mutable_list:DB_DailyCounter.name_set)
  return &name_set_;
}

// optional int64 day = 3;
 bool DB_DailyCounter::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_DailyCounter::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_DailyCounter::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_DailyCounter::clear_day() {
  day_ = GOOGLE_LONGLONG(0);
  clear_has_day();
}
 ::google::protobuf::int64 DB_DailyCounter::day() const {
  // @@protoc_insertion_point(field_get:DB_DailyCounter.day)
  return day_;
}
 void DB_DailyCounter::set_day(::google::protobuf::int64 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:DB_DailyCounter.day)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_VersionCounter::kNumSetFieldNumber;
const int DB_VersionCounter::kNameSetFieldNumber;
const int DB_VersionCounter::kVerSetFieldNumber;
#endif  // !_MSC_VER

DB_VersionCounter::DB_VersionCounter()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_VersionCounter)
}

void DB_VersionCounter::InitAsDefaultInstance() {
}

DB_VersionCounter::DB_VersionCounter(const DB_VersionCounter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_VersionCounter)
}

void DB_VersionCounter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_VersionCounter::~DB_VersionCounter() {
  // @@protoc_insertion_point(destructor:DB_VersionCounter)
  SharedDtor();
}

void DB_VersionCounter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_VersionCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_VersionCounter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_VersionCounter_descriptor_;
}

const DB_VersionCounter& DB_VersionCounter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_VersionCounter* DB_VersionCounter::default_instance_ = NULL;

DB_VersionCounter* DB_VersionCounter::New(::google::protobuf::Arena* arena) const {
  DB_VersionCounter* n = new DB_VersionCounter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_VersionCounter::Clear() {
  num_set_.Clear();
  name_set_.Clear();
  ver_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_VersionCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_VersionCounter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 num_set = 1;
      case 1: {
        if (tag == 8) {
         parse_num_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_num_set())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num_set())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_num_set;
        if (input->ExpectTag(18)) goto parse_name_set;
        break;
      }

      // repeated string name_set = 2;
      case 2: {
        if (tag == 18) {
         parse_name_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name_set()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_set(this->name_set_size() - 1).data(),
            this->name_set(this->name_set_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_VersionCounter.name_set");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name_set;
        if (input->ExpectTag(24)) goto parse_ver_set;
        break;
      }

      // repeated int32 ver_set = 3;
      case 3: {
        if (tag == 24) {
         parse_ver_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_ver_set())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ver_set())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ver_set;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_VersionCounter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_VersionCounter)
  return false;
#undef DO_
}

void DB_VersionCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_VersionCounter)
  // repeated int32 num_set = 1;
  for (int i = 0; i < this->num_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->num_set(i), output);
  }

  // repeated string name_set = 2;
  for (int i = 0; i < this->name_set_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->name_set(i).data(), this->name_set(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "DB_VersionCounter.name_set");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name_set(i), output);
  }

  // repeated int32 ver_set = 3;
  for (int i = 0; i < this->ver_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->ver_set(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_VersionCounter)
}

::google::protobuf::uint8* DB_VersionCounter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_VersionCounter)
  // repeated int32 num_set = 1;
  for (int i = 0; i < this->num_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->num_set(i), target);
  }

  // repeated string name_set = 2;
  for (int i = 0; i < this->name_set_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_set(i).data(), this->name_set(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_VersionCounter.name_set");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->name_set(i), target);
  }

  // repeated int32 ver_set = 3;
  for (int i = 0; i < this->ver_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->ver_set(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_VersionCounter)
  return target;
}

int DB_VersionCounter::ByteSize() const {
  int total_size = 0;

  // repeated int32 num_set = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_set_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num_set(i));
    }
    total_size += 1 * this->num_set_size() + data_size;
  }

  // repeated string name_set = 2;
  total_size += 1 * this->name_set_size();
  for (int i = 0; i < this->name_set_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name_set(i));
  }

  // repeated int32 ver_set = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ver_set_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ver_set(i));
    }
    total_size += 1 * this->ver_set_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_VersionCounter::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_VersionCounter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_VersionCounter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_VersionCounter::MergeFrom(const DB_VersionCounter& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  num_set_.MergeFrom(from.num_set_);
  name_set_.MergeFrom(from.name_set_);
  ver_set_.MergeFrom(from.ver_set_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_VersionCounter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_VersionCounter::CopyFrom(const DB_VersionCounter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_VersionCounter::IsInitialized() const {

  return true;
}

void DB_VersionCounter::Swap(DB_VersionCounter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_VersionCounter::InternalSwap(DB_VersionCounter* other) {
  num_set_.UnsafeArenaSwap(&other->num_set_);
  name_set_.UnsafeArenaSwap(&other->name_set_);
  ver_set_.UnsafeArenaSwap(&other->ver_set_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_VersionCounter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_VersionCounter_descriptor_;
  metadata.reflection = DB_VersionCounter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_VersionCounter

// repeated int32 num_set = 1;
 int DB_VersionCounter::num_set_size() const {
  return num_set_.size();
}
 void DB_VersionCounter::clear_num_set() {
  num_set_.Clear();
}
 ::google::protobuf::int32 DB_VersionCounter::num_set(int index) const {
  // @@protoc_insertion_point(field_get:DB_VersionCounter.num_set)
  return num_set_.Get(index);
}
 void DB_VersionCounter::set_num_set(int index, ::google::protobuf::int32 value) {
  num_set_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_VersionCounter.num_set)
}
 void DB_VersionCounter::add_num_set(::google::protobuf::int32 value) {
  num_set_.Add(value);
  // @@protoc_insertion_point(field_add:DB_VersionCounter.num_set)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_VersionCounter::num_set() const {
  // @@protoc_insertion_point(field_list:DB_VersionCounter.num_set)
  return num_set_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_VersionCounter::mutable_num_set() {
  // @@protoc_insertion_point(field_mutable_list:DB_VersionCounter.num_set)
  return &num_set_;
}

// repeated string name_set = 2;
 int DB_VersionCounter::name_set_size() const {
  return name_set_.size();
}
 void DB_VersionCounter::clear_name_set() {
  name_set_.Clear();
}
 const ::std::string& DB_VersionCounter::name_set(int index) const {
  // @@protoc_insertion_point(field_get:DB_VersionCounter.name_set)
  return name_set_.Get(index);
}
 ::std::string* DB_VersionCounter::mutable_name_set(int index) {
  // @@protoc_insertion_point(field_mutable:DB_VersionCounter.name_set)
  return name_set_.Mutable(index);
}
 void DB_VersionCounter::set_name_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_VersionCounter.name_set)
  name_set_.Mutable(index)->assign(value);
}
 void DB_VersionCounter::set_name_set(int index, const char* value) {
  name_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_VersionCounter.name_set)
}
 void DB_VersionCounter::set_name_set(int index, const char* value, size_t size) {
  name_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_VersionCounter.name_set)
}
 ::std::string* DB_VersionCounter::add_name_set() {
  return name_set_.Add();
}
 void DB_VersionCounter::add_name_set(const ::std::string& value) {
  name_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_VersionCounter.name_set)
}
 void DB_VersionCounter::add_name_set(const char* value) {
  name_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_VersionCounter.name_set)
}
 void DB_VersionCounter::add_name_set(const char* value, size_t size) {
  name_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_VersionCounter.name_set)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_VersionCounter::name_set() const {
  // @@protoc_insertion_point(field_list:DB_VersionCounter.name_set)
  return name_set_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_VersionCounter::mutable_name_set() {
  // @@protoc_insertion_point(field_mutable_list:DB_VersionCounter.name_set)
  return &name_set_;
}

// repeated int32 ver_set = 3;
 int DB_VersionCounter::ver_set_size() const {
  return ver_set_.size();
}
 void DB_VersionCounter::clear_ver_set() {
  ver_set_.Clear();
}
 ::google::protobuf::int32 DB_VersionCounter::ver_set(int index) const {
  // @@protoc_insertion_point(field_get:DB_VersionCounter.ver_set)
  return ver_set_.Get(index);
}
 void DB_VersionCounter::set_ver_set(int index, ::google::protobuf::int32 value) {
  ver_set_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_VersionCounter.ver_set)
}
 void DB_VersionCounter::add_ver_set(::google::protobuf::int32 value) {
  ver_set_.Add(value);
  // @@protoc_insertion_point(field_add:DB_VersionCounter.ver_set)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_VersionCounter::ver_set() const {
  // @@protoc_insertion_point(field_list:DB_VersionCounter.ver_set)
  return ver_set_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_VersionCounter::mutable_ver_set() {
  // @@protoc_insertion_point(field_mutable_list:DB_VersionCounter.ver_set)
  return &ver_set_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_KingOfStar::kTotalValueFieldNumber;
const int DB_KingOfStar::kStarValueFieldNumber;
const int DB_KingOfStar::kScoreValueFieldNumber;
const int DB_KingOfStar::kIndexFieldNumber;
const int DB_KingOfStar::kNowPlayingFieldNumber;
#endif  // !_MSC_VER

DB_KingOfStar::DB_KingOfStar()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_KingOfStar)
}

void DB_KingOfStar::InitAsDefaultInstance() {
}

DB_KingOfStar::DB_KingOfStar(const DB_KingOfStar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_KingOfStar)
}

void DB_KingOfStar::SharedCtor() {
  _cached_size_ = 0;
  total_value_ = 0;
  star_value_ = 0;
  score_value_ = 0;
  index_ = 0;
  now_playing_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_KingOfStar::~DB_KingOfStar() {
  // @@protoc_insertion_point(destructor:DB_KingOfStar)
  SharedDtor();
}

void DB_KingOfStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_KingOfStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_KingOfStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_KingOfStar_descriptor_;
}

const DB_KingOfStar& DB_KingOfStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_KingOfStar* DB_KingOfStar::default_instance_ = NULL;

DB_KingOfStar* DB_KingOfStar::New(::google::protobuf::Arena* arena) const {
  DB_KingOfStar* n = new DB_KingOfStar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_KingOfStar::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_KingOfStar*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(total_value_, now_playing_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_KingOfStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_KingOfStar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_value = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_value_)));
          set_has_total_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star_value;
        break;
      }

      // optional int32 star_value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_star_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_value_)));
          set_has_star_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score_value;
        break;
      }

      // optional int32 score_value = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_score_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_value_)));
          set_has_score_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional int32 index = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_now_playing;
        break;
      }

      // optional int32 now_playing = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_now_playing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_playing_)));
          set_has_now_playing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_KingOfStar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_KingOfStar)
  return false;
#undef DO_
}

void DB_KingOfStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_KingOfStar)
  // optional int32 total_value = 1 [default = 0];
  if (has_total_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_value(), output);
  }

  // optional int32 star_value = 2 [default = 0];
  if (has_star_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star_value(), output);
  }

  // optional int32 score_value = 3 [default = 0];
  if (has_score_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score_value(), output);
  }

  // optional int32 index = 4 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  // optional int32 now_playing = 5 [default = 0];
  if (has_now_playing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->now_playing(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_KingOfStar)
}

::google::protobuf::uint8* DB_KingOfStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_KingOfStar)
  // optional int32 total_value = 1 [default = 0];
  if (has_total_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_value(), target);
  }

  // optional int32 star_value = 2 [default = 0];
  if (has_star_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star_value(), target);
  }

  // optional int32 score_value = 3 [default = 0];
  if (has_score_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score_value(), target);
  }

  // optional int32 index = 4 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  // optional int32 now_playing = 5 [default = 0];
  if (has_now_playing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->now_playing(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_KingOfStar)
  return target;
}

int DB_KingOfStar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional int32 total_value = 1 [default = 0];
    if (has_total_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_value());
    }

    // optional int32 star_value = 2 [default = 0];
    if (has_star_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_value());
    }

    // optional int32 score_value = 3 [default = 0];
    if (has_score_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_value());
    }

    // optional int32 index = 4 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 now_playing = 5 [default = 0];
    if (has_now_playing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_playing());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_KingOfStar::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_KingOfStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_KingOfStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_KingOfStar::MergeFrom(const DB_KingOfStar& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_value()) {
      set_total_value(from.total_value());
    }
    if (from.has_star_value()) {
      set_star_value(from.star_value());
    }
    if (from.has_score_value()) {
      set_score_value(from.score_value());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_now_playing()) {
      set_now_playing(from.now_playing());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_KingOfStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_KingOfStar::CopyFrom(const DB_KingOfStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_KingOfStar::IsInitialized() const {

  return true;
}

void DB_KingOfStar::Swap(DB_KingOfStar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_KingOfStar::InternalSwap(DB_KingOfStar* other) {
  std::swap(total_value_, other->total_value_);
  std::swap(star_value_, other->star_value_);
  std::swap(score_value_, other->score_value_);
  std::swap(index_, other->index_);
  std::swap(now_playing_, other->now_playing_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_KingOfStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_KingOfStar_descriptor_;
  metadata.reflection = DB_KingOfStar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_KingOfStar

// optional int32 total_value = 1 [default = 0];
 bool DB_KingOfStar::has_total_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_KingOfStar::set_has_total_value() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_KingOfStar::clear_has_total_value() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_KingOfStar::clear_total_value() {
  total_value_ = 0;
  clear_has_total_value();
}
 ::google::protobuf::int32 DB_KingOfStar::total_value() const {
  // @@protoc_insertion_point(field_get:DB_KingOfStar.total_value)
  return total_value_;
}
 void DB_KingOfStar::set_total_value(::google::protobuf::int32 value) {
  set_has_total_value();
  total_value_ = value;
  // @@protoc_insertion_point(field_set:DB_KingOfStar.total_value)
}

// optional int32 star_value = 2 [default = 0];
 bool DB_KingOfStar::has_star_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_KingOfStar::set_has_star_value() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_KingOfStar::clear_has_star_value() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_KingOfStar::clear_star_value() {
  star_value_ = 0;
  clear_has_star_value();
}
 ::google::protobuf::int32 DB_KingOfStar::star_value() const {
  // @@protoc_insertion_point(field_get:DB_KingOfStar.star_value)
  return star_value_;
}
 void DB_KingOfStar::set_star_value(::google::protobuf::int32 value) {
  set_has_star_value();
  star_value_ = value;
  // @@protoc_insertion_point(field_set:DB_KingOfStar.star_value)
}

// optional int32 score_value = 3 [default = 0];
 bool DB_KingOfStar::has_score_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_KingOfStar::set_has_score_value() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_KingOfStar::clear_has_score_value() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_KingOfStar::clear_score_value() {
  score_value_ = 0;
  clear_has_score_value();
}
 ::google::protobuf::int32 DB_KingOfStar::score_value() const {
  // @@protoc_insertion_point(field_get:DB_KingOfStar.score_value)
  return score_value_;
}
 void DB_KingOfStar::set_score_value(::google::protobuf::int32 value) {
  set_has_score_value();
  score_value_ = value;
  // @@protoc_insertion_point(field_set:DB_KingOfStar.score_value)
}

// optional int32 index = 4 [default = 0];
 bool DB_KingOfStar::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_KingOfStar::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_KingOfStar::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_KingOfStar::clear_index() {
  index_ = 0;
  clear_has_index();
}
 ::google::protobuf::int32 DB_KingOfStar::index() const {
  // @@protoc_insertion_point(field_get:DB_KingOfStar.index)
  return index_;
}
 void DB_KingOfStar::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:DB_KingOfStar.index)
}

// optional int32 now_playing = 5 [default = 0];
 bool DB_KingOfStar::has_now_playing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_KingOfStar::set_has_now_playing() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_KingOfStar::clear_has_now_playing() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_KingOfStar::clear_now_playing() {
  now_playing_ = 0;
  clear_has_now_playing();
}
 ::google::protobuf::int32 DB_KingOfStar::now_playing() const {
  // @@protoc_insertion_point(field_get:DB_KingOfStar.now_playing)
  return now_playing_;
}
 void DB_KingOfStar::set_now_playing(::google::protobuf::int32 value) {
  set_has_now_playing();
  now_playing_ = value;
  // @@protoc_insertion_point(field_set:DB_KingOfStar.now_playing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_ItemOnMap::kIdFieldNumber;
const int DB_ItemOnMap::kTypeidFieldNumber;
const int DB_ItemOnMap::kPosxFieldNumber;
const int DB_ItemOnMap::kPosyFieldNumber;
const int DB_ItemOnMap::kDirectionFieldNumber;
#endif  // !_MSC_VER

DB_ItemOnMap::DB_ItemOnMap()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_ItemOnMap)
}

void DB_ItemOnMap::InitAsDefaultInstance() {
}

DB_ItemOnMap::DB_ItemOnMap(const DB_ItemOnMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_ItemOnMap)
}

void DB_ItemOnMap::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  typeid__ = -1;
  posx_ = 0;
  posy_ = 0;
  direction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_ItemOnMap::~DB_ItemOnMap() {
  // @@protoc_insertion_point(destructor:DB_ItemOnMap)
  SharedDtor();
}

void DB_ItemOnMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_ItemOnMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_ItemOnMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_ItemOnMap_descriptor_;
}

const DB_ItemOnMap& DB_ItemOnMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_ItemOnMap* DB_ItemOnMap::default_instance_ = NULL;

DB_ItemOnMap* DB_ItemOnMap::New(::google::protobuf::Arena* arena) const {
  DB_ItemOnMap* n = new DB_ItemOnMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_ItemOnMap::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_ItemOnMap*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(posx_, direction_);
    id_ = 0;
    typeid__ = -1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_ItemOnMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_ItemOnMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_typeid;
        break;
      }

      // optional int32 typeid = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_typeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_posx;
        break;
      }

      // optional int32 posx = 3;
      case 3: {
        if (tag == 24) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_posy;
        break;
      }

      // optional int32 posy = 4;
      case 4: {
        if (tag == 32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_direction;
        break;
      }

      // optional int32 direction = 5;
      case 5: {
        if (tag == 40) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_ItemOnMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_ItemOnMap)
  return false;
#undef DO_
}

void DB_ItemOnMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_ItemOnMap)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 typeid = 2 [default = -1];
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // optional int32 posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // optional int32 posy = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  // optional int32 direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_ItemOnMap)
}

::google::protobuf::uint8* DB_ItemOnMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_ItemOnMap)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 typeid = 2 [default = -1];
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // optional int32 posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // optional int32 posy = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posy(), target);
  }

  // optional int32 direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_ItemOnMap)
  return target;
}

int DB_ItemOnMap::ByteSize() const {
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  if (_has_bits_[1 / 32] & 30) {
    // optional int32 typeid = 2 [default = -1];
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional int32 posx = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posy = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_ItemOnMap::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_ItemOnMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_ItemOnMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_ItemOnMap::MergeFrom(const DB_ItemOnMap& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_ItemOnMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_ItemOnMap::CopyFrom(const DB_ItemOnMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_ItemOnMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_ItemOnMap::Swap(DB_ItemOnMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_ItemOnMap::InternalSwap(DB_ItemOnMap* other) {
  std::swap(id_, other->id_);
  std::swap(typeid__, other->typeid__);
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(direction_, other->direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_ItemOnMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_ItemOnMap_descriptor_;
  metadata.reflection = DB_ItemOnMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_ItemOnMap

// required int32 id = 1;
 bool DB_ItemOnMap::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_ItemOnMap::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_ItemOnMap::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_ItemOnMap::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 DB_ItemOnMap::id() const {
  // @@protoc_insertion_point(field_get:DB_ItemOnMap.id)
  return id_;
}
 void DB_ItemOnMap::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DB_ItemOnMap.id)
}

// optional int32 typeid = 2 [default = -1];
 bool DB_ItemOnMap::has_typeid_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_ItemOnMap::set_has_typeid_() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_ItemOnMap::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_ItemOnMap::clear_typeid_() {
  typeid__ = -1;
  clear_has_typeid_();
}
 ::google::protobuf::int32 DB_ItemOnMap::typeid_() const {
  // @@protoc_insertion_point(field_get:DB_ItemOnMap.typeid)
  return typeid__;
}
 void DB_ItemOnMap::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:DB_ItemOnMap.typeid)
}

// optional int32 posx = 3;
 bool DB_ItemOnMap::has_posx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_ItemOnMap::set_has_posx() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_ItemOnMap::clear_has_posx() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_ItemOnMap::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
 ::google::protobuf::int32 DB_ItemOnMap::posx() const {
  // @@protoc_insertion_point(field_get:DB_ItemOnMap.posx)
  return posx_;
}
 void DB_ItemOnMap::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:DB_ItemOnMap.posx)
}

// optional int32 posy = 4;
 bool DB_ItemOnMap::has_posy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_ItemOnMap::set_has_posy() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_ItemOnMap::clear_has_posy() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_ItemOnMap::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
 ::google::protobuf::int32 DB_ItemOnMap::posy() const {
  // @@protoc_insertion_point(field_get:DB_ItemOnMap.posy)
  return posy_;
}
 void DB_ItemOnMap::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:DB_ItemOnMap.posy)
}

// optional int32 direction = 5;
 bool DB_ItemOnMap::has_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_ItemOnMap::set_has_direction() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_ItemOnMap::clear_has_direction() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_ItemOnMap::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
 ::google::protobuf::int32 DB_ItemOnMap::direction() const {
  // @@protoc_insertion_point(field_get:DB_ItemOnMap.direction)
  return direction_;
}
 void DB_ItemOnMap::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:DB_ItemOnMap.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_Map::kGroundListFieldNumber;
const int DB_Map::kWallListFieldNumber;
const int DB_Map::kAllocIdFieldNumber;
const int DB_Map::kBackIdFieldNumber;
const int DB_Map::kWallIdFieldNumber;
const int DB_Map::kFloorIdFieldNumber;
const int DB_Map::kRewardTimeFieldNumber;
#endif  // !_MSC_VER

DB_Map::DB_Map()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_Map)
}

void DB_Map::InitAsDefaultInstance() {
}

DB_Map::DB_Map(const DB_Map& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_Map)
}

void DB_Map::SharedCtor() {
  _cached_size_ = 0;
  alloc_id_ = 0;
  back_id_ = 0;
  wall_id_ = 5006;
  floor_id_ = 5003;
  reward_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Map::~DB_Map() {
  // @@protoc_insertion_point(destructor:DB_Map)
  SharedDtor();
}

void DB_Map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Map_descriptor_;
}

const DB_Map& DB_Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_Map* DB_Map::default_instance_ = NULL;

DB_Map* DB_Map::New(::google::protobuf::Arena* arena) const {
  DB_Map* n = new DB_Map;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_Map::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_Map*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 124) {
    ZR_(alloc_id_, back_id_);
    wall_id_ = 5006;
    floor_id_ = 5003;
    reward_time_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  groundlist_.Clear();
  walllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_Map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_ItemOnMap GroundList = 1;
      case 1: {
        if (tag == 10) {
         parse_GroundList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groundlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GroundList;
        if (input->ExpectTag(18)) goto parse_WallList;
        break;
      }

      // repeated .DB_ItemOnMap WallList = 2;
      case 2: {
        if (tag == 18) {
         parse_WallList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_walllist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_WallList;
        if (input->ExpectTag(24)) goto parse_alloc_id;
        break;
      }

      // optional int32 alloc_id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_alloc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alloc_id_)));
          set_has_alloc_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_back_id;
        break;
      }

      // optional int32 back_id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_back_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &back_id_)));
          set_has_back_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wall_id;
        break;
      }

      // optional int32 wall_id = 5 [default = 5006];
      case 5: {
        if (tag == 40) {
         parse_wall_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wall_id_)));
          set_has_wall_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_floor_id;
        break;
      }

      // optional int32 floor_id = 6 [default = 5003];
      case 6: {
        if (tag == 48) {
         parse_floor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_id_)));
          set_has_floor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reward_time;
        break;
      }

      // optional int64 reward_time = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_time_)));
          set_has_reward_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_Map)
  return false;
#undef DO_
}

void DB_Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_Map)
  // repeated .DB_ItemOnMap GroundList = 1;
  for (unsigned int i = 0, n = this->groundlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groundlist(i), output);
  }

  // repeated .DB_ItemOnMap WallList = 2;
  for (unsigned int i = 0, n = this->walllist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->walllist(i), output);
  }

  // optional int32 alloc_id = 3 [default = 0];
  if (has_alloc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->alloc_id(), output);
  }

  // optional int32 back_id = 4 [default = 0];
  if (has_back_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->back_id(), output);
  }

  // optional int32 wall_id = 5 [default = 5006];
  if (has_wall_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wall_id(), output);
  }

  // optional int32 floor_id = 6 [default = 5003];
  if (has_floor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->floor_id(), output);
  }

  // optional int64 reward_time = 7 [default = 0];
  if (has_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->reward_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_Map)
}

::google::protobuf::uint8* DB_Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_Map)
  // repeated .DB_ItemOnMap GroundList = 1;
  for (unsigned int i = 0, n = this->groundlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->groundlist(i), target);
  }

  // repeated .DB_ItemOnMap WallList = 2;
  for (unsigned int i = 0, n = this->walllist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->walllist(i), target);
  }

  // optional int32 alloc_id = 3 [default = 0];
  if (has_alloc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->alloc_id(), target);
  }

  // optional int32 back_id = 4 [default = 0];
  if (has_back_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->back_id(), target);
  }

  // optional int32 wall_id = 5 [default = 5006];
  if (has_wall_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wall_id(), target);
  }

  // optional int32 floor_id = 6 [default = 5003];
  if (has_floor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->floor_id(), target);
  }

  // optional int64 reward_time = 7 [default = 0];
  if (has_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->reward_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_Map)
  return target;
}

int DB_Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & 124) {
    // optional int32 alloc_id = 3 [default = 0];
    if (has_alloc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alloc_id());
    }

    // optional int32 back_id = 4 [default = 0];
    if (has_back_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->back_id());
    }

    // optional int32 wall_id = 5 [default = 5006];
    if (has_wall_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wall_id());
    }

    // optional int32 floor_id = 6 [default = 5003];
    if (has_floor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor_id());
    }

    // optional int64 reward_time = 7 [default = 0];
    if (has_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward_time());
    }

  }
  // repeated .DB_ItemOnMap GroundList = 1;
  total_size += 1 * this->groundlist_size();
  for (int i = 0; i < this->groundlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groundlist(i));
  }

  // repeated .DB_ItemOnMap WallList = 2;
  total_size += 1 * this->walllist_size();
  for (int i = 0; i < this->walllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->walllist(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Map::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Map::MergeFrom(const DB_Map& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  groundlist_.MergeFrom(from.groundlist_);
  walllist_.MergeFrom(from.walllist_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_alloc_id()) {
      set_alloc_id(from.alloc_id());
    }
    if (from.has_back_id()) {
      set_back_id(from.back_id());
    }
    if (from.has_wall_id()) {
      set_wall_id(from.wall_id());
    }
    if (from.has_floor_id()) {
      set_floor_id(from.floor_id());
    }
    if (from.has_reward_time()) {
      set_reward_time(from.reward_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Map::CopyFrom(const DB_Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Map::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->groundlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->walllist())) return false;
  return true;
}

void DB_Map::Swap(DB_Map* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_Map::InternalSwap(DB_Map* other) {
  groundlist_.UnsafeArenaSwap(&other->groundlist_);
  walllist_.UnsafeArenaSwap(&other->walllist_);
  std::swap(alloc_id_, other->alloc_id_);
  std::swap(back_id_, other->back_id_);
  std::swap(wall_id_, other->wall_id_);
  std::swap(floor_id_, other->floor_id_);
  std::swap(reward_time_, other->reward_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Map_descriptor_;
  metadata.reflection = DB_Map_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_Map

// repeated .DB_ItemOnMap GroundList = 1;
 int DB_Map::groundlist_size() const {
  return groundlist_.size();
}
 void DB_Map::clear_groundlist() {
  groundlist_.Clear();
}
 const ::DB_ItemOnMap& DB_Map::groundlist(int index) const {
  // @@protoc_insertion_point(field_get:DB_Map.GroundList)
  return groundlist_.Get(index);
}
 ::DB_ItemOnMap* DB_Map::mutable_groundlist(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Map.GroundList)
  return groundlist_.Mutable(index);
}
 ::DB_ItemOnMap* DB_Map::add_groundlist() {
  // @@protoc_insertion_point(field_add:DB_Map.GroundList)
  return groundlist_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap >&
DB_Map::groundlist() const {
  // @@protoc_insertion_point(field_list:DB_Map.GroundList)
  return groundlist_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap >*
DB_Map::mutable_groundlist() {
  // @@protoc_insertion_point(field_mutable_list:DB_Map.GroundList)
  return &groundlist_;
}

// repeated .DB_ItemOnMap WallList = 2;
 int DB_Map::walllist_size() const {
  return walllist_.size();
}
 void DB_Map::clear_walllist() {
  walllist_.Clear();
}
 const ::DB_ItemOnMap& DB_Map::walllist(int index) const {
  // @@protoc_insertion_point(field_get:DB_Map.WallList)
  return walllist_.Get(index);
}
 ::DB_ItemOnMap* DB_Map::mutable_walllist(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Map.WallList)
  return walllist_.Mutable(index);
}
 ::DB_ItemOnMap* DB_Map::add_walllist() {
  // @@protoc_insertion_point(field_add:DB_Map.WallList)
  return walllist_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap >&
DB_Map::walllist() const {
  // @@protoc_insertion_point(field_list:DB_Map.WallList)
  return walllist_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap >*
DB_Map::mutable_walllist() {
  // @@protoc_insertion_point(field_mutable_list:DB_Map.WallList)
  return &walllist_;
}

// optional int32 alloc_id = 3 [default = 0];
 bool DB_Map::has_alloc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_Map::set_has_alloc_id() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_Map::clear_has_alloc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_Map::clear_alloc_id() {
  alloc_id_ = 0;
  clear_has_alloc_id();
}
 ::google::protobuf::int32 DB_Map::alloc_id() const {
  // @@protoc_insertion_point(field_get:DB_Map.alloc_id)
  return alloc_id_;
}
 void DB_Map::set_alloc_id(::google::protobuf::int32 value) {
  set_has_alloc_id();
  alloc_id_ = value;
  // @@protoc_insertion_point(field_set:DB_Map.alloc_id)
}

// optional int32 back_id = 4 [default = 0];
 bool DB_Map::has_back_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_Map::set_has_back_id() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_Map::clear_has_back_id() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_Map::clear_back_id() {
  back_id_ = 0;
  clear_has_back_id();
}
 ::google::protobuf::int32 DB_Map::back_id() const {
  // @@protoc_insertion_point(field_get:DB_Map.back_id)
  return back_id_;
}
 void DB_Map::set_back_id(::google::protobuf::int32 value) {
  set_has_back_id();
  back_id_ = value;
  // @@protoc_insertion_point(field_set:DB_Map.back_id)
}

// optional int32 wall_id = 5 [default = 5006];
 bool DB_Map::has_wall_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_Map::set_has_wall_id() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_Map::clear_has_wall_id() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_Map::clear_wall_id() {
  wall_id_ = 5006;
  clear_has_wall_id();
}
 ::google::protobuf::int32 DB_Map::wall_id() const {
  // @@protoc_insertion_point(field_get:DB_Map.wall_id)
  return wall_id_;
}
 void DB_Map::set_wall_id(::google::protobuf::int32 value) {
  set_has_wall_id();
  wall_id_ = value;
  // @@protoc_insertion_point(field_set:DB_Map.wall_id)
}

// optional int32 floor_id = 6 [default = 5003];
 bool DB_Map::has_floor_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_Map::set_has_floor_id() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_Map::clear_has_floor_id() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_Map::clear_floor_id() {
  floor_id_ = 5003;
  clear_has_floor_id();
}
 ::google::protobuf::int32 DB_Map::floor_id() const {
  // @@protoc_insertion_point(field_get:DB_Map.floor_id)
  return floor_id_;
}
 void DB_Map::set_floor_id(::google::protobuf::int32 value) {
  set_has_floor_id();
  floor_id_ = value;
  // @@protoc_insertion_point(field_set:DB_Map.floor_id)
}

// optional int64 reward_time = 7 [default = 0];
 bool DB_Map::has_reward_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void DB_Map::set_has_reward_time() {
  _has_bits_[0] |= 0x00000040u;
}
 void DB_Map::clear_has_reward_time() {
  _has_bits_[0] &= ~0x00000040u;
}
 void DB_Map::clear_reward_time() {
  reward_time_ = GOOGLE_LONGLONG(0);
  clear_has_reward_time();
}
 ::google::protobuf::int64 DB_Map::reward_time() const {
  // @@protoc_insertion_point(field_get:DB_Map.reward_time)
  return reward_time_;
}
 void DB_Map::set_reward_time(::google::protobuf::int64 value) {
  set_has_reward_time();
  reward_time_ = value;
  // @@protoc_insertion_point(field_set:DB_Map.reward_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_Task::kTaskIDFieldNumber;
const int DB_Task::kTaskStepFieldNumber;
#endif  // !_MSC_VER

DB_Task::DB_Task()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_Task)
}

void DB_Task::InitAsDefaultInstance() {
}

DB_Task::DB_Task(const DB_Task& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_Task)
}

void DB_Task::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  taskstep_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Task::~DB_Task() {
  // @@protoc_insertion_point(destructor:DB_Task)
  SharedDtor();
}

void DB_Task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Task_descriptor_;
}

const DB_Task& DB_Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_Task* DB_Task::default_instance_ = NULL;

DB_Task* DB_Task::New(::google::protobuf::Arena* arena) const {
  DB_Task* n = new DB_Task;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_Task::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_Task*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(taskid_, taskstep_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_taskStep;
        break;
      }

      // optional int32 taskStep = 2;
      case 2: {
        if (tag == 16) {
         parse_taskStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskstep_)));
          set_has_taskstep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_Task)
  return false;
#undef DO_
}

void DB_Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_Task)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int32 taskStep = 2;
  if (has_taskstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->taskstep(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_Task)
}

::google::protobuf::uint8* DB_Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_Task)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional int32 taskStep = 2;
  if (has_taskstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->taskstep(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_Task)
  return target;
}

int DB_Task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional int32 taskStep = 2;
    if (has_taskstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskstep());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Task::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Task::MergeFrom(const DB_Task& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_taskstep()) {
      set_taskstep(from.taskstep());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Task::CopyFrom(const DB_Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Task::IsInitialized() const {

  return true;
}

void DB_Task::Swap(DB_Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_Task::InternalSwap(DB_Task* other) {
  std::swap(taskid_, other->taskid_);
  std::swap(taskstep_, other->taskstep_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Task_descriptor_;
  metadata.reflection = DB_Task_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_Task

// optional int32 taskID = 1;
 bool DB_Task::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_Task::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_Task::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_Task::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
 ::google::protobuf::int32 DB_Task::taskid() const {
  // @@protoc_insertion_point(field_get:DB_Task.taskID)
  return taskid_;
}
 void DB_Task::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:DB_Task.taskID)
}

// optional int32 taskStep = 2;
 bool DB_Task::has_taskstep() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_Task::set_has_taskstep() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_Task::clear_has_taskstep() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_Task::clear_taskstep() {
  taskstep_ = 0;
  clear_has_taskstep();
}
 ::google::protobuf::int32 DB_Task::taskstep() const {
  // @@protoc_insertion_point(field_get:DB_Task.taskStep)
  return taskstep_;
}
 void DB_Task::set_taskstep(::google::protobuf::int32 value) {
  set_has_taskstep();
  taskstep_ = value;
  // @@protoc_insertion_point(field_set:DB_Task.taskStep)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_TaskList::kTaskFieldNumber;
#endif  // !_MSC_VER

DB_TaskList::DB_TaskList()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_TaskList)
}

void DB_TaskList::InitAsDefaultInstance() {
}

DB_TaskList::DB_TaskList(const DB_TaskList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_TaskList)
}

void DB_TaskList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_TaskList::~DB_TaskList() {
  // @@protoc_insertion_point(destructor:DB_TaskList)
  SharedDtor();
}

void DB_TaskList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_TaskList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_TaskList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_TaskList_descriptor_;
}

const DB_TaskList& DB_TaskList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_TaskList* DB_TaskList::default_instance_ = NULL;

DB_TaskList* DB_TaskList::New(::google::protobuf::Arena* arena) const {
  DB_TaskList* n = new DB_TaskList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_TaskList::Clear() {
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_TaskList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_TaskList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_Task task = 1;
      case 1: {
        if (tag == 10) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_task;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_TaskList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_TaskList)
  return false;
#undef DO_
}

void DB_TaskList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_TaskList)
  // repeated .DB_Task task = 1;
  for (unsigned int i = 0, n = this->task_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_TaskList)
}

::google::protobuf::uint8* DB_TaskList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_TaskList)
  // repeated .DB_Task task = 1;
  for (unsigned int i = 0, n = this->task_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_TaskList)
  return target;
}

int DB_TaskList::ByteSize() const {
  int total_size = 0;

  // repeated .DB_Task task = 1;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_TaskList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_TaskList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_TaskList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_TaskList::MergeFrom(const DB_TaskList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  task_.MergeFrom(from.task_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_TaskList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_TaskList::CopyFrom(const DB_TaskList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_TaskList::IsInitialized() const {

  return true;
}

void DB_TaskList::Swap(DB_TaskList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_TaskList::InternalSwap(DB_TaskList* other) {
  task_.UnsafeArenaSwap(&other->task_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_TaskList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_TaskList_descriptor_;
  metadata.reflection = DB_TaskList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_TaskList

// repeated .DB_Task task = 1;
 int DB_TaskList::task_size() const {
  return task_.size();
}
 void DB_TaskList::clear_task() {
  task_.Clear();
}
 const ::DB_Task& DB_TaskList::task(int index) const {
  // @@protoc_insertion_point(field_get:DB_TaskList.task)
  return task_.Get(index);
}
 ::DB_Task* DB_TaskList::mutable_task(int index) {
  // @@protoc_insertion_point(field_mutable:DB_TaskList.task)
  return task_.Mutable(index);
}
 ::DB_Task* DB_TaskList::add_task() {
  // @@protoc_insertion_point(field_add:DB_TaskList.task)
  return task_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_Task >&
DB_TaskList::task() const {
  // @@protoc_insertion_point(field_list:DB_TaskList.task)
  return task_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_Task >*
DB_TaskList::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:DB_TaskList.task)
  return &task_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_TaskStateList::kTaskstateFieldNumber;
#endif  // !_MSC_VER

DB_TaskStateList::DB_TaskStateList()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_TaskStateList)
}

void DB_TaskStateList::InitAsDefaultInstance() {
}

DB_TaskStateList::DB_TaskStateList(const DB_TaskStateList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_TaskStateList)
}

void DB_TaskStateList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_TaskStateList::~DB_TaskStateList() {
  // @@protoc_insertion_point(destructor:DB_TaskStateList)
  SharedDtor();
}

void DB_TaskStateList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_TaskStateList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_TaskStateList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_TaskStateList_descriptor_;
}

const DB_TaskStateList& DB_TaskStateList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_TaskStateList* DB_TaskStateList::default_instance_ = NULL;

DB_TaskStateList* DB_TaskStateList::New(::google::protobuf::Arena* arena) const {
  DB_TaskStateList* n = new DB_TaskStateList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_TaskStateList::Clear() {
  taskstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_TaskStateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_TaskStateList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 taskstate = 1;
      case 1: {
        if (tag == 8) {
         parse_taskstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_taskstate())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_taskstate())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_taskstate;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_TaskStateList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_TaskStateList)
  return false;
#undef DO_
}

void DB_TaskStateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_TaskStateList)
  // repeated int64 taskstate = 1;
  for (int i = 0; i < this->taskstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->taskstate(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_TaskStateList)
}

::google::protobuf::uint8* DB_TaskStateList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_TaskStateList)
  // repeated int64 taskstate = 1;
  for (int i = 0; i < this->taskstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->taskstate(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_TaskStateList)
  return target;
}

int DB_TaskStateList::ByteSize() const {
  int total_size = 0;

  // repeated int64 taskstate = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->taskstate(i));
    }
    total_size += 1 * this->taskstate_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_TaskStateList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_TaskStateList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_TaskStateList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_TaskStateList::MergeFrom(const DB_TaskStateList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  taskstate_.MergeFrom(from.taskstate_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_TaskStateList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_TaskStateList::CopyFrom(const DB_TaskStateList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_TaskStateList::IsInitialized() const {

  return true;
}

void DB_TaskStateList::Swap(DB_TaskStateList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_TaskStateList::InternalSwap(DB_TaskStateList* other) {
  taskstate_.UnsafeArenaSwap(&other->taskstate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_TaskStateList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_TaskStateList_descriptor_;
  metadata.reflection = DB_TaskStateList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_TaskStateList

// repeated int64 taskstate = 1;
 int DB_TaskStateList::taskstate_size() const {
  return taskstate_.size();
}
 void DB_TaskStateList::clear_taskstate() {
  taskstate_.Clear();
}
 ::google::protobuf::int64 DB_TaskStateList::taskstate(int index) const {
  // @@protoc_insertion_point(field_get:DB_TaskStateList.taskstate)
  return taskstate_.Get(index);
}
 void DB_TaskStateList::set_taskstate(int index, ::google::protobuf::int64 value) {
  taskstate_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_TaskStateList.taskstate)
}
 void DB_TaskStateList::add_taskstate(::google::protobuf::int64 value) {
  taskstate_.Add(value);
  // @@protoc_insertion_point(field_add:DB_TaskStateList.taskstate)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_TaskStateList::taskstate() const {
  // @@protoc_insertion_point(field_list:DB_TaskStateList.taskstate)
  return taskstate_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_TaskStateList::mutable_taskstate() {
  // @@protoc_insertion_point(field_mutable_list:DB_TaskStateList.taskstate)
  return &taskstate_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_BanChat::kBanchatFieldNumber;
const int DB_BanChat::kTimeFieldNumber;
const int DB_BanChat::kTotaltimeFieldNumber;
#endif  // !_MSC_VER

DB_BanChat::DB_BanChat()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_BanChat)
}

void DB_BanChat::InitAsDefaultInstance() {
}

DB_BanChat::DB_BanChat(const DB_BanChat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_BanChat)
}

void DB_BanChat::SharedCtor() {
  _cached_size_ = 0;
  banchat_ = false;
  time_ = GOOGLE_LONGLONG(0);
  totaltime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BanChat::~DB_BanChat() {
  // @@protoc_insertion_point(destructor:DB_BanChat)
  SharedDtor();
}

void DB_BanChat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_BanChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_BanChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BanChat_descriptor_;
}

const DB_BanChat& DB_BanChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_BanChat* DB_BanChat::default_instance_ = NULL;

DB_BanChat* DB_BanChat::New(::google::protobuf::Arena* arena) const {
  DB_BanChat* n = new DB_BanChat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_BanChat::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_BanChat*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, banchat_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_BanChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_BanChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool banchat = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &banchat_)));
          set_has_banchat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totaltime;
        break;
      }

      // optional int64 totaltime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_totaltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totaltime_)));
          set_has_totaltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_BanChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_BanChat)
  return false;
#undef DO_
}

void DB_BanChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_BanChat)
  // optional bool banchat = 1 [default = false];
  if (has_banchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->banchat(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // optional int64 totaltime = 3 [default = 0];
  if (has_totaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->totaltime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_BanChat)
}

::google::protobuf::uint8* DB_BanChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_BanChat)
  // optional bool banchat = 1 [default = false];
  if (has_banchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->banchat(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // optional int64 totaltime = 3 [default = 0];
  if (has_totaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->totaltime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_BanChat)
  return target;
}

int DB_BanChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional bool banchat = 1 [default = false];
    if (has_banchat()) {
      total_size += 1 + 1;
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int64 totaltime = 3 [default = 0];
    if (has_totaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totaltime());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_BanChat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_BanChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BanChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BanChat::MergeFrom(const DB_BanChat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banchat()) {
      set_banchat(from.banchat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_totaltime()) {
      set_totaltime(from.totaltime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_BanChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BanChat::CopyFrom(const DB_BanChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BanChat::IsInitialized() const {

  return true;
}

void DB_BanChat::Swap(DB_BanChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_BanChat::InternalSwap(DB_BanChat* other) {
  std::swap(banchat_, other->banchat_);
  std::swap(time_, other->time_);
  std::swap(totaltime_, other->totaltime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_BanChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BanChat_descriptor_;
  metadata.reflection = DB_BanChat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_BanChat

// optional bool banchat = 1 [default = false];
 bool DB_BanChat::has_banchat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_BanChat::set_has_banchat() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_BanChat::clear_has_banchat() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_BanChat::clear_banchat() {
  banchat_ = false;
  clear_has_banchat();
}
 bool DB_BanChat::banchat() const {
  // @@protoc_insertion_point(field_get:DB_BanChat.banchat)
  return banchat_;
}
 void DB_BanChat::set_banchat(bool value) {
  set_has_banchat();
  banchat_ = value;
  // @@protoc_insertion_point(field_set:DB_BanChat.banchat)
}

// optional int64 time = 2;
 bool DB_BanChat::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_BanChat::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_BanChat::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_BanChat::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::int64 DB_BanChat::time() const {
  // @@protoc_insertion_point(field_get:DB_BanChat.time)
  return time_;
}
 void DB_BanChat::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:DB_BanChat.time)
}

// optional int64 totaltime = 3 [default = 0];
 bool DB_BanChat::has_totaltime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_BanChat::set_has_totaltime() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_BanChat::clear_has_totaltime() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_BanChat::clear_totaltime() {
  totaltime_ = GOOGLE_LONGLONG(0);
  clear_has_totaltime();
}
 ::google::protobuf::int64 DB_BanChat::totaltime() const {
  // @@protoc_insertion_point(field_get:DB_BanChat.totaltime)
  return totaltime_;
}
 void DB_BanChat::set_totaltime(::google::protobuf::int64 value) {
  set_has_totaltime();
  totaltime_ = value;
  // @@protoc_insertion_point(field_set:DB_BanChat.totaltime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_BanLogin::kBanloginFieldNumber;
const int DB_BanLogin::kTimeFieldNumber;
const int DB_BanLogin::kTotaltimeFieldNumber;
#endif  // !_MSC_VER

DB_BanLogin::DB_BanLogin()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_BanLogin)
}

void DB_BanLogin::InitAsDefaultInstance() {
}

DB_BanLogin::DB_BanLogin(const DB_BanLogin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_BanLogin)
}

void DB_BanLogin::SharedCtor() {
  _cached_size_ = 0;
  banlogin_ = false;
  time_ = GOOGLE_LONGLONG(0);
  totaltime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_BanLogin::~DB_BanLogin() {
  // @@protoc_insertion_point(destructor:DB_BanLogin)
  SharedDtor();
}

void DB_BanLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_BanLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_BanLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_BanLogin_descriptor_;
}

const DB_BanLogin& DB_BanLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_BanLogin* DB_BanLogin::default_instance_ = NULL;

DB_BanLogin* DB_BanLogin::New(::google::protobuf::Arena* arena) const {
  DB_BanLogin* n = new DB_BanLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_BanLogin::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_BanLogin*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, banlogin_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_BanLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_BanLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool banlogin = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &banlogin_)));
          set_has_banlogin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totaltime;
        break;
      }

      // optional int64 totaltime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_totaltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totaltime_)));
          set_has_totaltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_BanLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_BanLogin)
  return false;
#undef DO_
}

void DB_BanLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_BanLogin)
  // optional bool banlogin = 1 [default = false];
  if (has_banlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->banlogin(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // optional int64 totaltime = 3 [default = 0];
  if (has_totaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->totaltime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_BanLogin)
}

::google::protobuf::uint8* DB_BanLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_BanLogin)
  // optional bool banlogin = 1 [default = false];
  if (has_banlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->banlogin(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // optional int64 totaltime = 3 [default = 0];
  if (has_totaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->totaltime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_BanLogin)
  return target;
}

int DB_BanLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional bool banlogin = 1 [default = false];
    if (has_banlogin()) {
      total_size += 1 + 1;
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int64 totaltime = 3 [default = 0];
    if (has_totaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totaltime());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_BanLogin::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_BanLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_BanLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_BanLogin::MergeFrom(const DB_BanLogin& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banlogin()) {
      set_banlogin(from.banlogin());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_totaltime()) {
      set_totaltime(from.totaltime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_BanLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_BanLogin::CopyFrom(const DB_BanLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_BanLogin::IsInitialized() const {

  return true;
}

void DB_BanLogin::Swap(DB_BanLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_BanLogin::InternalSwap(DB_BanLogin* other) {
  std::swap(banlogin_, other->banlogin_);
  std::swap(time_, other->time_);
  std::swap(totaltime_, other->totaltime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_BanLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_BanLogin_descriptor_;
  metadata.reflection = DB_BanLogin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_BanLogin

// optional bool banlogin = 1 [default = false];
 bool DB_BanLogin::has_banlogin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_BanLogin::set_has_banlogin() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_BanLogin::clear_has_banlogin() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_BanLogin::clear_banlogin() {
  banlogin_ = false;
  clear_has_banlogin();
}
 bool DB_BanLogin::banlogin() const {
  // @@protoc_insertion_point(field_get:DB_BanLogin.banlogin)
  return banlogin_;
}
 void DB_BanLogin::set_banlogin(bool value) {
  set_has_banlogin();
  banlogin_ = value;
  // @@protoc_insertion_point(field_set:DB_BanLogin.banlogin)
}

// optional int64 time = 2;
 bool DB_BanLogin::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_BanLogin::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_BanLogin::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_BanLogin::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::int64 DB_BanLogin::time() const {
  // @@protoc_insertion_point(field_get:DB_BanLogin.time)
  return time_;
}
 void DB_BanLogin::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:DB_BanLogin.time)
}

// optional int64 totaltime = 3 [default = 0];
 bool DB_BanLogin::has_totaltime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_BanLogin::set_has_totaltime() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_BanLogin::clear_has_totaltime() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_BanLogin::clear_totaltime() {
  totaltime_ = GOOGLE_LONGLONG(0);
  clear_has_totaltime();
}
 ::google::protobuf::int64 DB_BanLogin::totaltime() const {
  // @@protoc_insertion_point(field_get:DB_BanLogin.totaltime)
  return totaltime_;
}
 void DB_BanLogin::set_totaltime(::google::protobuf::int64 value) {
  set_has_totaltime();
  totaltime_ = value;
  // @@protoc_insertion_point(field_set:DB_BanLogin.totaltime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_Item::kTypeidFieldNumber;
const int DB_Item::kNumFieldNumber;
const int DB_Item::kUnlockvalueFieldNumber;
const int DB_Item::kUnlockSendedFieldNumber;
#endif  // !_MSC_VER

DB_Item::DB_Item()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_Item)
}

void DB_Item::InitAsDefaultInstance() {
}

DB_Item::DB_Item(const DB_Item& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_Item)
}

void DB_Item::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  num_ = 0;
  unlockvalue_ = 0;
  unlocksended_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Item::~DB_Item() {
  // @@protoc_insertion_point(destructor:DB_Item)
  SharedDtor();
}

void DB_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Item_descriptor_;
}

const DB_Item& DB_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_Item* DB_Item::default_instance_ = NULL;

DB_Item* DB_Item::New(::google::protobuf::Arena* arena) const {
  DB_Item* n = new DB_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_Item::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_Item*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(typeid__, unlocksended_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 typeid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unlockvalue;
        break;
      }

      // optional int32 unlockvalue = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_unlockvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlockvalue_)));
          set_has_unlockvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unlockSended;
        break;
      }

      // optional bool unlockSended = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_unlockSended:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlocksended_)));
          set_has_unlocksended();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_Item)
  return false;
#undef DO_
}

void DB_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_Item)
  // optional int32 typeid = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // optional int32 num = 2 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 unlockvalue = 3 [default = 0];
  if (has_unlockvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unlockvalue(), output);
  }

  // optional bool unlockSended = 4 [default = false];
  if (has_unlocksended()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unlocksended(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_Item)
}

::google::protobuf::uint8* DB_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_Item)
  // optional int32 typeid = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // optional int32 num = 2 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 unlockvalue = 3 [default = 0];
  if (has_unlockvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unlockvalue(), target);
  }

  // optional bool unlockSended = 4 [default = false];
  if (has_unlocksended()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unlocksended(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_Item)
  return target;
}

int DB_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional int32 typeid = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional int32 num = 2 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 unlockvalue = 3 [default = 0];
    if (has_unlockvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlockvalue());
    }

    // optional bool unlockSended = 4 [default = false];
    if (has_unlocksended()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Item::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Item::MergeFrom(const DB_Item& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_unlockvalue()) {
      set_unlockvalue(from.unlockvalue());
    }
    if (from.has_unlocksended()) {
      set_unlocksended(from.unlocksended());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Item::CopyFrom(const DB_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Item::IsInitialized() const {

  return true;
}

void DB_Item::Swap(DB_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_Item::InternalSwap(DB_Item* other) {
  std::swap(typeid__, other->typeid__);
  std::swap(num_, other->num_);
  std::swap(unlockvalue_, other->unlockvalue_);
  std::swap(unlocksended_, other->unlocksended_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Item_descriptor_;
  metadata.reflection = DB_Item_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_Item

// optional int32 typeid = 1;
 bool DB_Item::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_Item::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_Item::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_Item::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
 ::google::protobuf::int32 DB_Item::typeid_() const {
  // @@protoc_insertion_point(field_get:DB_Item.typeid)
  return typeid__;
}
 void DB_Item::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:DB_Item.typeid)
}

// optional int32 num = 2 [default = 0];
 bool DB_Item::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_Item::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_Item::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_Item::clear_num() {
  num_ = 0;
  clear_has_num();
}
 ::google::protobuf::int32 DB_Item::num() const {
  // @@protoc_insertion_point(field_get:DB_Item.num)
  return num_;
}
 void DB_Item::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:DB_Item.num)
}

// optional int32 unlockvalue = 3 [default = 0];
 bool DB_Item::has_unlockvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_Item::set_has_unlockvalue() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_Item::clear_has_unlockvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_Item::clear_unlockvalue() {
  unlockvalue_ = 0;
  clear_has_unlockvalue();
}
 ::google::protobuf::int32 DB_Item::unlockvalue() const {
  // @@protoc_insertion_point(field_get:DB_Item.unlockvalue)
  return unlockvalue_;
}
 void DB_Item::set_unlockvalue(::google::protobuf::int32 value) {
  set_has_unlockvalue();
  unlockvalue_ = value;
  // @@protoc_insertion_point(field_set:DB_Item.unlockvalue)
}

// optional bool unlockSended = 4 [default = false];
 bool DB_Item::has_unlocksended() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_Item::set_has_unlocksended() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_Item::clear_has_unlocksended() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_Item::clear_unlocksended() {
  unlocksended_ = false;
  clear_has_unlocksended();
}
 bool DB_Item::unlocksended() const {
  // @@protoc_insertion_point(field_get:DB_Item.unlockSended)
  return unlocksended_;
}
 void DB_Item::set_unlocksended(bool value) {
  set_has_unlocksended();
  unlocksended_ = value;
  // @@protoc_insertion_point(field_set:DB_Item.unlockSended)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_Bag::kItemsFieldNumber;
const int DB_Bag::kMoneyFieldNumber;
const int DB_Bag::kMaxspaceFieldNumber;
const int DB_Bag::kCashFieldNumber;
#endif  // !_MSC_VER

DB_Bag::DB_Bag()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_Bag)
}

void DB_Bag::InitAsDefaultInstance() {
}

DB_Bag::DB_Bag(const DB_Bag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_Bag)
}

void DB_Bag::SharedCtor() {
  _cached_size_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  maxspace_ = 0;
  cash_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Bag::~DB_Bag() {
  // @@protoc_insertion_point(destructor:DB_Bag)
  SharedDtor();
}

void DB_Bag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_Bag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Bag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Bag_descriptor_;
}

const DB_Bag& DB_Bag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_Bag* DB_Bag::default_instance_ = NULL;

DB_Bag* DB_Bag::New(::google::protobuf::Arena* arena) const {
  DB_Bag* n = new DB_Bag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_Bag::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_Bag*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(money_, maxspace_);

#undef ZR_HELPER_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_Bag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_Bag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_Item items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int64 money = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxspace;
        break;
      }

      // optional int32 maxspace = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_maxspace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxspace_)));
          set_has_maxspace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cash;
        break;
      }

      // optional int64 cash = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_Bag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_Bag)
  return false;
#undef DO_
}

void DB_Bag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_Bag)
  // repeated .DB_Item items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // optional int64 money = 3 [default = 0];
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  // optional int32 maxspace = 4 [default = 0];
  if (has_maxspace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxspace(), output);
  }

  // optional int64 cash = 5 [default = 0];
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_Bag)
}

::google::protobuf::uint8* DB_Bag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_Bag)
  // repeated .DB_Item items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // optional int64 money = 3 [default = 0];
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  // optional int32 maxspace = 4 [default = 0];
  if (has_maxspace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxspace(), target);
  }

  // optional int64 cash = 5 [default = 0];
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->cash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_Bag)
  return target;
}

int DB_Bag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & 14) {
    // optional int64 money = 3 [default = 0];
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int32 maxspace = 4 [default = 0];
    if (has_maxspace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxspace());
    }

    // optional int64 cash = 5 [default = 0];
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cash());
    }

  }
  // repeated .DB_Item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Bag::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_Bag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Bag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Bag::MergeFrom(const DB_Bag& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_maxspace()) {
      set_maxspace(from.maxspace());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_Bag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Bag::CopyFrom(const DB_Bag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Bag::IsInitialized() const {

  return true;
}

void DB_Bag::Swap(DB_Bag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_Bag::InternalSwap(DB_Bag* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(money_, other->money_);
  std::swap(maxspace_, other->maxspace_);
  std::swap(cash_, other->cash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_Bag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Bag_descriptor_;
  metadata.reflection = DB_Bag_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_Bag

// repeated .DB_Item items = 1;
 int DB_Bag::items_size() const {
  return items_.size();
}
 void DB_Bag::clear_items() {
  items_.Clear();
}
 const ::DB_Item& DB_Bag::items(int index) const {
  // @@protoc_insertion_point(field_get:DB_Bag.items)
  return items_.Get(index);
}
 ::DB_Item* DB_Bag::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Bag.items)
  return items_.Mutable(index);
}
 ::DB_Item* DB_Bag::add_items() {
  // @@protoc_insertion_point(field_add:DB_Bag.items)
  return items_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_Item >&
DB_Bag::items() const {
  // @@protoc_insertion_point(field_list:DB_Bag.items)
  return items_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_Item >*
DB_Bag::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:DB_Bag.items)
  return &items_;
}

// optional int64 money = 3 [default = 0];
 bool DB_Bag::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_Bag::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_Bag::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_Bag::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
 ::google::protobuf::int64 DB_Bag::money() const {
  // @@protoc_insertion_point(field_get:DB_Bag.money)
  return money_;
}
 void DB_Bag::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:DB_Bag.money)
}

// optional int32 maxspace = 4 [default = 0];
 bool DB_Bag::has_maxspace() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_Bag::set_has_maxspace() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_Bag::clear_has_maxspace() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_Bag::clear_maxspace() {
  maxspace_ = 0;
  clear_has_maxspace();
}
 ::google::protobuf::int32 DB_Bag::maxspace() const {
  // @@protoc_insertion_point(field_get:DB_Bag.maxspace)
  return maxspace_;
}
 void DB_Bag::set_maxspace(::google::protobuf::int32 value) {
  set_has_maxspace();
  maxspace_ = value;
  // @@protoc_insertion_point(field_set:DB_Bag.maxspace)
}

// optional int64 cash = 5 [default = 0];
 bool DB_Bag::has_cash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_Bag::set_has_cash() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_Bag::clear_has_cash() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_Bag::clear_cash() {
  cash_ = GOOGLE_LONGLONG(0);
  clear_has_cash();
}
 ::google::protobuf::int64 DB_Bag::cash() const {
  // @@protoc_insertion_point(field_get:DB_Bag.cash)
  return cash_;
}
 void DB_Bag::set_cash(::google::protobuf::int64 value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:DB_Bag.cash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_ActionRecord::kUidFieldNumber;
const int DB_ActionRecord::kTimeFieldNumber;
const int DB_ActionRecord::kNameFieldNumber;
const int DB_ActionRecord::kActiontypeFieldNumber;
const int DB_ActionRecord::kGoldFieldNumber;
const int DB_ActionRecord::kItemTypeidFieldNumber;
const int DB_ActionRecord::kDealedFieldNumber;
const int DB_ActionRecord::kCountFieldNumber;
const int DB_ActionRecord::kIdFieldNumber;
const int DB_ActionRecord::kHeadUrlFieldNumber;
const int DB_ActionRecord::kItemIdFieldNumber;
const int DB_ActionRecord::kItemNumFieldNumber;
const int DB_ActionRecord::kContextFieldNumber;
const int DB_ActionRecord::kGuestAddFieldNumber;
const int DB_ActionRecord::kOpenidFieldNumber;
const int DB_ActionRecord::kValueAFieldNumber;
const int DB_ActionRecord::kValueBFieldNumber;
const int DB_ActionRecord::kTimeSecFieldNumber;
#endif  // !_MSC_VER

DB_ActionRecord::DB_ActionRecord()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_ActionRecord)
}

void DB_ActionRecord::InitAsDefaultInstance() {
}

DB_ActionRecord::DB_ActionRecord(const DB_ActionRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_ActionRecord)
}

void DB_ActionRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  time_ = GOOGLE_LONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actiontype_ = 0;
  gold_ = 0;
  item_typeid_ = 0;
  dealed_ = false;
  count_ = 1;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guest_add_ = 0;
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_a_ = -1;
  value_b_ = -1;
  time_sec_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_ActionRecord::~DB_ActionRecord() {
  // @@protoc_insertion_point(destructor:DB_ActionRecord)
  SharedDtor();
}

void DB_ActionRecord::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DB_ActionRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_ActionRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_ActionRecord_descriptor_;
}

const DB_ActionRecord& DB_ActionRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_ActionRecord* DB_ActionRecord::default_instance_ = NULL;

DB_ActionRecord* DB_ActionRecord::New(::google::protobuf::Arena* arena) const {
  DB_ActionRecord* n = new DB_ActionRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_ActionRecord::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_ActionRecord*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(actiontype_, dealed_);
    uid_ = GOOGLE_LONGLONG(-1);
    time_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    count_ = 1;
  }
  if (_has_bits_[8 / 32] & 62208) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_head_url()) {
      head_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_context()) {
      context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    guest_add_ = 0;
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    value_a_ = -1;
  }
  if (_has_bits_[16 / 32] & 196608) {
    value_b_ = -1;
    time_sec_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  item_id_.Clear();
  item_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_ActionRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_ActionRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_ActionRecord.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_actiontype;
        break;
      }

      // optional int32 actiontype = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_actiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actiontype_)));
          set_has_actiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }

      // optional int32 gold = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_item_typeid;
        break;
      }

      // optional int32 item_typeid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_item_typeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_typeid_)));
          set_has_item_typeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dealed;
        break;
      }

      // optional bool dealed = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_dealed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dealed_)));
          set_has_dealed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_count;
        break;
      }

      // optional int32 count = 8 [default = 1];
      case 8: {
        if (tag == 64) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_id;
        break;
      }

      // optional string id = 9 [default = ""];
      case 9: {
        if (tag == 74) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_ActionRecord.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_head_url;
        break;
      }

      // optional string head_url = 10 [default = ""];
      case 10: {
        if (tag == 82) {
         parse_head_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->head_url().data(), this->head_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_ActionRecord.head_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_item_id;
        break;
      }

      // repeated int32 item_id = 11;
      case 11: {
        if (tag == 88) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_item_id())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_item_id;
        if (input->ExpectTag(96)) goto parse_item_num;
        break;
      }

      // repeated int32 item_num = 12;
      case 12: {
        if (tag == 96) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_item_num())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_item_num;
        if (input->ExpectTag(106)) goto parse_context;
        break;
      }

      // optional string context = 13 [default = ""];
      case 13: {
        if (tag == 106) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_ActionRecord.context");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_guest_add;
        break;
      }

      // optional int32 guest_add = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_guest_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guest_add_)));
          set_has_guest_add();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_openid;
        break;
      }

      // optional string openid = 15 [default = ""];
      case 15: {
        if (tag == 122) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_ActionRecord.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_value_a;
        break;
      }

      // optional int32 value_a = 16 [default = -1];
      case 16: {
        if (tag == 128) {
         parse_value_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_a_)));
          set_has_value_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_value_b;
        break;
      }

      // optional int32 value_b = 17 [default = -1];
      case 17: {
        if (tag == 136) {
         parse_value_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_b_)));
          set_has_value_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_time_sec;
        break;
      }

      // optional int64 time_sec = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_sec_)));
          set_has_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_ActionRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_ActionRecord)
  return false;
#undef DO_
}

void DB_ActionRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_ActionRecord)
  // optional int64 uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional int64 time = 2 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_ActionRecord.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 actiontype = 4 [default = 0];
  if (has_actiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actiontype(), output);
  }

  // optional int32 gold = 5 [default = 0];
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold(), output);
  }

  // optional int32 item_typeid = 6 [default = 0];
  if (has_item_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->item_typeid(), output);
  }

  // optional bool dealed = 7 [default = false];
  if (has_dealed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->dealed(), output);
  }

  // optional int32 count = 8 [default = 1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->count(), output);
  }

  // optional string id = 9 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_ActionRecord.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->id(), output);
  }

  // optional string head_url = 10 [default = ""];
  if (has_head_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->head_url().data(), this->head_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_ActionRecord.head_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->head_url(), output);
  }

  // repeated int32 item_id = 11;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->item_id(i), output);
  }

  // repeated int32 item_num = 12;
  for (int i = 0; i < this->item_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->item_num(i), output);
  }

  // optional string context = 13 [default = ""];
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_ActionRecord.context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->context(), output);
  }

  // optional int32 guest_add = 14 [default = 0];
  if (has_guest_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->guest_add(), output);
  }

  // optional string openid = 15 [default = ""];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_ActionRecord.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->openid(), output);
  }

  // optional int32 value_a = 16 [default = -1];
  if (has_value_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->value_a(), output);
  }

  // optional int32 value_b = 17 [default = -1];
  if (has_value_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->value_b(), output);
  }

  // optional int64 time_sec = 18 [default = 0];
  if (has_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->time_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_ActionRecord)
}

::google::protobuf::uint8* DB_ActionRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_ActionRecord)
  // optional int64 uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional int64 time = 2 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_ActionRecord.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 actiontype = 4 [default = 0];
  if (has_actiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->actiontype(), target);
  }

  // optional int32 gold = 5 [default = 0];
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gold(), target);
  }

  // optional int32 item_typeid = 6 [default = 0];
  if (has_item_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->item_typeid(), target);
  }

  // optional bool dealed = 7 [default = false];
  if (has_dealed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->dealed(), target);
  }

  // optional int32 count = 8 [default = 1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->count(), target);
  }

  // optional string id = 9 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_ActionRecord.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->id(), target);
  }

  // optional string head_url = 10 [default = ""];
  if (has_head_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->head_url().data(), this->head_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_ActionRecord.head_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->head_url(), target);
  }

  // repeated int32 item_id = 11;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->item_id(i), target);
  }

  // repeated int32 item_num = 12;
  for (int i = 0; i < this->item_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->item_num(i), target);
  }

  // optional string context = 13 [default = ""];
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_ActionRecord.context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->context(), target);
  }

  // optional int32 guest_add = 14 [default = 0];
  if (has_guest_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->guest_add(), target);
  }

  // optional string openid = 15 [default = ""];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_ActionRecord.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->openid(), target);
  }

  // optional int32 value_a = 16 [default = -1];
  if (has_value_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->value_a(), target);
  }

  // optional int32 value_b = 17 [default = -1];
  if (has_value_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->value_b(), target);
  }

  // optional int64 time_sec = 18 [default = 0];
  if (has_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->time_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_ActionRecord)
  return target;
}

int DB_ActionRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional int64 uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int64 time = 2 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string name = 3 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 actiontype = 4 [default = 0];
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actiontype());
    }

    // optional int32 gold = 5 [default = 0];
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 item_typeid = 6 [default = 0];
    if (has_item_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_typeid());
    }

    // optional bool dealed = 7 [default = false];
    if (has_dealed()) {
      total_size += 1 + 1;
    }

    // optional int32 count = 8 [default = 1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (_has_bits_[8 / 32] & 62208) {
    // optional string id = 9 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string head_url = 10 [default = ""];
    if (has_head_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head_url());
    }

    // optional string context = 13 [default = ""];
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

    // optional int32 guest_add = 14 [default = 0];
    if (has_guest_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guest_add());
    }

    // optional string openid = 15 [default = ""];
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional int32 value_a = 16 [default = -1];
    if (has_value_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value_a());
    }

  }
  if (_has_bits_[16 / 32] & 196608) {
    // optional int32 value_b = 17 [default = -1];
    if (has_value_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value_b());
    }

    // optional int64 time_sec = 18 [default = 0];
    if (has_time_sec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_sec());
    }

  }
  // repeated int32 item_id = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated int32 item_num = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_num(i));
    }
    total_size += 1 * this->item_num_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_ActionRecord::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_ActionRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_ActionRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_ActionRecord::MergeFrom(const DB_ActionRecord& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  item_id_.MergeFrom(from.item_id_);
  item_num_.MergeFrom(from.item_num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_actiontype()) {
      set_actiontype(from.actiontype());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_item_typeid()) {
      set_item_typeid(from.item_typeid());
    }
    if (from.has_dealed()) {
      set_dealed(from.dealed());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_head_url()) {
      set_has_head_url();
      head_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head_url_);
    }
    if (from.has_context()) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
    if (from.has_guest_add()) {
      set_guest_add(from.guest_add());
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_value_a()) {
      set_value_a(from.value_a());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_value_b()) {
      set_value_b(from.value_b());
    }
    if (from.has_time_sec()) {
      set_time_sec(from.time_sec());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_ActionRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_ActionRecord::CopyFrom(const DB_ActionRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_ActionRecord::IsInitialized() const {

  return true;
}

void DB_ActionRecord::Swap(DB_ActionRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_ActionRecord::InternalSwap(DB_ActionRecord* other) {
  std::swap(uid_, other->uid_);
  std::swap(time_, other->time_);
  name_.Swap(&other->name_);
  std::swap(actiontype_, other->actiontype_);
  std::swap(gold_, other->gold_);
  std::swap(item_typeid_, other->item_typeid_);
  std::swap(dealed_, other->dealed_);
  std::swap(count_, other->count_);
  id_.Swap(&other->id_);
  head_url_.Swap(&other->head_url_);
  item_id_.UnsafeArenaSwap(&other->item_id_);
  item_num_.UnsafeArenaSwap(&other->item_num_);
  context_.Swap(&other->context_);
  std::swap(guest_add_, other->guest_add_);
  openid_.Swap(&other->openid_);
  std::swap(value_a_, other->value_a_);
  std::swap(value_b_, other->value_b_);
  std::swap(time_sec_, other->time_sec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_ActionRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_ActionRecord_descriptor_;
  metadata.reflection = DB_ActionRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_ActionRecord

// optional int64 uid = 1 [default = -1];
 bool DB_ActionRecord::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_ActionRecord::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_ActionRecord::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_ActionRecord::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
 ::google::protobuf::int64 DB_ActionRecord::uid() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.uid)
  return uid_;
}
 void DB_ActionRecord::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.uid)
}

// optional int64 time = 2 [default = 0];
 bool DB_ActionRecord::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_ActionRecord::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_ActionRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_ActionRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::int64 DB_ActionRecord::time() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.time)
  return time_;
}
 void DB_ActionRecord::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.time)
}

// optional string name = 3 [default = ""];
 bool DB_ActionRecord::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_ActionRecord::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_ActionRecord::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_ActionRecord::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& DB_ActionRecord::name() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_ActionRecord::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.name)
}
 void DB_ActionRecord::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_ActionRecord.name)
}
 void DB_ActionRecord::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_ActionRecord.name)
}
 ::std::string* DB_ActionRecord::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:DB_ActionRecord.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_ActionRecord::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_ActionRecord::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DB_ActionRecord.name)
}

// optional int32 actiontype = 4 [default = 0];
 bool DB_ActionRecord::has_actiontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_ActionRecord::set_has_actiontype() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_ActionRecord::clear_has_actiontype() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_ActionRecord::clear_actiontype() {
  actiontype_ = 0;
  clear_has_actiontype();
}
 ::google::protobuf::int32 DB_ActionRecord::actiontype() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.actiontype)
  return actiontype_;
}
 void DB_ActionRecord::set_actiontype(::google::protobuf::int32 value) {
  set_has_actiontype();
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.actiontype)
}

// optional int32 gold = 5 [default = 0];
 bool DB_ActionRecord::has_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_ActionRecord::set_has_gold() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_ActionRecord::clear_has_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_ActionRecord::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
 ::google::protobuf::int32 DB_ActionRecord::gold() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.gold)
  return gold_;
}
 void DB_ActionRecord::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.gold)
}

// optional int32 item_typeid = 6 [default = 0];
 bool DB_ActionRecord::has_item_typeid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_ActionRecord::set_has_item_typeid() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_ActionRecord::clear_has_item_typeid() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_ActionRecord::clear_item_typeid() {
  item_typeid_ = 0;
  clear_has_item_typeid();
}
 ::google::protobuf::int32 DB_ActionRecord::item_typeid() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.item_typeid)
  return item_typeid_;
}
 void DB_ActionRecord::set_item_typeid(::google::protobuf::int32 value) {
  set_has_item_typeid();
  item_typeid_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.item_typeid)
}

// optional bool dealed = 7 [default = false];
 bool DB_ActionRecord::has_dealed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void DB_ActionRecord::set_has_dealed() {
  _has_bits_[0] |= 0x00000040u;
}
 void DB_ActionRecord::clear_has_dealed() {
  _has_bits_[0] &= ~0x00000040u;
}
 void DB_ActionRecord::clear_dealed() {
  dealed_ = false;
  clear_has_dealed();
}
 bool DB_ActionRecord::dealed() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.dealed)
  return dealed_;
}
 void DB_ActionRecord::set_dealed(bool value) {
  set_has_dealed();
  dealed_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.dealed)
}

// optional int32 count = 8 [default = 1];
 bool DB_ActionRecord::has_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void DB_ActionRecord::set_has_count() {
  _has_bits_[0] |= 0x00000080u;
}
 void DB_ActionRecord::clear_has_count() {
  _has_bits_[0] &= ~0x00000080u;
}
 void DB_ActionRecord::clear_count() {
  count_ = 1;
  clear_has_count();
}
 ::google::protobuf::int32 DB_ActionRecord::count() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.count)
  return count_;
}
 void DB_ActionRecord::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.count)
}

// optional string id = 9 [default = ""];
 bool DB_ActionRecord::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void DB_ActionRecord::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
 void DB_ActionRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
 void DB_ActionRecord::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& DB_ActionRecord::id() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_ActionRecord::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.id)
}
 void DB_ActionRecord::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_ActionRecord.id)
}
 void DB_ActionRecord::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_ActionRecord.id)
}
 ::std::string* DB_ActionRecord::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:DB_ActionRecord.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_ActionRecord::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_ActionRecord::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:DB_ActionRecord.id)
}

// optional string head_url = 10 [default = ""];
 bool DB_ActionRecord::has_head_url() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void DB_ActionRecord::set_has_head_url() {
  _has_bits_[0] |= 0x00000200u;
}
 void DB_ActionRecord::clear_has_head_url() {
  _has_bits_[0] &= ~0x00000200u;
}
 void DB_ActionRecord::clear_head_url() {
  head_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_head_url();
}
 const ::std::string& DB_ActionRecord::head_url() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.head_url)
  return head_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_ActionRecord::set_head_url(const ::std::string& value) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.head_url)
}
 void DB_ActionRecord::set_head_url(const char* value) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_ActionRecord.head_url)
}
 void DB_ActionRecord::set_head_url(const char* value, size_t size) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_ActionRecord.head_url)
}
 ::std::string* DB_ActionRecord::mutable_head_url() {
  set_has_head_url();
  // @@protoc_insertion_point(field_mutable:DB_ActionRecord.head_url)
  return head_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_ActionRecord::release_head_url() {
  clear_has_head_url();
  return head_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_ActionRecord::set_allocated_head_url(::std::string* head_url) {
  if (head_url != NULL) {
    set_has_head_url();
  } else {
    clear_has_head_url();
  }
  head_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head_url);
  // @@protoc_insertion_point(field_set_allocated:DB_ActionRecord.head_url)
}

// repeated int32 item_id = 11;
 int DB_ActionRecord::item_id_size() const {
  return item_id_.size();
}
 void DB_ActionRecord::clear_item_id() {
  item_id_.Clear();
}
 ::google::protobuf::int32 DB_ActionRecord::item_id(int index) const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.item_id)
  return item_id_.Get(index);
}
 void DB_ActionRecord::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.item_id)
}
 void DB_ActionRecord::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:DB_ActionRecord.item_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_ActionRecord::item_id() const {
  // @@protoc_insertion_point(field_list:DB_ActionRecord.item_id)
  return item_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_ActionRecord::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:DB_ActionRecord.item_id)
  return &item_id_;
}

// repeated int32 item_num = 12;
 int DB_ActionRecord::item_num_size() const {
  return item_num_.size();
}
 void DB_ActionRecord::clear_item_num() {
  item_num_.Clear();
}
 ::google::protobuf::int32 DB_ActionRecord::item_num(int index) const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.item_num)
  return item_num_.Get(index);
}
 void DB_ActionRecord::set_item_num(int index, ::google::protobuf::int32 value) {
  item_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.item_num)
}
 void DB_ActionRecord::add_item_num(::google::protobuf::int32 value) {
  item_num_.Add(value);
  // @@protoc_insertion_point(field_add:DB_ActionRecord.item_num)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_ActionRecord::item_num() const {
  // @@protoc_insertion_point(field_list:DB_ActionRecord.item_num)
  return item_num_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_ActionRecord::mutable_item_num() {
  // @@protoc_insertion_point(field_mutable_list:DB_ActionRecord.item_num)
  return &item_num_;
}

// optional string context = 13 [default = ""];
 bool DB_ActionRecord::has_context() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void DB_ActionRecord::set_has_context() {
  _has_bits_[0] |= 0x00001000u;
}
 void DB_ActionRecord::clear_has_context() {
  _has_bits_[0] &= ~0x00001000u;
}
 void DB_ActionRecord::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
 const ::std::string& DB_ActionRecord::context() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_ActionRecord::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.context)
}
 void DB_ActionRecord::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_ActionRecord.context)
}
 void DB_ActionRecord::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_ActionRecord.context)
}
 ::std::string* DB_ActionRecord::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:DB_ActionRecord.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_ActionRecord::release_context() {
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_ActionRecord::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:DB_ActionRecord.context)
}

// optional int32 guest_add = 14 [default = 0];
 bool DB_ActionRecord::has_guest_add() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
 void DB_ActionRecord::set_has_guest_add() {
  _has_bits_[0] |= 0x00002000u;
}
 void DB_ActionRecord::clear_has_guest_add() {
  _has_bits_[0] &= ~0x00002000u;
}
 void DB_ActionRecord::clear_guest_add() {
  guest_add_ = 0;
  clear_has_guest_add();
}
 ::google::protobuf::int32 DB_ActionRecord::guest_add() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.guest_add)
  return guest_add_;
}
 void DB_ActionRecord::set_guest_add(::google::protobuf::int32 value) {
  set_has_guest_add();
  guest_add_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.guest_add)
}

// optional string openid = 15 [default = ""];
 bool DB_ActionRecord::has_openid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
 void DB_ActionRecord::set_has_openid() {
  _has_bits_[0] |= 0x00004000u;
}
 void DB_ActionRecord::clear_has_openid() {
  _has_bits_[0] &= ~0x00004000u;
}
 void DB_ActionRecord::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& DB_ActionRecord::openid() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_ActionRecord::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.openid)
}
 void DB_ActionRecord::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_ActionRecord.openid)
}
 void DB_ActionRecord::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_ActionRecord.openid)
}
 ::std::string* DB_ActionRecord::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:DB_ActionRecord.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_ActionRecord::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_ActionRecord::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:DB_ActionRecord.openid)
}

// optional int32 value_a = 16 [default = -1];
 bool DB_ActionRecord::has_value_a() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
 void DB_ActionRecord::set_has_value_a() {
  _has_bits_[0] |= 0x00008000u;
}
 void DB_ActionRecord::clear_has_value_a() {
  _has_bits_[0] &= ~0x00008000u;
}
 void DB_ActionRecord::clear_value_a() {
  value_a_ = -1;
  clear_has_value_a();
}
 ::google::protobuf::int32 DB_ActionRecord::value_a() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.value_a)
  return value_a_;
}
 void DB_ActionRecord::set_value_a(::google::protobuf::int32 value) {
  set_has_value_a();
  value_a_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.value_a)
}

// optional int32 value_b = 17 [default = -1];
 bool DB_ActionRecord::has_value_b() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
 void DB_ActionRecord::set_has_value_b() {
  _has_bits_[0] |= 0x00010000u;
}
 void DB_ActionRecord::clear_has_value_b() {
  _has_bits_[0] &= ~0x00010000u;
}
 void DB_ActionRecord::clear_value_b() {
  value_b_ = -1;
  clear_has_value_b();
}
 ::google::protobuf::int32 DB_ActionRecord::value_b() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.value_b)
  return value_b_;
}
 void DB_ActionRecord::set_value_b(::google::protobuf::int32 value) {
  set_has_value_b();
  value_b_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.value_b)
}

// optional int64 time_sec = 18 [default = 0];
 bool DB_ActionRecord::has_time_sec() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
 void DB_ActionRecord::set_has_time_sec() {
  _has_bits_[0] |= 0x00020000u;
}
 void DB_ActionRecord::clear_has_time_sec() {
  _has_bits_[0] &= ~0x00020000u;
}
 void DB_ActionRecord::clear_time_sec() {
  time_sec_ = GOOGLE_LONGLONG(0);
  clear_has_time_sec();
}
 ::google::protobuf::int64 DB_ActionRecord::time_sec() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.time_sec)
  return time_sec_;
}
 void DB_ActionRecord::set_time_sec(::google::protobuf::int64 value) {
  set_has_time_sec();
  time_sec_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.time_sec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_FakeFriendActionSet::kFakeActionUidsFieldNumber;
const int DB_FakeFriendActionSet::kFakeActionCountsFieldNumber;
const int DB_FakeFriendActionSet::kFackActionTotleCountFieldNumber;
const int DB_FakeFriendActionSet::kLastUpdateTimeFieldNumber;
const int DB_FakeFriendActionSet::kFakeActionPickedFieldNumber;
const int DB_FakeFriendActionSet::kFakeRewardGuestFieldNumber;
const int DB_FakeFriendActionSet::kFakeRewardGoldFieldNumber;
#endif  // !_MSC_VER

DB_FakeFriendActionSet::DB_FakeFriendActionSet()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_FakeFriendActionSet)
}

void DB_FakeFriendActionSet::InitAsDefaultInstance() {
}

DB_FakeFriendActionSet::DB_FakeFriendActionSet(const DB_FakeFriendActionSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_FakeFriendActionSet)
}

void DB_FakeFriendActionSet::SharedCtor() {
  _cached_size_ = 0;
  fack_action_totle_count_ = 0;
  last_update_time_ = GOOGLE_LONGLONG(0);
  fake_reward_guest_ = 0;
  fake_reward_gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_FakeFriendActionSet::~DB_FakeFriendActionSet() {
  // @@protoc_insertion_point(destructor:DB_FakeFriendActionSet)
  SharedDtor();
}

void DB_FakeFriendActionSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_FakeFriendActionSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_FakeFriendActionSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_FakeFriendActionSet_descriptor_;
}

const DB_FakeFriendActionSet& DB_FakeFriendActionSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_FakeFriendActionSet* DB_FakeFriendActionSet::default_instance_ = NULL;

DB_FakeFriendActionSet* DB_FakeFriendActionSet::New(::google::protobuf::Arena* arena) const {
  DB_FakeFriendActionSet* n = new DB_FakeFriendActionSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_FakeFriendActionSet::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_FakeFriendActionSet*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 108) {
    ZR_(last_update_time_, fake_reward_guest_);
    fake_reward_gold_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  fake_action_uids_.Clear();
  fake_action_counts_.Clear();
  fake_action_picked_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_FakeFriendActionSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_FakeFriendActionSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 fake_action_uids = 1;
      case 1: {
        if (tag == 8) {
         parse_fake_action_uids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_fake_action_uids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_fake_action_uids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_fake_action_uids;
        if (input->ExpectTag(16)) goto parse_fake_action_counts;
        break;
      }

      // repeated int32 fake_action_counts = 2;
      case 2: {
        if (tag == 16) {
         parse_fake_action_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_fake_action_counts())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fake_action_counts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fake_action_counts;
        if (input->ExpectTag(24)) goto parse_fack_action_totle_count;
        break;
      }

      // optional int32 fack_action_totle_count = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_fack_action_totle_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fack_action_totle_count_)));
          set_has_fack_action_totle_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_update_time;
        break;
      }

      // optional int64 last_update_time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_last_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_update_time_)));
          set_has_last_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fake_action_picked;
        break;
      }

      // repeated bool fake_action_picked = 5;
      case 5: {
        if (tag == 40) {
         parse_fake_action_picked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 40, input, this->mutable_fake_action_picked())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_fake_action_picked())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fake_action_picked;
        if (input->ExpectTag(48)) goto parse_fake_reward_guest;
        break;
      }

      // optional int32 fake_reward_guest = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_fake_reward_guest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fake_reward_guest_)));
          set_has_fake_reward_guest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fake_reward_gold;
        break;
      }

      // optional int32 fake_reward_gold = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_fake_reward_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fake_reward_gold_)));
          set_has_fake_reward_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_FakeFriendActionSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_FakeFriendActionSet)
  return false;
#undef DO_
}

void DB_FakeFriendActionSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_FakeFriendActionSet)
  // repeated int64 fake_action_uids = 1;
  for (int i = 0; i < this->fake_action_uids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->fake_action_uids(i), output);
  }

  // repeated int32 fake_action_counts = 2;
  for (int i = 0; i < this->fake_action_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->fake_action_counts(i), output);
  }

  // optional int32 fack_action_totle_count = 3 [default = 0];
  if (has_fack_action_totle_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fack_action_totle_count(), output);
  }

  // optional int64 last_update_time = 4 [default = 0];
  if (has_last_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_update_time(), output);
  }

  // repeated bool fake_action_picked = 5;
  for (int i = 0; i < this->fake_action_picked_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      5, this->fake_action_picked(i), output);
  }

  // optional int32 fake_reward_guest = 6 [default = 0];
  if (has_fake_reward_guest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fake_reward_guest(), output);
  }

  // optional int32 fake_reward_gold = 7 [default = 0];
  if (has_fake_reward_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fake_reward_gold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_FakeFriendActionSet)
}

::google::protobuf::uint8* DB_FakeFriendActionSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_FakeFriendActionSet)
  // repeated int64 fake_action_uids = 1;
  for (int i = 0; i < this->fake_action_uids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->fake_action_uids(i), target);
  }

  // repeated int32 fake_action_counts = 2;
  for (int i = 0; i < this->fake_action_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->fake_action_counts(i), target);
  }

  // optional int32 fack_action_totle_count = 3 [default = 0];
  if (has_fack_action_totle_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fack_action_totle_count(), target);
  }

  // optional int64 last_update_time = 4 [default = 0];
  if (has_last_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->last_update_time(), target);
  }

  // repeated bool fake_action_picked = 5;
  for (int i = 0; i < this->fake_action_picked_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(5, this->fake_action_picked(i), target);
  }

  // optional int32 fake_reward_guest = 6 [default = 0];
  if (has_fake_reward_guest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fake_reward_guest(), target);
  }

  // optional int32 fake_reward_gold = 7 [default = 0];
  if (has_fake_reward_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fake_reward_gold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_FakeFriendActionSet)
  return target;
}

int DB_FakeFriendActionSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & 108) {
    // optional int32 fack_action_totle_count = 3 [default = 0];
    if (has_fack_action_totle_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fack_action_totle_count());
    }

    // optional int64 last_update_time = 4 [default = 0];
    if (has_last_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_update_time());
    }

    // optional int32 fake_reward_guest = 6 [default = 0];
    if (has_fake_reward_guest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fake_reward_guest());
    }

    // optional int32 fake_reward_gold = 7 [default = 0];
    if (has_fake_reward_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fake_reward_gold());
    }

  }
  // repeated int64 fake_action_uids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fake_action_uids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->fake_action_uids(i));
    }
    total_size += 1 * this->fake_action_uids_size() + data_size;
  }

  // repeated int32 fake_action_counts = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fake_action_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fake_action_counts(i));
    }
    total_size += 1 * this->fake_action_counts_size() + data_size;
  }

  // repeated bool fake_action_picked = 5;
  {
    int data_size = 0;
    data_size = 1 * this->fake_action_picked_size();
    total_size += 1 * this->fake_action_picked_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_FakeFriendActionSet::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_FakeFriendActionSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_FakeFriendActionSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_FakeFriendActionSet::MergeFrom(const DB_FakeFriendActionSet& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fake_action_uids_.MergeFrom(from.fake_action_uids_);
  fake_action_counts_.MergeFrom(from.fake_action_counts_);
  fake_action_picked_.MergeFrom(from.fake_action_picked_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_fack_action_totle_count()) {
      set_fack_action_totle_count(from.fack_action_totle_count());
    }
    if (from.has_last_update_time()) {
      set_last_update_time(from.last_update_time());
    }
    if (from.has_fake_reward_guest()) {
      set_fake_reward_guest(from.fake_reward_guest());
    }
    if (from.has_fake_reward_gold()) {
      set_fake_reward_gold(from.fake_reward_gold());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_FakeFriendActionSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_FakeFriendActionSet::CopyFrom(const DB_FakeFriendActionSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_FakeFriendActionSet::IsInitialized() const {

  return true;
}

void DB_FakeFriendActionSet::Swap(DB_FakeFriendActionSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_FakeFriendActionSet::InternalSwap(DB_FakeFriendActionSet* other) {
  fake_action_uids_.UnsafeArenaSwap(&other->fake_action_uids_);
  fake_action_counts_.UnsafeArenaSwap(&other->fake_action_counts_);
  std::swap(fack_action_totle_count_, other->fack_action_totle_count_);
  std::swap(last_update_time_, other->last_update_time_);
  fake_action_picked_.UnsafeArenaSwap(&other->fake_action_picked_);
  std::swap(fake_reward_guest_, other->fake_reward_guest_);
  std::swap(fake_reward_gold_, other->fake_reward_gold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_FakeFriendActionSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_FakeFriendActionSet_descriptor_;
  metadata.reflection = DB_FakeFriendActionSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_FakeFriendActionSet

// repeated int64 fake_action_uids = 1;
 int DB_FakeFriendActionSet::fake_action_uids_size() const {
  return fake_action_uids_.size();
}
 void DB_FakeFriendActionSet::clear_fake_action_uids() {
  fake_action_uids_.Clear();
}
 ::google::protobuf::int64 DB_FakeFriendActionSet::fake_action_uids(int index) const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.fake_action_uids)
  return fake_action_uids_.Get(index);
}
 void DB_FakeFriendActionSet::set_fake_action_uids(int index, ::google::protobuf::int64 value) {
  fake_action_uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.fake_action_uids)
}
 void DB_FakeFriendActionSet::add_fake_action_uids(::google::protobuf::int64 value) {
  fake_action_uids_.Add(value);
  // @@protoc_insertion_point(field_add:DB_FakeFriendActionSet.fake_action_uids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_FakeFriendActionSet::fake_action_uids() const {
  // @@protoc_insertion_point(field_list:DB_FakeFriendActionSet.fake_action_uids)
  return fake_action_uids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_FakeFriendActionSet::mutable_fake_action_uids() {
  // @@protoc_insertion_point(field_mutable_list:DB_FakeFriendActionSet.fake_action_uids)
  return &fake_action_uids_;
}

// repeated int32 fake_action_counts = 2;
 int DB_FakeFriendActionSet::fake_action_counts_size() const {
  return fake_action_counts_.size();
}
 void DB_FakeFriendActionSet::clear_fake_action_counts() {
  fake_action_counts_.Clear();
}
 ::google::protobuf::int32 DB_FakeFriendActionSet::fake_action_counts(int index) const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.fake_action_counts)
  return fake_action_counts_.Get(index);
}
 void DB_FakeFriendActionSet::set_fake_action_counts(int index, ::google::protobuf::int32 value) {
  fake_action_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.fake_action_counts)
}
 void DB_FakeFriendActionSet::add_fake_action_counts(::google::protobuf::int32 value) {
  fake_action_counts_.Add(value);
  // @@protoc_insertion_point(field_add:DB_FakeFriendActionSet.fake_action_counts)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_FakeFriendActionSet::fake_action_counts() const {
  // @@protoc_insertion_point(field_list:DB_FakeFriendActionSet.fake_action_counts)
  return fake_action_counts_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_FakeFriendActionSet::mutable_fake_action_counts() {
  // @@protoc_insertion_point(field_mutable_list:DB_FakeFriendActionSet.fake_action_counts)
  return &fake_action_counts_;
}

// optional int32 fack_action_totle_count = 3 [default = 0];
 bool DB_FakeFriendActionSet::has_fack_action_totle_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_FakeFriendActionSet::set_has_fack_action_totle_count() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_FakeFriendActionSet::clear_has_fack_action_totle_count() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_FakeFriendActionSet::clear_fack_action_totle_count() {
  fack_action_totle_count_ = 0;
  clear_has_fack_action_totle_count();
}
 ::google::protobuf::int32 DB_FakeFriendActionSet::fack_action_totle_count() const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.fack_action_totle_count)
  return fack_action_totle_count_;
}
 void DB_FakeFriendActionSet::set_fack_action_totle_count(::google::protobuf::int32 value) {
  set_has_fack_action_totle_count();
  fack_action_totle_count_ = value;
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.fack_action_totle_count)
}

// optional int64 last_update_time = 4 [default = 0];
 bool DB_FakeFriendActionSet::has_last_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_FakeFriendActionSet::set_has_last_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_FakeFriendActionSet::clear_has_last_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_FakeFriendActionSet::clear_last_update_time() {
  last_update_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_update_time();
}
 ::google::protobuf::int64 DB_FakeFriendActionSet::last_update_time() const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.last_update_time)
  return last_update_time_;
}
 void DB_FakeFriendActionSet::set_last_update_time(::google::protobuf::int64 value) {
  set_has_last_update_time();
  last_update_time_ = value;
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.last_update_time)
}

// repeated bool fake_action_picked = 5;
 int DB_FakeFriendActionSet::fake_action_picked_size() const {
  return fake_action_picked_.size();
}
 void DB_FakeFriendActionSet::clear_fake_action_picked() {
  fake_action_picked_.Clear();
}
 bool DB_FakeFriendActionSet::fake_action_picked(int index) const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.fake_action_picked)
  return fake_action_picked_.Get(index);
}
 void DB_FakeFriendActionSet::set_fake_action_picked(int index, bool value) {
  fake_action_picked_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.fake_action_picked)
}
 void DB_FakeFriendActionSet::add_fake_action_picked(bool value) {
  fake_action_picked_.Add(value);
  // @@protoc_insertion_point(field_add:DB_FakeFriendActionSet.fake_action_picked)
}
 const ::google::protobuf::RepeatedField< bool >&
DB_FakeFriendActionSet::fake_action_picked() const {
  // @@protoc_insertion_point(field_list:DB_FakeFriendActionSet.fake_action_picked)
  return fake_action_picked_;
}
 ::google::protobuf::RepeatedField< bool >*
DB_FakeFriendActionSet::mutable_fake_action_picked() {
  // @@protoc_insertion_point(field_mutable_list:DB_FakeFriendActionSet.fake_action_picked)
  return &fake_action_picked_;
}

// optional int32 fake_reward_guest = 6 [default = 0];
 bool DB_FakeFriendActionSet::has_fake_reward_guest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_FakeFriendActionSet::set_has_fake_reward_guest() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_FakeFriendActionSet::clear_has_fake_reward_guest() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_FakeFriendActionSet::clear_fake_reward_guest() {
  fake_reward_guest_ = 0;
  clear_has_fake_reward_guest();
}
 ::google::protobuf::int32 DB_FakeFriendActionSet::fake_reward_guest() const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.fake_reward_guest)
  return fake_reward_guest_;
}
 void DB_FakeFriendActionSet::set_fake_reward_guest(::google::protobuf::int32 value) {
  set_has_fake_reward_guest();
  fake_reward_guest_ = value;
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.fake_reward_guest)
}

// optional int32 fake_reward_gold = 7 [default = 0];
 bool DB_FakeFriendActionSet::has_fake_reward_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void DB_FakeFriendActionSet::set_has_fake_reward_gold() {
  _has_bits_[0] |= 0x00000040u;
}
 void DB_FakeFriendActionSet::clear_has_fake_reward_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
 void DB_FakeFriendActionSet::clear_fake_reward_gold() {
  fake_reward_gold_ = 0;
  clear_has_fake_reward_gold();
}
 ::google::protobuf::int32 DB_FakeFriendActionSet::fake_reward_gold() const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.fake_reward_gold)
  return fake_reward_gold_;
}
 void DB_FakeFriendActionSet::set_fake_reward_gold(::google::protobuf::int32 value) {
  set_has_fake_reward_gold();
  fake_reward_gold_ = value;
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.fake_reward_gold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_FreindFirstVist::kUidsFieldNumber;
#endif  // !_MSC_VER

DB_FreindFirstVist::DB_FreindFirstVist()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_FreindFirstVist)
}

void DB_FreindFirstVist::InitAsDefaultInstance() {
}

DB_FreindFirstVist::DB_FreindFirstVist(const DB_FreindFirstVist& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_FreindFirstVist)
}

void DB_FreindFirstVist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_FreindFirstVist::~DB_FreindFirstVist() {
  // @@protoc_insertion_point(destructor:DB_FreindFirstVist)
  SharedDtor();
}

void DB_FreindFirstVist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_FreindFirstVist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_FreindFirstVist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_FreindFirstVist_descriptor_;
}

const DB_FreindFirstVist& DB_FreindFirstVist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_FreindFirstVist* DB_FreindFirstVist::default_instance_ = NULL;

DB_FreindFirstVist* DB_FreindFirstVist::New(::google::protobuf::Arena* arena) const {
  DB_FreindFirstVist* n = new DB_FreindFirstVist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_FreindFirstVist::Clear() {
  uids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_FreindFirstVist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_FreindFirstVist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 uids = 1;
      case 1: {
        if (tag == 8) {
         parse_uids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_uids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_uids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_uids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_FreindFirstVist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_FreindFirstVist)
  return false;
#undef DO_
}

void DB_FreindFirstVist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_FreindFirstVist)
  // repeated int64 uids = 1;
  for (int i = 0; i < this->uids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->uids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_FreindFirstVist)
}

::google::protobuf::uint8* DB_FreindFirstVist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_FreindFirstVist)
  // repeated int64 uids = 1;
  for (int i = 0; i < this->uids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->uids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_FreindFirstVist)
  return target;
}

int DB_FreindFirstVist::ByteSize() const {
  int total_size = 0;

  // repeated int64 uids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->uids(i));
    }
    total_size += 1 * this->uids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_FreindFirstVist::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_FreindFirstVist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_FreindFirstVist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_FreindFirstVist::MergeFrom(const DB_FreindFirstVist& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  uids_.MergeFrom(from.uids_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_FreindFirstVist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_FreindFirstVist::CopyFrom(const DB_FreindFirstVist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_FreindFirstVist::IsInitialized() const {

  return true;
}

void DB_FreindFirstVist::Swap(DB_FreindFirstVist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_FreindFirstVist::InternalSwap(DB_FreindFirstVist* other) {
  uids_.UnsafeArenaSwap(&other->uids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_FreindFirstVist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_FreindFirstVist_descriptor_;
  metadata.reflection = DB_FreindFirstVist_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_FreindFirstVist

// repeated int64 uids = 1;
 int DB_FreindFirstVist::uids_size() const {
  return uids_.size();
}
 void DB_FreindFirstVist::clear_uids() {
  uids_.Clear();
}
 ::google::protobuf::int64 DB_FreindFirstVist::uids(int index) const {
  // @@protoc_insertion_point(field_get:DB_FreindFirstVist.uids)
  return uids_.Get(index);
}
 void DB_FreindFirstVist::set_uids(int index, ::google::protobuf::int64 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_FreindFirstVist.uids)
}
 void DB_FreindFirstVist::add_uids(::google::protobuf::int64 value) {
  uids_.Add(value);
  // @@protoc_insertion_point(field_add:DB_FreindFirstVist.uids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_FreindFirstVist::uids() const {
  // @@protoc_insertion_point(field_list:DB_FreindFirstVist.uids)
  return uids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_FreindFirstVist::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:DB_FreindFirstVist.uids)
  return &uids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_Option::kHighQualityFieldNumber;
const int DB_Option::kMusicFieldNumber;
const int DB_Option::kSoundFieldNumber;
#endif  // !_MSC_VER

DB_Option::DB_Option()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_Option)
}

void DB_Option::InitAsDefaultInstance() {
}

DB_Option::DB_Option(const DB_Option& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_Option)
}

void DB_Option::SharedCtor() {
  _cached_size_ = 0;
  high_quality_ = true;
  music_ = true;
  sound_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Option::~DB_Option() {
  // @@protoc_insertion_point(destructor:DB_Option)
  SharedDtor();
}

void DB_Option::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_Option::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Option::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Option_descriptor_;
}

const DB_Option& DB_Option::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_Option* DB_Option::default_instance_ = NULL;

DB_Option* DB_Option::New(::google::protobuf::Arena* arena) const {
  DB_Option* n = new DB_Option;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_Option::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    high_quality_ = true;
    music_ = true;
    sound_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_Option::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_Option)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool high_quality = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_quality_)));
          set_has_high_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_music;
        break;
      }

      // optional bool music = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_music:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &music_)));
          set_has_music();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sound;
        break;
      }

      // optional bool sound = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_sound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sound_)));
          set_has_sound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_Option)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_Option)
  return false;
#undef DO_
}

void DB_Option::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_Option)
  // optional bool high_quality = 1 [default = true];
  if (has_high_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->high_quality(), output);
  }

  // optional bool music = 2 [default = true];
  if (has_music()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->music(), output);
  }

  // optional bool sound = 3 [default = true];
  if (has_sound()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sound(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_Option)
}

::google::protobuf::uint8* DB_Option::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_Option)
  // optional bool high_quality = 1 [default = true];
  if (has_high_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->high_quality(), target);
  }

  // optional bool music = 2 [default = true];
  if (has_music()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->music(), target);
  }

  // optional bool sound = 3 [default = true];
  if (has_sound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sound(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_Option)
  return target;
}

int DB_Option::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional bool high_quality = 1 [default = true];
    if (has_high_quality()) {
      total_size += 1 + 1;
    }

    // optional bool music = 2 [default = true];
    if (has_music()) {
      total_size += 1 + 1;
    }

    // optional bool sound = 3 [default = true];
    if (has_sound()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Option::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_Option* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Option*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Option::MergeFrom(const DB_Option& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_high_quality()) {
      set_high_quality(from.high_quality());
    }
    if (from.has_music()) {
      set_music(from.music());
    }
    if (from.has_sound()) {
      set_sound(from.sound());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_Option::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Option::CopyFrom(const DB_Option& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Option::IsInitialized() const {

  return true;
}

void DB_Option::Swap(DB_Option* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_Option::InternalSwap(DB_Option* other) {
  std::swap(high_quality_, other->high_quality_);
  std::swap(music_, other->music_);
  std::swap(sound_, other->sound_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_Option::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Option_descriptor_;
  metadata.reflection = DB_Option_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_Option

// optional bool high_quality = 1 [default = true];
 bool DB_Option::has_high_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_Option::set_has_high_quality() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_Option::clear_has_high_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_Option::clear_high_quality() {
  high_quality_ = true;
  clear_has_high_quality();
}
 bool DB_Option::high_quality() const {
  // @@protoc_insertion_point(field_get:DB_Option.high_quality)
  return high_quality_;
}
 void DB_Option::set_high_quality(bool value) {
  set_has_high_quality();
  high_quality_ = value;
  // @@protoc_insertion_point(field_set:DB_Option.high_quality)
}

// optional bool music = 2 [default = true];
 bool DB_Option::has_music() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_Option::set_has_music() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_Option::clear_has_music() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_Option::clear_music() {
  music_ = true;
  clear_has_music();
}
 bool DB_Option::music() const {
  // @@protoc_insertion_point(field_get:DB_Option.music)
  return music_;
}
 void DB_Option::set_music(bool value) {
  set_has_music();
  music_ = value;
  // @@protoc_insertion_point(field_set:DB_Option.music)
}

// optional bool sound = 3 [default = true];
 bool DB_Option::has_sound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_Option::set_has_sound() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_Option::clear_has_sound() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_Option::clear_sound() {
  sound_ = true;
  clear_has_sound();
}
 bool DB_Option::sound() const {
  // @@protoc_insertion_point(field_get:DB_Option.sound)
  return sound_;
}
 void DB_Option::set_sound(bool value) {
  set_has_sound();
  sound_ = value;
  // @@protoc_insertion_point(field_set:DB_Option.sound)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_WebBuyDetail::kShopidFieldNumber;
const int DB_WebBuyDetail::kCountFieldNumber;
const int DB_WebBuyDetail::kIndateFieldNumber;
const int DB_WebBuyDetail::kPriceFieldNumber;
const int DB_WebBuyDetail::kPosxFieldNumber;
const int DB_WebBuyDetail::kPosyFieldNumber;
const int DB_WebBuyDetail::kDirectionFieldNumber;
#endif  // !_MSC_VER

DB_WebBuyDetail::DB_WebBuyDetail()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_WebBuyDetail)
}

void DB_WebBuyDetail::InitAsDefaultInstance() {
}

DB_WebBuyDetail::DB_WebBuyDetail(const DB_WebBuyDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_WebBuyDetail)
}

void DB_WebBuyDetail::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  indate_ = 0;
  price_ = 0;
  posx_ = 0;
  posy_ = 0;
  direction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WebBuyDetail::~DB_WebBuyDetail() {
  // @@protoc_insertion_point(destructor:DB_WebBuyDetail)
  SharedDtor();
}

void DB_WebBuyDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_WebBuyDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_WebBuyDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WebBuyDetail_descriptor_;
}

const DB_WebBuyDetail& DB_WebBuyDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_WebBuyDetail* DB_WebBuyDetail::default_instance_ = NULL;

DB_WebBuyDetail* DB_WebBuyDetail::New(::google::protobuf::Arena* arena) const {
  DB_WebBuyDetail* n = new DB_WebBuyDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_WebBuyDetail::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_WebBuyDetail*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(shopid_, direction_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_WebBuyDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_WebBuyDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 shopid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_indate;
        break;
      }

      // required int32 indate = 3;
      case 3: {
        if (tag == 24) {
         parse_indate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indate_)));
          set_has_indate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // required int32 price = 4;
      case 4: {
        if (tag == 32) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_posx;
        break;
      }

      // optional int32 posx = 5;
      case 5: {
        if (tag == 40) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_posy;
        break;
      }

      // optional int32 posy = 6;
      case 6: {
        if (tag == 48) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_direction;
        break;
      }

      // optional int32 direction = 7;
      case 7: {
        if (tag == 56) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_WebBuyDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_WebBuyDetail)
  return false;
#undef DO_
}

void DB_WebBuyDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_WebBuyDetail)
  // required int64 shopid = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->shopid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 indate = 3;
  if (has_indate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->indate(), output);
  }

  // required int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }

  // optional int32 posx = 5;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->posx(), output);
  }

  // optional int32 posy = 6;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->posy(), output);
  }

  // optional int32 direction = 7;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_WebBuyDetail)
}

::google::protobuf::uint8* DB_WebBuyDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_WebBuyDetail)
  // required int64 shopid = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->shopid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 indate = 3;
  if (has_indate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->indate(), target);
  }

  // required int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }

  // optional int32 posx = 5;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->posx(), target);
  }

  // optional int32 posy = 6;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->posy(), target);
  }

  // optional int32 direction = 7;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_WebBuyDetail)
  return target;
}

int DB_WebBuyDetail::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_shopid()) {
    // required int64 shopid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shopid());
  }

  if (has_count()) {
    // required int32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  if (has_indate()) {
    // required int32 indate = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->indate());
  }

  if (has_price()) {
    // required int32 price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  return total_size;
}
int DB_WebBuyDetail::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 shopid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shopid());

    // required int32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

    // required int32 indate = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->indate());

    // required int32 price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 112) {
    // optional int32 posx = 5;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posy = 6;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 direction = 7;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_WebBuyDetail::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_WebBuyDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WebBuyDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WebBuyDetail::MergeFrom(const DB_WebBuyDetail& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_indate()) {
      set_indate(from.indate());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_WebBuyDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WebBuyDetail::CopyFrom(const DB_WebBuyDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WebBuyDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DB_WebBuyDetail::Swap(DB_WebBuyDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_WebBuyDetail::InternalSwap(DB_WebBuyDetail* other) {
  std::swap(shopid_, other->shopid_);
  std::swap(count_, other->count_);
  std::swap(indate_, other->indate_);
  std::swap(price_, other->price_);
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(direction_, other->direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_WebBuyDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WebBuyDetail_descriptor_;
  metadata.reflection = DB_WebBuyDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_WebBuyDetail

// required int64 shopid = 1;
 bool DB_WebBuyDetail::has_shopid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_WebBuyDetail::set_has_shopid() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_WebBuyDetail::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_WebBuyDetail::clear_shopid() {
  shopid_ = GOOGLE_LONGLONG(0);
  clear_has_shopid();
}
 ::google::protobuf::int64 DB_WebBuyDetail::shopid() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.shopid)
  return shopid_;
}
 void DB_WebBuyDetail::set_shopid(::google::protobuf::int64 value) {
  set_has_shopid();
  shopid_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.shopid)
}

// required int32 count = 2;
 bool DB_WebBuyDetail::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_WebBuyDetail::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_WebBuyDetail::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_WebBuyDetail::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 DB_WebBuyDetail::count() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.count)
  return count_;
}
 void DB_WebBuyDetail::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.count)
}

// required int32 indate = 3;
 bool DB_WebBuyDetail::has_indate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_WebBuyDetail::set_has_indate() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_WebBuyDetail::clear_has_indate() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_WebBuyDetail::clear_indate() {
  indate_ = 0;
  clear_has_indate();
}
 ::google::protobuf::int32 DB_WebBuyDetail::indate() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.indate)
  return indate_;
}
 void DB_WebBuyDetail::set_indate(::google::protobuf::int32 value) {
  set_has_indate();
  indate_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.indate)
}

// required int32 price = 4;
 bool DB_WebBuyDetail::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_WebBuyDetail::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_WebBuyDetail::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_WebBuyDetail::clear_price() {
  price_ = 0;
  clear_has_price();
}
 ::google::protobuf::int32 DB_WebBuyDetail::price() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.price)
  return price_;
}
 void DB_WebBuyDetail::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.price)
}

// optional int32 posx = 5;
 bool DB_WebBuyDetail::has_posx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_WebBuyDetail::set_has_posx() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_WebBuyDetail::clear_has_posx() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_WebBuyDetail::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
 ::google::protobuf::int32 DB_WebBuyDetail::posx() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.posx)
  return posx_;
}
 void DB_WebBuyDetail::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.posx)
}

// optional int32 posy = 6;
 bool DB_WebBuyDetail::has_posy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_WebBuyDetail::set_has_posy() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_WebBuyDetail::clear_has_posy() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_WebBuyDetail::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
 ::google::protobuf::int32 DB_WebBuyDetail::posy() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.posy)
  return posy_;
}
 void DB_WebBuyDetail::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.posy)
}

// optional int32 direction = 7;
 bool DB_WebBuyDetail::has_direction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void DB_WebBuyDetail::set_has_direction() {
  _has_bits_[0] |= 0x00000040u;
}
 void DB_WebBuyDetail::clear_has_direction() {
  _has_bits_[0] &= ~0x00000040u;
}
 void DB_WebBuyDetail::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
 ::google::protobuf::int32 DB_WebBuyDetail::direction() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.direction)
  return direction_;
}
 void DB_WebBuyDetail::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_WebBuyRecord::kDetailsFieldNumber;
const int DB_WebBuyRecord::kKeyFieldNumber;
const int DB_WebBuyRecord::kTimeFieldNumber;
#endif  // !_MSC_VER

DB_WebBuyRecord::DB_WebBuyRecord()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_WebBuyRecord)
}

void DB_WebBuyRecord::InitAsDefaultInstance() {
}

DB_WebBuyRecord::DB_WebBuyRecord(const DB_WebBuyRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_WebBuyRecord)
}

void DB_WebBuyRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_WebBuyRecord::~DB_WebBuyRecord() {
  // @@protoc_insertion_point(destructor:DB_WebBuyRecord)
  SharedDtor();
}

void DB_WebBuyRecord::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DB_WebBuyRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_WebBuyRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_WebBuyRecord_descriptor_;
}

const DB_WebBuyRecord& DB_WebBuyRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_WebBuyRecord* DB_WebBuyRecord::default_instance_ = NULL;

DB_WebBuyRecord* DB_WebBuyRecord::New(::google::protobuf::Arena* arena) const {
  DB_WebBuyRecord* n = new DB_WebBuyRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_WebBuyRecord::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_WebBuyRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_WebBuyRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_WebBuyRecord.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_details;
        break;
      }

      // repeated .DB_WebBuyDetail details = 2;
      case 2: {
        if (tag == 18) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_details;
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_WebBuyRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_WebBuyRecord)
  return false;
#undef DO_
}

void DB_WebBuyRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_WebBuyRecord)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_WebBuyRecord.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated .DB_WebBuyDetail details = 2;
  for (unsigned int i = 0, n = this->details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->details(i), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_WebBuyRecord)
}

::google::protobuf::uint8* DB_WebBuyRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_WebBuyRecord)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_WebBuyRecord.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated .DB_WebBuyDetail details = 2;
  for (unsigned int i = 0, n = this->details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->details(i), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_WebBuyRecord)
  return target;
}

int DB_WebBuyRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & 6) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  // repeated .DB_WebBuyDetail details = 2;
  total_size += 1 * this->details_size();
  for (int i = 0; i < this->details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->details(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_WebBuyRecord::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_WebBuyRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_WebBuyRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_WebBuyRecord::MergeFrom(const DB_WebBuyRecord& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  details_.MergeFrom(from.details_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_WebBuyRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_WebBuyRecord::CopyFrom(const DB_WebBuyRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_WebBuyRecord::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->details())) return false;
  return true;
}

void DB_WebBuyRecord::Swap(DB_WebBuyRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_WebBuyRecord::InternalSwap(DB_WebBuyRecord* other) {
  details_.UnsafeArenaSwap(&other->details_);
  key_.Swap(&other->key_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_WebBuyRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_WebBuyRecord_descriptor_;
  metadata.reflection = DB_WebBuyRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_WebBuyRecord

// repeated .DB_WebBuyDetail details = 2;
 int DB_WebBuyRecord::details_size() const {
  return details_.size();
}
 void DB_WebBuyRecord::clear_details() {
  details_.Clear();
}
 const ::DB_WebBuyDetail& DB_WebBuyRecord::details(int index) const {
  // @@protoc_insertion_point(field_get:DB_WebBuyRecord.details)
  return details_.Get(index);
}
 ::DB_WebBuyDetail* DB_WebBuyRecord::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:DB_WebBuyRecord.details)
  return details_.Mutable(index);
}
 ::DB_WebBuyDetail* DB_WebBuyRecord::add_details() {
  // @@protoc_insertion_point(field_add:DB_WebBuyRecord.details)
  return details_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_WebBuyDetail >&
DB_WebBuyRecord::details() const {
  // @@protoc_insertion_point(field_list:DB_WebBuyRecord.details)
  return details_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_WebBuyDetail >*
DB_WebBuyRecord::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:DB_WebBuyRecord.details)
  return &details_;
}

// optional string key = 1;
 bool DB_WebBuyRecord::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_WebBuyRecord::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_WebBuyRecord::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_WebBuyRecord::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& DB_WebBuyRecord::key() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyRecord.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_WebBuyRecord::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_WebBuyRecord.key)
}
 void DB_WebBuyRecord::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_WebBuyRecord.key)
}
 void DB_WebBuyRecord::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_WebBuyRecord.key)
}
 ::std::string* DB_WebBuyRecord::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:DB_WebBuyRecord.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_WebBuyRecord::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_WebBuyRecord::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:DB_WebBuyRecord.key)
}

// optional int64 time = 3;
 bool DB_WebBuyRecord::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_WebBuyRecord::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_WebBuyRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_WebBuyRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::int64 DB_WebBuyRecord::time() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyRecord.time)
  return time_;
}
 void DB_WebBuyRecord::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyRecord.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_LimitRecord::kTypeIdFieldNumber;
const int DB_LimitRecord::kNumFieldNumber;
const int DB_LimitRecord::kLimittypeFieldNumber;
#endif  // !_MSC_VER

DB_LimitRecord::DB_LimitRecord()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_LimitRecord)
}

void DB_LimitRecord::InitAsDefaultInstance() {
}

DB_LimitRecord::DB_LimitRecord(const DB_LimitRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_LimitRecord)
}

void DB_LimitRecord::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  num_ = 0;
  limittype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_LimitRecord::~DB_LimitRecord() {
  // @@protoc_insertion_point(destructor:DB_LimitRecord)
  SharedDtor();
}

void DB_LimitRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_LimitRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_LimitRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_LimitRecord_descriptor_;
}

const DB_LimitRecord& DB_LimitRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_LimitRecord* DB_LimitRecord::default_instance_ = NULL;

DB_LimitRecord* DB_LimitRecord::New(::google::protobuf::Arena* arena) const {
  DB_LimitRecord* n = new DB_LimitRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_LimitRecord::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_LimitRecord*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_id_, limittype_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_LimitRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_LimitRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limittype;
        break;
      }

      // optional int32 limittype = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_limittype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limittype_)));
          set_has_limittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_LimitRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_LimitRecord)
  return false;
#undef DO_
}

void DB_LimitRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_LimitRecord)
  // optional int32 type_id = 1 [default = 0];
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional int32 num = 2 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 limittype = 3 [default = 0];
  if (has_limittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limittype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_LimitRecord)
}

::google::protobuf::uint8* DB_LimitRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_LimitRecord)
  // optional int32 type_id = 1 [default = 0];
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional int32 num = 2 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 limittype = 3 [default = 0];
  if (has_limittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limittype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_LimitRecord)
  return target;
}

int DB_LimitRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int32 type_id = 1 [default = 0];
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional int32 num = 2 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 limittype = 3 [default = 0];
    if (has_limittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limittype());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_LimitRecord::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_LimitRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_LimitRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_LimitRecord::MergeFrom(const DB_LimitRecord& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_limittype()) {
      set_limittype(from.limittype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_LimitRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_LimitRecord::CopyFrom(const DB_LimitRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_LimitRecord::IsInitialized() const {

  return true;
}

void DB_LimitRecord::Swap(DB_LimitRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_LimitRecord::InternalSwap(DB_LimitRecord* other) {
  std::swap(type_id_, other->type_id_);
  std::swap(num_, other->num_);
  std::swap(limittype_, other->limittype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_LimitRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_LimitRecord_descriptor_;
  metadata.reflection = DB_LimitRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_LimitRecord

// optional int32 type_id = 1 [default = 0];
 bool DB_LimitRecord::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_LimitRecord::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_LimitRecord::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_LimitRecord::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
 ::google::protobuf::int32 DB_LimitRecord::type_id() const {
  // @@protoc_insertion_point(field_get:DB_LimitRecord.type_id)
  return type_id_;
}
 void DB_LimitRecord::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:DB_LimitRecord.type_id)
}

// optional int32 num = 2 [default = 0];
 bool DB_LimitRecord::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_LimitRecord::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_LimitRecord::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_LimitRecord::clear_num() {
  num_ = 0;
  clear_has_num();
}
 ::google::protobuf::int32 DB_LimitRecord::num() const {
  // @@protoc_insertion_point(field_get:DB_LimitRecord.num)
  return num_;
}
 void DB_LimitRecord::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:DB_LimitRecord.num)
}

// optional int32 limittype = 3 [default = 0];
 bool DB_LimitRecord::has_limittype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_LimitRecord::set_has_limittype() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_LimitRecord::clear_has_limittype() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_LimitRecord::clear_limittype() {
  limittype_ = 0;
  clear_has_limittype();
}
 ::google::protobuf::int32 DB_LimitRecord::limittype() const {
  // @@protoc_insertion_point(field_get:DB_LimitRecord.limittype)
  return limittype_;
}
 void DB_LimitRecord::set_limittype(::google::protobuf::int32 value) {
  set_has_limittype();
  limittype_ = value;
  // @@protoc_insertion_point(field_set:DB_LimitRecord.limittype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_Limit::kUpdateFieldNumber;
const int DB_Limit::kItemsFieldNumber;
#endif  // !_MSC_VER

DB_Limit::DB_Limit()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_Limit)
}

void DB_Limit::InitAsDefaultInstance() {
}

DB_Limit::DB_Limit(const DB_Limit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_Limit)
}

void DB_Limit::SharedCtor() {
  _cached_size_ = 0;
  update_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Limit::~DB_Limit() {
  // @@protoc_insertion_point(destructor:DB_Limit)
  SharedDtor();
}

void DB_Limit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_Limit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Limit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Limit_descriptor_;
}

const DB_Limit& DB_Limit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_Limit* DB_Limit::default_instance_ = NULL;

DB_Limit* DB_Limit::New(::google::protobuf::Arena* arena) const {
  DB_Limit* n = new DB_Limit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_Limit::Clear() {
  update_ = GOOGLE_LONGLONG(0);
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_Limit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_Limit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 update = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_)));
          set_has_update();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .DB_LimitRecord items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_Limit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_Limit)
  return false;
#undef DO_
}

void DB_Limit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_Limit)
  // optional int64 update = 1 [default = 0];
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->update(), output);
  }

  // repeated .DB_LimitRecord items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_Limit)
}

::google::protobuf::uint8* DB_Limit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_Limit)
  // optional int64 update = 1 [default = 0];
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->update(), target);
  }

  // repeated .DB_LimitRecord items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_Limit)
  return target;
}

int DB_Limit::ByteSize() const {
  int total_size = 0;

  // optional int64 update = 1 [default = 0];
  if (has_update()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->update());
  }

  // repeated .DB_LimitRecord items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Limit::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_Limit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Limit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Limit::MergeFrom(const DB_Limit& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update()) {
      set_update(from.update());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_Limit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Limit::CopyFrom(const DB_Limit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Limit::IsInitialized() const {

  return true;
}

void DB_Limit::Swap(DB_Limit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_Limit::InternalSwap(DB_Limit* other) {
  std::swap(update_, other->update_);
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_Limit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Limit_descriptor_;
  metadata.reflection = DB_Limit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_Limit

// optional int64 update = 1 [default = 0];
 bool DB_Limit::has_update() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_Limit::set_has_update() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_Limit::clear_has_update() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_Limit::clear_update() {
  update_ = GOOGLE_LONGLONG(0);
  clear_has_update();
}
 ::google::protobuf::int64 DB_Limit::update() const {
  // @@protoc_insertion_point(field_get:DB_Limit.update)
  return update_;
}
 void DB_Limit::set_update(::google::protobuf::int64 value) {
  set_has_update();
  update_ = value;
  // @@protoc_insertion_point(field_set:DB_Limit.update)
}

// repeated .DB_LimitRecord items = 2;
 int DB_Limit::items_size() const {
  return items_.size();
}
 void DB_Limit::clear_items() {
  items_.Clear();
}
 const ::DB_LimitRecord& DB_Limit::items(int index) const {
  // @@protoc_insertion_point(field_get:DB_Limit.items)
  return items_.Get(index);
}
 ::DB_LimitRecord* DB_Limit::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Limit.items)
  return items_.Mutable(index);
}
 ::DB_LimitRecord* DB_Limit::add_items() {
  // @@protoc_insertion_point(field_add:DB_Limit.items)
  return items_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_LimitRecord >&
DB_Limit::items() const {
  // @@protoc_insertion_point(field_list:DB_Limit.items)
  return items_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_LimitRecord >*
DB_Limit::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:DB_Limit.items)
  return &items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_StepWithTime::kStepFieldNumber;
const int DB_StepWithTime::kUpdateFieldNumber;
#endif  // !_MSC_VER

DB_StepWithTime::DB_StepWithTime()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_StepWithTime)
}

void DB_StepWithTime::InitAsDefaultInstance() {
}

DB_StepWithTime::DB_StepWithTime(const DB_StepWithTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_StepWithTime)
}

void DB_StepWithTime::SharedCtor() {
  _cached_size_ = 0;
  step_ = 0;
  update_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_StepWithTime::~DB_StepWithTime() {
  // @@protoc_insertion_point(destructor:DB_StepWithTime)
  SharedDtor();
}

void DB_StepWithTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_StepWithTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_StepWithTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_StepWithTime_descriptor_;
}

const DB_StepWithTime& DB_StepWithTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_StepWithTime* DB_StepWithTime::default_instance_ = NULL;

DB_StepWithTime* DB_StepWithTime::New(::google::protobuf::Arena* arena) const {
  DB_StepWithTime* n = new DB_StepWithTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_StepWithTime::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_StepWithTime*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(update_, step_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_StepWithTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_StepWithTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 step = 3 [default = 0];
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_update;
        break;
      }

      // optional int64 update = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_)));
          set_has_update();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_StepWithTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_StepWithTime)
  return false;
#undef DO_
}

void DB_StepWithTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_StepWithTime)
  // optional int32 step = 3 [default = 0];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->step(), output);
  }

  // optional int64 update = 4 [default = 0];
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->update(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_StepWithTime)
}

::google::protobuf::uint8* DB_StepWithTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_StepWithTime)
  // optional int32 step = 3 [default = 0];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->step(), target);
  }

  // optional int64 update = 4 [default = 0];
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->update(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_StepWithTime)
  return target;
}

int DB_StepWithTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional int32 step = 3 [default = 0];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // optional int64 update = 4 [default = 0];
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_StepWithTime::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_StepWithTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_StepWithTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_StepWithTime::MergeFrom(const DB_StepWithTime& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_update()) {
      set_update(from.update());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_StepWithTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_StepWithTime::CopyFrom(const DB_StepWithTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_StepWithTime::IsInitialized() const {

  return true;
}

void DB_StepWithTime::Swap(DB_StepWithTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_StepWithTime::InternalSwap(DB_StepWithTime* other) {
  std::swap(step_, other->step_);
  std::swap(update_, other->update_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_StepWithTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_StepWithTime_descriptor_;
  metadata.reflection = DB_StepWithTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_StepWithTime

// optional int32 step = 3 [default = 0];
 bool DB_StepWithTime::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_StepWithTime::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_StepWithTime::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_StepWithTime::clear_step() {
  step_ = 0;
  clear_has_step();
}
 ::google::protobuf::int32 DB_StepWithTime::step() const {
  // @@protoc_insertion_point(field_get:DB_StepWithTime.step)
  return step_;
}
 void DB_StepWithTime::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:DB_StepWithTime.step)
}

// optional int64 update = 4 [default = 0];
 bool DB_StepWithTime::has_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_StepWithTime::set_has_update() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_StepWithTime::clear_has_update() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_StepWithTime::clear_update() {
  update_ = GOOGLE_LONGLONG(0);
  clear_has_update();
}
 ::google::protobuf::int64 DB_StepWithTime::update() const {
  // @@protoc_insertion_point(field_get:DB_StepWithTime.update)
  return update_;
}
 void DB_StepWithTime::set_update(::google::protobuf::int64 value) {
  set_has_update();
  update_ = value;
  // @@protoc_insertion_point(field_set:DB_StepWithTime.update)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_NewFunc::kSystemInfoFieldNumber;
#endif  // !_MSC_VER

DB_NewFunc::DB_NewFunc()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_NewFunc)
}

void DB_NewFunc::InitAsDefaultInstance() {
  system_info_ = const_cast< ::DB_BitCache*>(&::DB_BitCache::default_instance());
}

DB_NewFunc::DB_NewFunc(const DB_NewFunc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_NewFunc)
}

void DB_NewFunc::SharedCtor() {
  _cached_size_ = 0;
  system_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_NewFunc::~DB_NewFunc() {
  // @@protoc_insertion_point(destructor:DB_NewFunc)
  SharedDtor();
}

void DB_NewFunc::SharedDtor() {
  if (this != default_instance_) {
    delete system_info_;
  }
}

void DB_NewFunc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_NewFunc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_NewFunc_descriptor_;
}

const DB_NewFunc& DB_NewFunc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_NewFunc* DB_NewFunc::default_instance_ = NULL;

DB_NewFunc* DB_NewFunc::New(::google::protobuf::Arena* arena) const {
  DB_NewFunc* n = new DB_NewFunc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_NewFunc::Clear() {
  if (has_system_info()) {
    if (system_info_ != NULL) system_info_->::DB_BitCache::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_NewFunc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_NewFunc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DB_BitCache system_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_NewFunc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_NewFunc)
  return false;
#undef DO_
}

void DB_NewFunc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_NewFunc)
  // optional .DB_BitCache system_info = 1;
  if (has_system_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->system_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_NewFunc)
}

::google::protobuf::uint8* DB_NewFunc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_NewFunc)
  // optional .DB_BitCache system_info = 1;
  if (has_system_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->system_info_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_NewFunc)
  return target;
}

int DB_NewFunc::ByteSize() const {
  int total_size = 0;

  // optional .DB_BitCache system_info = 1;
  if (has_system_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->system_info_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_NewFunc::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_NewFunc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_NewFunc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_NewFunc::MergeFrom(const DB_NewFunc& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_system_info()) {
      mutable_system_info()->::DB_BitCache::MergeFrom(from.system_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_NewFunc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_NewFunc::CopyFrom(const DB_NewFunc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_NewFunc::IsInitialized() const {

  return true;
}

void DB_NewFunc::Swap(DB_NewFunc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_NewFunc::InternalSwap(DB_NewFunc* other) {
  std::swap(system_info_, other->system_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_NewFunc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_NewFunc_descriptor_;
  metadata.reflection = DB_NewFunc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_NewFunc

// optional .DB_BitCache system_info = 1;
 bool DB_NewFunc::has_system_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_NewFunc::set_has_system_info() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_NewFunc::clear_has_system_info() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_NewFunc::clear_system_info() {
  if (system_info_ != NULL) system_info_->::DB_BitCache::Clear();
  clear_has_system_info();
}
 const ::DB_BitCache& DB_NewFunc::system_info() const {
  // @@protoc_insertion_point(field_get:DB_NewFunc.system_info)
  return system_info_ != NULL ? *system_info_ : *default_instance_->system_info_;
}
 ::DB_BitCache* DB_NewFunc::mutable_system_info() {
  set_has_system_info();
  if (system_info_ == NULL) {
    system_info_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_NewFunc.system_info)
  return system_info_;
}
 ::DB_BitCache* DB_NewFunc::release_system_info() {
  clear_has_system_info();
  ::DB_BitCache* temp = system_info_;
  system_info_ = NULL;
  return temp;
}
 void DB_NewFunc::set_allocated_system_info(::DB_BitCache* system_info) {
  delete system_info_;
  system_info_ = system_info;
  if (system_info) {
    set_has_system_info();
  } else {
    clear_has_system_info();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_NewFunc.system_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_CDKey::kCdKeyFieldNumber;
const int DB_CDKey::kUsedFlagFieldNumber;
const int DB_CDKey::kActiveIdFieldNumber;
#endif  // !_MSC_VER

DB_CDKey::DB_CDKey()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_CDKey)
}

void DB_CDKey::InitAsDefaultInstance() {
}

DB_CDKey::DB_CDKey(const DB_CDKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_CDKey)
}

void DB_CDKey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cd_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  used_flag_ = 0;
  active_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_CDKey::~DB_CDKey() {
  // @@protoc_insertion_point(destructor:DB_CDKey)
  SharedDtor();
}

void DB_CDKey::SharedDtor() {
  cd_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DB_CDKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_CDKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_CDKey_descriptor_;
}

const DB_CDKey& DB_CDKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_CDKey* DB_CDKey::default_instance_ = NULL;

DB_CDKey* DB_CDKey::New(::google::protobuf::Arena* arena) const {
  DB_CDKey* n = new DB_CDKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_CDKey::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_CDKey*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(used_flag_, active_id_);
    if (has_cd_key()) {
      cd_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_CDKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_CDKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cd_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cd_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cd_key().data(), this->cd_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_CDKey.cd_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_used_flag;
        break;
      }

      // optional int32 used_flag = 2;
      case 2: {
        if (tag == 16) {
         parse_used_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_flag_)));
          set_has_used_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_active_id;
        break;
      }

      // optional int32 active_id = 3;
      case 3: {
        if (tag == 24) {
         parse_active_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_id_)));
          set_has_active_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_CDKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_CDKey)
  return false;
#undef DO_
}

void DB_CDKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_CDKey)
  // optional string cd_key = 1;
  if (has_cd_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cd_key().data(), this->cd_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_CDKey.cd_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cd_key(), output);
  }

  // optional int32 used_flag = 2;
  if (has_used_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->used_flag(), output);
  }

  // optional int32 active_id = 3;
  if (has_active_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->active_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_CDKey)
}

::google::protobuf::uint8* DB_CDKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_CDKey)
  // optional string cd_key = 1;
  if (has_cd_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cd_key().data(), this->cd_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_CDKey.cd_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cd_key(), target);
  }

  // optional int32 used_flag = 2;
  if (has_used_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->used_flag(), target);
  }

  // optional int32 active_id = 3;
  if (has_active_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->active_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_CDKey)
  return target;
}

int DB_CDKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional string cd_key = 1;
    if (has_cd_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cd_key());
    }

    // optional int32 used_flag = 2;
    if (has_used_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_flag());
    }

    // optional int32 active_id = 3;
    if (has_active_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_CDKey::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_CDKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_CDKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_CDKey::MergeFrom(const DB_CDKey& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cd_key()) {
      set_has_cd_key();
      cd_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cd_key_);
    }
    if (from.has_used_flag()) {
      set_used_flag(from.used_flag());
    }
    if (from.has_active_id()) {
      set_active_id(from.active_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_CDKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CDKey::CopyFrom(const DB_CDKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CDKey::IsInitialized() const {

  return true;
}

void DB_CDKey::Swap(DB_CDKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_CDKey::InternalSwap(DB_CDKey* other) {
  cd_key_.Swap(&other->cd_key_);
  std::swap(used_flag_, other->used_flag_);
  std::swap(active_id_, other->active_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_CDKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_CDKey_descriptor_;
  metadata.reflection = DB_CDKey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_CDKey

// optional string cd_key = 1;
 bool DB_CDKey::has_cd_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_CDKey::set_has_cd_key() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_CDKey::clear_has_cd_key() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_CDKey::clear_cd_key() {
  cd_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cd_key();
}
 const ::std::string& DB_CDKey::cd_key() const {
  // @@protoc_insertion_point(field_get:DB_CDKey.cd_key)
  return cd_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_CDKey::set_cd_key(const ::std::string& value) {
  set_has_cd_key();
  cd_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_CDKey.cd_key)
}
 void DB_CDKey::set_cd_key(const char* value) {
  set_has_cd_key();
  cd_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_CDKey.cd_key)
}
 void DB_CDKey::set_cd_key(const char* value, size_t size) {
  set_has_cd_key();
  cd_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_CDKey.cd_key)
}
 ::std::string* DB_CDKey::mutable_cd_key() {
  set_has_cd_key();
  // @@protoc_insertion_point(field_mutable:DB_CDKey.cd_key)
  return cd_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_CDKey::release_cd_key() {
  clear_has_cd_key();
  return cd_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_CDKey::set_allocated_cd_key(::std::string* cd_key) {
  if (cd_key != NULL) {
    set_has_cd_key();
  } else {
    clear_has_cd_key();
  }
  cd_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cd_key);
  // @@protoc_insertion_point(field_set_allocated:DB_CDKey.cd_key)
}

// optional int32 used_flag = 2;
 bool DB_CDKey::has_used_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_CDKey::set_has_used_flag() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_CDKey::clear_has_used_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_CDKey::clear_used_flag() {
  used_flag_ = 0;
  clear_has_used_flag();
}
 ::google::protobuf::int32 DB_CDKey::used_flag() const {
  // @@protoc_insertion_point(field_get:DB_CDKey.used_flag)
  return used_flag_;
}
 void DB_CDKey::set_used_flag(::google::protobuf::int32 value) {
  set_has_used_flag();
  used_flag_ = value;
  // @@protoc_insertion_point(field_set:DB_CDKey.used_flag)
}

// optional int32 active_id = 3;
 bool DB_CDKey::has_active_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_CDKey::set_has_active_id() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_CDKey::clear_has_active_id() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_CDKey::clear_active_id() {
  active_id_ = 0;
  clear_has_active_id();
}
 ::google::protobuf::int32 DB_CDKey::active_id() const {
  // @@protoc_insertion_point(field_get:DB_CDKey.active_id)
  return active_id_;
}
 void DB_CDKey::set_active_id(::google::protobuf::int32 value) {
  set_has_active_id();
  active_id_ = value;
  // @@protoc_insertion_point(field_set:DB_CDKey.active_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_Weibo::kListenedFieldNumber;
const int DB_Weibo::kListenedGiftFieldNumber;
const int DB_Weibo::kForwardedFieldNumber;
const int DB_Weibo::kForwardedGiftFieldNumber;
const int DB_Weibo::kQzoneFollowedFieldNumber;
const int DB_Weibo::kQzoneDayFieldNumber;
#endif  // !_MSC_VER

DB_Weibo::DB_Weibo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_Weibo)
}

void DB_Weibo::InitAsDefaultInstance() {
}

DB_Weibo::DB_Weibo(const DB_Weibo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_Weibo)
}

void DB_Weibo::SharedCtor() {
  _cached_size_ = 0;
  listened_ = false;
  listened_gift_ = false;
  forwarded_ = false;
  forwarded_gift_ = false;
  qzone_followed_ = false;
  qzone_day_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Weibo::~DB_Weibo() {
  // @@protoc_insertion_point(destructor:DB_Weibo)
  SharedDtor();
}

void DB_Weibo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_Weibo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Weibo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Weibo_descriptor_;
}

const DB_Weibo& DB_Weibo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_Weibo* DB_Weibo::default_instance_ = NULL;

DB_Weibo* DB_Weibo::New(::google::protobuf::Arena* arena) const {
  DB_Weibo* n = new DB_Weibo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_Weibo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_Weibo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(listened_, qzone_day_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_Weibo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_Weibo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool listened = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &listened_)));
          set_has_listened();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_listened_gift;
        break;
      }

      // optional bool listened_gift = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_listened_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &listened_gift_)));
          set_has_listened_gift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_forwarded;
        break;
      }

      // optional bool forwarded = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_forwarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forwarded_)));
          set_has_forwarded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_forwarded_gift;
        break;
      }

      // optional bool forwarded_gift = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_forwarded_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forwarded_gift_)));
          set_has_forwarded_gift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_qzone_followed;
        break;
      }

      // optional bool qzone_followed = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_qzone_followed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &qzone_followed_)));
          set_has_qzone_followed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_qzone_day;
        break;
      }

      // optional int64 qzone_day = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_qzone_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &qzone_day_)));
          set_has_qzone_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_Weibo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_Weibo)
  return false;
#undef DO_
}

void DB_Weibo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_Weibo)
  // optional bool listened = 1 [default = false];
  if (has_listened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->listened(), output);
  }

  // optional bool listened_gift = 2 [default = false];
  if (has_listened_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->listened_gift(), output);
  }

  // optional bool forwarded = 3 [default = false];
  if (has_forwarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->forwarded(), output);
  }

  // optional bool forwarded_gift = 4 [default = false];
  if (has_forwarded_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->forwarded_gift(), output);
  }

  // optional bool qzone_followed = 5 [default = false];
  if (has_qzone_followed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->qzone_followed(), output);
  }

  // optional int64 qzone_day = 6 [default = 0];
  if (has_qzone_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->qzone_day(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_Weibo)
}

::google::protobuf::uint8* DB_Weibo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_Weibo)
  // optional bool listened = 1 [default = false];
  if (has_listened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->listened(), target);
  }

  // optional bool listened_gift = 2 [default = false];
  if (has_listened_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->listened_gift(), target);
  }

  // optional bool forwarded = 3 [default = false];
  if (has_forwarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->forwarded(), target);
  }

  // optional bool forwarded_gift = 4 [default = false];
  if (has_forwarded_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->forwarded_gift(), target);
  }

  // optional bool qzone_followed = 5 [default = false];
  if (has_qzone_followed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->qzone_followed(), target);
  }

  // optional int64 qzone_day = 6 [default = 0];
  if (has_qzone_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->qzone_day(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_Weibo)
  return target;
}

int DB_Weibo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63) {
    // optional bool listened = 1 [default = false];
    if (has_listened()) {
      total_size += 1 + 1;
    }

    // optional bool listened_gift = 2 [default = false];
    if (has_listened_gift()) {
      total_size += 1 + 1;
    }

    // optional bool forwarded = 3 [default = false];
    if (has_forwarded()) {
      total_size += 1 + 1;
    }

    // optional bool forwarded_gift = 4 [default = false];
    if (has_forwarded_gift()) {
      total_size += 1 + 1;
    }

    // optional bool qzone_followed = 5 [default = false];
    if (has_qzone_followed()) {
      total_size += 1 + 1;
    }

    // optional int64 qzone_day = 6 [default = 0];
    if (has_qzone_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->qzone_day());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Weibo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_Weibo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Weibo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Weibo::MergeFrom(const DB_Weibo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listened()) {
      set_listened(from.listened());
    }
    if (from.has_listened_gift()) {
      set_listened_gift(from.listened_gift());
    }
    if (from.has_forwarded()) {
      set_forwarded(from.forwarded());
    }
    if (from.has_forwarded_gift()) {
      set_forwarded_gift(from.forwarded_gift());
    }
    if (from.has_qzone_followed()) {
      set_qzone_followed(from.qzone_followed());
    }
    if (from.has_qzone_day()) {
      set_qzone_day(from.qzone_day());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_Weibo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Weibo::CopyFrom(const DB_Weibo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Weibo::IsInitialized() const {

  return true;
}

void DB_Weibo::Swap(DB_Weibo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_Weibo::InternalSwap(DB_Weibo* other) {
  std::swap(listened_, other->listened_);
  std::swap(listened_gift_, other->listened_gift_);
  std::swap(forwarded_, other->forwarded_);
  std::swap(forwarded_gift_, other->forwarded_gift_);
  std::swap(qzone_followed_, other->qzone_followed_);
  std::swap(qzone_day_, other->qzone_day_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_Weibo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Weibo_descriptor_;
  metadata.reflection = DB_Weibo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_Weibo

// optional bool listened = 1 [default = false];
 bool DB_Weibo::has_listened() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_Weibo::set_has_listened() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_Weibo::clear_has_listened() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_Weibo::clear_listened() {
  listened_ = false;
  clear_has_listened();
}
 bool DB_Weibo::listened() const {
  // @@protoc_insertion_point(field_get:DB_Weibo.listened)
  return listened_;
}
 void DB_Weibo::set_listened(bool value) {
  set_has_listened();
  listened_ = value;
  // @@protoc_insertion_point(field_set:DB_Weibo.listened)
}

// optional bool listened_gift = 2 [default = false];
 bool DB_Weibo::has_listened_gift() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_Weibo::set_has_listened_gift() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_Weibo::clear_has_listened_gift() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_Weibo::clear_listened_gift() {
  listened_gift_ = false;
  clear_has_listened_gift();
}
 bool DB_Weibo::listened_gift() const {
  // @@protoc_insertion_point(field_get:DB_Weibo.listened_gift)
  return listened_gift_;
}
 void DB_Weibo::set_listened_gift(bool value) {
  set_has_listened_gift();
  listened_gift_ = value;
  // @@protoc_insertion_point(field_set:DB_Weibo.listened_gift)
}

// optional bool forwarded = 3 [default = false];
 bool DB_Weibo::has_forwarded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_Weibo::set_has_forwarded() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_Weibo::clear_has_forwarded() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_Weibo::clear_forwarded() {
  forwarded_ = false;
  clear_has_forwarded();
}
 bool DB_Weibo::forwarded() const {
  // @@protoc_insertion_point(field_get:DB_Weibo.forwarded)
  return forwarded_;
}
 void DB_Weibo::set_forwarded(bool value) {
  set_has_forwarded();
  forwarded_ = value;
  // @@protoc_insertion_point(field_set:DB_Weibo.forwarded)
}

// optional bool forwarded_gift = 4 [default = false];
 bool DB_Weibo::has_forwarded_gift() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_Weibo::set_has_forwarded_gift() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_Weibo::clear_has_forwarded_gift() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_Weibo::clear_forwarded_gift() {
  forwarded_gift_ = false;
  clear_has_forwarded_gift();
}
 bool DB_Weibo::forwarded_gift() const {
  // @@protoc_insertion_point(field_get:DB_Weibo.forwarded_gift)
  return forwarded_gift_;
}
 void DB_Weibo::set_forwarded_gift(bool value) {
  set_has_forwarded_gift();
  forwarded_gift_ = value;
  // @@protoc_insertion_point(field_set:DB_Weibo.forwarded_gift)
}

// optional bool qzone_followed = 5 [default = false];
 bool DB_Weibo::has_qzone_followed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_Weibo::set_has_qzone_followed() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_Weibo::clear_has_qzone_followed() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_Weibo::clear_qzone_followed() {
  qzone_followed_ = false;
  clear_has_qzone_followed();
}
 bool DB_Weibo::qzone_followed() const {
  // @@protoc_insertion_point(field_get:DB_Weibo.qzone_followed)
  return qzone_followed_;
}
 void DB_Weibo::set_qzone_followed(bool value) {
  set_has_qzone_followed();
  qzone_followed_ = value;
  // @@protoc_insertion_point(field_set:DB_Weibo.qzone_followed)
}

// optional int64 qzone_day = 6 [default = 0];
 bool DB_Weibo::has_qzone_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_Weibo::set_has_qzone_day() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_Weibo::clear_has_qzone_day() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_Weibo::clear_qzone_day() {
  qzone_day_ = GOOGLE_LONGLONG(0);
  clear_has_qzone_day();
}
 ::google::protobuf::int64 DB_Weibo::qzone_day() const {
  // @@protoc_insertion_point(field_get:DB_Weibo.qzone_day)
  return qzone_day_;
}
 void DB_Weibo::set_qzone_day(::google::protobuf::int64 value) {
  set_has_qzone_day();
  qzone_day_ = value;
  // @@protoc_insertion_point(field_set:DB_Weibo.qzone_day)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_CallBackCell::kTimerFieldNumber;
const int DB_CallBackCell::kOpenidListFieldNumber;
const int DB_CallBackCell::kNameListFieldNumber;
const int DB_CallBackCell::kUrlListFieldNumber;
const int DB_CallBackCell::kRewardedFieldNumber;
const int DB_CallBackCell::kTotallevelFieldNumber;
#endif  // !_MSC_VER

DB_CallBackCell::DB_CallBackCell()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_CallBackCell)
}

void DB_CallBackCell::InitAsDefaultInstance() {
}

DB_CallBackCell::DB_CallBackCell(const DB_CallBackCell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_CallBackCell)
}

void DB_CallBackCell::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timer_ = GOOGLE_LONGLONG(0);
  rewarded_ = false;
  totallevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_CallBackCell::~DB_CallBackCell() {
  // @@protoc_insertion_point(destructor:DB_CallBackCell)
  SharedDtor();
}

void DB_CallBackCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_CallBackCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_CallBackCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_CallBackCell_descriptor_;
}

const DB_CallBackCell& DB_CallBackCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_CallBackCell* DB_CallBackCell::default_instance_ = NULL;

DB_CallBackCell* DB_CallBackCell::New(::google::protobuf::Arena* arena) const {
  DB_CallBackCell* n = new DB_CallBackCell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_CallBackCell::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_CallBackCell*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 49) {
    ZR_(rewarded_, totallevel_);
    timer_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  openid_list_.Clear();
  name_list_.Clear();
  url_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_CallBackCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_CallBackCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timer = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rewarded;
        break;
      }

      // optional bool rewarded = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_rewarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rewarded_)));
          set_has_rewarded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totallevel;
        break;
      }

      // optional int32 totallevel = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_totallevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totallevel_)));
          set_has_totallevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_openid_list;
        break;
      }

      // repeated string openid_list = 4;
      case 4: {
        if (tag == 34) {
         parse_openid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_openid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid_list(this->openid_list_size() - 1).data(),
            this->openid_list(this->openid_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_CallBackCell.openid_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_openid_list;
        if (input->ExpectTag(42)) goto parse_name_list;
        break;
      }

      // repeated string name_list = 5;
      case 5: {
        if (tag == 42) {
         parse_name_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_list(this->name_list_size() - 1).data(),
            this->name_list(this->name_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_CallBackCell.name_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name_list;
        if (input->ExpectTag(50)) goto parse_url_list;
        break;
      }

      // repeated string url_list = 6;
      case 6: {
        if (tag == 50) {
         parse_url_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_url_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_list(this->url_list_size() - 1).data(),
            this->url_list(this->url_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_CallBackCell.url_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_url_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_CallBackCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_CallBackCell)
  return false;
#undef DO_
}

void DB_CallBackCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_CallBackCell)
  // optional int64 timer = 1 [default = 0];
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timer(), output);
  }

  // optional bool rewarded = 2 [default = false];
  if (has_rewarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rewarded(), output);
  }

  // optional int32 totallevel = 3 [default = 0];
  if (has_totallevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totallevel(), output);
  }

  // repeated string openid_list = 4;
  for (int i = 0; i < this->openid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->openid_list(i).data(), this->openid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "DB_CallBackCell.openid_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->openid_list(i), output);
  }

  // repeated string name_list = 5;
  for (int i = 0; i < this->name_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->name_list(i).data(), this->name_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "DB_CallBackCell.name_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name_list(i), output);
  }

  // repeated string url_list = 6;
  for (int i = 0; i < this->url_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->url_list(i).data(), this->url_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "DB_CallBackCell.url_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->url_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_CallBackCell)
}

::google::protobuf::uint8* DB_CallBackCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_CallBackCell)
  // optional int64 timer = 1 [default = 0];
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timer(), target);
  }

  // optional bool rewarded = 2 [default = false];
  if (has_rewarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rewarded(), target);
  }

  // optional int32 totallevel = 3 [default = 0];
  if (has_totallevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totallevel(), target);
  }

  // repeated string openid_list = 4;
  for (int i = 0; i < this->openid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_list(i).data(), this->openid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_CallBackCell.openid_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->openid_list(i), target);
  }

  // repeated string name_list = 5;
  for (int i = 0; i < this->name_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_list(i).data(), this->name_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_CallBackCell.name_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->name_list(i), target);
  }

  // repeated string url_list = 6;
  for (int i = 0; i < this->url_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_list(i).data(), this->url_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_CallBackCell.url_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->url_list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_CallBackCell)
  return target;
}

int DB_CallBackCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 49) {
    // optional int64 timer = 1 [default = 0];
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timer());
    }

    // optional bool rewarded = 2 [default = false];
    if (has_rewarded()) {
      total_size += 1 + 1;
    }

    // optional int32 totallevel = 3 [default = 0];
    if (has_totallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totallevel());
    }

  }
  // repeated string openid_list = 4;
  total_size += 1 * this->openid_list_size();
  for (int i = 0; i < this->openid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->openid_list(i));
  }

  // repeated string name_list = 5;
  total_size += 1 * this->name_list_size();
  for (int i = 0; i < this->name_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name_list(i));
  }

  // repeated string url_list = 6;
  total_size += 1 * this->url_list_size();
  for (int i = 0; i < this->url_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->url_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_CallBackCell::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_CallBackCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_CallBackCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_CallBackCell::MergeFrom(const DB_CallBackCell& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  openid_list_.MergeFrom(from.openid_list_);
  name_list_.MergeFrom(from.name_list_);
  url_list_.MergeFrom(from.url_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timer()) {
      set_timer(from.timer());
    }
    if (from.has_rewarded()) {
      set_rewarded(from.rewarded());
    }
    if (from.has_totallevel()) {
      set_totallevel(from.totallevel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_CallBackCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CallBackCell::CopyFrom(const DB_CallBackCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CallBackCell::IsInitialized() const {

  return true;
}

void DB_CallBackCell::Swap(DB_CallBackCell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_CallBackCell::InternalSwap(DB_CallBackCell* other) {
  std::swap(timer_, other->timer_);
  openid_list_.UnsafeArenaSwap(&other->openid_list_);
  name_list_.UnsafeArenaSwap(&other->name_list_);
  url_list_.UnsafeArenaSwap(&other->url_list_);
  std::swap(rewarded_, other->rewarded_);
  std::swap(totallevel_, other->totallevel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_CallBackCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_CallBackCell_descriptor_;
  metadata.reflection = DB_CallBackCell_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_CallBackCell

// optional int64 timer = 1 [default = 0];
 bool DB_CallBackCell::has_timer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_CallBackCell::set_has_timer() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_CallBackCell::clear_has_timer() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_CallBackCell::clear_timer() {
  timer_ = GOOGLE_LONGLONG(0);
  clear_has_timer();
}
 ::google::protobuf::int64 DB_CallBackCell::timer() const {
  // @@protoc_insertion_point(field_get:DB_CallBackCell.timer)
  return timer_;
}
 void DB_CallBackCell::set_timer(::google::protobuf::int64 value) {
  set_has_timer();
  timer_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBackCell.timer)
}

// repeated string openid_list = 4;
 int DB_CallBackCell::openid_list_size() const {
  return openid_list_.size();
}
 void DB_CallBackCell::clear_openid_list() {
  openid_list_.Clear();
}
 const ::std::string& DB_CallBackCell::openid_list(int index) const {
  // @@protoc_insertion_point(field_get:DB_CallBackCell.openid_list)
  return openid_list_.Get(index);
}
 ::std::string* DB_CallBackCell::mutable_openid_list(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CallBackCell.openid_list)
  return openid_list_.Mutable(index);
}
 void DB_CallBackCell::set_openid_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_CallBackCell.openid_list)
  openid_list_.Mutable(index)->assign(value);
}
 void DB_CallBackCell::set_openid_list(int index, const char* value) {
  openid_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_CallBackCell.openid_list)
}
 void DB_CallBackCell::set_openid_list(int index, const char* value, size_t size) {
  openid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_CallBackCell.openid_list)
}
 ::std::string* DB_CallBackCell::add_openid_list() {
  return openid_list_.Add();
}
 void DB_CallBackCell::add_openid_list(const ::std::string& value) {
  openid_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_CallBackCell.openid_list)
}
 void DB_CallBackCell::add_openid_list(const char* value) {
  openid_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_CallBackCell.openid_list)
}
 void DB_CallBackCell::add_openid_list(const char* value, size_t size) {
  openid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_CallBackCell.openid_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_CallBackCell::openid_list() const {
  // @@protoc_insertion_point(field_list:DB_CallBackCell.openid_list)
  return openid_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_CallBackCell::mutable_openid_list() {
  // @@protoc_insertion_point(field_mutable_list:DB_CallBackCell.openid_list)
  return &openid_list_;
}

// repeated string name_list = 5;
 int DB_CallBackCell::name_list_size() const {
  return name_list_.size();
}
 void DB_CallBackCell::clear_name_list() {
  name_list_.Clear();
}
 const ::std::string& DB_CallBackCell::name_list(int index) const {
  // @@protoc_insertion_point(field_get:DB_CallBackCell.name_list)
  return name_list_.Get(index);
}
 ::std::string* DB_CallBackCell::mutable_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CallBackCell.name_list)
  return name_list_.Mutable(index);
}
 void DB_CallBackCell::set_name_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_CallBackCell.name_list)
  name_list_.Mutable(index)->assign(value);
}
 void DB_CallBackCell::set_name_list(int index, const char* value) {
  name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_CallBackCell.name_list)
}
 void DB_CallBackCell::set_name_list(int index, const char* value, size_t size) {
  name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_CallBackCell.name_list)
}
 ::std::string* DB_CallBackCell::add_name_list() {
  return name_list_.Add();
}
 void DB_CallBackCell::add_name_list(const ::std::string& value) {
  name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_CallBackCell.name_list)
}
 void DB_CallBackCell::add_name_list(const char* value) {
  name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_CallBackCell.name_list)
}
 void DB_CallBackCell::add_name_list(const char* value, size_t size) {
  name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_CallBackCell.name_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_CallBackCell::name_list() const {
  // @@protoc_insertion_point(field_list:DB_CallBackCell.name_list)
  return name_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_CallBackCell::mutable_name_list() {
  // @@protoc_insertion_point(field_mutable_list:DB_CallBackCell.name_list)
  return &name_list_;
}

// repeated string url_list = 6;
 int DB_CallBackCell::url_list_size() const {
  return url_list_.size();
}
 void DB_CallBackCell::clear_url_list() {
  url_list_.Clear();
}
 const ::std::string& DB_CallBackCell::url_list(int index) const {
  // @@protoc_insertion_point(field_get:DB_CallBackCell.url_list)
  return url_list_.Get(index);
}
 ::std::string* DB_CallBackCell::mutable_url_list(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CallBackCell.url_list)
  return url_list_.Mutable(index);
}
 void DB_CallBackCell::set_url_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_CallBackCell.url_list)
  url_list_.Mutable(index)->assign(value);
}
 void DB_CallBackCell::set_url_list(int index, const char* value) {
  url_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_CallBackCell.url_list)
}
 void DB_CallBackCell::set_url_list(int index, const char* value, size_t size) {
  url_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_CallBackCell.url_list)
}
 ::std::string* DB_CallBackCell::add_url_list() {
  return url_list_.Add();
}
 void DB_CallBackCell::add_url_list(const ::std::string& value) {
  url_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_CallBackCell.url_list)
}
 void DB_CallBackCell::add_url_list(const char* value) {
  url_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_CallBackCell.url_list)
}
 void DB_CallBackCell::add_url_list(const char* value, size_t size) {
  url_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_CallBackCell.url_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_CallBackCell::url_list() const {
  // @@protoc_insertion_point(field_list:DB_CallBackCell.url_list)
  return url_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_CallBackCell::mutable_url_list() {
  // @@protoc_insertion_point(field_mutable_list:DB_CallBackCell.url_list)
  return &url_list_;
}

// optional bool rewarded = 2 [default = false];
 bool DB_CallBackCell::has_rewarded() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_CallBackCell::set_has_rewarded() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_CallBackCell::clear_has_rewarded() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_CallBackCell::clear_rewarded() {
  rewarded_ = false;
  clear_has_rewarded();
}
 bool DB_CallBackCell::rewarded() const {
  // @@protoc_insertion_point(field_get:DB_CallBackCell.rewarded)
  return rewarded_;
}
 void DB_CallBackCell::set_rewarded(bool value) {
  set_has_rewarded();
  rewarded_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBackCell.rewarded)
}

// optional int32 totallevel = 3 [default = 0];
 bool DB_CallBackCell::has_totallevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_CallBackCell::set_has_totallevel() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_CallBackCell::clear_has_totallevel() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_CallBackCell::clear_totallevel() {
  totallevel_ = 0;
  clear_has_totallevel();
}
 ::google::protobuf::int32 DB_CallBackCell::totallevel() const {
  // @@protoc_insertion_point(field_get:DB_CallBackCell.totallevel)
  return totallevel_;
}
 void DB_CallBackCell::set_totallevel(::google::protobuf::int32 value) {
  set_has_totallevel();
  totallevel_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBackCell.totallevel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_CallBack::kVersionFieldNumber;
const int DB_CallBack::kCbcellFieldNumber;
const int DB_CallBack::kCellUpdateDayFieldNumber;
const int DB_CallBack::kCallbackSenderFieldNumber;
const int DB_CallBack::kRewardCntAsTakerFieldNumber;
const int DB_CallBack::kCacheListFieldNumber;
const int DB_CallBack::kSendListFieldNumber;
const int DB_CallBack::kCellBuildDayFieldNumber;
#endif  // !_MSC_VER

DB_CallBack::DB_CallBack()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_CallBack)
}

void DB_CallBack::InitAsDefaultInstance() {
}

DB_CallBack::DB_CallBack(const DB_CallBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_CallBack)
}

void DB_CallBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  cell_update_day_ = 0;
  callback_sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_cnt_as_taker_ = 0;
  cell_build_day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_CallBack::~DB_CallBack() {
  // @@protoc_insertion_point(destructor:DB_CallBack)
  SharedDtor();
}

void DB_CallBack::SharedDtor() {
  callback_sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DB_CallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_CallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_CallBack_descriptor_;
}

const DB_CallBack& DB_CallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_CallBack* DB_CallBack::default_instance_ = NULL;

DB_CallBack* DB_CallBack::New(::google::protobuf::Arena* arena) const {
  DB_CallBack* n = new DB_CallBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_CallBack::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_CallBack*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 157) {
    ZR_(version_, cell_update_day_);
    ZR_(reward_cnt_as_taker_, cell_build_day_);
    if (has_callback_sender()) {
      callback_sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  cbcell_.Clear();
  cache_list_.Clear();
  send_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_CallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_CallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cbcell;
        break;
      }

      // repeated .DB_CallBackCell cbcell = 2;
      case 2: {
        if (tag == 18) {
         parse_cbcell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbcell()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cbcell;
        if (input->ExpectTag(24)) goto parse_cell_update_day;
        break;
      }

      // optional int32 cell_update_day = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_cell_update_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_update_day_)));
          set_has_cell_update_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_callback_sender;
        break;
      }

      // optional string callback_sender = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_callback_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callback_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callback_sender().data(), this->callback_sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_CallBack.callback_sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_cnt_as_taker;
        break;
      }

      // optional int32 reward_cnt_as_taker = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_reward_cnt_as_taker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_cnt_as_taker_)));
          set_has_reward_cnt_as_taker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cache_list;
        break;
      }

      // repeated string cache_list = 7;
      case 7: {
        if (tag == 58) {
         parse_cache_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cache_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cache_list(this->cache_list_size() - 1).data(),
            this->cache_list(this->cache_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_CallBack.cache_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cache_list;
        if (input->ExpectTag(66)) goto parse_send_list;
        break;
      }

      // repeated string send_list = 8;
      case 8: {
        if (tag == 66) {
         parse_send_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_send_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->send_list(this->send_list_size() - 1).data(),
            this->send_list(this->send_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_CallBack.send_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_send_list;
        if (input->ExpectTag(72)) goto parse_cell_build_day;
        break;
      }

      // optional int32 cell_build_day = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_cell_build_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_build_day_)));
          set_has_cell_build_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_CallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_CallBack)
  return false;
#undef DO_
}

void DB_CallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_CallBack)
  // optional int32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated .DB_CallBackCell cbcell = 2;
  for (unsigned int i = 0, n = this->cbcell_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cbcell(i), output);
  }

  // optional int32 cell_update_day = 3 [default = 0];
  if (has_cell_update_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cell_update_day(), output);
  }

  // optional string callback_sender = 4 [default = ""];
  if (has_callback_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callback_sender().data(), this->callback_sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_CallBack.callback_sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->callback_sender(), output);
  }

  // optional int32 reward_cnt_as_taker = 5 [default = 0];
  if (has_reward_cnt_as_taker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_cnt_as_taker(), output);
  }

  // repeated string cache_list = 7;
  for (int i = 0; i < this->cache_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cache_list(i).data(), this->cache_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "DB_CallBack.cache_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cache_list(i), output);
  }

  // repeated string send_list = 8;
  for (int i = 0; i < this->send_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->send_list(i).data(), this->send_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "DB_CallBack.send_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->send_list(i), output);
  }

  // optional int32 cell_build_day = 9 [default = 0];
  if (has_cell_build_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cell_build_day(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_CallBack)
}

::google::protobuf::uint8* DB_CallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_CallBack)
  // optional int32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // repeated .DB_CallBackCell cbcell = 2;
  for (unsigned int i = 0, n = this->cbcell_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cbcell(i), target);
  }

  // optional int32 cell_update_day = 3 [default = 0];
  if (has_cell_update_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cell_update_day(), target);
  }

  // optional string callback_sender = 4 [default = ""];
  if (has_callback_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callback_sender().data(), this->callback_sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_CallBack.callback_sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->callback_sender(), target);
  }

  // optional int32 reward_cnt_as_taker = 5 [default = 0];
  if (has_reward_cnt_as_taker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_cnt_as_taker(), target);
  }

  // repeated string cache_list = 7;
  for (int i = 0; i < this->cache_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_list(i).data(), this->cache_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_CallBack.cache_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->cache_list(i), target);
  }

  // repeated string send_list = 8;
  for (int i = 0; i < this->send_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->send_list(i).data(), this->send_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_CallBack.send_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->send_list(i), target);
  }

  // optional int32 cell_build_day = 9 [default = 0];
  if (has_cell_build_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cell_build_day(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_CallBack)
  return target;
}

int DB_CallBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 157) {
    // optional int32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 cell_update_day = 3 [default = 0];
    if (has_cell_update_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cell_update_day());
    }

    // optional string callback_sender = 4 [default = ""];
    if (has_callback_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callback_sender());
    }

    // optional int32 reward_cnt_as_taker = 5 [default = 0];
    if (has_reward_cnt_as_taker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_cnt_as_taker());
    }

    // optional int32 cell_build_day = 9 [default = 0];
    if (has_cell_build_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cell_build_day());
    }

  }
  // repeated .DB_CallBackCell cbcell = 2;
  total_size += 1 * this->cbcell_size();
  for (int i = 0; i < this->cbcell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbcell(i));
  }

  // repeated string cache_list = 7;
  total_size += 1 * this->cache_list_size();
  for (int i = 0; i < this->cache_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cache_list(i));
  }

  // repeated string send_list = 8;
  total_size += 1 * this->send_list_size();
  for (int i = 0; i < this->send_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->send_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_CallBack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_CallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_CallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_CallBack::MergeFrom(const DB_CallBack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cbcell_.MergeFrom(from.cbcell_);
  cache_list_.MergeFrom(from.cache_list_);
  send_list_.MergeFrom(from.send_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_cell_update_day()) {
      set_cell_update_day(from.cell_update_day());
    }
    if (from.has_callback_sender()) {
      set_has_callback_sender();
      callback_sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callback_sender_);
    }
    if (from.has_reward_cnt_as_taker()) {
      set_reward_cnt_as_taker(from.reward_cnt_as_taker());
    }
    if (from.has_cell_build_day()) {
      set_cell_build_day(from.cell_build_day());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_CallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CallBack::CopyFrom(const DB_CallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CallBack::IsInitialized() const {

  return true;
}

void DB_CallBack::Swap(DB_CallBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_CallBack::InternalSwap(DB_CallBack* other) {
  std::swap(version_, other->version_);
  cbcell_.UnsafeArenaSwap(&other->cbcell_);
  std::swap(cell_update_day_, other->cell_update_day_);
  callback_sender_.Swap(&other->callback_sender_);
  std::swap(reward_cnt_as_taker_, other->reward_cnt_as_taker_);
  cache_list_.UnsafeArenaSwap(&other->cache_list_);
  send_list_.UnsafeArenaSwap(&other->send_list_);
  std::swap(cell_build_day_, other->cell_build_day_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_CallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_CallBack_descriptor_;
  metadata.reflection = DB_CallBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_CallBack

// optional int32 version = 1 [default = 0];
 bool DB_CallBack::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_CallBack::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_CallBack::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_CallBack::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 DB_CallBack::version() const {
  // @@protoc_insertion_point(field_get:DB_CallBack.version)
  return version_;
}
 void DB_CallBack::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBack.version)
}

// repeated .DB_CallBackCell cbcell = 2;
 int DB_CallBack::cbcell_size() const {
  return cbcell_.size();
}
 void DB_CallBack::clear_cbcell() {
  cbcell_.Clear();
}
 const ::DB_CallBackCell& DB_CallBack::cbcell(int index) const {
  // @@protoc_insertion_point(field_get:DB_CallBack.cbcell)
  return cbcell_.Get(index);
}
 ::DB_CallBackCell* DB_CallBack::mutable_cbcell(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CallBack.cbcell)
  return cbcell_.Mutable(index);
}
 ::DB_CallBackCell* DB_CallBack::add_cbcell() {
  // @@protoc_insertion_point(field_add:DB_CallBack.cbcell)
  return cbcell_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_CallBackCell >&
DB_CallBack::cbcell() const {
  // @@protoc_insertion_point(field_list:DB_CallBack.cbcell)
  return cbcell_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_CallBackCell >*
DB_CallBack::mutable_cbcell() {
  // @@protoc_insertion_point(field_mutable_list:DB_CallBack.cbcell)
  return &cbcell_;
}

// optional int32 cell_update_day = 3 [default = 0];
 bool DB_CallBack::has_cell_update_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_CallBack::set_has_cell_update_day() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_CallBack::clear_has_cell_update_day() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_CallBack::clear_cell_update_day() {
  cell_update_day_ = 0;
  clear_has_cell_update_day();
}
 ::google::protobuf::int32 DB_CallBack::cell_update_day() const {
  // @@protoc_insertion_point(field_get:DB_CallBack.cell_update_day)
  return cell_update_day_;
}
 void DB_CallBack::set_cell_update_day(::google::protobuf::int32 value) {
  set_has_cell_update_day();
  cell_update_day_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBack.cell_update_day)
}

// optional string callback_sender = 4 [default = ""];
 bool DB_CallBack::has_callback_sender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_CallBack::set_has_callback_sender() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_CallBack::clear_has_callback_sender() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_CallBack::clear_callback_sender() {
  callback_sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callback_sender();
}
 const ::std::string& DB_CallBack::callback_sender() const {
  // @@protoc_insertion_point(field_get:DB_CallBack.callback_sender)
  return callback_sender_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_CallBack::set_callback_sender(const ::std::string& value) {
  set_has_callback_sender();
  callback_sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_CallBack.callback_sender)
}
 void DB_CallBack::set_callback_sender(const char* value) {
  set_has_callback_sender();
  callback_sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_CallBack.callback_sender)
}
 void DB_CallBack::set_callback_sender(const char* value, size_t size) {
  set_has_callback_sender();
  callback_sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_CallBack.callback_sender)
}
 ::std::string* DB_CallBack::mutable_callback_sender() {
  set_has_callback_sender();
  // @@protoc_insertion_point(field_mutable:DB_CallBack.callback_sender)
  return callback_sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_CallBack::release_callback_sender() {
  clear_has_callback_sender();
  return callback_sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_CallBack::set_allocated_callback_sender(::std::string* callback_sender) {
  if (callback_sender != NULL) {
    set_has_callback_sender();
  } else {
    clear_has_callback_sender();
  }
  callback_sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback_sender);
  // @@protoc_insertion_point(field_set_allocated:DB_CallBack.callback_sender)
}

// optional int32 reward_cnt_as_taker = 5 [default = 0];
 bool DB_CallBack::has_reward_cnt_as_taker() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_CallBack::set_has_reward_cnt_as_taker() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_CallBack::clear_has_reward_cnt_as_taker() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_CallBack::clear_reward_cnt_as_taker() {
  reward_cnt_as_taker_ = 0;
  clear_has_reward_cnt_as_taker();
}
 ::google::protobuf::int32 DB_CallBack::reward_cnt_as_taker() const {
  // @@protoc_insertion_point(field_get:DB_CallBack.reward_cnt_as_taker)
  return reward_cnt_as_taker_;
}
 void DB_CallBack::set_reward_cnt_as_taker(::google::protobuf::int32 value) {
  set_has_reward_cnt_as_taker();
  reward_cnt_as_taker_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBack.reward_cnt_as_taker)
}

// repeated string cache_list = 7;
 int DB_CallBack::cache_list_size() const {
  return cache_list_.size();
}
 void DB_CallBack::clear_cache_list() {
  cache_list_.Clear();
}
 const ::std::string& DB_CallBack::cache_list(int index) const {
  // @@protoc_insertion_point(field_get:DB_CallBack.cache_list)
  return cache_list_.Get(index);
}
 ::std::string* DB_CallBack::mutable_cache_list(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CallBack.cache_list)
  return cache_list_.Mutable(index);
}
 void DB_CallBack::set_cache_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_CallBack.cache_list)
  cache_list_.Mutable(index)->assign(value);
}
 void DB_CallBack::set_cache_list(int index, const char* value) {
  cache_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_CallBack.cache_list)
}
 void DB_CallBack::set_cache_list(int index, const char* value, size_t size) {
  cache_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_CallBack.cache_list)
}
 ::std::string* DB_CallBack::add_cache_list() {
  return cache_list_.Add();
}
 void DB_CallBack::add_cache_list(const ::std::string& value) {
  cache_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_CallBack.cache_list)
}
 void DB_CallBack::add_cache_list(const char* value) {
  cache_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_CallBack.cache_list)
}
 void DB_CallBack::add_cache_list(const char* value, size_t size) {
  cache_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_CallBack.cache_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_CallBack::cache_list() const {
  // @@protoc_insertion_point(field_list:DB_CallBack.cache_list)
  return cache_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_CallBack::mutable_cache_list() {
  // @@protoc_insertion_point(field_mutable_list:DB_CallBack.cache_list)
  return &cache_list_;
}

// repeated string send_list = 8;
 int DB_CallBack::send_list_size() const {
  return send_list_.size();
}
 void DB_CallBack::clear_send_list() {
  send_list_.Clear();
}
 const ::std::string& DB_CallBack::send_list(int index) const {
  // @@protoc_insertion_point(field_get:DB_CallBack.send_list)
  return send_list_.Get(index);
}
 ::std::string* DB_CallBack::mutable_send_list(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CallBack.send_list)
  return send_list_.Mutable(index);
}
 void DB_CallBack::set_send_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_CallBack.send_list)
  send_list_.Mutable(index)->assign(value);
}
 void DB_CallBack::set_send_list(int index, const char* value) {
  send_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_CallBack.send_list)
}
 void DB_CallBack::set_send_list(int index, const char* value, size_t size) {
  send_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_CallBack.send_list)
}
 ::std::string* DB_CallBack::add_send_list() {
  return send_list_.Add();
}
 void DB_CallBack::add_send_list(const ::std::string& value) {
  send_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_CallBack.send_list)
}
 void DB_CallBack::add_send_list(const char* value) {
  send_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_CallBack.send_list)
}
 void DB_CallBack::add_send_list(const char* value, size_t size) {
  send_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_CallBack.send_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_CallBack::send_list() const {
  // @@protoc_insertion_point(field_list:DB_CallBack.send_list)
  return send_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_CallBack::mutable_send_list() {
  // @@protoc_insertion_point(field_mutable_list:DB_CallBack.send_list)
  return &send_list_;
}

// optional int32 cell_build_day = 9 [default = 0];
 bool DB_CallBack::has_cell_build_day() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void DB_CallBack::set_has_cell_build_day() {
  _has_bits_[0] |= 0x00000080u;
}
 void DB_CallBack::clear_has_cell_build_day() {
  _has_bits_[0] &= ~0x00000080u;
}
 void DB_CallBack::clear_cell_build_day() {
  cell_build_day_ = 0;
  clear_has_cell_build_day();
}
 ::google::protobuf::int32 DB_CallBack::cell_build_day() const {
  // @@protoc_insertion_point(field_get:DB_CallBack.cell_build_day)
  return cell_build_day_;
}
 void DB_CallBack::set_cell_build_day(::google::protobuf::int32 value) {
  set_has_cell_build_day();
  cell_build_day_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBack.cell_build_day)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_FuncSwitch::kTimeDayFieldNumber;
const int DB_FuncSwitch::kTimeSecondFieldNumber;
const int DB_FuncSwitch::kDaytimesFieldNumber;
#endif  // !_MSC_VER

DB_FuncSwitch::DB_FuncSwitch()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_FuncSwitch)
}

void DB_FuncSwitch::InitAsDefaultInstance() {
}

DB_FuncSwitch::DB_FuncSwitch(const DB_FuncSwitch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_FuncSwitch)
}

void DB_FuncSwitch::SharedCtor() {
  _cached_size_ = 0;
  time_day_ = GOOGLE_LONGLONG(0);
  time_second_ = GOOGLE_LONGLONG(0);
  daytimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_FuncSwitch::~DB_FuncSwitch() {
  // @@protoc_insertion_point(destructor:DB_FuncSwitch)
  SharedDtor();
}

void DB_FuncSwitch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_FuncSwitch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_FuncSwitch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_FuncSwitch_descriptor_;
}

const DB_FuncSwitch& DB_FuncSwitch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_FuncSwitch* DB_FuncSwitch::default_instance_ = NULL;

DB_FuncSwitch* DB_FuncSwitch::New(::google::protobuf::Arena* arena) const {
  DB_FuncSwitch* n = new DB_FuncSwitch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_FuncSwitch::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_FuncSwitch*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_day_, daytimes_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_FuncSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_FuncSwitch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time_day = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_day_)));
          set_has_time_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_daytimes;
        break;
      }

      // optional int32 daytimes = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_daytimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daytimes_)));
          set_has_daytimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_second;
        break;
      }

      // optional int64 time_second = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_second_)));
          set_has_time_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_FuncSwitch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_FuncSwitch)
  return false;
#undef DO_
}

void DB_FuncSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_FuncSwitch)
  // optional int64 time_day = 1 [default = 0];
  if (has_time_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_day(), output);
  }

  // optional int32 daytimes = 2 [default = 0];
  if (has_daytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->daytimes(), output);
  }

  // optional int64 time_second = 3 [default = 0];
  if (has_time_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_second(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_FuncSwitch)
}

::google::protobuf::uint8* DB_FuncSwitch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_FuncSwitch)
  // optional int64 time_day = 1 [default = 0];
  if (has_time_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_day(), target);
  }

  // optional int32 daytimes = 2 [default = 0];
  if (has_daytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->daytimes(), target);
  }

  // optional int64 time_second = 3 [default = 0];
  if (has_time_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_second(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_FuncSwitch)
  return target;
}

int DB_FuncSwitch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int64 time_day = 1 [default = 0];
    if (has_time_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_day());
    }

    // optional int64 time_second = 3 [default = 0];
    if (has_time_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_second());
    }

    // optional int32 daytimes = 2 [default = 0];
    if (has_daytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daytimes());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_FuncSwitch::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_FuncSwitch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_FuncSwitch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_FuncSwitch::MergeFrom(const DB_FuncSwitch& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_day()) {
      set_time_day(from.time_day());
    }
    if (from.has_time_second()) {
      set_time_second(from.time_second());
    }
    if (from.has_daytimes()) {
      set_daytimes(from.daytimes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_FuncSwitch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_FuncSwitch::CopyFrom(const DB_FuncSwitch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_FuncSwitch::IsInitialized() const {

  return true;
}

void DB_FuncSwitch::Swap(DB_FuncSwitch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_FuncSwitch::InternalSwap(DB_FuncSwitch* other) {
  std::swap(time_day_, other->time_day_);
  std::swap(time_second_, other->time_second_);
  std::swap(daytimes_, other->daytimes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_FuncSwitch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_FuncSwitch_descriptor_;
  metadata.reflection = DB_FuncSwitch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_FuncSwitch

// optional int64 time_day = 1 [default = 0];
 bool DB_FuncSwitch::has_time_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_FuncSwitch::set_has_time_day() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_FuncSwitch::clear_has_time_day() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_FuncSwitch::clear_time_day() {
  time_day_ = GOOGLE_LONGLONG(0);
  clear_has_time_day();
}
 ::google::protobuf::int64 DB_FuncSwitch::time_day() const {
  // @@protoc_insertion_point(field_get:DB_FuncSwitch.time_day)
  return time_day_;
}
 void DB_FuncSwitch::set_time_day(::google::protobuf::int64 value) {
  set_has_time_day();
  time_day_ = value;
  // @@protoc_insertion_point(field_set:DB_FuncSwitch.time_day)
}

// optional int64 time_second = 3 [default = 0];
 bool DB_FuncSwitch::has_time_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_FuncSwitch::set_has_time_second() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_FuncSwitch::clear_has_time_second() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_FuncSwitch::clear_time_second() {
  time_second_ = GOOGLE_LONGLONG(0);
  clear_has_time_second();
}
 ::google::protobuf::int64 DB_FuncSwitch::time_second() const {
  // @@protoc_insertion_point(field_get:DB_FuncSwitch.time_second)
  return time_second_;
}
 void DB_FuncSwitch::set_time_second(::google::protobuf::int64 value) {
  set_has_time_second();
  time_second_ = value;
  // @@protoc_insertion_point(field_set:DB_FuncSwitch.time_second)
}

// optional int32 daytimes = 2 [default = 0];
 bool DB_FuncSwitch::has_daytimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_FuncSwitch::set_has_daytimes() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_FuncSwitch::clear_has_daytimes() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_FuncSwitch::clear_daytimes() {
  daytimes_ = 0;
  clear_has_daytimes();
}
 ::google::protobuf::int32 DB_FuncSwitch::daytimes() const {
  // @@protoc_insertion_point(field_get:DB_FuncSwitch.daytimes)
  return daytimes_;
}
 void DB_FuncSwitch::set_daytimes(::google::protobuf::int32 value) {
  set_has_daytimes();
  daytimes_ = value;
  // @@protoc_insertion_point(field_set:DB_FuncSwitch.daytimes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_FriendGift::kFriendActionPosFieldNumber;
const int DB_FriendGift::kFriendActionsAllreadFieldNumber;
const int DB_FriendGift::kFriendActionUnreadCntFieldNumber;
const int DB_FriendGift::kFriendActionsFieldNumber;
#endif  // !_MSC_VER

DB_FriendGift::DB_FriendGift()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_FriendGift)
}

void DB_FriendGift::InitAsDefaultInstance() {
}

DB_FriendGift::DB_FriendGift(const DB_FriendGift& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_FriendGift)
}

void DB_FriendGift::SharedCtor() {
  _cached_size_ = 0;
  friend_action_pos_ = 0;
  friend_actions_allread_ = false;
  friend_action_unread_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_FriendGift::~DB_FriendGift() {
  // @@protoc_insertion_point(destructor:DB_FriendGift)
  SharedDtor();
}

void DB_FriendGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_FriendGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_FriendGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_FriendGift_descriptor_;
}

const DB_FriendGift& DB_FriendGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_FriendGift* DB_FriendGift::default_instance_ = NULL;

DB_FriendGift* DB_FriendGift::New(::google::protobuf::Arena* arena) const {
  DB_FriendGift* n = new DB_FriendGift;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_FriendGift::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_FriendGift*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(friend_action_pos_, friend_actions_allread_);
    friend_action_unread_cnt_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  friend_actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_FriendGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_FriendGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool friend_actions_allread = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friend_actions_allread_)));
          set_has_friend_actions_allread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend_action_unread_cnt;
        break;
      }

      // optional int32 friend_action_unread_cnt = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_friend_action_unread_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_action_unread_cnt_)));
          set_has_friend_action_unread_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_friend_actions;
        break;
      }

      // repeated .DB_ActionRecord friend_actions = 3;
      case 3: {
        if (tag == 26) {
         parse_friend_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_friend_actions;
        if (input->ExpectTag(32)) goto parse_friend_action_pos;
        break;
      }

      // optional int32 friend_action_pos = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_friend_action_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_action_pos_)));
          set_has_friend_action_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_FriendGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_FriendGift)
  return false;
#undef DO_
}

void DB_FriendGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_FriendGift)
  // optional bool friend_actions_allread = 1 [default = false];
  if (has_friend_actions_allread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->friend_actions_allread(), output);
  }

  // optional int32 friend_action_unread_cnt = 2 [default = 0];
  if (has_friend_action_unread_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friend_action_unread_cnt(), output);
  }

  // repeated .DB_ActionRecord friend_actions = 3;
  for (unsigned int i = 0, n = this->friend_actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friend_actions(i), output);
  }

  // optional int32 friend_action_pos = 4 [default = 0];
  if (has_friend_action_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->friend_action_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_FriendGift)
}

::google::protobuf::uint8* DB_FriendGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_FriendGift)
  // optional bool friend_actions_allread = 1 [default = false];
  if (has_friend_actions_allread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->friend_actions_allread(), target);
  }

  // optional int32 friend_action_unread_cnt = 2 [default = 0];
  if (has_friend_action_unread_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friend_action_unread_cnt(), target);
  }

  // repeated .DB_ActionRecord friend_actions = 3;
  for (unsigned int i = 0, n = this->friend_actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->friend_actions(i), target);
  }

  // optional int32 friend_action_pos = 4 [default = 0];
  if (has_friend_action_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->friend_action_pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_FriendGift)
  return target;
}

int DB_FriendGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int32 friend_action_pos = 4 [default = 0];
    if (has_friend_action_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_action_pos());
    }

    // optional bool friend_actions_allread = 1 [default = false];
    if (has_friend_actions_allread()) {
      total_size += 1 + 1;
    }

    // optional int32 friend_action_unread_cnt = 2 [default = 0];
    if (has_friend_action_unread_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_action_unread_cnt());
    }

  }
  // repeated .DB_ActionRecord friend_actions = 3;
  total_size += 1 * this->friend_actions_size();
  for (int i = 0; i < this->friend_actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_actions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_FriendGift::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_FriendGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_FriendGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_FriendGift::MergeFrom(const DB_FriendGift& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  friend_actions_.MergeFrom(from.friend_actions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_action_pos()) {
      set_friend_action_pos(from.friend_action_pos());
    }
    if (from.has_friend_actions_allread()) {
      set_friend_actions_allread(from.friend_actions_allread());
    }
    if (from.has_friend_action_unread_cnt()) {
      set_friend_action_unread_cnt(from.friend_action_unread_cnt());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_FriendGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_FriendGift::CopyFrom(const DB_FriendGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_FriendGift::IsInitialized() const {

  return true;
}

void DB_FriendGift::Swap(DB_FriendGift* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_FriendGift::InternalSwap(DB_FriendGift* other) {
  std::swap(friend_action_pos_, other->friend_action_pos_);
  std::swap(friend_actions_allread_, other->friend_actions_allread_);
  std::swap(friend_action_unread_cnt_, other->friend_action_unread_cnt_);
  friend_actions_.UnsafeArenaSwap(&other->friend_actions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_FriendGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_FriendGift_descriptor_;
  metadata.reflection = DB_FriendGift_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_FriendGift

// optional int32 friend_action_pos = 4 [default = 0];
 bool DB_FriendGift::has_friend_action_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_FriendGift::set_has_friend_action_pos() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_FriendGift::clear_has_friend_action_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_FriendGift::clear_friend_action_pos() {
  friend_action_pos_ = 0;
  clear_has_friend_action_pos();
}
 ::google::protobuf::int32 DB_FriendGift::friend_action_pos() const {
  // @@protoc_insertion_point(field_get:DB_FriendGift.friend_action_pos)
  return friend_action_pos_;
}
 void DB_FriendGift::set_friend_action_pos(::google::protobuf::int32 value) {
  set_has_friend_action_pos();
  friend_action_pos_ = value;
  // @@protoc_insertion_point(field_set:DB_FriendGift.friend_action_pos)
}

// optional bool friend_actions_allread = 1 [default = false];
 bool DB_FriendGift::has_friend_actions_allread() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_FriendGift::set_has_friend_actions_allread() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_FriendGift::clear_has_friend_actions_allread() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_FriendGift::clear_friend_actions_allread() {
  friend_actions_allread_ = false;
  clear_has_friend_actions_allread();
}
 bool DB_FriendGift::friend_actions_allread() const {
  // @@protoc_insertion_point(field_get:DB_FriendGift.friend_actions_allread)
  return friend_actions_allread_;
}
 void DB_FriendGift::set_friend_actions_allread(bool value) {
  set_has_friend_actions_allread();
  friend_actions_allread_ = value;
  // @@protoc_insertion_point(field_set:DB_FriendGift.friend_actions_allread)
}

// optional int32 friend_action_unread_cnt = 2 [default = 0];
 bool DB_FriendGift::has_friend_action_unread_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_FriendGift::set_has_friend_action_unread_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_FriendGift::clear_has_friend_action_unread_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_FriendGift::clear_friend_action_unread_cnt() {
  friend_action_unread_cnt_ = 0;
  clear_has_friend_action_unread_cnt();
}
 ::google::protobuf::int32 DB_FriendGift::friend_action_unread_cnt() const {
  // @@protoc_insertion_point(field_get:DB_FriendGift.friend_action_unread_cnt)
  return friend_action_unread_cnt_;
}
 void DB_FriendGift::set_friend_action_unread_cnt(::google::protobuf::int32 value) {
  set_has_friend_action_unread_cnt();
  friend_action_unread_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_FriendGift.friend_action_unread_cnt)
}

// repeated .DB_ActionRecord friend_actions = 3;
 int DB_FriendGift::friend_actions_size() const {
  return friend_actions_.size();
}
 void DB_FriendGift::clear_friend_actions() {
  friend_actions_.Clear();
}
 const ::DB_ActionRecord& DB_FriendGift::friend_actions(int index) const {
  // @@protoc_insertion_point(field_get:DB_FriendGift.friend_actions)
  return friend_actions_.Get(index);
}
 ::DB_ActionRecord* DB_FriendGift::mutable_friend_actions(int index) {
  // @@protoc_insertion_point(field_mutable:DB_FriendGift.friend_actions)
  return friend_actions_.Mutable(index);
}
 ::DB_ActionRecord* DB_FriendGift::add_friend_actions() {
  // @@protoc_insertion_point(field_add:DB_FriendGift.friend_actions)
  return friend_actions_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord >&
DB_FriendGift::friend_actions() const {
  // @@protoc_insertion_point(field_list:DB_FriendGift.friend_actions)
  return friend_actions_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord >*
DB_FriendGift::mutable_friend_actions() {
  // @@protoc_insertion_point(field_mutable_list:DB_FriendGift.friend_actions)
  return &friend_actions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_Universe::kIdFieldNumber;
const int DB_Universe::kValueFieldNumber;
const int DB_Universe::kStarsFieldNumber;
const int DB_Universe::kUnlockedFieldNumber;
const int DB_Universe::kJsonUnlockConditionDataListFieldNumber;
const int DB_Universe::kFailedCntFieldNumber;
const int DB_Universe::kFirstUnlockSecondFieldNumber;
const int DB_Universe::kTopPlayerFieldNumber;
const int DB_Universe::kFirstPassFromFieldNumber;
const int DB_Universe::kValueKosFieldNumber;
const int DB_Universe::kStarsKosFieldNumber;
#endif  // !_MSC_VER

DB_Universe::DB_Universe()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_Universe)
}

void DB_Universe::InitAsDefaultInstance() {
}

DB_Universe::DB_Universe(const DB_Universe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_Universe)
}

void DB_Universe::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  stars_ = 0;
  unlocked_ = false;
  json_unlockconditiondatalist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  failed_cnt_ = 0;
  first_unlock_second_ = GOOGLE_LONGLONG(0);
  top_player_ = GOOGLE_LONGLONG(0);
  first_pass_from_ = 0;
  value_kos_ = 0;
  stars_kos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Universe::~DB_Universe() {
  // @@protoc_insertion_point(destructor:DB_Universe)
  SharedDtor();
}

void DB_Universe::SharedDtor() {
  json_unlockconditiondatalist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DB_Universe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Universe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Universe_descriptor_;
}

const DB_Universe& DB_Universe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_Universe* DB_Universe::default_instance_ = NULL;

DB_Universe* DB_Universe::New(::google::protobuf::Arena* arena) const {
  DB_Universe* n = new DB_Universe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_Universe::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_Universe*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, unlocked_);
    ZR_(first_unlock_second_, failed_cnt_);
    if (has_json_unlockconditiondatalist()) {
      json_unlockconditiondatalist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    top_player_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(value_kos_, stars_kos_);
    first_pass_from_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_Universe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_Universe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stars;
        break;
      }

      // optional int32 stars = 3;
      case 3: {
        if (tag == 24) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stars_)));
          set_has_stars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unlocked;
        break;
      }

      // optional bool unlocked = 4;
      case 4: {
        if (tag == 32) {
         parse_unlocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlocked_)));
          set_has_unlocked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_json_unlockConditionDataList;
        break;
      }

      // optional string json_unlockConditionDataList = 5;
      case 5: {
        if (tag == 42) {
         parse_json_unlockConditionDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_unlockconditiondatalist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_unlockconditiondatalist().data(), this->json_unlockconditiondatalist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_Universe.json_unlockConditionDataList");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_failed_cnt;
        break;
      }

      // optional int32 failed_cnt = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_failed_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failed_cnt_)));
          set_has_failed_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_first_unlock_second;
        break;
      }

      // optional int64 first_unlock_second = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_first_unlock_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_unlock_second_)));
          set_has_first_unlock_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_top_player;
        break;
      }

      // optional int64 top_player = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_top_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &top_player_)));
          set_has_top_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_first_pass_from;
        break;
      }

      // optional int32 first_pass_from = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_first_pass_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_pass_from_)));
          set_has_first_pass_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_value_kos;
        break;
      }

      // optional int32 value_kos = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_value_kos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_kos_)));
          set_has_value_kos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_stars_kos;
        break;
      }

      // optional int32 stars_kos = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_stars_kos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stars_kos_)));
          set_has_stars_kos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_Universe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_Universe)
  return false;
#undef DO_
}

void DB_Universe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_Universe)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional int32 stars = 3;
  if (has_stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stars(), output);
  }

  // optional bool unlocked = 4;
  if (has_unlocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unlocked(), output);
  }

  // optional string json_unlockConditionDataList = 5;
  if (has_json_unlockconditiondatalist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_unlockconditiondatalist().data(), this->json_unlockconditiondatalist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_Universe.json_unlockConditionDataList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->json_unlockconditiondatalist(), output);
  }

  // optional int32 failed_cnt = 7 [default = 0];
  if (has_failed_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->failed_cnt(), output);
  }

  // optional int64 first_unlock_second = 8 [default = 0];
  if (has_first_unlock_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->first_unlock_second(), output);
  }

  // optional int64 top_player = 9 [default = 0];
  if (has_top_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->top_player(), output);
  }

  // optional int32 first_pass_from = 10 [default = 0];
  if (has_first_pass_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->first_pass_from(), output);
  }

  // optional int32 value_kos = 11 [default = 0];
  if (has_value_kos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->value_kos(), output);
  }

  // optional int32 stars_kos = 12 [default = 0];
  if (has_stars_kos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->stars_kos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_Universe)
}

::google::protobuf::uint8* DB_Universe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_Universe)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional int32 stars = 3;
  if (has_stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stars(), target);
  }

  // optional bool unlocked = 4;
  if (has_unlocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unlocked(), target);
  }

  // optional string json_unlockConditionDataList = 5;
  if (has_json_unlockconditiondatalist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_unlockconditiondatalist().data(), this->json_unlockconditiondatalist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_Universe.json_unlockConditionDataList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->json_unlockconditiondatalist(), target);
  }

  // optional int32 failed_cnt = 7 [default = 0];
  if (has_failed_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->failed_cnt(), target);
  }

  // optional int64 first_unlock_second = 8 [default = 0];
  if (has_first_unlock_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->first_unlock_second(), target);
  }

  // optional int64 top_player = 9 [default = 0];
  if (has_top_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->top_player(), target);
  }

  // optional int32 first_pass_from = 10 [default = 0];
  if (has_first_pass_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->first_pass_from(), target);
  }

  // optional int32 value_kos = 11 [default = 0];
  if (has_value_kos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->value_kos(), target);
  }

  // optional int32 stars_kos = 12 [default = 0];
  if (has_stars_kos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->stars_kos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_Universe)
  return target;
}

int DB_Universe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 stars = 3;
    if (has_stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stars());
    }

    // optional bool unlocked = 4;
    if (has_unlocked()) {
      total_size += 1 + 1;
    }

    // optional string json_unlockConditionDataList = 5;
    if (has_json_unlockconditiondatalist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_unlockconditiondatalist());
    }

    // optional int32 failed_cnt = 7 [default = 0];
    if (has_failed_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failed_cnt());
    }

    // optional int64 first_unlock_second = 8 [default = 0];
    if (has_first_unlock_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->first_unlock_second());
    }

    // optional int64 top_player = 9 [default = 0];
    if (has_top_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->top_player());
    }

  }
  if (_has_bits_[8 / 32] & 1792) {
    // optional int32 first_pass_from = 10 [default = 0];
    if (has_first_pass_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_pass_from());
    }

    // optional int32 value_kos = 11 [default = 0];
    if (has_value_kos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value_kos());
    }

    // optional int32 stars_kos = 12 [default = 0];
    if (has_stars_kos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stars_kos());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Universe::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_Universe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Universe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Universe::MergeFrom(const DB_Universe& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_stars()) {
      set_stars(from.stars());
    }
    if (from.has_unlocked()) {
      set_unlocked(from.unlocked());
    }
    if (from.has_json_unlockconditiondatalist()) {
      set_has_json_unlockconditiondatalist();
      json_unlockconditiondatalist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_unlockconditiondatalist_);
    }
    if (from.has_failed_cnt()) {
      set_failed_cnt(from.failed_cnt());
    }
    if (from.has_first_unlock_second()) {
      set_first_unlock_second(from.first_unlock_second());
    }
    if (from.has_top_player()) {
      set_top_player(from.top_player());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_first_pass_from()) {
      set_first_pass_from(from.first_pass_from());
    }
    if (from.has_value_kos()) {
      set_value_kos(from.value_kos());
    }
    if (from.has_stars_kos()) {
      set_stars_kos(from.stars_kos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_Universe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Universe::CopyFrom(const DB_Universe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Universe::IsInitialized() const {

  return true;
}

void DB_Universe::Swap(DB_Universe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_Universe::InternalSwap(DB_Universe* other) {
  std::swap(id_, other->id_);
  std::swap(value_, other->value_);
  std::swap(stars_, other->stars_);
  std::swap(unlocked_, other->unlocked_);
  json_unlockconditiondatalist_.Swap(&other->json_unlockconditiondatalist_);
  std::swap(failed_cnt_, other->failed_cnt_);
  std::swap(first_unlock_second_, other->first_unlock_second_);
  std::swap(top_player_, other->top_player_);
  std::swap(first_pass_from_, other->first_pass_from_);
  std::swap(value_kos_, other->value_kos_);
  std::swap(stars_kos_, other->stars_kos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_Universe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Universe_descriptor_;
  metadata.reflection = DB_Universe_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_Universe

// optional int32 id = 1;
 bool DB_Universe::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_Universe::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_Universe::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_Universe::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 DB_Universe::id() const {
  // @@protoc_insertion_point(field_get:DB_Universe.id)
  return id_;
}
 void DB_Universe::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.id)
}

// optional int32 value = 2;
 bool DB_Universe::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_Universe::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_Universe::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_Universe::clear_value() {
  value_ = 0;
  clear_has_value();
}
 ::google::protobuf::int32 DB_Universe::value() const {
  // @@protoc_insertion_point(field_get:DB_Universe.value)
  return value_;
}
 void DB_Universe::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.value)
}

// optional int32 stars = 3;
 bool DB_Universe::has_stars() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_Universe::set_has_stars() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_Universe::clear_has_stars() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_Universe::clear_stars() {
  stars_ = 0;
  clear_has_stars();
}
 ::google::protobuf::int32 DB_Universe::stars() const {
  // @@protoc_insertion_point(field_get:DB_Universe.stars)
  return stars_;
}
 void DB_Universe::set_stars(::google::protobuf::int32 value) {
  set_has_stars();
  stars_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.stars)
}

// optional bool unlocked = 4;
 bool DB_Universe::has_unlocked() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_Universe::set_has_unlocked() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_Universe::clear_has_unlocked() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_Universe::clear_unlocked() {
  unlocked_ = false;
  clear_has_unlocked();
}
 bool DB_Universe::unlocked() const {
  // @@protoc_insertion_point(field_get:DB_Universe.unlocked)
  return unlocked_;
}
 void DB_Universe::set_unlocked(bool value) {
  set_has_unlocked();
  unlocked_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.unlocked)
}

// optional string json_unlockConditionDataList = 5;
 bool DB_Universe::has_json_unlockconditiondatalist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_Universe::set_has_json_unlockconditiondatalist() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_Universe::clear_has_json_unlockconditiondatalist() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_Universe::clear_json_unlockconditiondatalist() {
  json_unlockconditiondatalist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_unlockconditiondatalist();
}
 const ::std::string& DB_Universe::json_unlockconditiondatalist() const {
  // @@protoc_insertion_point(field_get:DB_Universe.json_unlockConditionDataList)
  return json_unlockconditiondatalist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_Universe::set_json_unlockconditiondatalist(const ::std::string& value) {
  set_has_json_unlockconditiondatalist();
  json_unlockconditiondatalist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_Universe.json_unlockConditionDataList)
}
 void DB_Universe::set_json_unlockconditiondatalist(const char* value) {
  set_has_json_unlockconditiondatalist();
  json_unlockconditiondatalist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_Universe.json_unlockConditionDataList)
}
 void DB_Universe::set_json_unlockconditiondatalist(const char* value, size_t size) {
  set_has_json_unlockconditiondatalist();
  json_unlockconditiondatalist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_Universe.json_unlockConditionDataList)
}
 ::std::string* DB_Universe::mutable_json_unlockconditiondatalist() {
  set_has_json_unlockconditiondatalist();
  // @@protoc_insertion_point(field_mutable:DB_Universe.json_unlockConditionDataList)
  return json_unlockconditiondatalist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_Universe::release_json_unlockconditiondatalist() {
  clear_has_json_unlockconditiondatalist();
  return json_unlockconditiondatalist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_Universe::set_allocated_json_unlockconditiondatalist(::std::string* json_unlockconditiondatalist) {
  if (json_unlockconditiondatalist != NULL) {
    set_has_json_unlockconditiondatalist();
  } else {
    clear_has_json_unlockconditiondatalist();
  }
  json_unlockconditiondatalist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_unlockconditiondatalist);
  // @@protoc_insertion_point(field_set_allocated:DB_Universe.json_unlockConditionDataList)
}

// optional int32 failed_cnt = 7 [default = 0];
 bool DB_Universe::has_failed_cnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_Universe::set_has_failed_cnt() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_Universe::clear_has_failed_cnt() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_Universe::clear_failed_cnt() {
  failed_cnt_ = 0;
  clear_has_failed_cnt();
}
 ::google::protobuf::int32 DB_Universe::failed_cnt() const {
  // @@protoc_insertion_point(field_get:DB_Universe.failed_cnt)
  return failed_cnt_;
}
 void DB_Universe::set_failed_cnt(::google::protobuf::int32 value) {
  set_has_failed_cnt();
  failed_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.failed_cnt)
}

// optional int64 first_unlock_second = 8 [default = 0];
 bool DB_Universe::has_first_unlock_second() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void DB_Universe::set_has_first_unlock_second() {
  _has_bits_[0] |= 0x00000040u;
}
 void DB_Universe::clear_has_first_unlock_second() {
  _has_bits_[0] &= ~0x00000040u;
}
 void DB_Universe::clear_first_unlock_second() {
  first_unlock_second_ = GOOGLE_LONGLONG(0);
  clear_has_first_unlock_second();
}
 ::google::protobuf::int64 DB_Universe::first_unlock_second() const {
  // @@protoc_insertion_point(field_get:DB_Universe.first_unlock_second)
  return first_unlock_second_;
}
 void DB_Universe::set_first_unlock_second(::google::protobuf::int64 value) {
  set_has_first_unlock_second();
  first_unlock_second_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.first_unlock_second)
}

// optional int64 top_player = 9 [default = 0];
 bool DB_Universe::has_top_player() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void DB_Universe::set_has_top_player() {
  _has_bits_[0] |= 0x00000080u;
}
 void DB_Universe::clear_has_top_player() {
  _has_bits_[0] &= ~0x00000080u;
}
 void DB_Universe::clear_top_player() {
  top_player_ = GOOGLE_LONGLONG(0);
  clear_has_top_player();
}
 ::google::protobuf::int64 DB_Universe::top_player() const {
  // @@protoc_insertion_point(field_get:DB_Universe.top_player)
  return top_player_;
}
 void DB_Universe::set_top_player(::google::protobuf::int64 value) {
  set_has_top_player();
  top_player_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.top_player)
}

// optional int32 first_pass_from = 10 [default = 0];
 bool DB_Universe::has_first_pass_from() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void DB_Universe::set_has_first_pass_from() {
  _has_bits_[0] |= 0x00000100u;
}
 void DB_Universe::clear_has_first_pass_from() {
  _has_bits_[0] &= ~0x00000100u;
}
 void DB_Universe::clear_first_pass_from() {
  first_pass_from_ = 0;
  clear_has_first_pass_from();
}
 ::google::protobuf::int32 DB_Universe::first_pass_from() const {
  // @@protoc_insertion_point(field_get:DB_Universe.first_pass_from)
  return first_pass_from_;
}
 void DB_Universe::set_first_pass_from(::google::protobuf::int32 value) {
  set_has_first_pass_from();
  first_pass_from_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.first_pass_from)
}

// optional int32 value_kos = 11 [default = 0];
 bool DB_Universe::has_value_kos() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void DB_Universe::set_has_value_kos() {
  _has_bits_[0] |= 0x00000200u;
}
 void DB_Universe::clear_has_value_kos() {
  _has_bits_[0] &= ~0x00000200u;
}
 void DB_Universe::clear_value_kos() {
  value_kos_ = 0;
  clear_has_value_kos();
}
 ::google::protobuf::int32 DB_Universe::value_kos() const {
  // @@protoc_insertion_point(field_get:DB_Universe.value_kos)
  return value_kos_;
}
 void DB_Universe::set_value_kos(::google::protobuf::int32 value) {
  set_has_value_kos();
  value_kos_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.value_kos)
}

// optional int32 stars_kos = 12 [default = 0];
 bool DB_Universe::has_stars_kos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void DB_Universe::set_has_stars_kos() {
  _has_bits_[0] |= 0x00000400u;
}
 void DB_Universe::clear_has_stars_kos() {
  _has_bits_[0] &= ~0x00000400u;
}
 void DB_Universe::clear_stars_kos() {
  stars_kos_ = 0;
  clear_has_stars_kos();
}
 ::google::protobuf::int32 DB_Universe::stars_kos() const {
  // @@protoc_insertion_point(field_get:DB_Universe.stars_kos)
  return stars_kos_;
}
 void DB_Universe::set_stars_kos(::google::protobuf::int32 value) {
  set_has_stars_kos();
  stars_kos_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.stars_kos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_DallyUniverse::kUniFieldNumber;
const int DB_DallyUniverse::kPlayedCntFieldNumber;
const int DB_DallyUniverse::kSuccCntFieldNumber;
const int DB_DallyUniverse::kUnlockedFieldNumber;
const int DB_DallyUniverse::kPayOpenFieldNumber;
const int DB_DallyUniverse::kPayOpenDayFieldNumber;
const int DB_DallyUniverse::kPayCashFieldNumber;
#endif  // !_MSC_VER

DB_DallyUniverse::DB_DallyUniverse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_DallyUniverse)
}

void DB_DallyUniverse::InitAsDefaultInstance() {
  uni_ = const_cast< ::DB_Universe*>(&::DB_Universe::default_instance());
}

DB_DallyUniverse::DB_DallyUniverse(const DB_DallyUniverse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_DallyUniverse)
}

void DB_DallyUniverse::SharedCtor() {
  _cached_size_ = 0;
  uni_ = NULL;
  played_cnt_ = 0;
  succ_cnt_ = 0;
  unlocked_ = false;
  pay_open_ = false;
  pay_open_day_ = GOOGLE_LONGLONG(0);
  pay_cash_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_DallyUniverse::~DB_DallyUniverse() {
  // @@protoc_insertion_point(destructor:DB_DallyUniverse)
  SharedDtor();
}

void DB_DallyUniverse::SharedDtor() {
  if (this != default_instance_) {
    delete uni_;
  }
}

void DB_DallyUniverse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_DallyUniverse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_DallyUniverse_descriptor_;
}

const DB_DallyUniverse& DB_DallyUniverse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_DallyUniverse* DB_DallyUniverse::default_instance_ = NULL;

DB_DallyUniverse* DB_DallyUniverse::New(::google::protobuf::Arena* arena) const {
  DB_DallyUniverse* n = new DB_DallyUniverse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_DallyUniverse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_DallyUniverse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(played_cnt_, pay_open_day_);
    if (has_uni()) {
      if (uni_ != NULL) uni_->::DB_Universe::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_DallyUniverse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_DallyUniverse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DB_Universe uni = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uni()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_played_cnt;
        break;
      }

      // optional int32 played_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_played_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &played_cnt_)));
          set_has_played_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_succ_cnt;
        break;
      }

      // optional int32 succ_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_succ_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_cnt_)));
          set_has_succ_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unlocked;
        break;
      }

      // optional bool unlocked = 4;
      case 4: {
        if (tag == 32) {
         parse_unlocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlocked_)));
          set_has_unlocked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pay_open;
        break;
      }

      // optional bool pay_open = 5;
      case 5: {
        if (tag == 40) {
         parse_pay_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pay_open_)));
          set_has_pay_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pay_open_day;
        break;
      }

      // optional int64 pay_open_day = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_pay_open_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pay_open_day_)));
          set_has_pay_open_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pay_cash;
        break;
      }

      // optional int32 pay_cash = 7;
      case 7: {
        if (tag == 56) {
         parse_pay_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_cash_)));
          set_has_pay_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_DallyUniverse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_DallyUniverse)
  return false;
#undef DO_
}

void DB_DallyUniverse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_DallyUniverse)
  // optional .DB_Universe uni = 1;
  if (has_uni()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->uni_, output);
  }

  // optional int32 played_cnt = 2;
  if (has_played_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->played_cnt(), output);
  }

  // optional int32 succ_cnt = 3;
  if (has_succ_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->succ_cnt(), output);
  }

  // optional bool unlocked = 4;
  if (has_unlocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unlocked(), output);
  }

  // optional bool pay_open = 5;
  if (has_pay_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pay_open(), output);
  }

  // optional int64 pay_open_day = 6 [default = 0];
  if (has_pay_open_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->pay_open_day(), output);
  }

  // optional int32 pay_cash = 7;
  if (has_pay_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pay_cash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_DallyUniverse)
}

::google::protobuf::uint8* DB_DallyUniverse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_DallyUniverse)
  // optional .DB_Universe uni = 1;
  if (has_uni()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->uni_, target);
  }

  // optional int32 played_cnt = 2;
  if (has_played_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->played_cnt(), target);
  }

  // optional int32 succ_cnt = 3;
  if (has_succ_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->succ_cnt(), target);
  }

  // optional bool unlocked = 4;
  if (has_unlocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unlocked(), target);
  }

  // optional bool pay_open = 5;
  if (has_pay_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->pay_open(), target);
  }

  // optional int64 pay_open_day = 6 [default = 0];
  if (has_pay_open_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->pay_open_day(), target);
  }

  // optional int32 pay_cash = 7;
  if (has_pay_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pay_cash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_DallyUniverse)
  return target;
}

int DB_DallyUniverse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127) {
    // optional .DB_Universe uni = 1;
    if (has_uni()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uni_);
    }

    // optional int32 played_cnt = 2;
    if (has_played_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->played_cnt());
    }

    // optional int32 succ_cnt = 3;
    if (has_succ_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->succ_cnt());
    }

    // optional bool unlocked = 4;
    if (has_unlocked()) {
      total_size += 1 + 1;
    }

    // optional bool pay_open = 5;
    if (has_pay_open()) {
      total_size += 1 + 1;
    }

    // optional int64 pay_open_day = 6 [default = 0];
    if (has_pay_open_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pay_open_day());
    }

    // optional int32 pay_cash = 7;
    if (has_pay_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_cash());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_DallyUniverse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_DallyUniverse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_DallyUniverse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_DallyUniverse::MergeFrom(const DB_DallyUniverse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uni()) {
      mutable_uni()->::DB_Universe::MergeFrom(from.uni());
    }
    if (from.has_played_cnt()) {
      set_played_cnt(from.played_cnt());
    }
    if (from.has_succ_cnt()) {
      set_succ_cnt(from.succ_cnt());
    }
    if (from.has_unlocked()) {
      set_unlocked(from.unlocked());
    }
    if (from.has_pay_open()) {
      set_pay_open(from.pay_open());
    }
    if (from.has_pay_open_day()) {
      set_pay_open_day(from.pay_open_day());
    }
    if (from.has_pay_cash()) {
      set_pay_cash(from.pay_cash());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_DallyUniverse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_DallyUniverse::CopyFrom(const DB_DallyUniverse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_DallyUniverse::IsInitialized() const {

  return true;
}

void DB_DallyUniverse::Swap(DB_DallyUniverse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_DallyUniverse::InternalSwap(DB_DallyUniverse* other) {
  std::swap(uni_, other->uni_);
  std::swap(played_cnt_, other->played_cnt_);
  std::swap(succ_cnt_, other->succ_cnt_);
  std::swap(unlocked_, other->unlocked_);
  std::swap(pay_open_, other->pay_open_);
  std::swap(pay_open_day_, other->pay_open_day_);
  std::swap(pay_cash_, other->pay_cash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_DallyUniverse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_DallyUniverse_descriptor_;
  metadata.reflection = DB_DallyUniverse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_DallyUniverse

// optional .DB_Universe uni = 1;
 bool DB_DallyUniverse::has_uni() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_DallyUniverse::set_has_uni() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_DallyUniverse::clear_has_uni() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_DallyUniverse::clear_uni() {
  if (uni_ != NULL) uni_->::DB_Universe::Clear();
  clear_has_uni();
}
 const ::DB_Universe& DB_DallyUniverse::uni() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.uni)
  return uni_ != NULL ? *uni_ : *default_instance_->uni_;
}
 ::DB_Universe* DB_DallyUniverse::mutable_uni() {
  set_has_uni();
  if (uni_ == NULL) {
    uni_ = new ::DB_Universe;
  }
  // @@protoc_insertion_point(field_mutable:DB_DallyUniverse.uni)
  return uni_;
}
 ::DB_Universe* DB_DallyUniverse::release_uni() {
  clear_has_uni();
  ::DB_Universe* temp = uni_;
  uni_ = NULL;
  return temp;
}
 void DB_DallyUniverse::set_allocated_uni(::DB_Universe* uni) {
  delete uni_;
  uni_ = uni;
  if (uni) {
    set_has_uni();
  } else {
    clear_has_uni();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_DallyUniverse.uni)
}

// optional int32 played_cnt = 2;
 bool DB_DallyUniverse::has_played_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_DallyUniverse::set_has_played_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_DallyUniverse::clear_has_played_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_DallyUniverse::clear_played_cnt() {
  played_cnt_ = 0;
  clear_has_played_cnt();
}
 ::google::protobuf::int32 DB_DallyUniverse::played_cnt() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.played_cnt)
  return played_cnt_;
}
 void DB_DallyUniverse::set_played_cnt(::google::protobuf::int32 value) {
  set_has_played_cnt();
  played_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverse.played_cnt)
}

// optional int32 succ_cnt = 3;
 bool DB_DallyUniverse::has_succ_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_DallyUniverse::set_has_succ_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_DallyUniverse::clear_has_succ_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_DallyUniverse::clear_succ_cnt() {
  succ_cnt_ = 0;
  clear_has_succ_cnt();
}
 ::google::protobuf::int32 DB_DallyUniverse::succ_cnt() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.succ_cnt)
  return succ_cnt_;
}
 void DB_DallyUniverse::set_succ_cnt(::google::protobuf::int32 value) {
  set_has_succ_cnt();
  succ_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverse.succ_cnt)
}

// optional bool unlocked = 4;
 bool DB_DallyUniverse::has_unlocked() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_DallyUniverse::set_has_unlocked() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_DallyUniverse::clear_has_unlocked() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_DallyUniverse::clear_unlocked() {
  unlocked_ = false;
  clear_has_unlocked();
}
 bool DB_DallyUniverse::unlocked() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.unlocked)
  return unlocked_;
}
 void DB_DallyUniverse::set_unlocked(bool value) {
  set_has_unlocked();
  unlocked_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverse.unlocked)
}

// optional bool pay_open = 5;
 bool DB_DallyUniverse::has_pay_open() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_DallyUniverse::set_has_pay_open() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_DallyUniverse::clear_has_pay_open() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_DallyUniverse::clear_pay_open() {
  pay_open_ = false;
  clear_has_pay_open();
}
 bool DB_DallyUniverse::pay_open() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.pay_open)
  return pay_open_;
}
 void DB_DallyUniverse::set_pay_open(bool value) {
  set_has_pay_open();
  pay_open_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverse.pay_open)
}

// optional int64 pay_open_day = 6 [default = 0];
 bool DB_DallyUniverse::has_pay_open_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_DallyUniverse::set_has_pay_open_day() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_DallyUniverse::clear_has_pay_open_day() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_DallyUniverse::clear_pay_open_day() {
  pay_open_day_ = GOOGLE_LONGLONG(0);
  clear_has_pay_open_day();
}
 ::google::protobuf::int64 DB_DallyUniverse::pay_open_day() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.pay_open_day)
  return pay_open_day_;
}
 void DB_DallyUniverse::set_pay_open_day(::google::protobuf::int64 value) {
  set_has_pay_open_day();
  pay_open_day_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverse.pay_open_day)
}

// optional int32 pay_cash = 7;
 bool DB_DallyUniverse::has_pay_cash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void DB_DallyUniverse::set_has_pay_cash() {
  _has_bits_[0] |= 0x00000040u;
}
 void DB_DallyUniverse::clear_has_pay_cash() {
  _has_bits_[0] &= ~0x00000040u;
}
 void DB_DallyUniverse::clear_pay_cash() {
  pay_cash_ = 0;
  clear_has_pay_cash();
}
 ::google::protobuf::int32 DB_DallyUniverse::pay_cash() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.pay_cash)
  return pay_cash_;
}
 void DB_DallyUniverse::set_pay_cash(::google::protobuf::int32 value) {
  set_has_pay_cash();
  pay_cash_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverse.pay_cash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_DallyLogInfo::kWeekFieldNumber;
const int DB_DallyLogInfo::kTotalscoreFieldNumber;
const int DB_DallyLogInfo::kUnlockedCntFieldNumber;
#endif  // !_MSC_VER

DB_DallyLogInfo::DB_DallyLogInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_DallyLogInfo)
}

void DB_DallyLogInfo::InitAsDefaultInstance() {
}

DB_DallyLogInfo::DB_DallyLogInfo(const DB_DallyLogInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_DallyLogInfo)
}

void DB_DallyLogInfo::SharedCtor() {
  _cached_size_ = 0;
  week_ = 0;
  totalscore_ = 0;
  unlocked_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_DallyLogInfo::~DB_DallyLogInfo() {
  // @@protoc_insertion_point(destructor:DB_DallyLogInfo)
  SharedDtor();
}

void DB_DallyLogInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_DallyLogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_DallyLogInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_DallyLogInfo_descriptor_;
}

const DB_DallyLogInfo& DB_DallyLogInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_DallyLogInfo* DB_DallyLogInfo::default_instance_ = NULL;

DB_DallyLogInfo* DB_DallyLogInfo::New(::google::protobuf::Arena* arena) const {
  DB_DallyLogInfo* n = new DB_DallyLogInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_DallyLogInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_DallyLogInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(week_, unlocked_cnt_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_DallyLogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_DallyLogInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 week = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalscore;
        break;
      }

      // optional int32 totalscore = 2;
      case 2: {
        if (tag == 16) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unlocked_cnt;
        break;
      }

      // optional int32 unlocked_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_unlocked_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlocked_cnt_)));
          set_has_unlocked_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_DallyLogInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_DallyLogInfo)
  return false;
#undef DO_
}

void DB_DallyLogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_DallyLogInfo)
  // optional int32 week = 1 [default = 0];
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->week(), output);
  }

  // optional int32 totalscore = 2;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalscore(), output);
  }

  // optional int32 unlocked_cnt = 3;
  if (has_unlocked_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unlocked_cnt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_DallyLogInfo)
}

::google::protobuf::uint8* DB_DallyLogInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_DallyLogInfo)
  // optional int32 week = 1 [default = 0];
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->week(), target);
  }

  // optional int32 totalscore = 2;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalscore(), target);
  }

  // optional int32 unlocked_cnt = 3;
  if (has_unlocked_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unlocked_cnt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_DallyLogInfo)
  return target;
}

int DB_DallyLogInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int32 week = 1 [default = 0];
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

    // optional int32 totalscore = 2;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }

    // optional int32 unlocked_cnt = 3;
    if (has_unlocked_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlocked_cnt());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_DallyLogInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_DallyLogInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_DallyLogInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_DallyLogInfo::MergeFrom(const DB_DallyLogInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_unlocked_cnt()) {
      set_unlocked_cnt(from.unlocked_cnt());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_DallyLogInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_DallyLogInfo::CopyFrom(const DB_DallyLogInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_DallyLogInfo::IsInitialized() const {

  return true;
}

void DB_DallyLogInfo::Swap(DB_DallyLogInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_DallyLogInfo::InternalSwap(DB_DallyLogInfo* other) {
  std::swap(week_, other->week_);
  std::swap(totalscore_, other->totalscore_);
  std::swap(unlocked_cnt_, other->unlocked_cnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_DallyLogInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_DallyLogInfo_descriptor_;
  metadata.reflection = DB_DallyLogInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_DallyLogInfo

// optional int32 week = 1 [default = 0];
 bool DB_DallyLogInfo::has_week() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_DallyLogInfo::set_has_week() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_DallyLogInfo::clear_has_week() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_DallyLogInfo::clear_week() {
  week_ = 0;
  clear_has_week();
}
 ::google::protobuf::int32 DB_DallyLogInfo::week() const {
  // @@protoc_insertion_point(field_get:DB_DallyLogInfo.week)
  return week_;
}
 void DB_DallyLogInfo::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyLogInfo.week)
}

// optional int32 totalscore = 2;
 bool DB_DallyLogInfo::has_totalscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_DallyLogInfo::set_has_totalscore() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_DallyLogInfo::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_DallyLogInfo::clear_totalscore() {
  totalscore_ = 0;
  clear_has_totalscore();
}
 ::google::protobuf::int32 DB_DallyLogInfo::totalscore() const {
  // @@protoc_insertion_point(field_get:DB_DallyLogInfo.totalscore)
  return totalscore_;
}
 void DB_DallyLogInfo::set_totalscore(::google::protobuf::int32 value) {
  set_has_totalscore();
  totalscore_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyLogInfo.totalscore)
}

// optional int32 unlocked_cnt = 3;
 bool DB_DallyLogInfo::has_unlocked_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_DallyLogInfo::set_has_unlocked_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_DallyLogInfo::clear_has_unlocked_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_DallyLogInfo::clear_unlocked_cnt() {
  unlocked_cnt_ = 0;
  clear_has_unlocked_cnt();
}
 ::google::protobuf::int32 DB_DallyLogInfo::unlocked_cnt() const {
  // @@protoc_insertion_point(field_get:DB_DallyLogInfo.unlocked_cnt)
  return unlocked_cnt_;
}
 void DB_DallyLogInfo::set_unlocked_cnt(::google::protobuf::int32 value) {
  set_has_unlocked_cnt();
  unlocked_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyLogInfo.unlocked_cnt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_DallyUniverseInfo::kWeekFieldNumber;
const int DB_DallyUniverseInfo::kUnisetFieldNumber;
const int DB_DallyUniverseInfo::kTotalsocreFieldNumber;
const int DB_DallyUniverseInfo::kRewardpickedFieldNumber;
const int DB_DallyUniverseInfo::kHistoryLogsFieldNumber;
const int DB_DallyUniverseInfo::kCheatBitFieldNumber;
#endif  // !_MSC_VER

DB_DallyUniverseInfo::DB_DallyUniverseInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_DallyUniverseInfo)
}

void DB_DallyUniverseInfo::InitAsDefaultInstance() {
}

DB_DallyUniverseInfo::DB_DallyUniverseInfo(const DB_DallyUniverseInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_DallyUniverseInfo)
}

void DB_DallyUniverseInfo::SharedCtor() {
  _cached_size_ = 0;
  week_ = 0;
  totalsocre_ = 0;
  rewardpicked_ = false;
  cheat_bit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_DallyUniverseInfo::~DB_DallyUniverseInfo() {
  // @@protoc_insertion_point(destructor:DB_DallyUniverseInfo)
  SharedDtor();
}

void DB_DallyUniverseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_DallyUniverseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_DallyUniverseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_DallyUniverseInfo_descriptor_;
}

const DB_DallyUniverseInfo& DB_DallyUniverseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_DallyUniverseInfo* DB_DallyUniverseInfo::default_instance_ = NULL;

DB_DallyUniverseInfo* DB_DallyUniverseInfo::New(::google::protobuf::Arena* arena) const {
  DB_DallyUniverseInfo* n = new DB_DallyUniverseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_DallyUniverseInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_DallyUniverseInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(week_, totalsocre_);
  ZR_(rewardpicked_, cheat_bit_);

#undef ZR_HELPER_
#undef ZR_

  uniset_.Clear();
  historylogs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_DallyUniverseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_DallyUniverseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 week = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uniset;
        break;
      }

      // repeated .DB_DallyUniverse uniset = 2;
      case 2: {
        if (tag == 18) {
         parse_uniset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uniset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uniset;
        if (input->ExpectTag(24)) goto parse_totalsocre;
        break;
      }

      // optional int32 totalsocre = 3;
      case 3: {
        if (tag == 24) {
         parse_totalsocre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalsocre_)));
          set_has_totalsocre();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rewardpicked;
        break;
      }

      // optional bool rewardpicked = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_rewardpicked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rewardpicked_)));
          set_has_rewardpicked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_historyLogs;
        break;
      }

      // repeated .DB_DallyLogInfo historyLogs = 5;
      case 5: {
        if (tag == 42) {
         parse_historyLogs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_historylogs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_historyLogs;
        if (input->ExpectTag(48)) goto parse_cheat_bit;
        break;
      }

      // optional bool cheat_bit = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_cheat_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cheat_bit_)));
          set_has_cheat_bit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_DallyUniverseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_DallyUniverseInfo)
  return false;
#undef DO_
}

void DB_DallyUniverseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_DallyUniverseInfo)
  // optional int32 week = 1;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->week(), output);
  }

  // repeated .DB_DallyUniverse uniset = 2;
  for (unsigned int i = 0, n = this->uniset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uniset(i), output);
  }

  // optional int32 totalsocre = 3;
  if (has_totalsocre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalsocre(), output);
  }

  // optional bool rewardpicked = 4 [default = false];
  if (has_rewardpicked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->rewardpicked(), output);
  }

  // repeated .DB_DallyLogInfo historyLogs = 5;
  for (unsigned int i = 0, n = this->historylogs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->historylogs(i), output);
  }

  // optional bool cheat_bit = 6 [default = false];
  if (has_cheat_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cheat_bit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_DallyUniverseInfo)
}

::google::protobuf::uint8* DB_DallyUniverseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_DallyUniverseInfo)
  // optional int32 week = 1;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->week(), target);
  }

  // repeated .DB_DallyUniverse uniset = 2;
  for (unsigned int i = 0, n = this->uniset_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uniset(i), target);
  }

  // optional int32 totalsocre = 3;
  if (has_totalsocre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalsocre(), target);
  }

  // optional bool rewardpicked = 4 [default = false];
  if (has_rewardpicked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->rewardpicked(), target);
  }

  // repeated .DB_DallyLogInfo historyLogs = 5;
  for (unsigned int i = 0, n = this->historylogs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->historylogs(i), target);
  }

  // optional bool cheat_bit = 6 [default = false];
  if (has_cheat_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cheat_bit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_DallyUniverseInfo)
  return target;
}

int DB_DallyUniverseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 45) {
    // optional int32 week = 1;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

    // optional int32 totalsocre = 3;
    if (has_totalsocre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalsocre());
    }

    // optional bool rewardpicked = 4 [default = false];
    if (has_rewardpicked()) {
      total_size += 1 + 1;
    }

    // optional bool cheat_bit = 6 [default = false];
    if (has_cheat_bit()) {
      total_size += 1 + 1;
    }

  }
  // repeated .DB_DallyUniverse uniset = 2;
  total_size += 1 * this->uniset_size();
  for (int i = 0; i < this->uniset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uniset(i));
  }

  // repeated .DB_DallyLogInfo historyLogs = 5;
  total_size += 1 * this->historylogs_size();
  for (int i = 0; i < this->historylogs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->historylogs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_DallyUniverseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_DallyUniverseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_DallyUniverseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_DallyUniverseInfo::MergeFrom(const DB_DallyUniverseInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  uniset_.MergeFrom(from.uniset_);
  historylogs_.MergeFrom(from.historylogs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_totalsocre()) {
      set_totalsocre(from.totalsocre());
    }
    if (from.has_rewardpicked()) {
      set_rewardpicked(from.rewardpicked());
    }
    if (from.has_cheat_bit()) {
      set_cheat_bit(from.cheat_bit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_DallyUniverseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_DallyUniverseInfo::CopyFrom(const DB_DallyUniverseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_DallyUniverseInfo::IsInitialized() const {

  return true;
}

void DB_DallyUniverseInfo::Swap(DB_DallyUniverseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_DallyUniverseInfo::InternalSwap(DB_DallyUniverseInfo* other) {
  std::swap(week_, other->week_);
  uniset_.UnsafeArenaSwap(&other->uniset_);
  std::swap(totalsocre_, other->totalsocre_);
  std::swap(rewardpicked_, other->rewardpicked_);
  historylogs_.UnsafeArenaSwap(&other->historylogs_);
  std::swap(cheat_bit_, other->cheat_bit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_DallyUniverseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_DallyUniverseInfo_descriptor_;
  metadata.reflection = DB_DallyUniverseInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_DallyUniverseInfo

// optional int32 week = 1;
 bool DB_DallyUniverseInfo::has_week() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_DallyUniverseInfo::set_has_week() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_DallyUniverseInfo::clear_has_week() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_DallyUniverseInfo::clear_week() {
  week_ = 0;
  clear_has_week();
}
 ::google::protobuf::int32 DB_DallyUniverseInfo::week() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverseInfo.week)
  return week_;
}
 void DB_DallyUniverseInfo::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverseInfo.week)
}

// repeated .DB_DallyUniverse uniset = 2;
 int DB_DallyUniverseInfo::uniset_size() const {
  return uniset_.size();
}
 void DB_DallyUniverseInfo::clear_uniset() {
  uniset_.Clear();
}
 const ::DB_DallyUniverse& DB_DallyUniverseInfo::uniset(int index) const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverseInfo.uniset)
  return uniset_.Get(index);
}
 ::DB_DallyUniverse* DB_DallyUniverseInfo::mutable_uniset(int index) {
  // @@protoc_insertion_point(field_mutable:DB_DallyUniverseInfo.uniset)
  return uniset_.Mutable(index);
}
 ::DB_DallyUniverse* DB_DallyUniverseInfo::add_uniset() {
  // @@protoc_insertion_point(field_add:DB_DallyUniverseInfo.uniset)
  return uniset_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_DallyUniverse >&
DB_DallyUniverseInfo::uniset() const {
  // @@protoc_insertion_point(field_list:DB_DallyUniverseInfo.uniset)
  return uniset_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_DallyUniverse >*
DB_DallyUniverseInfo::mutable_uniset() {
  // @@protoc_insertion_point(field_mutable_list:DB_DallyUniverseInfo.uniset)
  return &uniset_;
}

// optional int32 totalsocre = 3;
 bool DB_DallyUniverseInfo::has_totalsocre() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_DallyUniverseInfo::set_has_totalsocre() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_DallyUniverseInfo::clear_has_totalsocre() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_DallyUniverseInfo::clear_totalsocre() {
  totalsocre_ = 0;
  clear_has_totalsocre();
}
 ::google::protobuf::int32 DB_DallyUniverseInfo::totalsocre() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverseInfo.totalsocre)
  return totalsocre_;
}
 void DB_DallyUniverseInfo::set_totalsocre(::google::protobuf::int32 value) {
  set_has_totalsocre();
  totalsocre_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverseInfo.totalsocre)
}

// optional bool rewardpicked = 4 [default = false];
 bool DB_DallyUniverseInfo::has_rewardpicked() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_DallyUniverseInfo::set_has_rewardpicked() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_DallyUniverseInfo::clear_has_rewardpicked() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_DallyUniverseInfo::clear_rewardpicked() {
  rewardpicked_ = false;
  clear_has_rewardpicked();
}
 bool DB_DallyUniverseInfo::rewardpicked() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverseInfo.rewardpicked)
  return rewardpicked_;
}
 void DB_DallyUniverseInfo::set_rewardpicked(bool value) {
  set_has_rewardpicked();
  rewardpicked_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverseInfo.rewardpicked)
}

// repeated .DB_DallyLogInfo historyLogs = 5;
 int DB_DallyUniverseInfo::historylogs_size() const {
  return historylogs_.size();
}
 void DB_DallyUniverseInfo::clear_historylogs() {
  historylogs_.Clear();
}
 const ::DB_DallyLogInfo& DB_DallyUniverseInfo::historylogs(int index) const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverseInfo.historyLogs)
  return historylogs_.Get(index);
}
 ::DB_DallyLogInfo* DB_DallyUniverseInfo::mutable_historylogs(int index) {
  // @@protoc_insertion_point(field_mutable:DB_DallyUniverseInfo.historyLogs)
  return historylogs_.Mutable(index);
}
 ::DB_DallyLogInfo* DB_DallyUniverseInfo::add_historylogs() {
  // @@protoc_insertion_point(field_add:DB_DallyUniverseInfo.historyLogs)
  return historylogs_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_DallyLogInfo >&
DB_DallyUniverseInfo::historylogs() const {
  // @@protoc_insertion_point(field_list:DB_DallyUniverseInfo.historyLogs)
  return historylogs_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_DallyLogInfo >*
DB_DallyUniverseInfo::mutable_historylogs() {
  // @@protoc_insertion_point(field_mutable_list:DB_DallyUniverseInfo.historyLogs)
  return &historylogs_;
}

// optional bool cheat_bit = 6 [default = false];
 bool DB_DallyUniverseInfo::has_cheat_bit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_DallyUniverseInfo::set_has_cheat_bit() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_DallyUniverseInfo::clear_has_cheat_bit() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_DallyUniverseInfo::clear_cheat_bit() {
  cheat_bit_ = false;
  clear_has_cheat_bit();
}
 bool DB_DallyUniverseInfo::cheat_bit() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverseInfo.cheat_bit)
  return cheat_bit_;
}
 void DB_DallyUniverseInfo::set_cheat_bit(bool value) {
  set_has_cheat_bit();
  cheat_bit_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverseInfo.cheat_bit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_LivesInfo::kLivesFieldNumber;
const int DB_LivesInfo::kLastCostTimeSecFieldNumber;
const int DB_LivesInfo::kLivesMaxFieldNumber;
#endif  // !_MSC_VER

DB_LivesInfo::DB_LivesInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_LivesInfo)
}

void DB_LivesInfo::InitAsDefaultInstance() {
}

DB_LivesInfo::DB_LivesInfo(const DB_LivesInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_LivesInfo)
}

void DB_LivesInfo::SharedCtor() {
  _cached_size_ = 0;
  lives_ = 0;
  last_cost_time_sec_ = GOOGLE_LONGLONG(0);
  lives_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_LivesInfo::~DB_LivesInfo() {
  // @@protoc_insertion_point(destructor:DB_LivesInfo)
  SharedDtor();
}

void DB_LivesInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_LivesInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_LivesInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_LivesInfo_descriptor_;
}

const DB_LivesInfo& DB_LivesInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_LivesInfo* DB_LivesInfo::default_instance_ = NULL;

DB_LivesInfo* DB_LivesInfo::New(::google::protobuf::Arena* arena) const {
  DB_LivesInfo* n = new DB_LivesInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_LivesInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_LivesInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(last_cost_time_sec_, lives_max_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_LivesInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_LivesInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lives = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lives_)));
          set_has_lives();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_cost_time_sec;
        break;
      }

      // optional int64 last_cost_time_sec = 2;
      case 2: {
        if (tag == 16) {
         parse_last_cost_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_cost_time_sec_)));
          set_has_last_cost_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lives_max;
        break;
      }

      // optional int32 lives_max = 3;
      case 3: {
        if (tag == 24) {
         parse_lives_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lives_max_)));
          set_has_lives_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_LivesInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_LivesInfo)
  return false;
#undef DO_
}

void DB_LivesInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_LivesInfo)
  // optional int32 lives = 1;
  if (has_lives()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lives(), output);
  }

  // optional int64 last_cost_time_sec = 2;
  if (has_last_cost_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_cost_time_sec(), output);
  }

  // optional int32 lives_max = 3;
  if (has_lives_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lives_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_LivesInfo)
}

::google::protobuf::uint8* DB_LivesInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_LivesInfo)
  // optional int32 lives = 1;
  if (has_lives()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lives(), target);
  }

  // optional int64 last_cost_time_sec = 2;
  if (has_last_cost_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_cost_time_sec(), target);
  }

  // optional int32 lives_max = 3;
  if (has_lives_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lives_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_LivesInfo)
  return target;
}

int DB_LivesInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int32 lives = 1;
    if (has_lives()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lives());
    }

    // optional int64 last_cost_time_sec = 2;
    if (has_last_cost_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_cost_time_sec());
    }

    // optional int32 lives_max = 3;
    if (has_lives_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lives_max());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_LivesInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_LivesInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_LivesInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_LivesInfo::MergeFrom(const DB_LivesInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lives()) {
      set_lives(from.lives());
    }
    if (from.has_last_cost_time_sec()) {
      set_last_cost_time_sec(from.last_cost_time_sec());
    }
    if (from.has_lives_max()) {
      set_lives_max(from.lives_max());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_LivesInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_LivesInfo::CopyFrom(const DB_LivesInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_LivesInfo::IsInitialized() const {

  return true;
}

void DB_LivesInfo::Swap(DB_LivesInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_LivesInfo::InternalSwap(DB_LivesInfo* other) {
  std::swap(lives_, other->lives_);
  std::swap(last_cost_time_sec_, other->last_cost_time_sec_);
  std::swap(lives_max_, other->lives_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_LivesInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_LivesInfo_descriptor_;
  metadata.reflection = DB_LivesInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_LivesInfo

// optional int32 lives = 1;
 bool DB_LivesInfo::has_lives() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_LivesInfo::set_has_lives() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_LivesInfo::clear_has_lives() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_LivesInfo::clear_lives() {
  lives_ = 0;
  clear_has_lives();
}
 ::google::protobuf::int32 DB_LivesInfo::lives() const {
  // @@protoc_insertion_point(field_get:DB_LivesInfo.lives)
  return lives_;
}
 void DB_LivesInfo::set_lives(::google::protobuf::int32 value) {
  set_has_lives();
  lives_ = value;
  // @@protoc_insertion_point(field_set:DB_LivesInfo.lives)
}

// optional int64 last_cost_time_sec = 2;
 bool DB_LivesInfo::has_last_cost_time_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_LivesInfo::set_has_last_cost_time_sec() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_LivesInfo::clear_has_last_cost_time_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_LivesInfo::clear_last_cost_time_sec() {
  last_cost_time_sec_ = GOOGLE_LONGLONG(0);
  clear_has_last_cost_time_sec();
}
 ::google::protobuf::int64 DB_LivesInfo::last_cost_time_sec() const {
  // @@protoc_insertion_point(field_get:DB_LivesInfo.last_cost_time_sec)
  return last_cost_time_sec_;
}
 void DB_LivesInfo::set_last_cost_time_sec(::google::protobuf::int64 value) {
  set_has_last_cost_time_sec();
  last_cost_time_sec_ = value;
  // @@protoc_insertion_point(field_set:DB_LivesInfo.last_cost_time_sec)
}

// optional int32 lives_max = 3;
 bool DB_LivesInfo::has_lives_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_LivesInfo::set_has_lives_max() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_LivesInfo::clear_has_lives_max() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_LivesInfo::clear_lives_max() {
  lives_max_ = 0;
  clear_has_lives_max();
}
 ::google::protobuf::int32 DB_LivesInfo::lives_max() const {
  // @@protoc_insertion_point(field_get:DB_LivesInfo.lives_max)
  return lives_max_;
}
 void DB_LivesInfo::set_lives_max(::google::protobuf::int32 value) {
  set_has_lives_max();
  lives_max_ = value;
  // @@protoc_insertion_point(field_set:DB_LivesInfo.lives_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_UniverseInfo::kTotalLevelFieldNumber;
const int DB_UniverseInfo::kTopLevelFieldNumber;
const int DB_UniverseInfo::kSeedFieldNumber;
const int DB_UniverseInfo::kLvlStartSecFieldNumber;
const int DB_UniverseInfo::kUniverseSetFieldNumber;
const int DB_UniverseInfo::kNowTotalLevlFieldNumber;
const int DB_UniverseInfo::kCheckvalFirstFieldNumber;
const int DB_UniverseInfo::kCheckvalSecondFieldNumber;
const int DB_UniverseInfo::kPassvalFieldNumber;
const int DB_UniverseInfo::kLvlStockedItemFieldNumber;
const int DB_UniverseInfo::kEggLogicFieldNumber;
const int DB_UniverseInfo::kMobileSubmitSocresFieldNumber;
#endif  // !_MSC_VER

DB_UniverseInfo::DB_UniverseInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_UniverseInfo)
}

void DB_UniverseInfo::InitAsDefaultInstance() {
}

DB_UniverseInfo::DB_UniverseInfo(const DB_UniverseInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_UniverseInfo)
}

void DB_UniverseInfo::SharedCtor() {
  _cached_size_ = 0;
  total_level_ = 0;
  top_level_ = 0;
  seed_ = 0;
  lvl_start_sec_ = GOOGLE_LONGLONG(0);
  now_total_levl_ = 0;
  checkval_first_ = 0;
  checkval_second_ = 0;
  passval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_UniverseInfo::~DB_UniverseInfo() {
  // @@protoc_insertion_point(destructor:DB_UniverseInfo)
  SharedDtor();
}

void DB_UniverseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_UniverseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_UniverseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_UniverseInfo_descriptor_;
}

const DB_UniverseInfo& DB_UniverseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_UniverseInfo* DB_UniverseInfo::default_instance_ = NULL;

DB_UniverseInfo* DB_UniverseInfo::New(::google::protobuf::Arena* arena) const {
  DB_UniverseInfo* n = new DB_UniverseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_UniverseInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_UniverseInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(total_level_, now_total_levl_);
    ZR_(checkval_first_, checkval_second_);
  }
  passval_ = 0;

#undef ZR_HELPER_
#undef ZR_

  universe_set_.Clear();
  lvlstockeditem_.Clear();
  egg_logic_.Clear();
  mobile_submit_socres_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_UniverseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_UniverseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_level_)));
          set_has_total_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top_level;
        break;
      }

      // optional int32 top_level = 2;
      case 2: {
        if (tag == 16) {
         parse_top_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_level_)));
          set_has_top_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seed;
        break;
      }

      // optional int32 seed = 3;
      case 3: {
        if (tag == 24) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_universe_set;
        break;
      }

      // repeated .DB_Universe universe_set = 4;
      case 4: {
        if (tag == 34) {
         parse_universe_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_universe_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_universe_set;
        if (input->ExpectTag(40)) goto parse_lvl_start_sec;
        break;
      }

      // optional int64 lvl_start_sec = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_lvl_start_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lvl_start_sec_)));
          set_has_lvl_start_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_now_total_levl;
        break;
      }

      // optional int32 now_total_levl = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_now_total_levl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_total_levl_)));
          set_has_now_total_levl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_checkval_first;
        break;
      }

      // optional int32 checkval_first = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_checkval_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkval_first_)));
          set_has_checkval_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_checkval_second;
        break;
      }

      // optional int32 checkval_second = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_checkval_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkval_second_)));
          set_has_checkval_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_passval;
        break;
      }

      // optional int32 passval = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_passval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passval_)));
          set_has_passval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_lvlStockedItem;
        break;
      }

      // repeated int32 lvlStockedItem = 10;
      case 10: {
        if (tag == 80) {
         parse_lvlStockedItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_lvlstockeditem())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lvlstockeditem())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_lvlStockedItem;
        if (input->ExpectTag(88)) goto parse_egg_logic;
        break;
      }

      // repeated int32 egg_logic = 11;
      case 11: {
        if (tag == 88) {
         parse_egg_logic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_egg_logic())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_egg_logic())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_egg_logic;
        if (input->ExpectTag(96)) goto parse_mobile_submit_socres;
        break;
      }

      // repeated int32 mobile_submit_socres = 12;
      case 12: {
        if (tag == 96) {
         parse_mobile_submit_socres:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_mobile_submit_socres())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mobile_submit_socres())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mobile_submit_socres;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_UniverseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_UniverseInfo)
  return false;
#undef DO_
}

void DB_UniverseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_UniverseInfo)
  // optional int32 total_level = 1;
  if (has_total_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_level(), output);
  }

  // optional int32 top_level = 2;
  if (has_top_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top_level(), output);
  }

  // optional int32 seed = 3;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seed(), output);
  }

  // repeated .DB_Universe universe_set = 4;
  for (unsigned int i = 0, n = this->universe_set_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->universe_set(i), output);
  }

  // optional int64 lvl_start_sec = 5 [default = 0];
  if (has_lvl_start_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lvl_start_sec(), output);
  }

  // optional int32 now_total_levl = 6 [default = 0];
  if (has_now_total_levl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->now_total_levl(), output);
  }

  // optional int32 checkval_first = 7 [default = 0];
  if (has_checkval_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->checkval_first(), output);
  }

  // optional int32 checkval_second = 8 [default = 0];
  if (has_checkval_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->checkval_second(), output);
  }

  // optional int32 passval = 9 [default = 0];
  if (has_passval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->passval(), output);
  }

  // repeated int32 lvlStockedItem = 10;
  for (int i = 0; i < this->lvlstockeditem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->lvlstockeditem(i), output);
  }

  // repeated int32 egg_logic = 11;
  for (int i = 0; i < this->egg_logic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->egg_logic(i), output);
  }

  // repeated int32 mobile_submit_socres = 12;
  for (int i = 0; i < this->mobile_submit_socres_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->mobile_submit_socres(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_UniverseInfo)
}

::google::protobuf::uint8* DB_UniverseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_UniverseInfo)
  // optional int32 total_level = 1;
  if (has_total_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_level(), target);
  }

  // optional int32 top_level = 2;
  if (has_top_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top_level(), target);
  }

  // optional int32 seed = 3;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seed(), target);
  }

  // repeated .DB_Universe universe_set = 4;
  for (unsigned int i = 0, n = this->universe_set_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->universe_set(i), target);
  }

  // optional int64 lvl_start_sec = 5 [default = 0];
  if (has_lvl_start_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lvl_start_sec(), target);
  }

  // optional int32 now_total_levl = 6 [default = 0];
  if (has_now_total_levl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->now_total_levl(), target);
  }

  // optional int32 checkval_first = 7 [default = 0];
  if (has_checkval_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->checkval_first(), target);
  }

  // optional int32 checkval_second = 8 [default = 0];
  if (has_checkval_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->checkval_second(), target);
  }

  // optional int32 passval = 9 [default = 0];
  if (has_passval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->passval(), target);
  }

  // repeated int32 lvlStockedItem = 10;
  for (int i = 0; i < this->lvlstockeditem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->lvlstockeditem(i), target);
  }

  // repeated int32 egg_logic = 11;
  for (int i = 0; i < this->egg_logic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->egg_logic(i), target);
  }

  // repeated int32 mobile_submit_socres = 12;
  for (int i = 0; i < this->mobile_submit_socres_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->mobile_submit_socres(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_UniverseInfo)
  return target;
}

int DB_UniverseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 239) {
    // optional int32 total_level = 1;
    if (has_total_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_level());
    }

    // optional int32 top_level = 2;
    if (has_top_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_level());
    }

    // optional int32 seed = 3;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seed());
    }

    // optional int64 lvl_start_sec = 5 [default = 0];
    if (has_lvl_start_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lvl_start_sec());
    }

    // optional int32 now_total_levl = 6 [default = 0];
    if (has_now_total_levl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_total_levl());
    }

    // optional int32 checkval_first = 7 [default = 0];
    if (has_checkval_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkval_first());
    }

    // optional int32 checkval_second = 8 [default = 0];
    if (has_checkval_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkval_second());
    }

  }
  // optional int32 passval = 9 [default = 0];
  if (has_passval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->passval());
  }

  // repeated .DB_Universe universe_set = 4;
  total_size += 1 * this->universe_set_size();
  for (int i = 0; i < this->universe_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->universe_set(i));
  }

  // repeated int32 lvlStockedItem = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->lvlstockeditem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lvlstockeditem(i));
    }
    total_size += 1 * this->lvlstockeditem_size() + data_size;
  }

  // repeated int32 egg_logic = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->egg_logic_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->egg_logic(i));
    }
    total_size += 1 * this->egg_logic_size() + data_size;
  }

  // repeated int32 mobile_submit_socres = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->mobile_submit_socres_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mobile_submit_socres(i));
    }
    total_size += 1 * this->mobile_submit_socres_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_UniverseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_UniverseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_UniverseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_UniverseInfo::MergeFrom(const DB_UniverseInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  universe_set_.MergeFrom(from.universe_set_);
  lvlstockeditem_.MergeFrom(from.lvlstockeditem_);
  egg_logic_.MergeFrom(from.egg_logic_);
  mobile_submit_socres_.MergeFrom(from.mobile_submit_socres_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_level()) {
      set_total_level(from.total_level());
    }
    if (from.has_top_level()) {
      set_top_level(from.top_level());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_lvl_start_sec()) {
      set_lvl_start_sec(from.lvl_start_sec());
    }
    if (from.has_now_total_levl()) {
      set_now_total_levl(from.now_total_levl());
    }
    if (from.has_checkval_first()) {
      set_checkval_first(from.checkval_first());
    }
    if (from.has_checkval_second()) {
      set_checkval_second(from.checkval_second());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_passval()) {
      set_passval(from.passval());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_UniverseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_UniverseInfo::CopyFrom(const DB_UniverseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_UniverseInfo::IsInitialized() const {

  return true;
}

void DB_UniverseInfo::Swap(DB_UniverseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_UniverseInfo::InternalSwap(DB_UniverseInfo* other) {
  std::swap(total_level_, other->total_level_);
  std::swap(top_level_, other->top_level_);
  std::swap(seed_, other->seed_);
  std::swap(lvl_start_sec_, other->lvl_start_sec_);
  universe_set_.UnsafeArenaSwap(&other->universe_set_);
  std::swap(now_total_levl_, other->now_total_levl_);
  std::swap(checkval_first_, other->checkval_first_);
  std::swap(checkval_second_, other->checkval_second_);
  std::swap(passval_, other->passval_);
  lvlstockeditem_.UnsafeArenaSwap(&other->lvlstockeditem_);
  egg_logic_.UnsafeArenaSwap(&other->egg_logic_);
  mobile_submit_socres_.UnsafeArenaSwap(&other->mobile_submit_socres_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_UniverseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_UniverseInfo_descriptor_;
  metadata.reflection = DB_UniverseInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_UniverseInfo

// optional int32 total_level = 1;
 bool DB_UniverseInfo::has_total_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_UniverseInfo::set_has_total_level() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_UniverseInfo::clear_has_total_level() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_UniverseInfo::clear_total_level() {
  total_level_ = 0;
  clear_has_total_level();
}
 ::google::protobuf::int32 DB_UniverseInfo::total_level() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.total_level)
  return total_level_;
}
 void DB_UniverseInfo::set_total_level(::google::protobuf::int32 value) {
  set_has_total_level();
  total_level_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.total_level)
}

// optional int32 top_level = 2;
 bool DB_UniverseInfo::has_top_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_UniverseInfo::set_has_top_level() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_UniverseInfo::clear_has_top_level() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_UniverseInfo::clear_top_level() {
  top_level_ = 0;
  clear_has_top_level();
}
 ::google::protobuf::int32 DB_UniverseInfo::top_level() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.top_level)
  return top_level_;
}
 void DB_UniverseInfo::set_top_level(::google::protobuf::int32 value) {
  set_has_top_level();
  top_level_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.top_level)
}

// optional int32 seed = 3;
 bool DB_UniverseInfo::has_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_UniverseInfo::set_has_seed() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_UniverseInfo::clear_has_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_UniverseInfo::clear_seed() {
  seed_ = 0;
  clear_has_seed();
}
 ::google::protobuf::int32 DB_UniverseInfo::seed() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.seed)
  return seed_;
}
 void DB_UniverseInfo::set_seed(::google::protobuf::int32 value) {
  set_has_seed();
  seed_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.seed)
}

// optional int64 lvl_start_sec = 5 [default = 0];
 bool DB_UniverseInfo::has_lvl_start_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_UniverseInfo::set_has_lvl_start_sec() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_UniverseInfo::clear_has_lvl_start_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_UniverseInfo::clear_lvl_start_sec() {
  lvl_start_sec_ = GOOGLE_LONGLONG(0);
  clear_has_lvl_start_sec();
}
 ::google::protobuf::int64 DB_UniverseInfo::lvl_start_sec() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.lvl_start_sec)
  return lvl_start_sec_;
}
 void DB_UniverseInfo::set_lvl_start_sec(::google::protobuf::int64 value) {
  set_has_lvl_start_sec();
  lvl_start_sec_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.lvl_start_sec)
}

// repeated .DB_Universe universe_set = 4;
 int DB_UniverseInfo::universe_set_size() const {
  return universe_set_.size();
}
 void DB_UniverseInfo::clear_universe_set() {
  universe_set_.Clear();
}
 const ::DB_Universe& DB_UniverseInfo::universe_set(int index) const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.universe_set)
  return universe_set_.Get(index);
}
 ::DB_Universe* DB_UniverseInfo::mutable_universe_set(int index) {
  // @@protoc_insertion_point(field_mutable:DB_UniverseInfo.universe_set)
  return universe_set_.Mutable(index);
}
 ::DB_Universe* DB_UniverseInfo::add_universe_set() {
  // @@protoc_insertion_point(field_add:DB_UniverseInfo.universe_set)
  return universe_set_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_Universe >&
DB_UniverseInfo::universe_set() const {
  // @@protoc_insertion_point(field_list:DB_UniverseInfo.universe_set)
  return universe_set_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_Universe >*
DB_UniverseInfo::mutable_universe_set() {
  // @@protoc_insertion_point(field_mutable_list:DB_UniverseInfo.universe_set)
  return &universe_set_;
}

// optional int32 now_total_levl = 6 [default = 0];
 bool DB_UniverseInfo::has_now_total_levl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_UniverseInfo::set_has_now_total_levl() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_UniverseInfo::clear_has_now_total_levl() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_UniverseInfo::clear_now_total_levl() {
  now_total_levl_ = 0;
  clear_has_now_total_levl();
}
 ::google::protobuf::int32 DB_UniverseInfo::now_total_levl() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.now_total_levl)
  return now_total_levl_;
}
 void DB_UniverseInfo::set_now_total_levl(::google::protobuf::int32 value) {
  set_has_now_total_levl();
  now_total_levl_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.now_total_levl)
}

// optional int32 checkval_first = 7 [default = 0];
 bool DB_UniverseInfo::has_checkval_first() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void DB_UniverseInfo::set_has_checkval_first() {
  _has_bits_[0] |= 0x00000040u;
}
 void DB_UniverseInfo::clear_has_checkval_first() {
  _has_bits_[0] &= ~0x00000040u;
}
 void DB_UniverseInfo::clear_checkval_first() {
  checkval_first_ = 0;
  clear_has_checkval_first();
}
 ::google::protobuf::int32 DB_UniverseInfo::checkval_first() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.checkval_first)
  return checkval_first_;
}
 void DB_UniverseInfo::set_checkval_first(::google::protobuf::int32 value) {
  set_has_checkval_first();
  checkval_first_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.checkval_first)
}

// optional int32 checkval_second = 8 [default = 0];
 bool DB_UniverseInfo::has_checkval_second() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void DB_UniverseInfo::set_has_checkval_second() {
  _has_bits_[0] |= 0x00000080u;
}
 void DB_UniverseInfo::clear_has_checkval_second() {
  _has_bits_[0] &= ~0x00000080u;
}
 void DB_UniverseInfo::clear_checkval_second() {
  checkval_second_ = 0;
  clear_has_checkval_second();
}
 ::google::protobuf::int32 DB_UniverseInfo::checkval_second() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.checkval_second)
  return checkval_second_;
}
 void DB_UniverseInfo::set_checkval_second(::google::protobuf::int32 value) {
  set_has_checkval_second();
  checkval_second_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.checkval_second)
}

// optional int32 passval = 9 [default = 0];
 bool DB_UniverseInfo::has_passval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void DB_UniverseInfo::set_has_passval() {
  _has_bits_[0] |= 0x00000100u;
}
 void DB_UniverseInfo::clear_has_passval() {
  _has_bits_[0] &= ~0x00000100u;
}
 void DB_UniverseInfo::clear_passval() {
  passval_ = 0;
  clear_has_passval();
}
 ::google::protobuf::int32 DB_UniverseInfo::passval() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.passval)
  return passval_;
}
 void DB_UniverseInfo::set_passval(::google::protobuf::int32 value) {
  set_has_passval();
  passval_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.passval)
}

// repeated int32 lvlStockedItem = 10;
 int DB_UniverseInfo::lvlstockeditem_size() const {
  return lvlstockeditem_.size();
}
 void DB_UniverseInfo::clear_lvlstockeditem() {
  lvlstockeditem_.Clear();
}
 ::google::protobuf::int32 DB_UniverseInfo::lvlstockeditem(int index) const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.lvlStockedItem)
  return lvlstockeditem_.Get(index);
}
 void DB_UniverseInfo::set_lvlstockeditem(int index, ::google::protobuf::int32 value) {
  lvlstockeditem_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.lvlStockedItem)
}
 void DB_UniverseInfo::add_lvlstockeditem(::google::protobuf::int32 value) {
  lvlstockeditem_.Add(value);
  // @@protoc_insertion_point(field_add:DB_UniverseInfo.lvlStockedItem)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_UniverseInfo::lvlstockeditem() const {
  // @@protoc_insertion_point(field_list:DB_UniverseInfo.lvlStockedItem)
  return lvlstockeditem_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_UniverseInfo::mutable_lvlstockeditem() {
  // @@protoc_insertion_point(field_mutable_list:DB_UniverseInfo.lvlStockedItem)
  return &lvlstockeditem_;
}

// repeated int32 egg_logic = 11;
 int DB_UniverseInfo::egg_logic_size() const {
  return egg_logic_.size();
}
 void DB_UniverseInfo::clear_egg_logic() {
  egg_logic_.Clear();
}
 ::google::protobuf::int32 DB_UniverseInfo::egg_logic(int index) const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.egg_logic)
  return egg_logic_.Get(index);
}
 void DB_UniverseInfo::set_egg_logic(int index, ::google::protobuf::int32 value) {
  egg_logic_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.egg_logic)
}
 void DB_UniverseInfo::add_egg_logic(::google::protobuf::int32 value) {
  egg_logic_.Add(value);
  // @@protoc_insertion_point(field_add:DB_UniverseInfo.egg_logic)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_UniverseInfo::egg_logic() const {
  // @@protoc_insertion_point(field_list:DB_UniverseInfo.egg_logic)
  return egg_logic_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_UniverseInfo::mutable_egg_logic() {
  // @@protoc_insertion_point(field_mutable_list:DB_UniverseInfo.egg_logic)
  return &egg_logic_;
}

// repeated int32 mobile_submit_socres = 12;
 int DB_UniverseInfo::mobile_submit_socres_size() const {
  return mobile_submit_socres_.size();
}
 void DB_UniverseInfo::clear_mobile_submit_socres() {
  mobile_submit_socres_.Clear();
}
 ::google::protobuf::int32 DB_UniverseInfo::mobile_submit_socres(int index) const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.mobile_submit_socres)
  return mobile_submit_socres_.Get(index);
}
 void DB_UniverseInfo::set_mobile_submit_socres(int index, ::google::protobuf::int32 value) {
  mobile_submit_socres_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.mobile_submit_socres)
}
 void DB_UniverseInfo::add_mobile_submit_socres(::google::protobuf::int32 value) {
  mobile_submit_socres_.Add(value);
  // @@protoc_insertion_point(field_add:DB_UniverseInfo.mobile_submit_socres)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_UniverseInfo::mobile_submit_socres() const {
  // @@protoc_insertion_point(field_list:DB_UniverseInfo.mobile_submit_socres)
  return mobile_submit_socres_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_UniverseInfo::mutable_mobile_submit_socres() {
  // @@protoc_insertion_point(field_mutable_list:DB_UniverseInfo.mobile_submit_socres)
  return &mobile_submit_socres_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_StrKeyProperties::kKeyFieldNumber;
const int DB_StrKeyProperties::kBoolValueFieldNumber;
const int DB_StrKeyProperties::kIntValueFieldNumber;
const int DB_StrKeyProperties::kStrValueFieldNumber;
#endif  // !_MSC_VER

DB_StrKeyProperties::DB_StrKeyProperties()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_StrKeyProperties)
}

void DB_StrKeyProperties::InitAsDefaultInstance() {
}

DB_StrKeyProperties::DB_StrKeyProperties(const DB_StrKeyProperties& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_StrKeyProperties)
}

void DB_StrKeyProperties::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bool_value_ = false;
  int_value_ = 0;
  str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_StrKeyProperties::~DB_StrKeyProperties() {
  // @@protoc_insertion_point(destructor:DB_StrKeyProperties)
  SharedDtor();
}

void DB_StrKeyProperties::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DB_StrKeyProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_StrKeyProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_StrKeyProperties_descriptor_;
}

const DB_StrKeyProperties& DB_StrKeyProperties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_StrKeyProperties* DB_StrKeyProperties::default_instance_ = NULL;

DB_StrKeyProperties* DB_StrKeyProperties::New(::google::protobuf::Arena* arena) const {
  DB_StrKeyProperties* n = new DB_StrKeyProperties;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_StrKeyProperties::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_StrKeyProperties*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(bool_value_, int_value_);
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_str_value()) {
      str_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_StrKeyProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_StrKeyProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_StrKeyProperties.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bool_value;
        break;
      }

      // optional bool bool_value = 2;
      case 2: {
        if (tag == 16) {
         parse_bool_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_int_value;
        break;
      }

      // optional int32 int_value = 3;
      case 3: {
        if (tag == 24) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_str_value;
        break;
      }

      // optional string str_value = 4;
      case 4: {
        if (tag == 34) {
         parse_str_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_value().data(), this->str_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_StrKeyProperties.str_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_StrKeyProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_StrKeyProperties)
  return false;
#undef DO_
}

void DB_StrKeyProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_StrKeyProperties)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_StrKeyProperties.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional bool bool_value = 2;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bool_value(), output);
  }

  // optional int32 int_value = 3;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int_value(), output);
  }

  // optional string str_value = 4;
  if (has_str_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_StrKeyProperties.str_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->str_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_StrKeyProperties)
}

::google::protobuf::uint8* DB_StrKeyProperties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_StrKeyProperties)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_StrKeyProperties.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bool bool_value = 2;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bool_value(), target);
  }

  // optional int32 int_value = 3;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int_value(), target);
  }

  // optional string str_value = 4;
  if (has_str_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_StrKeyProperties.str_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_StrKeyProperties)
  return target;
}

int DB_StrKeyProperties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bool bool_value = 2;
    if (has_bool_value()) {
      total_size += 1 + 1;
    }

    // optional int32 int_value = 3;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

    // optional string str_value = 4;
    if (has_str_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_StrKeyProperties::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_StrKeyProperties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_StrKeyProperties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_StrKeyProperties::MergeFrom(const DB_StrKeyProperties& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_bool_value()) {
      set_bool_value(from.bool_value());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_str_value()) {
      set_has_str_value();
      str_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_StrKeyProperties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_StrKeyProperties::CopyFrom(const DB_StrKeyProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_StrKeyProperties::IsInitialized() const {

  return true;
}

void DB_StrKeyProperties::Swap(DB_StrKeyProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_StrKeyProperties::InternalSwap(DB_StrKeyProperties* other) {
  key_.Swap(&other->key_);
  std::swap(bool_value_, other->bool_value_);
  std::swap(int_value_, other->int_value_);
  str_value_.Swap(&other->str_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_StrKeyProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_StrKeyProperties_descriptor_;
  metadata.reflection = DB_StrKeyProperties_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_StrKeyProperties

// optional string key = 1;
 bool DB_StrKeyProperties::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_StrKeyProperties::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_StrKeyProperties::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_StrKeyProperties::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& DB_StrKeyProperties::key() const {
  // @@protoc_insertion_point(field_get:DB_StrKeyProperties.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_StrKeyProperties::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_StrKeyProperties.key)
}
 void DB_StrKeyProperties::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_StrKeyProperties.key)
}
 void DB_StrKeyProperties::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_StrKeyProperties.key)
}
 ::std::string* DB_StrKeyProperties::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:DB_StrKeyProperties.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_StrKeyProperties::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_StrKeyProperties::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:DB_StrKeyProperties.key)
}

// optional bool bool_value = 2;
 bool DB_StrKeyProperties::has_bool_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_StrKeyProperties::set_has_bool_value() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_StrKeyProperties::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_StrKeyProperties::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
 bool DB_StrKeyProperties::bool_value() const {
  // @@protoc_insertion_point(field_get:DB_StrKeyProperties.bool_value)
  return bool_value_;
}
 void DB_StrKeyProperties::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:DB_StrKeyProperties.bool_value)
}

// optional int32 int_value = 3;
 bool DB_StrKeyProperties::has_int_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_StrKeyProperties::set_has_int_value() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_StrKeyProperties::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_StrKeyProperties::clear_int_value() {
  int_value_ = 0;
  clear_has_int_value();
}
 ::google::protobuf::int32 DB_StrKeyProperties::int_value() const {
  // @@protoc_insertion_point(field_get:DB_StrKeyProperties.int_value)
  return int_value_;
}
 void DB_StrKeyProperties::set_int_value(::google::protobuf::int32 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:DB_StrKeyProperties.int_value)
}

// optional string str_value = 4;
 bool DB_StrKeyProperties::has_str_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_StrKeyProperties::set_has_str_value() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_StrKeyProperties::clear_has_str_value() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_StrKeyProperties::clear_str_value() {
  str_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_value();
}
 const ::std::string& DB_StrKeyProperties::str_value() const {
  // @@protoc_insertion_point(field_get:DB_StrKeyProperties.str_value)
  return str_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_StrKeyProperties::set_str_value(const ::std::string& value) {
  set_has_str_value();
  str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_StrKeyProperties.str_value)
}
 void DB_StrKeyProperties::set_str_value(const char* value) {
  set_has_str_value();
  str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_StrKeyProperties.str_value)
}
 void DB_StrKeyProperties::set_str_value(const char* value, size_t size) {
  set_has_str_value();
  str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_StrKeyProperties.str_value)
}
 ::std::string* DB_StrKeyProperties::mutable_str_value() {
  set_has_str_value();
  // @@protoc_insertion_point(field_mutable:DB_StrKeyProperties.str_value)
  return str_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_StrKeyProperties::release_str_value() {
  clear_has_str_value();
  return str_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_StrKeyProperties::set_allocated_str_value(::std::string* str_value) {
  if (str_value != NULL) {
    set_has_str_value();
  } else {
    clear_has_str_value();
  }
  str_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_value);
  // @@protoc_insertion_point(field_set_allocated:DB_StrKeyProperties.str_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_CandyProperties::kAttsFieldNumber;
#endif  // !_MSC_VER

DB_CandyProperties::DB_CandyProperties()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_CandyProperties)
}

void DB_CandyProperties::InitAsDefaultInstance() {
}

DB_CandyProperties::DB_CandyProperties(const DB_CandyProperties& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_CandyProperties)
}

void DB_CandyProperties::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_CandyProperties::~DB_CandyProperties() {
  // @@protoc_insertion_point(destructor:DB_CandyProperties)
  SharedDtor();
}

void DB_CandyProperties::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_CandyProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_CandyProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_CandyProperties_descriptor_;
}

const DB_CandyProperties& DB_CandyProperties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_CandyProperties* DB_CandyProperties::default_instance_ = NULL;

DB_CandyProperties* DB_CandyProperties::New(::google::protobuf::Arena* arena) const {
  DB_CandyProperties* n = new DB_CandyProperties;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_CandyProperties::Clear() {
  atts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_CandyProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_CandyProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_StrKeyProperties atts = 1;
      case 1: {
        if (tag == 10) {
         parse_atts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_atts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_CandyProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_CandyProperties)
  return false;
#undef DO_
}

void DB_CandyProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_CandyProperties)
  // repeated .DB_StrKeyProperties atts = 1;
  for (unsigned int i = 0, n = this->atts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->atts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_CandyProperties)
}

::google::protobuf::uint8* DB_CandyProperties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_CandyProperties)
  // repeated .DB_StrKeyProperties atts = 1;
  for (unsigned int i = 0, n = this->atts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->atts(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_CandyProperties)
  return target;
}

int DB_CandyProperties::ByteSize() const {
  int total_size = 0;

  // repeated .DB_StrKeyProperties atts = 1;
  total_size += 1 * this->atts_size();
  for (int i = 0; i < this->atts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atts(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_CandyProperties::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_CandyProperties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_CandyProperties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_CandyProperties::MergeFrom(const DB_CandyProperties& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  atts_.MergeFrom(from.atts_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_CandyProperties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CandyProperties::CopyFrom(const DB_CandyProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CandyProperties::IsInitialized() const {

  return true;
}

void DB_CandyProperties::Swap(DB_CandyProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_CandyProperties::InternalSwap(DB_CandyProperties* other) {
  atts_.UnsafeArenaSwap(&other->atts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_CandyProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_CandyProperties_descriptor_;
  metadata.reflection = DB_CandyProperties_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_CandyProperties

// repeated .DB_StrKeyProperties atts = 1;
 int DB_CandyProperties::atts_size() const {
  return atts_.size();
}
 void DB_CandyProperties::clear_atts() {
  atts_.Clear();
}
 const ::DB_StrKeyProperties& DB_CandyProperties::atts(int index) const {
  // @@protoc_insertion_point(field_get:DB_CandyProperties.atts)
  return atts_.Get(index);
}
 ::DB_StrKeyProperties* DB_CandyProperties::mutable_atts(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CandyProperties.atts)
  return atts_.Mutable(index);
}
 ::DB_StrKeyProperties* DB_CandyProperties::add_atts() {
  // @@protoc_insertion_point(field_add:DB_CandyProperties.atts)
  return atts_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties >&
DB_CandyProperties::atts() const {
  // @@protoc_insertion_point(field_list:DB_CandyProperties.atts)
  return atts_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties >*
DB_CandyProperties::mutable_atts() {
  // @@protoc_insertion_point(field_mutable_list:DB_CandyProperties.atts)
  return &atts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_Events::kAttsFieldNumber;
#endif  // !_MSC_VER

DB_Events::DB_Events()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_Events)
}

void DB_Events::InitAsDefaultInstance() {
}

DB_Events::DB_Events(const DB_Events& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_Events)
}

void DB_Events::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Events::~DB_Events() {
  // @@protoc_insertion_point(destructor:DB_Events)
  SharedDtor();
}

void DB_Events::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Events_descriptor_;
}

const DB_Events& DB_Events::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_Events* DB_Events::default_instance_ = NULL;

DB_Events* DB_Events::New(::google::protobuf::Arena* arena) const {
  DB_Events* n = new DB_Events;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_Events::Clear() {
  atts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_Events)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB_StrKeyProperties atts = 1;
      case 1: {
        if (tag == 10) {
         parse_atts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_atts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_Events)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_Events)
  return false;
#undef DO_
}

void DB_Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_Events)
  // repeated .DB_StrKeyProperties atts = 1;
  for (unsigned int i = 0, n = this->atts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->atts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_Events)
}

::google::protobuf::uint8* DB_Events::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_Events)
  // repeated .DB_StrKeyProperties atts = 1;
  for (unsigned int i = 0, n = this->atts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->atts(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_Events)
  return target;
}

int DB_Events::ByteSize() const {
  int total_size = 0;

  // repeated .DB_StrKeyProperties atts = 1;
  total_size += 1 * this->atts_size();
  for (int i = 0; i < this->atts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atts(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Events::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_Events* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Events*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Events::MergeFrom(const DB_Events& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  atts_.MergeFrom(from.atts_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_Events::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Events::CopyFrom(const DB_Events& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Events::IsInitialized() const {

  return true;
}

void DB_Events::Swap(DB_Events* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_Events::InternalSwap(DB_Events* other) {
  atts_.UnsafeArenaSwap(&other->atts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Events_descriptor_;
  metadata.reflection = DB_Events_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_Events

// repeated .DB_StrKeyProperties atts = 1;
 int DB_Events::atts_size() const {
  return atts_.size();
}
 void DB_Events::clear_atts() {
  atts_.Clear();
}
 const ::DB_StrKeyProperties& DB_Events::atts(int index) const {
  // @@protoc_insertion_point(field_get:DB_Events.atts)
  return atts_.Get(index);
}
 ::DB_StrKeyProperties* DB_Events::mutable_atts(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Events.atts)
  return atts_.Mutable(index);
}
 ::DB_StrKeyProperties* DB_Events::add_atts() {
  // @@protoc_insertion_point(field_add:DB_Events.atts)
  return atts_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties >&
DB_Events::atts() const {
  // @@protoc_insertion_point(field_list:DB_Events.atts)
  return atts_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties >*
DB_Events::mutable_atts() {
  // @@protoc_insertion_point(field_mutable_list:DB_Events.atts)
  return &atts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_Singed::kPosFieldNumber;
const int DB_Singed::kDataFieldNumber;
#endif  // !_MSC_VER

DB_Singed::DB_Singed()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_Singed)
}

void DB_Singed::InitAsDefaultInstance() {
}

DB_Singed::DB_Singed(const DB_Singed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_Singed)
}

void DB_Singed::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Singed::~DB_Singed() {
  // @@protoc_insertion_point(destructor:DB_Singed)
  SharedDtor();
}

void DB_Singed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_Singed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Singed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Singed_descriptor_;
}

const DB_Singed& DB_Singed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_Singed* DB_Singed::default_instance_ = NULL;

DB_Singed* DB_Singed::New(::google::protobuf::Arena* arena) const {
  DB_Singed* n = new DB_Singed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_Singed::Clear() {
  pos_ = 0;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_Singed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_Singed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // repeated int32 data = 2;
      case 2: {
        if (tag == 16) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_data())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_Singed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_Singed)
  return false;
#undef DO_
}

void DB_Singed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_Singed)
  // optional int32 pos = 1 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // repeated int32 data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_Singed)
}

::google::protobuf::uint8* DB_Singed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_Singed)
  // optional int32 pos = 1 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // repeated int32 data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_Singed)
  return target;
}

int DB_Singed::ByteSize() const {
  int total_size = 0;

  // optional int32 pos = 1 [default = 0];
  if (has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  // repeated int32 data = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Singed::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_Singed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Singed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Singed::MergeFrom(const DB_Singed& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_Singed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Singed::CopyFrom(const DB_Singed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Singed::IsInitialized() const {

  return true;
}

void DB_Singed::Swap(DB_Singed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_Singed::InternalSwap(DB_Singed* other) {
  std::swap(pos_, other->pos_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_Singed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Singed_descriptor_;
  metadata.reflection = DB_Singed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_Singed

// optional int32 pos = 1 [default = 0];
 bool DB_Singed::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_Singed::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_Singed::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_Singed::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
 ::google::protobuf::int32 DB_Singed::pos() const {
  // @@protoc_insertion_point(field_get:DB_Singed.pos)
  return pos_;
}
 void DB_Singed::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:DB_Singed.pos)
}

// repeated int32 data = 2;
 int DB_Singed::data_size() const {
  return data_.size();
}
 void DB_Singed::clear_data() {
  data_.Clear();
}
 ::google::protobuf::int32 DB_Singed::data(int index) const {
  // @@protoc_insertion_point(field_get:DB_Singed.data)
  return data_.Get(index);
}
 void DB_Singed::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_Singed.data)
}
 void DB_Singed::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:DB_Singed.data)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_Singed::data() const {
  // @@protoc_insertion_point(field_list:DB_Singed.data)
  return data_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_Singed::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:DB_Singed.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_Yelldmd::kLastRewordTimeSecFieldNumber;
const int DB_Yelldmd::kNewerGiftFieldNumber;
#endif  // !_MSC_VER

DB_Yelldmd::DB_Yelldmd()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_Yelldmd)
}

void DB_Yelldmd::InitAsDefaultInstance() {
}

DB_Yelldmd::DB_Yelldmd(const DB_Yelldmd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_Yelldmd)
}

void DB_Yelldmd::SharedCtor() {
  _cached_size_ = 0;
  last_reword_time_sec_ = GOOGLE_LONGLONG(0);
  newer_gift_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Yelldmd::~DB_Yelldmd() {
  // @@protoc_insertion_point(destructor:DB_Yelldmd)
  SharedDtor();
}

void DB_Yelldmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_Yelldmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Yelldmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Yelldmd_descriptor_;
}

const DB_Yelldmd& DB_Yelldmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_Yelldmd* DB_Yelldmd::default_instance_ = NULL;

DB_Yelldmd* DB_Yelldmd::New(::google::protobuf::Arena* arena) const {
  DB_Yelldmd* n = new DB_Yelldmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_Yelldmd::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_Yelldmd*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(last_reword_time_sec_, newer_gift_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_Yelldmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_Yelldmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_reword_time_sec = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_reword_time_sec_)));
          set_has_last_reword_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_newer_gift;
        break;
      }

      // optional bool newer_gift = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_newer_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newer_gift_)));
          set_has_newer_gift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_Yelldmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_Yelldmd)
  return false;
#undef DO_
}

void DB_Yelldmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_Yelldmd)
  // optional int64 last_reword_time_sec = 1 [default = 0];
  if (has_last_reword_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_reword_time_sec(), output);
  }

  // optional bool newer_gift = 2 [default = false];
  if (has_newer_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->newer_gift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_Yelldmd)
}

::google::protobuf::uint8* DB_Yelldmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_Yelldmd)
  // optional int64 last_reword_time_sec = 1 [default = 0];
  if (has_last_reword_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_reword_time_sec(), target);
  }

  // optional bool newer_gift = 2 [default = false];
  if (has_newer_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->newer_gift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_Yelldmd)
  return target;
}

int DB_Yelldmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional int64 last_reword_time_sec = 1 [default = 0];
    if (has_last_reword_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_reword_time_sec());
    }

    // optional bool newer_gift = 2 [default = false];
    if (has_newer_gift()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Yelldmd::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_Yelldmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Yelldmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Yelldmd::MergeFrom(const DB_Yelldmd& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_reword_time_sec()) {
      set_last_reword_time_sec(from.last_reword_time_sec());
    }
    if (from.has_newer_gift()) {
      set_newer_gift(from.newer_gift());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_Yelldmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Yelldmd::CopyFrom(const DB_Yelldmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Yelldmd::IsInitialized() const {

  return true;
}

void DB_Yelldmd::Swap(DB_Yelldmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_Yelldmd::InternalSwap(DB_Yelldmd* other) {
  std::swap(last_reword_time_sec_, other->last_reword_time_sec_);
  std::swap(newer_gift_, other->newer_gift_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_Yelldmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Yelldmd_descriptor_;
  metadata.reflection = DB_Yelldmd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_Yelldmd

// optional int64 last_reword_time_sec = 1 [default = 0];
 bool DB_Yelldmd::has_last_reword_time_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_Yelldmd::set_has_last_reword_time_sec() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_Yelldmd::clear_has_last_reword_time_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_Yelldmd::clear_last_reword_time_sec() {
  last_reword_time_sec_ = GOOGLE_LONGLONG(0);
  clear_has_last_reword_time_sec();
}
 ::google::protobuf::int64 DB_Yelldmd::last_reword_time_sec() const {
  // @@protoc_insertion_point(field_get:DB_Yelldmd.last_reword_time_sec)
  return last_reword_time_sec_;
}
 void DB_Yelldmd::set_last_reword_time_sec(::google::protobuf::int64 value) {
  set_has_last_reword_time_sec();
  last_reword_time_sec_ = value;
  // @@protoc_insertion_point(field_set:DB_Yelldmd.last_reword_time_sec)
}

// optional bool newer_gift = 2 [default = false];
 bool DB_Yelldmd::has_newer_gift() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_Yelldmd::set_has_newer_gift() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_Yelldmd::clear_has_newer_gift() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_Yelldmd::clear_newer_gift() {
  newer_gift_ = false;
  clear_has_newer_gift();
}
 bool DB_Yelldmd::newer_gift() const {
  // @@protoc_insertion_point(field_get:DB_Yelldmd.newer_gift)
  return newer_gift_;
}
 void DB_Yelldmd::set_newer_gift(bool value) {
  set_has_newer_gift();
  newer_gift_ = value;
  // @@protoc_insertion_point(field_set:DB_Yelldmd.newer_gift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_SignHistory::kMonthFieldNumber;
const int DB_SignHistory::kDaysFieldNumber;
const int DB_SignHistory::kRewardCacheFieldNumber;
const int DB_SignHistory::kLastRewordTimeSecFieldNumber;
#endif  // !_MSC_VER

DB_SignHistory::DB_SignHistory()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_SignHistory)
}

void DB_SignHistory::InitAsDefaultInstance() {
  reward_cache_ = const_cast< ::DB_BitCache*>(&::DB_BitCache::default_instance());
}

DB_SignHistory::DB_SignHistory(const DB_SignHistory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_SignHistory)
}

void DB_SignHistory::SharedCtor() {
  _cached_size_ = 0;
  month_ = 0;
  reward_cache_ = NULL;
  last_reword_time_sec_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_SignHistory::~DB_SignHistory() {
  // @@protoc_insertion_point(destructor:DB_SignHistory)
  SharedDtor();
}

void DB_SignHistory::SharedDtor() {
  if (this != default_instance_) {
    delete reward_cache_;
  }
}

void DB_SignHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_SignHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_SignHistory_descriptor_;
}

const DB_SignHistory& DB_SignHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_SignHistory* DB_SignHistory::default_instance_ = NULL;

DB_SignHistory* DB_SignHistory::New(::google::protobuf::Arena* arena) const {
  DB_SignHistory* n = new DB_SignHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_SignHistory::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_SignHistory*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(last_reword_time_sec_, month_);
    if (has_reward_cache()) {
      if (reward_cache_ != NULL) reward_cache_->::DB_BitCache::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  days_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_SignHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_SignHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 month = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_days;
        break;
      }

      // repeated int32 days = 2;
      case 2: {
        if (tag == 16) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_days())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_days())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_days;
        if (input->ExpectTag(26)) goto parse_reward_cache;
        break;
      }

      // optional .DB_BitCache reward_cache = 3;
      case 3: {
        if (tag == 26) {
         parse_reward_cache:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward_cache()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_reword_time_sec;
        break;
      }

      // optional int64 last_reword_time_sec = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_last_reword_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_reword_time_sec_)));
          set_has_last_reword_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_SignHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_SignHistory)
  return false;
#undef DO_
}

void DB_SignHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_SignHistory)
  // optional int32 month = 1 [default = 0];
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->month(), output);
  }

  // repeated int32 days = 2;
  for (int i = 0; i < this->days_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->days(i), output);
  }

  // optional .DB_BitCache reward_cache = 3;
  if (has_reward_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->reward_cache_, output);
  }

  // optional int64 last_reword_time_sec = 4 [default = 0];
  if (has_last_reword_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_reword_time_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_SignHistory)
}

::google::protobuf::uint8* DB_SignHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_SignHistory)
  // optional int32 month = 1 [default = 0];
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->month(), target);
  }

  // repeated int32 days = 2;
  for (int i = 0; i < this->days_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->days(i), target);
  }

  // optional .DB_BitCache reward_cache = 3;
  if (has_reward_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->reward_cache_, target);
  }

  // optional int64 last_reword_time_sec = 4 [default = 0];
  if (has_last_reword_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->last_reword_time_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_SignHistory)
  return target;
}

int DB_SignHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 13) {
    // optional int32 month = 1 [default = 0];
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional .DB_BitCache reward_cache = 3;
    if (has_reward_cache()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reward_cache_);
    }

    // optional int64 last_reword_time_sec = 4 [default = 0];
    if (has_last_reword_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_reword_time_sec());
    }

  }
  // repeated int32 days = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->days_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->days(i));
    }
    total_size += 1 * this->days_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_SignHistory::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_SignHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_SignHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_SignHistory::MergeFrom(const DB_SignHistory& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  days_.MergeFrom(from.days_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_reward_cache()) {
      mutable_reward_cache()->::DB_BitCache::MergeFrom(from.reward_cache());
    }
    if (from.has_last_reword_time_sec()) {
      set_last_reword_time_sec(from.last_reword_time_sec());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_SignHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_SignHistory::CopyFrom(const DB_SignHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_SignHistory::IsInitialized() const {

  return true;
}

void DB_SignHistory::Swap(DB_SignHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_SignHistory::InternalSwap(DB_SignHistory* other) {
  std::swap(month_, other->month_);
  days_.UnsafeArenaSwap(&other->days_);
  std::swap(reward_cache_, other->reward_cache_);
  std::swap(last_reword_time_sec_, other->last_reword_time_sec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_SignHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_SignHistory_descriptor_;
  metadata.reflection = DB_SignHistory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_SignHistory

// optional int32 month = 1 [default = 0];
 bool DB_SignHistory::has_month() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_SignHistory::set_has_month() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_SignHistory::clear_has_month() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_SignHistory::clear_month() {
  month_ = 0;
  clear_has_month();
}
 ::google::protobuf::int32 DB_SignHistory::month() const {
  // @@protoc_insertion_point(field_get:DB_SignHistory.month)
  return month_;
}
 void DB_SignHistory::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:DB_SignHistory.month)
}

// repeated int32 days = 2;
 int DB_SignHistory::days_size() const {
  return days_.size();
}
 void DB_SignHistory::clear_days() {
  days_.Clear();
}
 ::google::protobuf::int32 DB_SignHistory::days(int index) const {
  // @@protoc_insertion_point(field_get:DB_SignHistory.days)
  return days_.Get(index);
}
 void DB_SignHistory::set_days(int index, ::google::protobuf::int32 value) {
  days_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_SignHistory.days)
}
 void DB_SignHistory::add_days(::google::protobuf::int32 value) {
  days_.Add(value);
  // @@protoc_insertion_point(field_add:DB_SignHistory.days)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_SignHistory::days() const {
  // @@protoc_insertion_point(field_list:DB_SignHistory.days)
  return days_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_SignHistory::mutable_days() {
  // @@protoc_insertion_point(field_mutable_list:DB_SignHistory.days)
  return &days_;
}

// optional .DB_BitCache reward_cache = 3;
 bool DB_SignHistory::has_reward_cache() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_SignHistory::set_has_reward_cache() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_SignHistory::clear_has_reward_cache() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_SignHistory::clear_reward_cache() {
  if (reward_cache_ != NULL) reward_cache_->::DB_BitCache::Clear();
  clear_has_reward_cache();
}
 const ::DB_BitCache& DB_SignHistory::reward_cache() const {
  // @@protoc_insertion_point(field_get:DB_SignHistory.reward_cache)
  return reward_cache_ != NULL ? *reward_cache_ : *default_instance_->reward_cache_;
}
 ::DB_BitCache* DB_SignHistory::mutable_reward_cache() {
  set_has_reward_cache();
  if (reward_cache_ == NULL) {
    reward_cache_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_SignHistory.reward_cache)
  return reward_cache_;
}
 ::DB_BitCache* DB_SignHistory::release_reward_cache() {
  clear_has_reward_cache();
  ::DB_BitCache* temp = reward_cache_;
  reward_cache_ = NULL;
  return temp;
}
 void DB_SignHistory::set_allocated_reward_cache(::DB_BitCache* reward_cache) {
  delete reward_cache_;
  reward_cache_ = reward_cache;
  if (reward_cache) {
    set_has_reward_cache();
  } else {
    clear_has_reward_cache();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_SignHistory.reward_cache)
}

// optional int64 last_reword_time_sec = 4 [default = 0];
 bool DB_SignHistory::has_last_reword_time_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_SignHistory::set_has_last_reword_time_sec() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_SignHistory::clear_has_last_reword_time_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_SignHistory::clear_last_reword_time_sec() {
  last_reword_time_sec_ = GOOGLE_LONGLONG(0);
  clear_has_last_reword_time_sec();
}
 ::google::protobuf::int64 DB_SignHistory::last_reword_time_sec() const {
  // @@protoc_insertion_point(field_get:DB_SignHistory.last_reword_time_sec)
  return last_reword_time_sec_;
}
 void DB_SignHistory::set_last_reword_time_sec(::google::protobuf::int64 value) {
  set_has_last_reword_time_sec();
  last_reword_time_sec_ = value;
  // @@protoc_insertion_point(field_set:DB_SignHistory.last_reword_time_sec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_EasyTimeSet::kSecondsFieldNumber;
#endif  // !_MSC_VER

DB_EasyTimeSet::DB_EasyTimeSet()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_EasyTimeSet)
}

void DB_EasyTimeSet::InitAsDefaultInstance() {
}

DB_EasyTimeSet::DB_EasyTimeSet(const DB_EasyTimeSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_EasyTimeSet)
}

void DB_EasyTimeSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_EasyTimeSet::~DB_EasyTimeSet() {
  // @@protoc_insertion_point(destructor:DB_EasyTimeSet)
  SharedDtor();
}

void DB_EasyTimeSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_EasyTimeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_EasyTimeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_EasyTimeSet_descriptor_;
}

const DB_EasyTimeSet& DB_EasyTimeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_EasyTimeSet* DB_EasyTimeSet::default_instance_ = NULL;

DB_EasyTimeSet* DB_EasyTimeSet::New(::google::protobuf::Arena* arena) const {
  DB_EasyTimeSet* n = new DB_EasyTimeSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_EasyTimeSet::Clear() {
  seconds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_EasyTimeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_EasyTimeSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 seconds = 1;
      case 1: {
        if (tag == 8) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_seconds())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_seconds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_seconds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_EasyTimeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_EasyTimeSet)
  return false;
#undef DO_
}

void DB_EasyTimeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_EasyTimeSet)
  // repeated int64 seconds = 1;
  for (int i = 0; i < this->seconds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->seconds(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_EasyTimeSet)
}

::google::protobuf::uint8* DB_EasyTimeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_EasyTimeSet)
  // repeated int64 seconds = 1;
  for (int i = 0; i < this->seconds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->seconds(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_EasyTimeSet)
  return target;
}

int DB_EasyTimeSet::ByteSize() const {
  int total_size = 0;

  // repeated int64 seconds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->seconds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->seconds(i));
    }
    total_size += 1 * this->seconds_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_EasyTimeSet::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_EasyTimeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_EasyTimeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_EasyTimeSet::MergeFrom(const DB_EasyTimeSet& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  seconds_.MergeFrom(from.seconds_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_EasyTimeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_EasyTimeSet::CopyFrom(const DB_EasyTimeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_EasyTimeSet::IsInitialized() const {

  return true;
}

void DB_EasyTimeSet::Swap(DB_EasyTimeSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_EasyTimeSet::InternalSwap(DB_EasyTimeSet* other) {
  seconds_.UnsafeArenaSwap(&other->seconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_EasyTimeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_EasyTimeSet_descriptor_;
  metadata.reflection = DB_EasyTimeSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_EasyTimeSet

// repeated int64 seconds = 1;
 int DB_EasyTimeSet::seconds_size() const {
  return seconds_.size();
}
 void DB_EasyTimeSet::clear_seconds() {
  seconds_.Clear();
}
 ::google::protobuf::int64 DB_EasyTimeSet::seconds(int index) const {
  // @@protoc_insertion_point(field_get:DB_EasyTimeSet.seconds)
  return seconds_.Get(index);
}
 void DB_EasyTimeSet::set_seconds(int index, ::google::protobuf::int64 value) {
  seconds_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_EasyTimeSet.seconds)
}
 void DB_EasyTimeSet::add_seconds(::google::protobuf::int64 value) {
  seconds_.Add(value);
  // @@protoc_insertion_point(field_add:DB_EasyTimeSet.seconds)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_EasyTimeSet::seconds() const {
  // @@protoc_insertion_point(field_list:DB_EasyTimeSet.seconds)
  return seconds_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_EasyTimeSet::mutable_seconds() {
  // @@protoc_insertion_point(field_mutable_list:DB_EasyTimeSet.seconds)
  return &seconds_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_ContinuousDays::kContinuousDaysFieldNumber;
const int DB_ContinuousDays::kRewardHistoryFieldNumber;
const int DB_ContinuousDays::kStartPosFieldNumber;
#endif  // !_MSC_VER

DB_ContinuousDays::DB_ContinuousDays()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_ContinuousDays)
}

void DB_ContinuousDays::InitAsDefaultInstance() {
  reward_history_ = const_cast< ::DB_BitCache*>(&::DB_BitCache::default_instance());
}

DB_ContinuousDays::DB_ContinuousDays(const DB_ContinuousDays& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_ContinuousDays)
}

void DB_ContinuousDays::SharedCtor() {
  _cached_size_ = 0;
  continuousdays_ = 0;
  reward_history_ = NULL;
  start_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_ContinuousDays::~DB_ContinuousDays() {
  // @@protoc_insertion_point(destructor:DB_ContinuousDays)
  SharedDtor();
}

void DB_ContinuousDays::SharedDtor() {
  if (this != default_instance_) {
    delete reward_history_;
  }
}

void DB_ContinuousDays::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_ContinuousDays::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_ContinuousDays_descriptor_;
}

const DB_ContinuousDays& DB_ContinuousDays::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_ContinuousDays* DB_ContinuousDays::default_instance_ = NULL;

DB_ContinuousDays* DB_ContinuousDays::New(::google::protobuf::Arena* arena) const {
  DB_ContinuousDays* n = new DB_ContinuousDays;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_ContinuousDays::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_ContinuousDays*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(continuousdays_, start_pos_);
    if (has_reward_history()) {
      if (reward_history_ != NULL) reward_history_->::DB_BitCache::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_ContinuousDays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_ContinuousDays)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ContinuousDays = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continuousdays_)));
          set_has_continuousdays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward_history;
        break;
      }

      // optional .DB_BitCache reward_history = 2;
      case 2: {
        if (tag == 18) {
         parse_reward_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_pos;
        break;
      }

      // optional int32 start_pos = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_start_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_pos_)));
          set_has_start_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_ContinuousDays)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_ContinuousDays)
  return false;
#undef DO_
}

void DB_ContinuousDays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_ContinuousDays)
  // optional int32 ContinuousDays = 1 [default = 0];
  if (has_continuousdays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->continuousdays(), output);
  }

  // optional .DB_BitCache reward_history = 2;
  if (has_reward_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reward_history_, output);
  }

  // optional int32 start_pos = 3 [default = 0];
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_ContinuousDays)
}

::google::protobuf::uint8* DB_ContinuousDays::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_ContinuousDays)
  // optional int32 ContinuousDays = 1 [default = 0];
  if (has_continuousdays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->continuousdays(), target);
  }

  // optional .DB_BitCache reward_history = 2;
  if (has_reward_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->reward_history_, target);
  }

  // optional int32 start_pos = 3 [default = 0];
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_ContinuousDays)
  return target;
}

int DB_ContinuousDays::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int32 ContinuousDays = 1 [default = 0];
    if (has_continuousdays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continuousdays());
    }

    // optional .DB_BitCache reward_history = 2;
    if (has_reward_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reward_history_);
    }

    // optional int32 start_pos = 3 [default = 0];
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_pos());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_ContinuousDays::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_ContinuousDays* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_ContinuousDays*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_ContinuousDays::MergeFrom(const DB_ContinuousDays& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_continuousdays()) {
      set_continuousdays(from.continuousdays());
    }
    if (from.has_reward_history()) {
      mutable_reward_history()->::DB_BitCache::MergeFrom(from.reward_history());
    }
    if (from.has_start_pos()) {
      set_start_pos(from.start_pos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_ContinuousDays::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_ContinuousDays::CopyFrom(const DB_ContinuousDays& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_ContinuousDays::IsInitialized() const {

  return true;
}

void DB_ContinuousDays::Swap(DB_ContinuousDays* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_ContinuousDays::InternalSwap(DB_ContinuousDays* other) {
  std::swap(continuousdays_, other->continuousdays_);
  std::swap(reward_history_, other->reward_history_);
  std::swap(start_pos_, other->start_pos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_ContinuousDays::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_ContinuousDays_descriptor_;
  metadata.reflection = DB_ContinuousDays_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_ContinuousDays

// optional int32 ContinuousDays = 1 [default = 0];
 bool DB_ContinuousDays::has_continuousdays() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_ContinuousDays::set_has_continuousdays() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_ContinuousDays::clear_has_continuousdays() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_ContinuousDays::clear_continuousdays() {
  continuousdays_ = 0;
  clear_has_continuousdays();
}
 ::google::protobuf::int32 DB_ContinuousDays::continuousdays() const {
  // @@protoc_insertion_point(field_get:DB_ContinuousDays.ContinuousDays)
  return continuousdays_;
}
 void DB_ContinuousDays::set_continuousdays(::google::protobuf::int32 value) {
  set_has_continuousdays();
  continuousdays_ = value;
  // @@protoc_insertion_point(field_set:DB_ContinuousDays.ContinuousDays)
}

// optional .DB_BitCache reward_history = 2;
 bool DB_ContinuousDays::has_reward_history() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_ContinuousDays::set_has_reward_history() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_ContinuousDays::clear_has_reward_history() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_ContinuousDays::clear_reward_history() {
  if (reward_history_ != NULL) reward_history_->::DB_BitCache::Clear();
  clear_has_reward_history();
}
 const ::DB_BitCache& DB_ContinuousDays::reward_history() const {
  // @@protoc_insertion_point(field_get:DB_ContinuousDays.reward_history)
  return reward_history_ != NULL ? *reward_history_ : *default_instance_->reward_history_;
}
 ::DB_BitCache* DB_ContinuousDays::mutable_reward_history() {
  set_has_reward_history();
  if (reward_history_ == NULL) {
    reward_history_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_ContinuousDays.reward_history)
  return reward_history_;
}
 ::DB_BitCache* DB_ContinuousDays::release_reward_history() {
  clear_has_reward_history();
  ::DB_BitCache* temp = reward_history_;
  reward_history_ = NULL;
  return temp;
}
 void DB_ContinuousDays::set_allocated_reward_history(::DB_BitCache* reward_history) {
  delete reward_history_;
  reward_history_ = reward_history;
  if (reward_history) {
    set_has_reward_history();
  } else {
    clear_has_reward_history();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_ContinuousDays.reward_history)
}

// optional int32 start_pos = 3 [default = 0];
 bool DB_ContinuousDays::has_start_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_ContinuousDays::set_has_start_pos() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_ContinuousDays::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_ContinuousDays::clear_start_pos() {
  start_pos_ = 0;
  clear_has_start_pos();
}
 ::google::protobuf::int32 DB_ContinuousDays::start_pos() const {
  // @@protoc_insertion_point(field_get:DB_ContinuousDays.start_pos)
  return start_pos_;
}
 void DB_ContinuousDays::set_start_pos(::google::protobuf::int32 value) {
  set_has_start_pos();
  start_pos_ = value;
  // @@protoc_insertion_point(field_set:DB_ContinuousDays.start_pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_DragboatFvl::kLastricecountFieldNumber;
const int DB_DragboatFvl::kIsacquiredFieldNumber;
const int DB_DragboatFvl::kLasttimeFieldNumber;
const int DB_DragboatFvl::kTotalricecountFieldNumber;
#endif  // !_MSC_VER

DB_DragboatFvl::DB_DragboatFvl()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_DragboatFvl)
}

void DB_DragboatFvl::InitAsDefaultInstance() {
}

DB_DragboatFvl::DB_DragboatFvl(const DB_DragboatFvl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_DragboatFvl)
}

void DB_DragboatFvl::SharedCtor() {
  _cached_size_ = 0;
  lastricecount_ = 0;
  isacquired_ = false;
  lasttime_ = GOOGLE_LONGLONG(0);
  totalricecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_DragboatFvl::~DB_DragboatFvl() {
  // @@protoc_insertion_point(destructor:DB_DragboatFvl)
  SharedDtor();
}

void DB_DragboatFvl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_DragboatFvl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_DragboatFvl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_DragboatFvl_descriptor_;
}

const DB_DragboatFvl& DB_DragboatFvl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_DragboatFvl* DB_DragboatFvl::default_instance_ = NULL;

DB_DragboatFvl* DB_DragboatFvl::New(::google::protobuf::Arena* arena) const {
  DB_DragboatFvl* n = new DB_DragboatFvl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_DragboatFvl::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_DragboatFvl*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lastricecount_, totalricecount_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_DragboatFvl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_DragboatFvl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lastricecount = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastricecount_)));
          set_has_lastricecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isacquired;
        break;
      }

      // optional bool isacquired = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_isacquired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isacquired_)));
          set_has_isacquired();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lasttime;
        break;
      }

      // optional int64 lasttime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_totalricecount;
        break;
      }

      // optional int32 totalricecount = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_totalricecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalricecount_)));
          set_has_totalricecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_DragboatFvl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_DragboatFvl)
  return false;
#undef DO_
}

void DB_DragboatFvl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_DragboatFvl)
  // optional int32 lastricecount = 1 [default = 0];
  if (has_lastricecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lastricecount(), output);
  }

  // optional bool isacquired = 2 [default = false];
  if (has_isacquired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isacquired(), output);
  }

  // optional int64 lasttime = 3 [default = 0];
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lasttime(), output);
  }

  // optional int32 totalricecount = 4 [default = 0];
  if (has_totalricecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalricecount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_DragboatFvl)
}

::google::protobuf::uint8* DB_DragboatFvl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_DragboatFvl)
  // optional int32 lastricecount = 1 [default = 0];
  if (has_lastricecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lastricecount(), target);
  }

  // optional bool isacquired = 2 [default = false];
  if (has_isacquired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isacquired(), target);
  }

  // optional int64 lasttime = 3 [default = 0];
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lasttime(), target);
  }

  // optional int32 totalricecount = 4 [default = 0];
  if (has_totalricecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalricecount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_DragboatFvl)
  return target;
}

int DB_DragboatFvl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional int32 lastricecount = 1 [default = 0];
    if (has_lastricecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastricecount());
    }

    // optional bool isacquired = 2 [default = false];
    if (has_isacquired()) {
      total_size += 1 + 1;
    }

    // optional int64 lasttime = 3 [default = 0];
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

    // optional int32 totalricecount = 4 [default = 0];
    if (has_totalricecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalricecount());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_DragboatFvl::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_DragboatFvl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_DragboatFvl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_DragboatFvl::MergeFrom(const DB_DragboatFvl& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lastricecount()) {
      set_lastricecount(from.lastricecount());
    }
    if (from.has_isacquired()) {
      set_isacquired(from.isacquired());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_totalricecount()) {
      set_totalricecount(from.totalricecount());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_DragboatFvl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_DragboatFvl::CopyFrom(const DB_DragboatFvl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_DragboatFvl::IsInitialized() const {

  return true;
}

void DB_DragboatFvl::Swap(DB_DragboatFvl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_DragboatFvl::InternalSwap(DB_DragboatFvl* other) {
  std::swap(lastricecount_, other->lastricecount_);
  std::swap(isacquired_, other->isacquired_);
  std::swap(lasttime_, other->lasttime_);
  std::swap(totalricecount_, other->totalricecount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_DragboatFvl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_DragboatFvl_descriptor_;
  metadata.reflection = DB_DragboatFvl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_DragboatFvl

// optional int32 lastricecount = 1 [default = 0];
 bool DB_DragboatFvl::has_lastricecount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_DragboatFvl::set_has_lastricecount() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_DragboatFvl::clear_has_lastricecount() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_DragboatFvl::clear_lastricecount() {
  lastricecount_ = 0;
  clear_has_lastricecount();
}
 ::google::protobuf::int32 DB_DragboatFvl::lastricecount() const {
  // @@protoc_insertion_point(field_get:DB_DragboatFvl.lastricecount)
  return lastricecount_;
}
 void DB_DragboatFvl::set_lastricecount(::google::protobuf::int32 value) {
  set_has_lastricecount();
  lastricecount_ = value;
  // @@protoc_insertion_point(field_set:DB_DragboatFvl.lastricecount)
}

// optional bool isacquired = 2 [default = false];
 bool DB_DragboatFvl::has_isacquired() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_DragboatFvl::set_has_isacquired() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_DragboatFvl::clear_has_isacquired() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_DragboatFvl::clear_isacquired() {
  isacquired_ = false;
  clear_has_isacquired();
}
 bool DB_DragboatFvl::isacquired() const {
  // @@protoc_insertion_point(field_get:DB_DragboatFvl.isacquired)
  return isacquired_;
}
 void DB_DragboatFvl::set_isacquired(bool value) {
  set_has_isacquired();
  isacquired_ = value;
  // @@protoc_insertion_point(field_set:DB_DragboatFvl.isacquired)
}

// optional int64 lasttime = 3 [default = 0];
 bool DB_DragboatFvl::has_lasttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_DragboatFvl::set_has_lasttime() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_DragboatFvl::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_DragboatFvl::clear_lasttime() {
  lasttime_ = GOOGLE_LONGLONG(0);
  clear_has_lasttime();
}
 ::google::protobuf::int64 DB_DragboatFvl::lasttime() const {
  // @@protoc_insertion_point(field_get:DB_DragboatFvl.lasttime)
  return lasttime_;
}
 void DB_DragboatFvl::set_lasttime(::google::protobuf::int64 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:DB_DragboatFvl.lasttime)
}

// optional int32 totalricecount = 4 [default = 0];
 bool DB_DragboatFvl::has_totalricecount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_DragboatFvl::set_has_totalricecount() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_DragboatFvl::clear_has_totalricecount() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_DragboatFvl::clear_totalricecount() {
  totalricecount_ = 0;
  clear_has_totalricecount();
}
 ::google::protobuf::int32 DB_DragboatFvl::totalricecount() const {
  // @@protoc_insertion_point(field_get:DB_DragboatFvl.totalricecount)
  return totalricecount_;
}
 void DB_DragboatFvl::set_totalricecount(::google::protobuf::int32 value) {
  set_has_totalricecount();
  totalricecount_ = value;
  // @@protoc_insertion_point(field_set:DB_DragboatFvl.totalricecount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_ActiveInvite::kUseridFieldNumber;
const int DB_ActiveInvite::kUrlFieldNumber;
const int DB_ActiveInvite::kLastlvlFieldNumber;
const int DB_ActiveInvite::kLastlogindayFieldNumber;
const int DB_ActiveInvite::kNowlogindayFieldNumber;
const int DB_ActiveInvite::kIsReceive1FieldNumber;
const int DB_ActiveInvite::kIsReceive2FieldNumber;
#endif  // !_MSC_VER

DB_ActiveInvite::DB_ActiveInvite()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_ActiveInvite)
}

void DB_ActiveInvite::InitAsDefaultInstance() {
}

DB_ActiveInvite::DB_ActiveInvite(const DB_ActiveInvite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_ActiveInvite)
}

void DB_ActiveInvite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastlvl_ = 0;
  lastloginday_ = 0;
  nowloginday_ = 0;
  isreceive2_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_ActiveInvite::~DB_ActiveInvite() {
  // @@protoc_insertion_point(destructor:DB_ActiveInvite)
  SharedDtor();
}

void DB_ActiveInvite::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DB_ActiveInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_ActiveInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_ActiveInvite_descriptor_;
}

const DB_ActiveInvite& DB_ActiveInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_ActiveInvite* DB_ActiveInvite::default_instance_ = NULL;

DB_ActiveInvite* DB_ActiveInvite::New(::google::protobuf::Arena* arena) const {
  DB_ActiveInvite* n = new DB_ActiveInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_ActiveInvite::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_ActiveInvite*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(lastlvl_, lastloginday_);
    ZR_(nowloginday_, isreceive2_);
    userid_ = GOOGLE_LONGLONG(0);
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  isreceive1_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_ActiveInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_ActiveInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_ActiveInvite.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lastlvl;
        break;
      }

      // optional int32 lastlvl = 3;
      case 3: {
        if (tag == 24) {
         parse_lastlvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlvl_)));
          set_has_lastlvl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lastloginday;
        break;
      }

      // optional int32 lastloginday = 4;
      case 4: {
        if (tag == 32) {
         parse_lastloginday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastloginday_)));
          set_has_lastloginday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nowloginday;
        break;
      }

      // optional int32 nowloginday = 5;
      case 5: {
        if (tag == 40) {
         parse_nowloginday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nowloginday_)));
          set_has_nowloginday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isReceive1;
        break;
      }

      // repeated int32 isReceive1 = 6;
      case 6: {
        if (tag == 48) {
         parse_isReceive1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_isreceive1())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isreceive1())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isReceive1;
        if (input->ExpectTag(56)) goto parse_isReceive2;
        break;
      }

      // optional bool isReceive2 = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_isReceive2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreceive2_)));
          set_has_isreceive2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_ActiveInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_ActiveInvite)
  return false;
#undef DO_
}

void DB_ActiveInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_ActiveInvite)
  // optional int64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_ActiveInvite.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional int32 lastlvl = 3;
  if (has_lastlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastlvl(), output);
  }

  // optional int32 lastloginday = 4;
  if (has_lastloginday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastloginday(), output);
  }

  // optional int32 nowloginday = 5;
  if (has_nowloginday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nowloginday(), output);
  }

  // repeated int32 isReceive1 = 6;
  for (int i = 0; i < this->isreceive1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->isreceive1(i), output);
  }

  // optional bool isReceive2 = 7 [default = false];
  if (has_isreceive2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isreceive2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_ActiveInvite)
}

::google::protobuf::uint8* DB_ActiveInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_ActiveInvite)
  // optional int64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_ActiveInvite.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional int32 lastlvl = 3;
  if (has_lastlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastlvl(), target);
  }

  // optional int32 lastloginday = 4;
  if (has_lastloginday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastloginday(), target);
  }

  // optional int32 nowloginday = 5;
  if (has_nowloginday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nowloginday(), target);
  }

  // repeated int32 isReceive1 = 6;
  for (int i = 0; i < this->isreceive1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->isreceive1(i), target);
  }

  // optional bool isReceive2 = 7 [default = false];
  if (has_isreceive2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isreceive2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_ActiveInvite)
  return target;
}

int DB_ActiveInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 95) {
    // optional int64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 lastlvl = 3;
    if (has_lastlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastlvl());
    }

    // optional int32 lastloginday = 4;
    if (has_lastloginday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastloginday());
    }

    // optional int32 nowloginday = 5;
    if (has_nowloginday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nowloginday());
    }

    // optional bool isReceive2 = 7 [default = false];
    if (has_isreceive2()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 isReceive1 = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->isreceive1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isreceive1(i));
    }
    total_size += 1 * this->isreceive1_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_ActiveInvite::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_ActiveInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_ActiveInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_ActiveInvite::MergeFrom(const DB_ActiveInvite& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  isreceive1_.MergeFrom(from.isreceive1_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_lastlvl()) {
      set_lastlvl(from.lastlvl());
    }
    if (from.has_lastloginday()) {
      set_lastloginday(from.lastloginday());
    }
    if (from.has_nowloginday()) {
      set_nowloginday(from.nowloginday());
    }
    if (from.has_isreceive2()) {
      set_isreceive2(from.isreceive2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_ActiveInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_ActiveInvite::CopyFrom(const DB_ActiveInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_ActiveInvite::IsInitialized() const {

  return true;
}

void DB_ActiveInvite::Swap(DB_ActiveInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_ActiveInvite::InternalSwap(DB_ActiveInvite* other) {
  std::swap(userid_, other->userid_);
  url_.Swap(&other->url_);
  std::swap(lastlvl_, other->lastlvl_);
  std::swap(lastloginday_, other->lastloginday_);
  std::swap(nowloginday_, other->nowloginday_);
  isreceive1_.UnsafeArenaSwap(&other->isreceive1_);
  std::swap(isreceive2_, other->isreceive2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_ActiveInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_ActiveInvite_descriptor_;
  metadata.reflection = DB_ActiveInvite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_ActiveInvite

// optional int64 userid = 1;
 bool DB_ActiveInvite::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_ActiveInvite::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_ActiveInvite::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_ActiveInvite::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
 ::google::protobuf::int64 DB_ActiveInvite::userid() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.userid)
  return userid_;
}
 void DB_ActiveInvite::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.userid)
}

// optional string url = 2;
 bool DB_ActiveInvite::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_ActiveInvite::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_ActiveInvite::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_ActiveInvite::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& DB_ActiveInvite::url() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_ActiveInvite::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.url)
}
 void DB_ActiveInvite::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_ActiveInvite.url)
}
 void DB_ActiveInvite::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_ActiveInvite.url)
}
 ::std::string* DB_ActiveInvite::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:DB_ActiveInvite.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_ActiveInvite::release_url() {
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_ActiveInvite::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:DB_ActiveInvite.url)
}

// optional int32 lastlvl = 3;
 bool DB_ActiveInvite::has_lastlvl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_ActiveInvite::set_has_lastlvl() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_ActiveInvite::clear_has_lastlvl() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_ActiveInvite::clear_lastlvl() {
  lastlvl_ = 0;
  clear_has_lastlvl();
}
 ::google::protobuf::int32 DB_ActiveInvite::lastlvl() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.lastlvl)
  return lastlvl_;
}
 void DB_ActiveInvite::set_lastlvl(::google::protobuf::int32 value) {
  set_has_lastlvl();
  lastlvl_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.lastlvl)
}

// optional int32 lastloginday = 4;
 bool DB_ActiveInvite::has_lastloginday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_ActiveInvite::set_has_lastloginday() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_ActiveInvite::clear_has_lastloginday() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_ActiveInvite::clear_lastloginday() {
  lastloginday_ = 0;
  clear_has_lastloginday();
}
 ::google::protobuf::int32 DB_ActiveInvite::lastloginday() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.lastloginday)
  return lastloginday_;
}
 void DB_ActiveInvite::set_lastloginday(::google::protobuf::int32 value) {
  set_has_lastloginday();
  lastloginday_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.lastloginday)
}

// optional int32 nowloginday = 5;
 bool DB_ActiveInvite::has_nowloginday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_ActiveInvite::set_has_nowloginday() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_ActiveInvite::clear_has_nowloginday() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_ActiveInvite::clear_nowloginday() {
  nowloginday_ = 0;
  clear_has_nowloginday();
}
 ::google::protobuf::int32 DB_ActiveInvite::nowloginday() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.nowloginday)
  return nowloginday_;
}
 void DB_ActiveInvite::set_nowloginday(::google::protobuf::int32 value) {
  set_has_nowloginday();
  nowloginday_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.nowloginday)
}

// repeated int32 isReceive1 = 6;
 int DB_ActiveInvite::isreceive1_size() const {
  return isreceive1_.size();
}
 void DB_ActiveInvite::clear_isreceive1() {
  isreceive1_.Clear();
}
 ::google::protobuf::int32 DB_ActiveInvite::isreceive1(int index) const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.isReceive1)
  return isreceive1_.Get(index);
}
 void DB_ActiveInvite::set_isreceive1(int index, ::google::protobuf::int32 value) {
  isreceive1_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.isReceive1)
}
 void DB_ActiveInvite::add_isreceive1(::google::protobuf::int32 value) {
  isreceive1_.Add(value);
  // @@protoc_insertion_point(field_add:DB_ActiveInvite.isReceive1)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_ActiveInvite::isreceive1() const {
  // @@protoc_insertion_point(field_list:DB_ActiveInvite.isReceive1)
  return isreceive1_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_ActiveInvite::mutable_isreceive1() {
  // @@protoc_insertion_point(field_mutable_list:DB_ActiveInvite.isReceive1)
  return &isreceive1_;
}

// optional bool isReceive2 = 7 [default = false];
 bool DB_ActiveInvite::has_isreceive2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void DB_ActiveInvite::set_has_isreceive2() {
  _has_bits_[0] |= 0x00000040u;
}
 void DB_ActiveInvite::clear_has_isreceive2() {
  _has_bits_[0] &= ~0x00000040u;
}
 void DB_ActiveInvite::clear_isreceive2() {
  isreceive2_ = false;
  clear_has_isreceive2();
}
 bool DB_ActiveInvite::isreceive2() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.isReceive2)
  return isreceive2_;
}
 void DB_ActiveInvite::set_isreceive2(bool value) {
  set_has_isreceive2();
  isreceive2_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.isReceive2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_ActiveInviteself::kIsReceive3FieldNumber;
const int DB_ActiveInviteself::kCompletedFieldNumber;
const int DB_ActiveInviteself::kIdCntFieldNumber;
const int DB_ActiveInviteself::kOtherFieldNumber;
#endif  // !_MSC_VER

DB_ActiveInviteself::DB_ActiveInviteself()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_ActiveInviteself)
}

void DB_ActiveInviteself::InitAsDefaultInstance() {
}

DB_ActiveInviteself::DB_ActiveInviteself(const DB_ActiveInviteself& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_ActiveInviteself)
}

void DB_ActiveInviteself::SharedCtor() {
  _cached_size_ = 0;
  idcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_ActiveInviteself::~DB_ActiveInviteself() {
  // @@protoc_insertion_point(destructor:DB_ActiveInviteself)
  SharedDtor();
}

void DB_ActiveInviteself::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_ActiveInviteself::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_ActiveInviteself::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_ActiveInviteself_descriptor_;
}

const DB_ActiveInviteself& DB_ActiveInviteself::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_ActiveInviteself* DB_ActiveInviteself::default_instance_ = NULL;

DB_ActiveInviteself* DB_ActiveInviteself::New(::google::protobuf::Arena* arena) const {
  DB_ActiveInviteself* n = new DB_ActiveInviteself;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_ActiveInviteself::Clear() {
  idcnt_ = 0;
  isreceive3_.Clear();
  completed_.Clear();
  other_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_ActiveInviteself::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_ActiveInviteself)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 isReceive3 = 1;
      case 1: {
        if (tag == 8) {
         parse_isReceive3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_isreceive3())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isreceive3())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_isReceive3;
        if (input->ExpectTag(16)) goto parse_completed;
        break;
      }

      // repeated int32 completed = 2;
      case 2: {
        if (tag == 16) {
         parse_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_completed())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_completed())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_completed;
        if (input->ExpectTag(24)) goto parse_idCnt;
        break;
      }

      // optional int32 idCnt = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_idCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idcnt_)));
          set_has_idcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_other;
        break;
      }

      // repeated .DB_ActiveInvite other = 4;
      case 4: {
        if (tag == 34) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_other()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_other;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_ActiveInviteself)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_ActiveInviteself)
  return false;
#undef DO_
}

void DB_ActiveInviteself::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_ActiveInviteself)
  // repeated int32 isReceive3 = 1;
  for (int i = 0; i < this->isreceive3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->isreceive3(i), output);
  }

  // repeated int32 completed = 2;
  for (int i = 0; i < this->completed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->completed(i), output);
  }

  // optional int32 idCnt = 3 [default = 0];
  if (has_idcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->idcnt(), output);
  }

  // repeated .DB_ActiveInvite other = 4;
  for (unsigned int i = 0, n = this->other_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->other(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_ActiveInviteself)
}

::google::protobuf::uint8* DB_ActiveInviteself::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_ActiveInviteself)
  // repeated int32 isReceive3 = 1;
  for (int i = 0; i < this->isreceive3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->isreceive3(i), target);
  }

  // repeated int32 completed = 2;
  for (int i = 0; i < this->completed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->completed(i), target);
  }

  // optional int32 idCnt = 3 [default = 0];
  if (has_idcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->idcnt(), target);
  }

  // repeated .DB_ActiveInvite other = 4;
  for (unsigned int i = 0, n = this->other_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->other(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_ActiveInviteself)
  return target;
}

int DB_ActiveInviteself::ByteSize() const {
  int total_size = 0;

  // optional int32 idCnt = 3 [default = 0];
  if (has_idcnt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idcnt());
  }

  // repeated int32 isReceive3 = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->isreceive3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isreceive3(i));
    }
    total_size += 1 * this->isreceive3_size() + data_size;
  }

  // repeated int32 completed = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->completed_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->completed(i));
    }
    total_size += 1 * this->completed_size() + data_size;
  }

  // repeated .DB_ActiveInvite other = 4;
  total_size += 1 * this->other_size();
  for (int i = 0; i < this->other_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->other(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_ActiveInviteself::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_ActiveInviteself* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_ActiveInviteself*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_ActiveInviteself::MergeFrom(const DB_ActiveInviteself& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  isreceive3_.MergeFrom(from.isreceive3_);
  completed_.MergeFrom(from.completed_);
  other_.MergeFrom(from.other_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_idcnt()) {
      set_idcnt(from.idcnt());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_ActiveInviteself::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_ActiveInviteself::CopyFrom(const DB_ActiveInviteself& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_ActiveInviteself::IsInitialized() const {

  return true;
}

void DB_ActiveInviteself::Swap(DB_ActiveInviteself* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_ActiveInviteself::InternalSwap(DB_ActiveInviteself* other) {
  isreceive3_.UnsafeArenaSwap(&other->isreceive3_);
  completed_.UnsafeArenaSwap(&other->completed_);
  std::swap(idcnt_, other->idcnt_);
  other_.UnsafeArenaSwap(&other->other_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_ActiveInviteself::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_ActiveInviteself_descriptor_;
  metadata.reflection = DB_ActiveInviteself_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_ActiveInviteself

// repeated int32 isReceive3 = 1;
 int DB_ActiveInviteself::isreceive3_size() const {
  return isreceive3_.size();
}
 void DB_ActiveInviteself::clear_isreceive3() {
  isreceive3_.Clear();
}
 ::google::protobuf::int32 DB_ActiveInviteself::isreceive3(int index) const {
  // @@protoc_insertion_point(field_get:DB_ActiveInviteself.isReceive3)
  return isreceive3_.Get(index);
}
 void DB_ActiveInviteself::set_isreceive3(int index, ::google::protobuf::int32 value) {
  isreceive3_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_ActiveInviteself.isReceive3)
}
 void DB_ActiveInviteself::add_isreceive3(::google::protobuf::int32 value) {
  isreceive3_.Add(value);
  // @@protoc_insertion_point(field_add:DB_ActiveInviteself.isReceive3)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_ActiveInviteself::isreceive3() const {
  // @@protoc_insertion_point(field_list:DB_ActiveInviteself.isReceive3)
  return isreceive3_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_ActiveInviteself::mutable_isreceive3() {
  // @@protoc_insertion_point(field_mutable_list:DB_ActiveInviteself.isReceive3)
  return &isreceive3_;
}

// repeated int32 completed = 2;
 int DB_ActiveInviteself::completed_size() const {
  return completed_.size();
}
 void DB_ActiveInviteself::clear_completed() {
  completed_.Clear();
}
 ::google::protobuf::int32 DB_ActiveInviteself::completed(int index) const {
  // @@protoc_insertion_point(field_get:DB_ActiveInviteself.completed)
  return completed_.Get(index);
}
 void DB_ActiveInviteself::set_completed(int index, ::google::protobuf::int32 value) {
  completed_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_ActiveInviteself.completed)
}
 void DB_ActiveInviteself::add_completed(::google::protobuf::int32 value) {
  completed_.Add(value);
  // @@protoc_insertion_point(field_add:DB_ActiveInviteself.completed)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_ActiveInviteself::completed() const {
  // @@protoc_insertion_point(field_list:DB_ActiveInviteself.completed)
  return completed_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_ActiveInviteself::mutable_completed() {
  // @@protoc_insertion_point(field_mutable_list:DB_ActiveInviteself.completed)
  return &completed_;
}

// optional int32 idCnt = 3 [default = 0];
 bool DB_ActiveInviteself::has_idcnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_ActiveInviteself::set_has_idcnt() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_ActiveInviteself::clear_has_idcnt() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_ActiveInviteself::clear_idcnt() {
  idcnt_ = 0;
  clear_has_idcnt();
}
 ::google::protobuf::int32 DB_ActiveInviteself::idcnt() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInviteself.idCnt)
  return idcnt_;
}
 void DB_ActiveInviteself::set_idcnt(::google::protobuf::int32 value) {
  set_has_idcnt();
  idcnt_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveInviteself.idCnt)
}

// repeated .DB_ActiveInvite other = 4;
 int DB_ActiveInviteself::other_size() const {
  return other_.size();
}
 void DB_ActiveInviteself::clear_other() {
  other_.Clear();
}
 const ::DB_ActiveInvite& DB_ActiveInviteself::other(int index) const {
  // @@protoc_insertion_point(field_get:DB_ActiveInviteself.other)
  return other_.Get(index);
}
 ::DB_ActiveInvite* DB_ActiveInviteself::mutable_other(int index) {
  // @@protoc_insertion_point(field_mutable:DB_ActiveInviteself.other)
  return other_.Mutable(index);
}
 ::DB_ActiveInvite* DB_ActiveInviteself::add_other() {
  // @@protoc_insertion_point(field_add:DB_ActiveInviteself.other)
  return other_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_ActiveInvite >&
DB_ActiveInviteself::other() const {
  // @@protoc_insertion_point(field_list:DB_ActiveInviteself.other)
  return other_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_ActiveInvite >*
DB_ActiveInviteself::mutable_other() {
  // @@protoc_insertion_point(field_mutable_list:DB_ActiveInviteself.other)
  return &other_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_ActiveCallBack::kTotaldaysFieldNumber;
const int DB_ActiveCallBack::kHasTKbgnum1FieldNumber;
const int DB_ActiveCallBack::kHasTKbgnum2FieldNumber;
const int DB_ActiveCallBack::kHasTKbgnum3FieldNumber;
const int DB_ActiveCallBack::kHasTKbgnum4FieldNumber;
const int DB_ActiveCallBack::kLasttimeFieldNumber;
const int DB_ActiveCallBack::kUserTypeFieldNumber;
#endif  // !_MSC_VER

DB_ActiveCallBack::DB_ActiveCallBack()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_ActiveCallBack)
}

void DB_ActiveCallBack::InitAsDefaultInstance() {
}

DB_ActiveCallBack::DB_ActiveCallBack(const DB_ActiveCallBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_ActiveCallBack)
}

void DB_ActiveCallBack::SharedCtor() {
  _cached_size_ = 0;
  totaldays_ = 0;
  hastkbgnum1_ = false;
  hastkbgnum2_ = false;
  hastkbgnum3_ = false;
  hastkbgnum4_ = false;
  lasttime_ = GOOGLE_LONGLONG(0);
  user_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_ActiveCallBack::~DB_ActiveCallBack() {
  // @@protoc_insertion_point(destructor:DB_ActiveCallBack)
  SharedDtor();
}

void DB_ActiveCallBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_ActiveCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_ActiveCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_ActiveCallBack_descriptor_;
}

const DB_ActiveCallBack& DB_ActiveCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_ActiveCallBack* DB_ActiveCallBack::default_instance_ = NULL;

DB_ActiveCallBack* DB_ActiveCallBack::New(::google::protobuf::Arena* arena) const {
  DB_ActiveCallBack* n = new DB_ActiveCallBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_ActiveCallBack::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_ActiveCallBack*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(totaldays_, user_type_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_ActiveCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_ActiveCallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 totaldays = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaldays_)));
          set_has_totaldays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hasTKbgnum1;
        break;
      }

      // optional bool hasTKbgnum1 = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_hasTKbgnum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hastkbgnum1_)));
          set_has_hastkbgnum1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hasTKbgnum2;
        break;
      }

      // optional bool hasTKbgnum2 = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_hasTKbgnum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hastkbgnum2_)));
          set_has_hastkbgnum2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hasTKbgnum3;
        break;
      }

      // optional bool hasTKbgnum3 = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_hasTKbgnum3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hastkbgnum3_)));
          set_has_hastkbgnum3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hasTKbgnum4;
        break;
      }

      // optional bool hasTKbgnum4 = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_hasTKbgnum4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hastkbgnum4_)));
          set_has_hastkbgnum4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lasttime;
        break;
      }

      // optional int64 lasttime = 6;
      case 6: {
        if (tag == 48) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_user_type;
        break;
      }

      // optional int32 user_type = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_user_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_type_)));
          set_has_user_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_ActiveCallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_ActiveCallBack)
  return false;
#undef DO_
}

void DB_ActiveCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_ActiveCallBack)
  // optional int32 totaldays = 1 [default = 0];
  if (has_totaldays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totaldays(), output);
  }

  // optional bool hasTKbgnum1 = 2 [default = false];
  if (has_hastkbgnum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hastkbgnum1(), output);
  }

  // optional bool hasTKbgnum2 = 3 [default = false];
  if (has_hastkbgnum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hastkbgnum2(), output);
  }

  // optional bool hasTKbgnum3 = 4 [default = false];
  if (has_hastkbgnum3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hastkbgnum3(), output);
  }

  // optional bool hasTKbgnum4 = 5 [default = false];
  if (has_hastkbgnum4()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hastkbgnum4(), output);
  }

  // optional int64 lasttime = 6;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->lasttime(), output);
  }

  // optional int32 user_type = 7 [default = 0];
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->user_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_ActiveCallBack)
}

::google::protobuf::uint8* DB_ActiveCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_ActiveCallBack)
  // optional int32 totaldays = 1 [default = 0];
  if (has_totaldays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totaldays(), target);
  }

  // optional bool hasTKbgnum1 = 2 [default = false];
  if (has_hastkbgnum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hastkbgnum1(), target);
  }

  // optional bool hasTKbgnum2 = 3 [default = false];
  if (has_hastkbgnum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hastkbgnum2(), target);
  }

  // optional bool hasTKbgnum3 = 4 [default = false];
  if (has_hastkbgnum3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hastkbgnum3(), target);
  }

  // optional bool hasTKbgnum4 = 5 [default = false];
  if (has_hastkbgnum4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hastkbgnum4(), target);
  }

  // optional int64 lasttime = 6;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->lasttime(), target);
  }

  // optional int32 user_type = 7 [default = 0];
  if (has_user_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->user_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_ActiveCallBack)
  return target;
}

int DB_ActiveCallBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127) {
    // optional int32 totaldays = 1 [default = 0];
    if (has_totaldays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaldays());
    }

    // optional bool hasTKbgnum1 = 2 [default = false];
    if (has_hastkbgnum1()) {
      total_size += 1 + 1;
    }

    // optional bool hasTKbgnum2 = 3 [default = false];
    if (has_hastkbgnum2()) {
      total_size += 1 + 1;
    }

    // optional bool hasTKbgnum3 = 4 [default = false];
    if (has_hastkbgnum3()) {
      total_size += 1 + 1;
    }

    // optional bool hasTKbgnum4 = 5 [default = false];
    if (has_hastkbgnum4()) {
      total_size += 1 + 1;
    }

    // optional int64 lasttime = 6;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

    // optional int32 user_type = 7 [default = 0];
    if (has_user_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_ActiveCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_ActiveCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_ActiveCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_ActiveCallBack::MergeFrom(const DB_ActiveCallBack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totaldays()) {
      set_totaldays(from.totaldays());
    }
    if (from.has_hastkbgnum1()) {
      set_hastkbgnum1(from.hastkbgnum1());
    }
    if (from.has_hastkbgnum2()) {
      set_hastkbgnum2(from.hastkbgnum2());
    }
    if (from.has_hastkbgnum3()) {
      set_hastkbgnum3(from.hastkbgnum3());
    }
    if (from.has_hastkbgnum4()) {
      set_hastkbgnum4(from.hastkbgnum4());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_user_type()) {
      set_user_type(from.user_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_ActiveCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_ActiveCallBack::CopyFrom(const DB_ActiveCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_ActiveCallBack::IsInitialized() const {

  return true;
}

void DB_ActiveCallBack::Swap(DB_ActiveCallBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_ActiveCallBack::InternalSwap(DB_ActiveCallBack* other) {
  std::swap(totaldays_, other->totaldays_);
  std::swap(hastkbgnum1_, other->hastkbgnum1_);
  std::swap(hastkbgnum2_, other->hastkbgnum2_);
  std::swap(hastkbgnum3_, other->hastkbgnum3_);
  std::swap(hastkbgnum4_, other->hastkbgnum4_);
  std::swap(lasttime_, other->lasttime_);
  std::swap(user_type_, other->user_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_ActiveCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_ActiveCallBack_descriptor_;
  metadata.reflection = DB_ActiveCallBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_ActiveCallBack

// optional int32 totaldays = 1 [default = 0];
 bool DB_ActiveCallBack::has_totaldays() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_ActiveCallBack::set_has_totaldays() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_ActiveCallBack::clear_has_totaldays() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_ActiveCallBack::clear_totaldays() {
  totaldays_ = 0;
  clear_has_totaldays();
}
 ::google::protobuf::int32 DB_ActiveCallBack::totaldays() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.totaldays)
  return totaldays_;
}
 void DB_ActiveCallBack::set_totaldays(::google::protobuf::int32 value) {
  set_has_totaldays();
  totaldays_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.totaldays)
}

// optional bool hasTKbgnum1 = 2 [default = false];
 bool DB_ActiveCallBack::has_hastkbgnum1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_ActiveCallBack::set_has_hastkbgnum1() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_ActiveCallBack::clear_has_hastkbgnum1() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_ActiveCallBack::clear_hastkbgnum1() {
  hastkbgnum1_ = false;
  clear_has_hastkbgnum1();
}
 bool DB_ActiveCallBack::hastkbgnum1() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.hasTKbgnum1)
  return hastkbgnum1_;
}
 void DB_ActiveCallBack::set_hastkbgnum1(bool value) {
  set_has_hastkbgnum1();
  hastkbgnum1_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.hasTKbgnum1)
}

// optional bool hasTKbgnum2 = 3 [default = false];
 bool DB_ActiveCallBack::has_hastkbgnum2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_ActiveCallBack::set_has_hastkbgnum2() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_ActiveCallBack::clear_has_hastkbgnum2() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_ActiveCallBack::clear_hastkbgnum2() {
  hastkbgnum2_ = false;
  clear_has_hastkbgnum2();
}
 bool DB_ActiveCallBack::hastkbgnum2() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.hasTKbgnum2)
  return hastkbgnum2_;
}
 void DB_ActiveCallBack::set_hastkbgnum2(bool value) {
  set_has_hastkbgnum2();
  hastkbgnum2_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.hasTKbgnum2)
}

// optional bool hasTKbgnum3 = 4 [default = false];
 bool DB_ActiveCallBack::has_hastkbgnum3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_ActiveCallBack::set_has_hastkbgnum3() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_ActiveCallBack::clear_has_hastkbgnum3() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_ActiveCallBack::clear_hastkbgnum3() {
  hastkbgnum3_ = false;
  clear_has_hastkbgnum3();
}
 bool DB_ActiveCallBack::hastkbgnum3() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.hasTKbgnum3)
  return hastkbgnum3_;
}
 void DB_ActiveCallBack::set_hastkbgnum3(bool value) {
  set_has_hastkbgnum3();
  hastkbgnum3_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.hasTKbgnum3)
}

// optional bool hasTKbgnum4 = 5 [default = false];
 bool DB_ActiveCallBack::has_hastkbgnum4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_ActiveCallBack::set_has_hastkbgnum4() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_ActiveCallBack::clear_has_hastkbgnum4() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_ActiveCallBack::clear_hastkbgnum4() {
  hastkbgnum4_ = false;
  clear_has_hastkbgnum4();
}
 bool DB_ActiveCallBack::hastkbgnum4() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.hasTKbgnum4)
  return hastkbgnum4_;
}
 void DB_ActiveCallBack::set_hastkbgnum4(bool value) {
  set_has_hastkbgnum4();
  hastkbgnum4_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.hasTKbgnum4)
}

// optional int64 lasttime = 6;
 bool DB_ActiveCallBack::has_lasttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_ActiveCallBack::set_has_lasttime() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_ActiveCallBack::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_ActiveCallBack::clear_lasttime() {
  lasttime_ = GOOGLE_LONGLONG(0);
  clear_has_lasttime();
}
 ::google::protobuf::int64 DB_ActiveCallBack::lasttime() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.lasttime)
  return lasttime_;
}
 void DB_ActiveCallBack::set_lasttime(::google::protobuf::int64 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.lasttime)
}

// optional int32 user_type = 7 [default = 0];
 bool DB_ActiveCallBack::has_user_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void DB_ActiveCallBack::set_has_user_type() {
  _has_bits_[0] |= 0x00000040u;
}
 void DB_ActiveCallBack::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000040u;
}
 void DB_ActiveCallBack::clear_user_type() {
  user_type_ = 0;
  clear_has_user_type();
}
 ::google::protobuf::int32 DB_ActiveCallBack::user_type() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.user_type)
  return user_type_;
}
 void DB_ActiveCallBack::set_user_type(::google::protobuf::int32 value) {
  set_has_user_type();
  user_type_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.user_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_Player::kNicknameFieldNumber;
const int DB_Player::kBagFieldNumber;
const int DB_Player::kLivesFieldNumber;
const int DB_Player::kUniverseinfoFieldNumber;
const int DB_Player::kInitedFieldNumber;
const int DB_Player::kCandyPropertiesFieldNumber;
const int DB_Player::kMessageEventsFieldNumber;
const int DB_Player::kFriendActionPosFieldNumber;
const int DB_Player::kFriendActionsAllreadFieldNumber;
const int DB_Player::kFriendActionUnreadCntFieldNumber;
const int DB_Player::kFriendActionsFieldNumber;
const int DB_Player::kOptionFieldNumber;
const int DB_Player::kOnceOperatingFieldNumber;
const int DB_Player::kLastLoginRewardTimeFieldNumber;
const int DB_Player::kLimitFieldNumber;
const int DB_Player::kWebBuyRecordFieldNumber;
const int DB_Player::kCdkeyCounterFieldNumber;
const int DB_Player::kWeiboFieldNumber;
const int DB_Player::kQqunionKeyFieldNumber;
const int DB_Player::kNewFuncRecordFieldNumber;
const int DB_Player::kDallygiftdayFieldNumber;
const int DB_Player::kFuncFieldNumber;
const int DB_Player::kShareFieldNumber;
const int DB_Player::kFriendGiftFieldNumber;
const int DB_Player::kBanloginFieldNumber;
const int DB_Player::kBroadcastUnreadCntFieldNumber;
const int DB_Player::kMessagesUnreadCntFieldNumber;
const int DB_Player::kFriendGiftLiveHistoryFieldNumber;
const int DB_Player::kSingedHistoryFieldNumber;
const int DB_Player::kInviteVersionFieldNumber;
const int DB_Player::kInviteCountO1FieldNumber;
const int DB_Player::kInviterOpenidFieldNumber;
const int DB_Player::kYelldmdFieldNumber;
const int DB_Player::kSignHistoryFieldNumber;
const int DB_Player::kCdkeyPickhistoryFieldNumber;
const int DB_Player::kNewUserSaveGiftFieldNumber;
const int DB_Player::kEasytimesetFieldNumber;
const int DB_Player::kSkipLogFieldNumber;
const int DB_Player::kInviteSendCountFieldNumber;
const int DB_Player::kDallyUniverseFieldNumber;
const int DB_Player::kNowPlayingLevelFieldNumber;
const int DB_Player::kDailycounterFieldNumber;
const int DB_Player::kRewaredBitCacheFieldNumber;
const int DB_Player::kCallbackFieldNumber;
const int DB_Player::kFromZyngaCityFieldNumber;
const int DB_Player::kFriendGiftLiveSendHistoryFieldNumber;
const int DB_Player::kContinousLoginDaysFieldNumber;
const int DB_Player::kRoomFieldNumber;
const int DB_Player::kInviteCountFieldNumber;
const int DB_Player::kDragboatfestivlFieldNumber;
const int DB_Player::kActiveInviteselfFieldNumber;
const int DB_Player::kQpointUsageFeedbackFieldNumber;
const int DB_Player::kMobileDeviceSyncCntFieldNumber;
const int DB_Player::kActiveCallBackFieldNumber;
const int DB_Player::kKingOfStarFieldNumber;
const int DB_Player::kExpLevelFieldNumber;
#endif  // !_MSC_VER

DB_Player::DB_Player()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_Player)
}

void DB_Player::InitAsDefaultInstance() {
  bag_ = const_cast< ::DB_Bag*>(&::DB_Bag::default_instance());
  lives_ = const_cast< ::DB_LivesInfo*>(&::DB_LivesInfo::default_instance());
  universeinfo_ = const_cast< ::DB_UniverseInfo*>(&::DB_UniverseInfo::default_instance());
  candy_properties_ = const_cast< ::DB_CandyProperties*>(&::DB_CandyProperties::default_instance());
  message_events_ = const_cast< ::DB_Events*>(&::DB_Events::default_instance());
  option_ = const_cast< ::DB_Option*>(&::DB_Option::default_instance());
  onceoperating_ = const_cast< ::DB_BitCache*>(&::DB_BitCache::default_instance());
  limit_ = const_cast< ::DB_Limit*>(&::DB_Limit::default_instance());
  weibo_ = const_cast< ::DB_Weibo*>(&::DB_Weibo::default_instance());
  new_func_record_ = const_cast< ::DB_NewFunc*>(&::DB_NewFunc::default_instance());
  func_ = const_cast< ::DB_FuncSwitch*>(&::DB_FuncSwitch::default_instance());
  share_ = const_cast< ::DB_Limit*>(&::DB_Limit::default_instance());
  friend_gift_ = const_cast< ::DB_FriendGift*>(&::DB_FriendGift::default_instance());
  banlogin_ = const_cast< ::DB_BanLogin*>(&::DB_BanLogin::default_instance());
  friendgiftlivehistory_ = const_cast< ::TimeLimitedUidSet*>(&::TimeLimitedUidSet::default_instance());
  singedhistory_ = const_cast< ::DB_Singed*>(&::DB_Singed::default_instance());
  yelldmd_ = const_cast< ::DB_Yelldmd*>(&::DB_Yelldmd::default_instance());
  sign_history_ = const_cast< ::DB_SignHistory*>(&::DB_SignHistory::default_instance());
  cdkey_pickhistory_ = const_cast< ::DB_BitCache*>(&::DB_BitCache::default_instance());
  new_user_save_gift_ = const_cast< ::DB_BitCache*>(&::DB_BitCache::default_instance());
  easytimeset_ = const_cast< ::DB_EasyTimeSet*>(&::DB_EasyTimeSet::default_instance());
  dally_universe_ = const_cast< ::DB_DallyUniverseInfo*>(&::DB_DallyUniverseInfo::default_instance());
  dailycounter_ = const_cast< ::DB_DailyCounter*>(&::DB_DailyCounter::default_instance());
  rewared_bit_cache_ = const_cast< ::DB_BitCache*>(&::DB_BitCache::default_instance());
  callback_ = const_cast< ::DB_CallBack*>(&::DB_CallBack::default_instance());
  friendgiftlivesendhistory_ = const_cast< ::TimeLimitedUidSet*>(&::TimeLimitedUidSet::default_instance());
  continouslogindays_ = const_cast< ::DB_ContinuousDays*>(&::DB_ContinuousDays::default_instance());
  room_ = const_cast< ::DB_Map*>(&::DB_Map::default_instance());
  dragboatfestivl_ = const_cast< ::DB_DragboatFvl*>(&::DB_DragboatFvl::default_instance());
  activeinviteself_ = const_cast< ::DB_ActiveInviteself*>(&::DB_ActiveInviteself::default_instance());
  activecallback_ = const_cast< ::DB_ActiveCallBack*>(&::DB_ActiveCallBack::default_instance());
  kingofstar_ = const_cast< ::DB_KingOfStar*>(&::DB_KingOfStar::default_instance());
  exp_level_ = const_cast< ::DB_ExpLevel*>(&::DB_ExpLevel::default_instance());
}

DB_Player::DB_Player(const DB_Player& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_Player)
}

void DB_Player::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bag_ = NULL;
  lives_ = NULL;
  universeinfo_ = NULL;
  inited_ = false;
  candy_properties_ = NULL;
  message_events_ = NULL;
  friend_action_pos_ = 0;
  friend_actions_allread_ = false;
  friend_action_unread_cnt_ = 0;
  option_ = NULL;
  onceoperating_ = NULL;
  last_login_reward_time_ = GOOGLE_LONGLONG(0);
  limit_ = NULL;
  weibo_ = NULL;
  new_func_record_ = NULL;
  dallygiftday_ = 0;
  func_ = NULL;
  share_ = NULL;
  friend_gift_ = NULL;
  banlogin_ = NULL;
  broadcast_unread_cnt_ = 0;
  messages_unread_cnt_ = 0;
  friendgiftlivehistory_ = NULL;
  singedhistory_ = NULL;
  invite_version_ = 0;
  invite_count_o1_ = 0;
  inviter_openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yelldmd_ = NULL;
  sign_history_ = NULL;
  cdkey_pickhistory_ = NULL;
  new_user_save_gift_ = NULL;
  easytimeset_ = NULL;
  skiplog_ = false;
  invite_send_count_ = 0;
  dally_universe_ = NULL;
  now_playing_level_ = 0;
  dailycounter_ = NULL;
  rewared_bit_cache_ = NULL;
  callback_ = NULL;
  from_zynga_city_ = false;
  friendgiftlivesendhistory_ = NULL;
  continouslogindays_ = NULL;
  room_ = NULL;
  invite_count_ = 0;
  dragboatfestivl_ = NULL;
  activeinviteself_ = NULL;
  qpoint_usage_feedback_ = 0;
  mobiledevicesynccnt_ = 0;
  activecallback_ = NULL;
  kingofstar_ = NULL;
  exp_level_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Player::~DB_Player() {
  // @@protoc_insertion_point(destructor:DB_Player)
  SharedDtor();
}

void DB_Player::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviter_openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete bag_;
    delete lives_;
    delete universeinfo_;
    delete candy_properties_;
    delete message_events_;
    delete option_;
    delete onceoperating_;
    delete limit_;
    delete weibo_;
    delete new_func_record_;
    delete func_;
    delete share_;
    delete friend_gift_;
    delete banlogin_;
    delete friendgiftlivehistory_;
    delete singedhistory_;
    delete yelldmd_;
    delete sign_history_;
    delete cdkey_pickhistory_;
    delete new_user_save_gift_;
    delete easytimeset_;
    delete dally_universe_;
    delete dailycounter_;
    delete rewared_bit_cache_;
    delete callback_;
    delete friendgiftlivesendhistory_;
    delete continouslogindays_;
    delete room_;
    delete dragboatfestivl_;
    delete activeinviteself_;
    delete activecallback_;
    delete kingofstar_;
    delete exp_level_;
  }
}

void DB_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Player_descriptor_;
}

const DB_Player& DB_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_Player* DB_Player::default_instance_ = NULL;

DB_Player* DB_Player::New(::google::protobuf::Arena* arena) const {
  DB_Player* n = new DB_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_Player::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_Player*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bag()) {
      if (bag_ != NULL) bag_->::DB_Bag::Clear();
    }
    if (has_lives()) {
      if (lives_ != NULL) lives_->::DB_LivesInfo::Clear();
    }
    if (has_universeinfo()) {
      if (universeinfo_ != NULL) universeinfo_->::DB_UniverseInfo::Clear();
    }
    inited_ = false;
    if (has_candy_properties()) {
      if (candy_properties_ != NULL) candy_properties_->::DB_CandyProperties::Clear();
    }
    if (has_message_events()) {
      if (message_events_ != NULL) message_events_->::DB_Events::Clear();
    }
    friend_action_pos_ = 0;
  }
  if (_has_bits_[8 / 32] & 31488) {
    friend_actions_allread_ = false;
    friend_action_unread_cnt_ = 0;
    if (has_option()) {
      if (option_ != NULL) option_->::DB_Option::Clear();
    }
    if (has_onceoperating()) {
      if (onceoperating_ != NULL) onceoperating_->::DB_BitCache::Clear();
    }
    last_login_reward_time_ = GOOGLE_LONGLONG(0);
    if (has_limit()) {
      if (limit_ != NULL) limit_->::DB_Limit::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16384000) {
    if (has_weibo()) {
      if (weibo_ != NULL) weibo_->::DB_Weibo::Clear();
    }
    if (has_new_func_record()) {
      if (new_func_record_ != NULL) new_func_record_->::DB_NewFunc::Clear();
    }
    dallygiftday_ = 0;
    if (has_func()) {
      if (func_ != NULL) func_->::DB_FuncSwitch::Clear();
    }
    if (has_share()) {
      if (share_ != NULL) share_->::DB_Limit::Clear();
    }
    if (has_friend_gift()) {
      if (friend_gift_ != NULL) friend_gift_->::DB_FriendGift::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(broadcast_unread_cnt_, messages_unread_cnt_);
    ZR_(invite_version_, invite_count_o1_);
    if (has_banlogin()) {
      if (banlogin_ != NULL) banlogin_->::DB_BanLogin::Clear();
    }
    if (has_friendgiftlivehistory()) {
      if (friendgiftlivehistory_ != NULL) friendgiftlivehistory_->::TimeLimitedUidSet::Clear();
    }
    if (has_singedhistory()) {
      if (singedhistory_ != NULL) singedhistory_->::DB_Singed::Clear();
    }
    if (has_inviter_openid()) {
      inviter_openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_yelldmd()) {
      if (yelldmd_ != NULL) yelldmd_->::DB_Yelldmd::Clear();
    }
    if (has_sign_history()) {
      if (sign_history_ != NULL) sign_history_->::DB_SignHistory::Clear();
    }
    if (has_cdkey_pickhistory()) {
      if (cdkey_pickhistory_ != NULL) cdkey_pickhistory_->::DB_BitCache::Clear();
    }
    if (has_new_user_save_gift()) {
      if (new_user_save_gift_ != NULL) new_user_save_gift_->::DB_BitCache::Clear();
    }
    if (has_easytimeset()) {
      if (easytimeset_ != NULL) easytimeset_->::DB_EasyTimeSet::Clear();
    }
    skiplog_ = false;
    invite_send_count_ = 0;
    if (has_dally_universe()) {
      if (dally_universe_ != NULL) dally_universe_->::DB_DallyUniverseInfo::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    now_playing_level_ = 0;
    if (has_dailycounter()) {
      if (dailycounter_ != NULL) dailycounter_->::DB_DailyCounter::Clear();
    }
    if (has_rewared_bit_cache()) {
      if (rewared_bit_cache_ != NULL) rewared_bit_cache_->::DB_BitCache::Clear();
    }
    if (has_callback()) {
      if (callback_ != NULL) callback_->::DB_CallBack::Clear();
    }
    from_zynga_city_ = false;
    if (has_friendgiftlivesendhistory()) {
      if (friendgiftlivesendhistory_ != NULL) friendgiftlivesendhistory_->::TimeLimitedUidSet::Clear();
    }
    if (has_continouslogindays()) {
      if (continouslogindays_ != NULL) continouslogindays_->::DB_ContinuousDays::Clear();
    }
    if (has_room()) {
      if (room_ != NULL) room_->::DB_Map::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(invite_count_, qpoint_usage_feedback_);
    if (has_dragboatfestivl()) {
      if (dragboatfestivl_ != NULL) dragboatfestivl_->::DB_DragboatFvl::Clear();
    }
    if (has_activeinviteself()) {
      if (activeinviteself_ != NULL) activeinviteself_->::DB_ActiveInviteself::Clear();
    }
    mobiledevicesynccnt_ = 0;
    if (has_activecallback()) {
      if (activecallback_ != NULL) activecallback_->::DB_ActiveCallBack::Clear();
    }
    if (has_kingofstar()) {
      if (kingofstar_ != NULL) kingofstar_->::DB_KingOfStar::Clear();
    }
    if (has_exp_level()) {
      if (exp_level_ != NULL) exp_level_->::DB_ExpLevel::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  friend_actions_.Clear();
  web_buy_record_.Clear();
  cdkey_counter_.Clear();
  qqunion_key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nickname = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_Player.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bag;
        break;
      }

      // optional .DB_Bag bag = 2;
      case 2: {
        if (tag == 18) {
         parse_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lives;
        break;
      }

      // optional .DB_LivesInfo lives = 3;
      case 3: {
        if (tag == 26) {
         parse_lives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lives()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_universeinfo;
        break;
      }

      // optional .DB_UniverseInfo universeinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_universeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_universeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_inited;
        break;
      }

      // optional bool inited = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_inited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inited_)));
          set_has_inited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_candy_properties;
        break;
      }

      // optional .DB_CandyProperties candy_properties = 6;
      case 6: {
        if (tag == 50) {
         parse_candy_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_candy_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_message_events;
        break;
      }

      // optional .DB_Events message_events = 7;
      case 7: {
        if (tag == 58) {
         parse_message_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_friend_action_pos;
        break;
      }

      // optional int32 friend_action_pos = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_friend_action_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_action_pos_)));
          set_has_friend_action_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_friend_actions_allread;
        break;
      }

      // optional bool friend_actions_allread = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_friend_actions_allread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friend_actions_allread_)));
          set_has_friend_actions_allread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_friend_action_unread_cnt;
        break;
      }

      // optional int32 friend_action_unread_cnt = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_friend_action_unread_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_action_unread_cnt_)));
          set_has_friend_action_unread_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_friend_actions;
        break;
      }

      // repeated .DB_ActionRecord friend_actions = 11;
      case 11: {
        if (tag == 90) {
         parse_friend_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_friend_actions;
        if (input->ExpectTag(98)) goto parse_option;
        break;
      }

      // optional .DB_Option option = 12;
      case 12: {
        if (tag == 98) {
         parse_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_option()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_OnceOperating;
        break;
      }

      // optional .DB_BitCache OnceOperating = 13;
      case 13: {
        if (tag == 106) {
         parse_OnceOperating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onceoperating()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_last_login_reward_time;
        break;
      }

      // optional int64 last_login_reward_time = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_last_login_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_login_reward_time_)));
          set_has_last_login_reward_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_limit;
        break;
      }

      // optional .DB_Limit limit = 15;
      case 15: {
        if (tag == 122) {
         parse_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_web_buy_record;
        break;
      }

      // repeated .DB_WebBuyRecord web_buy_record = 16;
      case 16: {
        if (tag == 130) {
         parse_web_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_web_buy_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_web_buy_record;
        if (input->ExpectTag(136)) goto parse_invite_version;
        break;
      }

      // optional int32 invite_version = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_invite_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_version_)));
          set_has_invite_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_cdkey_counter;
        break;
      }

      // repeated .DB_CDKey cdkey_counter = 18;
      case 18: {
        if (tag == 146) {
         parse_cdkey_counter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cdkey_counter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_cdkey_counter;
        if (input->ExpectTag(154)) goto parse_weibo;
        break;
      }

      // optional .DB_Weibo weibo = 19;
      case 19: {
        if (tag == 154) {
         parse_weibo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weibo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_qqunion_key;
        break;
      }

      // repeated string qqunion_key = 20;
      case 20: {
        if (tag == 162) {
         parse_qqunion_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_qqunion_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qqunion_key(this->qqunion_key_size() - 1).data(),
            this->qqunion_key(this->qqunion_key_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_Player.qqunion_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_qqunion_key;
        if (input->ExpectTag(170)) goto parse_new_func_record;
        break;
      }

      // optional .DB_NewFunc new_func_record = 21;
      case 21: {
        if (tag == 170) {
         parse_new_func_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_func_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_dallygiftday;
        break;
      }

      // optional int32 dallygiftday = 22 [default = 0];
      case 22: {
        if (tag == 176) {
         parse_dallygiftday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dallygiftday_)));
          set_has_dallygiftday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_func;
        break;
      }

      // optional .DB_FuncSwitch func = 23;
      case 23: {
        if (tag == 186) {
         parse_func:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_func()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_share;
        break;
      }

      // optional .DB_Limit share = 24;
      case 24: {
        if (tag == 194) {
         parse_share:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_share()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_friend_gift;
        break;
      }

      // optional .DB_FriendGift friend_gift = 25;
      case 25: {
        if (tag == 202) {
         parse_friend_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_gift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_banlogin;
        break;
      }

      // optional .DB_BanLogin banlogin = 26;
      case 26: {
        if (tag == 210) {
         parse_banlogin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banlogin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_broadcast_unread_cnt;
        break;
      }

      // optional int32 broadcast_unread_cnt = 32 [default = 0];
      case 32: {
        if (tag == 256) {
         parse_broadcast_unread_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_unread_cnt_)));
          set_has_broadcast_unread_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_messages_unread_cnt;
        break;
      }

      // optional int32 messages_unread_cnt = 34 [default = 0];
      case 34: {
        if (tag == 272) {
         parse_messages_unread_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messages_unread_cnt_)));
          set_has_messages_unread_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_FriendGiftLiveHistory;
        break;
      }

      // optional .TimeLimitedUidSet FriendGiftLiveHistory = 35;
      case 35: {
        if (tag == 282) {
         parse_FriendGiftLiveHistory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendgiftlivehistory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_SingedHistory;
        break;
      }

      // optional .DB_Singed SingedHistory = 36;
      case 36: {
        if (tag == 290) {
         parse_SingedHistory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_singedhistory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_inviter_openid;
        break;
      }

      // optional string inviter_openid = 38 [default = ""];
      case 38: {
        if (tag == 306) {
         parse_inviter_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviter_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inviter_openid().data(), this->inviter_openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_Player.inviter_openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_yelldmd;
        break;
      }

      // optional .DB_Yelldmd yelldmd = 39;
      case 39: {
        if (tag == 314) {
         parse_yelldmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yelldmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_sign_history;
        break;
      }

      // optional .DB_SignHistory sign_history = 40;
      case 40: {
        if (tag == 322) {
         parse_sign_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_cdkey_pickhistory;
        break;
      }

      // optional .DB_BitCache cdkey_pickhistory = 41;
      case 41: {
        if (tag == 330) {
         parse_cdkey_pickhistory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdkey_pickhistory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_new_user_save_gift;
        break;
      }

      // optional .DB_BitCache new_user_save_gift = 42;
      case 42: {
        if (tag == 338) {
         parse_new_user_save_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_user_save_gift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_easytimeset;
        break;
      }

      // optional .DB_EasyTimeSet easytimeset = 43;
      case 43: {
        if (tag == 346) {
         parse_easytimeset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_easytimeset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_SkipLog;
        break;
      }

      // optional bool SkipLog = 44 [default = false];
      case 44: {
        if (tag == 352) {
         parse_SkipLog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skiplog_)));
          set_has_skiplog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_invite_send_count;
        break;
      }

      // optional int32 invite_send_count = 45 [default = 0];
      case 45: {
        if (tag == 360) {
         parse_invite_send_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_send_count_)));
          set_has_invite_send_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_dally_universe;
        break;
      }

      // optional .DB_DallyUniverseInfo dally_universe = 46;
      case 46: {
        if (tag == 370) {
         parse_dally_universe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dally_universe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_now_playing_level;
        break;
      }

      // optional int32 now_playing_level = 47;
      case 47: {
        if (tag == 376) {
         parse_now_playing_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_playing_level_)));
          set_has_now_playing_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_dailycounter;
        break;
      }

      // optional .DB_DailyCounter dailycounter = 48;
      case 48: {
        if (tag == 386) {
         parse_dailycounter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailycounter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_rewared_bit_cache;
        break;
      }

      // optional .DB_BitCache rewared_bit_cache = 49;
      case 49: {
        if (tag == 394) {
         parse_rewared_bit_cache:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewared_bit_cache()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_invite_count_o1;
        break;
      }

      // optional int32 invite_count_o1 = 50 [default = 0];
      case 50: {
        if (tag == 400) {
         parse_invite_count_o1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_count_o1_)));
          set_has_invite_count_o1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_callback;
        break;
      }

      // optional .DB_CallBack callback = 51;
      case 51: {
        if (tag == 410) {
         parse_callback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_from_zynga_city;
        break;
      }

      // optional bool from_zynga_city = 52 [default = false];
      case 52: {
        if (tag == 416) {
         parse_from_zynga_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_zynga_city_)));
          set_has_from_zynga_city();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_FriendGiftLiveSendHistory;
        break;
      }

      // optional .TimeLimitedUidSet FriendGiftLiveSendHistory = 53;
      case 53: {
        if (tag == 426) {
         parse_FriendGiftLiveSendHistory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendgiftlivesendhistory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_ContinousLoginDays;
        break;
      }

      // optional .DB_ContinuousDays ContinousLoginDays = 54;
      case 54: {
        if (tag == 434) {
         parse_ContinousLoginDays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_continouslogindays()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_Room;
        break;
      }

      // optional .DB_Map Room = 55;
      case 55: {
        if (tag == 442) {
         parse_Room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_invite_count;
        break;
      }

      // optional int32 invite_count = 56 [default = 0];
      case 56: {
        if (tag == 448) {
         parse_invite_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_count_)));
          set_has_invite_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_Dragboatfestivl;
        break;
      }

      // optional .DB_DragboatFvl Dragboatfestivl = 57;
      case 57: {
        if (tag == 458) {
         parse_Dragboatfestivl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dragboatfestivl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_ActiveInviteself;
        break;
      }

      // optional .DB_ActiveInviteself ActiveInviteself = 58;
      case 58: {
        if (tag == 466) {
         parse_ActiveInviteself:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activeinviteself()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_qpoint_usage_feedback;
        break;
      }

      // optional int32 qpoint_usage_feedback = 59 [default = 0];
      case 59: {
        if (tag == 472) {
         parse_qpoint_usage_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qpoint_usage_feedback_)));
          set_has_qpoint_usage_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_MobileDeviceSyncCnt;
        break;
      }

      // optional int32 MobileDeviceSyncCnt = 60 [default = 0];
      case 60: {
        if (tag == 480) {
         parse_MobileDeviceSyncCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobiledevicesynccnt_)));
          set_has_mobiledevicesynccnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_ActiveCallBack;
        break;
      }

      // optional .DB_ActiveCallBack ActiveCallBack = 61;
      case 61: {
        if (tag == 490) {
         parse_ActiveCallBack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activecallback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_KingOfStar;
        break;
      }

      // optional .DB_KingOfStar KingOfStar = 62;
      case 62: {
        if (tag == 498) {
         parse_KingOfStar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kingofstar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_exp_level;
        break;
      }

      // optional .DB_ExpLevel exp_level = 63;
      case 63: {
        if (tag == 506) {
         parse_exp_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_Player)
  return false;
#undef DO_
}

void DB_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_Player)
  // optional string nickname = 1 [default = ""];
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_Player.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // optional .DB_Bag bag = 2;
  if (has_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bag_, output);
  }

  // optional .DB_LivesInfo lives = 3;
  if (has_lives()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lives_, output);
  }

  // optional .DB_UniverseInfo universeinfo = 4;
  if (has_universeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->universeinfo_, output);
  }

  // optional bool inited = 5 [default = false];
  if (has_inited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->inited(), output);
  }

  // optional .DB_CandyProperties candy_properties = 6;
  if (has_candy_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->candy_properties_, output);
  }

  // optional .DB_Events message_events = 7;
  if (has_message_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->message_events_, output);
  }

  // optional int32 friend_action_pos = 8 [default = 0];
  if (has_friend_action_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->friend_action_pos(), output);
  }

  // optional bool friend_actions_allread = 9 [default = false];
  if (has_friend_actions_allread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->friend_actions_allread(), output);
  }

  // optional int32 friend_action_unread_cnt = 10 [default = 0];
  if (has_friend_action_unread_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->friend_action_unread_cnt(), output);
  }

  // repeated .DB_ActionRecord friend_actions = 11;
  for (unsigned int i = 0, n = this->friend_actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->friend_actions(i), output);
  }

  // optional .DB_Option option = 12;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->option_, output);
  }

  // optional .DB_BitCache OnceOperating = 13;
  if (has_onceoperating()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->onceoperating_, output);
  }

  // optional int64 last_login_reward_time = 14 [default = 0];
  if (has_last_login_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->last_login_reward_time(), output);
  }

  // optional .DB_Limit limit = 15;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->limit_, output);
  }

  // repeated .DB_WebBuyRecord web_buy_record = 16;
  for (unsigned int i = 0, n = this->web_buy_record_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->web_buy_record(i), output);
  }

  // optional int32 invite_version = 17 [default = 0];
  if (has_invite_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->invite_version(), output);
  }

  // repeated .DB_CDKey cdkey_counter = 18;
  for (unsigned int i = 0, n = this->cdkey_counter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->cdkey_counter(i), output);
  }

  // optional .DB_Weibo weibo = 19;
  if (has_weibo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->weibo_, output);
  }

  // repeated string qqunion_key = 20;
  for (int i = 0; i < this->qqunion_key_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->qqunion_key(i).data(), this->qqunion_key(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "DB_Player.qqunion_key");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->qqunion_key(i), output);
  }

  // optional .DB_NewFunc new_func_record = 21;
  if (has_new_func_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->new_func_record_, output);
  }

  // optional int32 dallygiftday = 22 [default = 0];
  if (has_dallygiftday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->dallygiftday(), output);
  }

  // optional .DB_FuncSwitch func = 23;
  if (has_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->func_, output);
  }

  // optional .DB_Limit share = 24;
  if (has_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->share_, output);
  }

  // optional .DB_FriendGift friend_gift = 25;
  if (has_friend_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->friend_gift_, output);
  }

  // optional .DB_BanLogin banlogin = 26;
  if (has_banlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->banlogin_, output);
  }

  // optional int32 broadcast_unread_cnt = 32 [default = 0];
  if (has_broadcast_unread_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->broadcast_unread_cnt(), output);
  }

  // optional int32 messages_unread_cnt = 34 [default = 0];
  if (has_messages_unread_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->messages_unread_cnt(), output);
  }

  // optional .TimeLimitedUidSet FriendGiftLiveHistory = 35;
  if (has_friendgiftlivehistory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->friendgiftlivehistory_, output);
  }

  // optional .DB_Singed SingedHistory = 36;
  if (has_singedhistory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->singedhistory_, output);
  }

  // optional string inviter_openid = 38 [default = ""];
  if (has_inviter_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviter_openid().data(), this->inviter_openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_Player.inviter_openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->inviter_openid(), output);
  }

  // optional .DB_Yelldmd yelldmd = 39;
  if (has_yelldmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->yelldmd_, output);
  }

  // optional .DB_SignHistory sign_history = 40;
  if (has_sign_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->sign_history_, output);
  }

  // optional .DB_BitCache cdkey_pickhistory = 41;
  if (has_cdkey_pickhistory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->cdkey_pickhistory_, output);
  }

  // optional .DB_BitCache new_user_save_gift = 42;
  if (has_new_user_save_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->new_user_save_gift_, output);
  }

  // optional .DB_EasyTimeSet easytimeset = 43;
  if (has_easytimeset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *this->easytimeset_, output);
  }

  // optional bool SkipLog = 44 [default = false];
  if (has_skiplog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->skiplog(), output);
  }

  // optional int32 invite_send_count = 45 [default = 0];
  if (has_invite_send_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->invite_send_count(), output);
  }

  // optional .DB_DallyUniverseInfo dally_universe = 46;
  if (has_dally_universe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *this->dally_universe_, output);
  }

  // optional int32 now_playing_level = 47;
  if (has_now_playing_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->now_playing_level(), output);
  }

  // optional .DB_DailyCounter dailycounter = 48;
  if (has_dailycounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, *this->dailycounter_, output);
  }

  // optional .DB_BitCache rewared_bit_cache = 49;
  if (has_rewared_bit_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, *this->rewared_bit_cache_, output);
  }

  // optional int32 invite_count_o1 = 50 [default = 0];
  if (has_invite_count_o1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->invite_count_o1(), output);
  }

  // optional .DB_CallBack callback = 51;
  if (has_callback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *this->callback_, output);
  }

  // optional bool from_zynga_city = 52 [default = false];
  if (has_from_zynga_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->from_zynga_city(), output);
  }

  // optional .TimeLimitedUidSet FriendGiftLiveSendHistory = 53;
  if (has_friendgiftlivesendhistory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, *this->friendgiftlivesendhistory_, output);
  }

  // optional .DB_ContinuousDays ContinousLoginDays = 54;
  if (has_continouslogindays()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, *this->continouslogindays_, output);
  }

  // optional .DB_Map Room = 55;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, *this->room_, output);
  }

  // optional int32 invite_count = 56 [default = 0];
  if (has_invite_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->invite_count(), output);
  }

  // optional .DB_DragboatFvl Dragboatfestivl = 57;
  if (has_dragboatfestivl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, *this->dragboatfestivl_, output);
  }

  // optional .DB_ActiveInviteself ActiveInviteself = 58;
  if (has_activeinviteself()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, *this->activeinviteself_, output);
  }

  // optional int32 qpoint_usage_feedback = 59 [default = 0];
  if (has_qpoint_usage_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->qpoint_usage_feedback(), output);
  }

  // optional int32 MobileDeviceSyncCnt = 60 [default = 0];
  if (has_mobiledevicesynccnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->mobiledevicesynccnt(), output);
  }

  // optional .DB_ActiveCallBack ActiveCallBack = 61;
  if (has_activecallback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, *this->activecallback_, output);
  }

  // optional .DB_KingOfStar KingOfStar = 62;
  if (has_kingofstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, *this->kingofstar_, output);
  }

  // optional .DB_ExpLevel exp_level = 63;
  if (has_exp_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, *this->exp_level_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_Player)
}

::google::protobuf::uint8* DB_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_Player)
  // optional string nickname = 1 [default = ""];
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_Player.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // optional .DB_Bag bag = 2;
  if (has_bag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->bag_, target);
  }

  // optional .DB_LivesInfo lives = 3;
  if (has_lives()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->lives_, target);
  }

  // optional .DB_UniverseInfo universeinfo = 4;
  if (has_universeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->universeinfo_, target);
  }

  // optional bool inited = 5 [default = false];
  if (has_inited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->inited(), target);
  }

  // optional .DB_CandyProperties candy_properties = 6;
  if (has_candy_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->candy_properties_, target);
  }

  // optional .DB_Events message_events = 7;
  if (has_message_events()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->message_events_, target);
  }

  // optional int32 friend_action_pos = 8 [default = 0];
  if (has_friend_action_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->friend_action_pos(), target);
  }

  // optional bool friend_actions_allread = 9 [default = false];
  if (has_friend_actions_allread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->friend_actions_allread(), target);
  }

  // optional int32 friend_action_unread_cnt = 10 [default = 0];
  if (has_friend_action_unread_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->friend_action_unread_cnt(), target);
  }

  // repeated .DB_ActionRecord friend_actions = 11;
  for (unsigned int i = 0, n = this->friend_actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->friend_actions(i), target);
  }

  // optional .DB_Option option = 12;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->option_, target);
  }

  // optional .DB_BitCache OnceOperating = 13;
  if (has_onceoperating()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->onceoperating_, target);
  }

  // optional int64 last_login_reward_time = 14 [default = 0];
  if (has_last_login_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->last_login_reward_time(), target);
  }

  // optional .DB_Limit limit = 15;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->limit_, target);
  }

  // repeated .DB_WebBuyRecord web_buy_record = 16;
  for (unsigned int i = 0, n = this->web_buy_record_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->web_buy_record(i), target);
  }

  // optional int32 invite_version = 17 [default = 0];
  if (has_invite_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->invite_version(), target);
  }

  // repeated .DB_CDKey cdkey_counter = 18;
  for (unsigned int i = 0, n = this->cdkey_counter_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->cdkey_counter(i), target);
  }

  // optional .DB_Weibo weibo = 19;
  if (has_weibo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, *this->weibo_, target);
  }

  // repeated string qqunion_key = 20;
  for (int i = 0; i < this->qqunion_key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qqunion_key(i).data(), this->qqunion_key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_Player.qqunion_key");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->qqunion_key(i), target);
  }

  // optional .DB_NewFunc new_func_record = 21;
  if (has_new_func_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, *this->new_func_record_, target);
  }

  // optional int32 dallygiftday = 22 [default = 0];
  if (has_dallygiftday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->dallygiftday(), target);
  }

  // optional .DB_FuncSwitch func = 23;
  if (has_func()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, *this->func_, target);
  }

  // optional .DB_Limit share = 24;
  if (has_share()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, *this->share_, target);
  }

  // optional .DB_FriendGift friend_gift = 25;
  if (has_friend_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, *this->friend_gift_, target);
  }

  // optional .DB_BanLogin banlogin = 26;
  if (has_banlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, *this->banlogin_, target);
  }

  // optional int32 broadcast_unread_cnt = 32 [default = 0];
  if (has_broadcast_unread_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->broadcast_unread_cnt(), target);
  }

  // optional int32 messages_unread_cnt = 34 [default = 0];
  if (has_messages_unread_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->messages_unread_cnt(), target);
  }

  // optional .TimeLimitedUidSet FriendGiftLiveHistory = 35;
  if (has_friendgiftlivehistory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, *this->friendgiftlivehistory_, target);
  }

  // optional .DB_Singed SingedHistory = 36;
  if (has_singedhistory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, *this->singedhistory_, target);
  }

  // optional string inviter_openid = 38 [default = ""];
  if (has_inviter_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviter_openid().data(), this->inviter_openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_Player.inviter_openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->inviter_openid(), target);
  }

  // optional .DB_Yelldmd yelldmd = 39;
  if (has_yelldmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, *this->yelldmd_, target);
  }

  // optional .DB_SignHistory sign_history = 40;
  if (has_sign_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, *this->sign_history_, target);
  }

  // optional .DB_BitCache cdkey_pickhistory = 41;
  if (has_cdkey_pickhistory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, *this->cdkey_pickhistory_, target);
  }

  // optional .DB_BitCache new_user_save_gift = 42;
  if (has_new_user_save_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, *this->new_user_save_gift_, target);
  }

  // optional .DB_EasyTimeSet easytimeset = 43;
  if (has_easytimeset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, *this->easytimeset_, target);
  }

  // optional bool SkipLog = 44 [default = false];
  if (has_skiplog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->skiplog(), target);
  }

  // optional int32 invite_send_count = 45 [default = 0];
  if (has_invite_send_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->invite_send_count(), target);
  }

  // optional .DB_DallyUniverseInfo dally_universe = 46;
  if (has_dally_universe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, *this->dally_universe_, target);
  }

  // optional int32 now_playing_level = 47;
  if (has_now_playing_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->now_playing_level(), target);
  }

  // optional .DB_DailyCounter dailycounter = 48;
  if (has_dailycounter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, *this->dailycounter_, target);
  }

  // optional .DB_BitCache rewared_bit_cache = 49;
  if (has_rewared_bit_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, *this->rewared_bit_cache_, target);
  }

  // optional int32 invite_count_o1 = 50 [default = 0];
  if (has_invite_count_o1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->invite_count_o1(), target);
  }

  // optional .DB_CallBack callback = 51;
  if (has_callback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, *this->callback_, target);
  }

  // optional bool from_zynga_city = 52 [default = false];
  if (has_from_zynga_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->from_zynga_city(), target);
  }

  // optional .TimeLimitedUidSet FriendGiftLiveSendHistory = 53;
  if (has_friendgiftlivesendhistory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, *this->friendgiftlivesendhistory_, target);
  }

  // optional .DB_ContinuousDays ContinousLoginDays = 54;
  if (has_continouslogindays()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, *this->continouslogindays_, target);
  }

  // optional .DB_Map Room = 55;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, *this->room_, target);
  }

  // optional int32 invite_count = 56 [default = 0];
  if (has_invite_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->invite_count(), target);
  }

  // optional .DB_DragboatFvl Dragboatfestivl = 57;
  if (has_dragboatfestivl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, *this->dragboatfestivl_, target);
  }

  // optional .DB_ActiveInviteself ActiveInviteself = 58;
  if (has_activeinviteself()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, *this->activeinviteself_, target);
  }

  // optional int32 qpoint_usage_feedback = 59 [default = 0];
  if (has_qpoint_usage_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->qpoint_usage_feedback(), target);
  }

  // optional int32 MobileDeviceSyncCnt = 60 [default = 0];
  if (has_mobiledevicesynccnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->mobiledevicesynccnt(), target);
  }

  // optional .DB_ActiveCallBack ActiveCallBack = 61;
  if (has_activecallback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, *this->activecallback_, target);
  }

  // optional .DB_KingOfStar KingOfStar = 62;
  if (has_kingofstar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, *this->kingofstar_, target);
  }

  // optional .DB_ExpLevel exp_level = 63;
  if (has_exp_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, *this->exp_level_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_Player)
  return target;
}

int DB_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional string nickname = 1 [default = ""];
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional .DB_Bag bag = 2;
    if (has_bag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bag_);
    }

    // optional .DB_LivesInfo lives = 3;
    if (has_lives()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lives_);
    }

    // optional .DB_UniverseInfo universeinfo = 4;
    if (has_universeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->universeinfo_);
    }

    // optional bool inited = 5 [default = false];
    if (has_inited()) {
      total_size += 1 + 1;
    }

    // optional .DB_CandyProperties candy_properties = 6;
    if (has_candy_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->candy_properties_);
    }

    // optional .DB_Events message_events = 7;
    if (has_message_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->message_events_);
    }

    // optional int32 friend_action_pos = 8 [default = 0];
    if (has_friend_action_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_action_pos());
    }

  }
  if (_has_bits_[8 / 32] & 31488) {
    // optional bool friend_actions_allread = 9 [default = false];
    if (has_friend_actions_allread()) {
      total_size += 1 + 1;
    }

    // optional int32 friend_action_unread_cnt = 10 [default = 0];
    if (has_friend_action_unread_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_action_unread_cnt());
    }

    // optional .DB_Option option = 12;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->option_);
    }

    // optional .DB_BitCache OnceOperating = 13;
    if (has_onceoperating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->onceoperating_);
    }

    // optional int64 last_login_reward_time = 14 [default = 0];
    if (has_last_login_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_login_reward_time());
    }

    // optional .DB_Limit limit = 15;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->limit_);
    }

  }
  if (_has_bits_[17 / 32] & 16384000) {
    // optional .DB_Weibo weibo = 19;
    if (has_weibo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weibo_);
    }

    // optional .DB_NewFunc new_func_record = 21;
    if (has_new_func_record()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_func_record_);
    }

    // optional int32 dallygiftday = 22 [default = 0];
    if (has_dallygiftday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dallygiftday());
    }

    // optional .DB_FuncSwitch func = 23;
    if (has_func()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->func_);
    }

    // optional .DB_Limit share = 24;
    if (has_share()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->share_);
    }

    // optional .DB_FriendGift friend_gift = 25;
    if (has_friend_gift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->friend_gift_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080) {
    // optional .DB_BanLogin banlogin = 26;
    if (has_banlogin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->banlogin_);
    }

    // optional int32 broadcast_unread_cnt = 32 [default = 0];
    if (has_broadcast_unread_cnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcast_unread_cnt());
    }

    // optional int32 messages_unread_cnt = 34 [default = 0];
    if (has_messages_unread_cnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messages_unread_cnt());
    }

    // optional .TimeLimitedUidSet FriendGiftLiveHistory = 35;
    if (has_friendgiftlivehistory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->friendgiftlivehistory_);
    }

    // optional .DB_Singed SingedHistory = 36;
    if (has_singedhistory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->singedhistory_);
    }

    // optional int32 invite_version = 17 [default = 0];
    if (has_invite_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite_version());
    }

    // optional int32 invite_count_o1 = 50 [default = 0];
    if (has_invite_count_o1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite_count_o1());
    }

    // optional string inviter_openid = 38 [default = ""];
    if (has_inviter_openid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviter_openid());
    }

  }
  if (_has_bits_[32 / 32] & 255) {
    // optional .DB_Yelldmd yelldmd = 39;
    if (has_yelldmd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->yelldmd_);
    }

    // optional .DB_SignHistory sign_history = 40;
    if (has_sign_history()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sign_history_);
    }

    // optional .DB_BitCache cdkey_pickhistory = 41;
    if (has_cdkey_pickhistory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cdkey_pickhistory_);
    }

    // optional .DB_BitCache new_user_save_gift = 42;
    if (has_new_user_save_gift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_user_save_gift_);
    }

    // optional .DB_EasyTimeSet easytimeset = 43;
    if (has_easytimeset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->easytimeset_);
    }

    // optional bool SkipLog = 44 [default = false];
    if (has_skiplog()) {
      total_size += 2 + 1;
    }

    // optional int32 invite_send_count = 45 [default = 0];
    if (has_invite_send_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite_send_count());
    }

    // optional .DB_DallyUniverseInfo dally_universe = 46;
    if (has_dally_universe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dally_universe_);
    }

  }
  if (_has_bits_[40 / 32] & 65280) {
    // optional int32 now_playing_level = 47;
    if (has_now_playing_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_playing_level());
    }

    // optional .DB_DailyCounter dailycounter = 48;
    if (has_dailycounter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dailycounter_);
    }

    // optional .DB_BitCache rewared_bit_cache = 49;
    if (has_rewared_bit_cache()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rewared_bit_cache_);
    }

    // optional .DB_CallBack callback = 51;
    if (has_callback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->callback_);
    }

    // optional bool from_zynga_city = 52 [default = false];
    if (has_from_zynga_city()) {
      total_size += 2 + 1;
    }

    // optional .TimeLimitedUidSet FriendGiftLiveSendHistory = 53;
    if (has_friendgiftlivesendhistory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->friendgiftlivesendhistory_);
    }

    // optional .DB_ContinuousDays ContinousLoginDays = 54;
    if (has_continouslogindays()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->continouslogindays_);
    }

    // optional .DB_Map Room = 55;
    if (has_room()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->room_);
    }

  }
  if (_has_bits_[48 / 32] & 16711680) {
    // optional int32 invite_count = 56 [default = 0];
    if (has_invite_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite_count());
    }

    // optional .DB_DragboatFvl Dragboatfestivl = 57;
    if (has_dragboatfestivl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dragboatfestivl_);
    }

    // optional .DB_ActiveInviteself ActiveInviteself = 58;
    if (has_activeinviteself()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->activeinviteself_);
    }

    // optional int32 qpoint_usage_feedback = 59 [default = 0];
    if (has_qpoint_usage_feedback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qpoint_usage_feedback());
    }

    // optional int32 MobileDeviceSyncCnt = 60 [default = 0];
    if (has_mobiledevicesynccnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mobiledevicesynccnt());
    }

    // optional .DB_ActiveCallBack ActiveCallBack = 61;
    if (has_activecallback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->activecallback_);
    }

    // optional .DB_KingOfStar KingOfStar = 62;
    if (has_kingofstar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kingofstar_);
    }

    // optional .DB_ExpLevel exp_level = 63;
    if (has_exp_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->exp_level_);
    }

  }
  // repeated .DB_ActionRecord friend_actions = 11;
  total_size += 1 * this->friend_actions_size();
  for (int i = 0; i < this->friend_actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_actions(i));
  }

  // repeated .DB_WebBuyRecord web_buy_record = 16;
  total_size += 2 * this->web_buy_record_size();
  for (int i = 0; i < this->web_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->web_buy_record(i));
  }

  // repeated .DB_CDKey cdkey_counter = 18;
  total_size += 2 * this->cdkey_counter_size();
  for (int i = 0; i < this->cdkey_counter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cdkey_counter(i));
  }

  // repeated string qqunion_key = 20;
  total_size += 2 * this->qqunion_key_size();
  for (int i = 0; i < this->qqunion_key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->qqunion_key(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Player::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Player::MergeFrom(const DB_Player& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  friend_actions_.MergeFrom(from.friend_actions_);
  web_buy_record_.MergeFrom(from.web_buy_record_);
  cdkey_counter_.MergeFrom(from.cdkey_counter_);
  qqunion_key_.MergeFrom(from.qqunion_key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_bag()) {
      mutable_bag()->::DB_Bag::MergeFrom(from.bag());
    }
    if (from.has_lives()) {
      mutable_lives()->::DB_LivesInfo::MergeFrom(from.lives());
    }
    if (from.has_universeinfo()) {
      mutable_universeinfo()->::DB_UniverseInfo::MergeFrom(from.universeinfo());
    }
    if (from.has_inited()) {
      set_inited(from.inited());
    }
    if (from.has_candy_properties()) {
      mutable_candy_properties()->::DB_CandyProperties::MergeFrom(from.candy_properties());
    }
    if (from.has_message_events()) {
      mutable_message_events()->::DB_Events::MergeFrom(from.message_events());
    }
    if (from.has_friend_action_pos()) {
      set_friend_action_pos(from.friend_action_pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_friend_actions_allread()) {
      set_friend_actions_allread(from.friend_actions_allread());
    }
    if (from.has_friend_action_unread_cnt()) {
      set_friend_action_unread_cnt(from.friend_action_unread_cnt());
    }
    if (from.has_option()) {
      mutable_option()->::DB_Option::MergeFrom(from.option());
    }
    if (from.has_onceoperating()) {
      mutable_onceoperating()->::DB_BitCache::MergeFrom(from.onceoperating());
    }
    if (from.has_last_login_reward_time()) {
      set_last_login_reward_time(from.last_login_reward_time());
    }
    if (from.has_limit()) {
      mutable_limit()->::DB_Limit::MergeFrom(from.limit());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_weibo()) {
      mutable_weibo()->::DB_Weibo::MergeFrom(from.weibo());
    }
    if (from.has_new_func_record()) {
      mutable_new_func_record()->::DB_NewFunc::MergeFrom(from.new_func_record());
    }
    if (from.has_dallygiftday()) {
      set_dallygiftday(from.dallygiftday());
    }
    if (from.has_func()) {
      mutable_func()->::DB_FuncSwitch::MergeFrom(from.func());
    }
    if (from.has_share()) {
      mutable_share()->::DB_Limit::MergeFrom(from.share());
    }
    if (from.has_friend_gift()) {
      mutable_friend_gift()->::DB_FriendGift::MergeFrom(from.friend_gift());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_banlogin()) {
      mutable_banlogin()->::DB_BanLogin::MergeFrom(from.banlogin());
    }
    if (from.has_broadcast_unread_cnt()) {
      set_broadcast_unread_cnt(from.broadcast_unread_cnt());
    }
    if (from.has_messages_unread_cnt()) {
      set_messages_unread_cnt(from.messages_unread_cnt());
    }
    if (from.has_friendgiftlivehistory()) {
      mutable_friendgiftlivehistory()->::TimeLimitedUidSet::MergeFrom(from.friendgiftlivehistory());
    }
    if (from.has_singedhistory()) {
      mutable_singedhistory()->::DB_Singed::MergeFrom(from.singedhistory());
    }
    if (from.has_invite_version()) {
      set_invite_version(from.invite_version());
    }
    if (from.has_invite_count_o1()) {
      set_invite_count_o1(from.invite_count_o1());
    }
    if (from.has_inviter_openid()) {
      set_has_inviter_openid();
      inviter_openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviter_openid_);
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_yelldmd()) {
      mutable_yelldmd()->::DB_Yelldmd::MergeFrom(from.yelldmd());
    }
    if (from.has_sign_history()) {
      mutable_sign_history()->::DB_SignHistory::MergeFrom(from.sign_history());
    }
    if (from.has_cdkey_pickhistory()) {
      mutable_cdkey_pickhistory()->::DB_BitCache::MergeFrom(from.cdkey_pickhistory());
    }
    if (from.has_new_user_save_gift()) {
      mutable_new_user_save_gift()->::DB_BitCache::MergeFrom(from.new_user_save_gift());
    }
    if (from.has_easytimeset()) {
      mutable_easytimeset()->::DB_EasyTimeSet::MergeFrom(from.easytimeset());
    }
    if (from.has_skiplog()) {
      set_skiplog(from.skiplog());
    }
    if (from.has_invite_send_count()) {
      set_invite_send_count(from.invite_send_count());
    }
    if (from.has_dally_universe()) {
      mutable_dally_universe()->::DB_DallyUniverseInfo::MergeFrom(from.dally_universe());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_now_playing_level()) {
      set_now_playing_level(from.now_playing_level());
    }
    if (from.has_dailycounter()) {
      mutable_dailycounter()->::DB_DailyCounter::MergeFrom(from.dailycounter());
    }
    if (from.has_rewared_bit_cache()) {
      mutable_rewared_bit_cache()->::DB_BitCache::MergeFrom(from.rewared_bit_cache());
    }
    if (from.has_callback()) {
      mutable_callback()->::DB_CallBack::MergeFrom(from.callback());
    }
    if (from.has_from_zynga_city()) {
      set_from_zynga_city(from.from_zynga_city());
    }
    if (from.has_friendgiftlivesendhistory()) {
      mutable_friendgiftlivesendhistory()->::TimeLimitedUidSet::MergeFrom(from.friendgiftlivesendhistory());
    }
    if (from.has_continouslogindays()) {
      mutable_continouslogindays()->::DB_ContinuousDays::MergeFrom(from.continouslogindays());
    }
    if (from.has_room()) {
      mutable_room()->::DB_Map::MergeFrom(from.room());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_invite_count()) {
      set_invite_count(from.invite_count());
    }
    if (from.has_dragboatfestivl()) {
      mutable_dragboatfestivl()->::DB_DragboatFvl::MergeFrom(from.dragboatfestivl());
    }
    if (from.has_activeinviteself()) {
      mutable_activeinviteself()->::DB_ActiveInviteself::MergeFrom(from.activeinviteself());
    }
    if (from.has_qpoint_usage_feedback()) {
      set_qpoint_usage_feedback(from.qpoint_usage_feedback());
    }
    if (from.has_mobiledevicesynccnt()) {
      set_mobiledevicesynccnt(from.mobiledevicesynccnt());
    }
    if (from.has_activecallback()) {
      mutable_activecallback()->::DB_ActiveCallBack::MergeFrom(from.activecallback());
    }
    if (from.has_kingofstar()) {
      mutable_kingofstar()->::DB_KingOfStar::MergeFrom(from.kingofstar());
    }
    if (from.has_exp_level()) {
      mutable_exp_level()->::DB_ExpLevel::MergeFrom(from.exp_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Player::CopyFrom(const DB_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Player::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->web_buy_record())) return false;
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void DB_Player::Swap(DB_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_Player::InternalSwap(DB_Player* other) {
  nickname_.Swap(&other->nickname_);
  std::swap(bag_, other->bag_);
  std::swap(lives_, other->lives_);
  std::swap(universeinfo_, other->universeinfo_);
  std::swap(inited_, other->inited_);
  std::swap(candy_properties_, other->candy_properties_);
  std::swap(message_events_, other->message_events_);
  std::swap(friend_action_pos_, other->friend_action_pos_);
  std::swap(friend_actions_allread_, other->friend_actions_allread_);
  std::swap(friend_action_unread_cnt_, other->friend_action_unread_cnt_);
  friend_actions_.UnsafeArenaSwap(&other->friend_actions_);
  std::swap(option_, other->option_);
  std::swap(onceoperating_, other->onceoperating_);
  std::swap(last_login_reward_time_, other->last_login_reward_time_);
  std::swap(limit_, other->limit_);
  web_buy_record_.UnsafeArenaSwap(&other->web_buy_record_);
  cdkey_counter_.UnsafeArenaSwap(&other->cdkey_counter_);
  std::swap(weibo_, other->weibo_);
  qqunion_key_.UnsafeArenaSwap(&other->qqunion_key_);
  std::swap(new_func_record_, other->new_func_record_);
  std::swap(dallygiftday_, other->dallygiftday_);
  std::swap(func_, other->func_);
  std::swap(share_, other->share_);
  std::swap(friend_gift_, other->friend_gift_);
  std::swap(banlogin_, other->banlogin_);
  std::swap(broadcast_unread_cnt_, other->broadcast_unread_cnt_);
  std::swap(messages_unread_cnt_, other->messages_unread_cnt_);
  std::swap(friendgiftlivehistory_, other->friendgiftlivehistory_);
  std::swap(singedhistory_, other->singedhistory_);
  std::swap(invite_version_, other->invite_version_);
  std::swap(invite_count_o1_, other->invite_count_o1_);
  inviter_openid_.Swap(&other->inviter_openid_);
  std::swap(yelldmd_, other->yelldmd_);
  std::swap(sign_history_, other->sign_history_);
  std::swap(cdkey_pickhistory_, other->cdkey_pickhistory_);
  std::swap(new_user_save_gift_, other->new_user_save_gift_);
  std::swap(easytimeset_, other->easytimeset_);
  std::swap(skiplog_, other->skiplog_);
  std::swap(invite_send_count_, other->invite_send_count_);
  std::swap(dally_universe_, other->dally_universe_);
  std::swap(now_playing_level_, other->now_playing_level_);
  std::swap(dailycounter_, other->dailycounter_);
  std::swap(rewared_bit_cache_, other->rewared_bit_cache_);
  std::swap(callback_, other->callback_);
  std::swap(from_zynga_city_, other->from_zynga_city_);
  std::swap(friendgiftlivesendhistory_, other->friendgiftlivesendhistory_);
  std::swap(continouslogindays_, other->continouslogindays_);
  std::swap(room_, other->room_);
  std::swap(invite_count_, other->invite_count_);
  std::swap(dragboatfestivl_, other->dragboatfestivl_);
  std::swap(activeinviteself_, other->activeinviteself_);
  std::swap(qpoint_usage_feedback_, other->qpoint_usage_feedback_);
  std::swap(mobiledevicesynccnt_, other->mobiledevicesynccnt_);
  std::swap(activecallback_, other->activecallback_);
  std::swap(kingofstar_, other->kingofstar_);
  std::swap(exp_level_, other->exp_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Player_descriptor_;
  metadata.reflection = DB_Player_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_Player

// optional string nickname = 1 [default = ""];
 bool DB_Player::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_Player::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_Player::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_Player::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& DB_Player::nickname() const {
  // @@protoc_insertion_point(field_get:DB_Player.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_Player::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_Player.nickname)
}
 void DB_Player::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_Player.nickname)
}
 void DB_Player::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_Player.nickname)
}
 ::std::string* DB_Player::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:DB_Player.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_Player::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_Player::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:DB_Player.nickname)
}

// optional .DB_Bag bag = 2;
 bool DB_Player::has_bag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_Player::set_has_bag() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_Player::clear_has_bag() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_Player::clear_bag() {
  if (bag_ != NULL) bag_->::DB_Bag::Clear();
  clear_has_bag();
}
 const ::DB_Bag& DB_Player::bag() const {
  // @@protoc_insertion_point(field_get:DB_Player.bag)
  return bag_ != NULL ? *bag_ : *default_instance_->bag_;
}
 ::DB_Bag* DB_Player::mutable_bag() {
  set_has_bag();
  if (bag_ == NULL) {
    bag_ = new ::DB_Bag;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.bag)
  return bag_;
}
 ::DB_Bag* DB_Player::release_bag() {
  clear_has_bag();
  ::DB_Bag* temp = bag_;
  bag_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_bag(::DB_Bag* bag) {
  delete bag_;
  bag_ = bag;
  if (bag) {
    set_has_bag();
  } else {
    clear_has_bag();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.bag)
}

// optional .DB_LivesInfo lives = 3;
 bool DB_Player::has_lives() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DB_Player::set_has_lives() {
  _has_bits_[0] |= 0x00000004u;
}
 void DB_Player::clear_has_lives() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DB_Player::clear_lives() {
  if (lives_ != NULL) lives_->::DB_LivesInfo::Clear();
  clear_has_lives();
}
 const ::DB_LivesInfo& DB_Player::lives() const {
  // @@protoc_insertion_point(field_get:DB_Player.lives)
  return lives_ != NULL ? *lives_ : *default_instance_->lives_;
}
 ::DB_LivesInfo* DB_Player::mutable_lives() {
  set_has_lives();
  if (lives_ == NULL) {
    lives_ = new ::DB_LivesInfo;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.lives)
  return lives_;
}
 ::DB_LivesInfo* DB_Player::release_lives() {
  clear_has_lives();
  ::DB_LivesInfo* temp = lives_;
  lives_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_lives(::DB_LivesInfo* lives) {
  delete lives_;
  lives_ = lives;
  if (lives) {
    set_has_lives();
  } else {
    clear_has_lives();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.lives)
}

// optional .DB_UniverseInfo universeinfo = 4;
 bool DB_Player::has_universeinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DB_Player::set_has_universeinfo() {
  _has_bits_[0] |= 0x00000008u;
}
 void DB_Player::clear_has_universeinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DB_Player::clear_universeinfo() {
  if (universeinfo_ != NULL) universeinfo_->::DB_UniverseInfo::Clear();
  clear_has_universeinfo();
}
 const ::DB_UniverseInfo& DB_Player::universeinfo() const {
  // @@protoc_insertion_point(field_get:DB_Player.universeinfo)
  return universeinfo_ != NULL ? *universeinfo_ : *default_instance_->universeinfo_;
}
 ::DB_UniverseInfo* DB_Player::mutable_universeinfo() {
  set_has_universeinfo();
  if (universeinfo_ == NULL) {
    universeinfo_ = new ::DB_UniverseInfo;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.universeinfo)
  return universeinfo_;
}
 ::DB_UniverseInfo* DB_Player::release_universeinfo() {
  clear_has_universeinfo();
  ::DB_UniverseInfo* temp = universeinfo_;
  universeinfo_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_universeinfo(::DB_UniverseInfo* universeinfo) {
  delete universeinfo_;
  universeinfo_ = universeinfo;
  if (universeinfo) {
    set_has_universeinfo();
  } else {
    clear_has_universeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.universeinfo)
}

// optional bool inited = 5 [default = false];
 bool DB_Player::has_inited() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void DB_Player::set_has_inited() {
  _has_bits_[0] |= 0x00000010u;
}
 void DB_Player::clear_has_inited() {
  _has_bits_[0] &= ~0x00000010u;
}
 void DB_Player::clear_inited() {
  inited_ = false;
  clear_has_inited();
}
 bool DB_Player::inited() const {
  // @@protoc_insertion_point(field_get:DB_Player.inited)
  return inited_;
}
 void DB_Player::set_inited(bool value) {
  set_has_inited();
  inited_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.inited)
}

// optional .DB_CandyProperties candy_properties = 6;
 bool DB_Player::has_candy_properties() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_Player::set_has_candy_properties() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_Player::clear_has_candy_properties() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_Player::clear_candy_properties() {
  if (candy_properties_ != NULL) candy_properties_->::DB_CandyProperties::Clear();
  clear_has_candy_properties();
}
 const ::DB_CandyProperties& DB_Player::candy_properties() const {
  // @@protoc_insertion_point(field_get:DB_Player.candy_properties)
  return candy_properties_ != NULL ? *candy_properties_ : *default_instance_->candy_properties_;
}
 ::DB_CandyProperties* DB_Player::mutable_candy_properties() {
  set_has_candy_properties();
  if (candy_properties_ == NULL) {
    candy_properties_ = new ::DB_CandyProperties;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.candy_properties)
  return candy_properties_;
}
 ::DB_CandyProperties* DB_Player::release_candy_properties() {
  clear_has_candy_properties();
  ::DB_CandyProperties* temp = candy_properties_;
  candy_properties_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_candy_properties(::DB_CandyProperties* candy_properties) {
  delete candy_properties_;
  candy_properties_ = candy_properties;
  if (candy_properties) {
    set_has_candy_properties();
  } else {
    clear_has_candy_properties();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.candy_properties)
}

// optional .DB_Events message_events = 7;
 bool DB_Player::has_message_events() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void DB_Player::set_has_message_events() {
  _has_bits_[0] |= 0x00000040u;
}
 void DB_Player::clear_has_message_events() {
  _has_bits_[0] &= ~0x00000040u;
}
 void DB_Player::clear_message_events() {
  if (message_events_ != NULL) message_events_->::DB_Events::Clear();
  clear_has_message_events();
}
 const ::DB_Events& DB_Player::message_events() const {
  // @@protoc_insertion_point(field_get:DB_Player.message_events)
  return message_events_ != NULL ? *message_events_ : *default_instance_->message_events_;
}
 ::DB_Events* DB_Player::mutable_message_events() {
  set_has_message_events();
  if (message_events_ == NULL) {
    message_events_ = new ::DB_Events;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.message_events)
  return message_events_;
}
 ::DB_Events* DB_Player::release_message_events() {
  clear_has_message_events();
  ::DB_Events* temp = message_events_;
  message_events_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_message_events(::DB_Events* message_events) {
  delete message_events_;
  message_events_ = message_events;
  if (message_events) {
    set_has_message_events();
  } else {
    clear_has_message_events();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.message_events)
}

// optional int32 friend_action_pos = 8 [default = 0];
 bool DB_Player::has_friend_action_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void DB_Player::set_has_friend_action_pos() {
  _has_bits_[0] |= 0x00000080u;
}
 void DB_Player::clear_has_friend_action_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
 void DB_Player::clear_friend_action_pos() {
  friend_action_pos_ = 0;
  clear_has_friend_action_pos();
}
 ::google::protobuf::int32 DB_Player::friend_action_pos() const {
  // @@protoc_insertion_point(field_get:DB_Player.friend_action_pos)
  return friend_action_pos_;
}
 void DB_Player::set_friend_action_pos(::google::protobuf::int32 value) {
  set_has_friend_action_pos();
  friend_action_pos_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.friend_action_pos)
}

// optional bool friend_actions_allread = 9 [default = false];
 bool DB_Player::has_friend_actions_allread() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void DB_Player::set_has_friend_actions_allread() {
  _has_bits_[0] |= 0x00000100u;
}
 void DB_Player::clear_has_friend_actions_allread() {
  _has_bits_[0] &= ~0x00000100u;
}
 void DB_Player::clear_friend_actions_allread() {
  friend_actions_allread_ = false;
  clear_has_friend_actions_allread();
}
 bool DB_Player::friend_actions_allread() const {
  // @@protoc_insertion_point(field_get:DB_Player.friend_actions_allread)
  return friend_actions_allread_;
}
 void DB_Player::set_friend_actions_allread(bool value) {
  set_has_friend_actions_allread();
  friend_actions_allread_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.friend_actions_allread)
}

// optional int32 friend_action_unread_cnt = 10 [default = 0];
 bool DB_Player::has_friend_action_unread_cnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void DB_Player::set_has_friend_action_unread_cnt() {
  _has_bits_[0] |= 0x00000200u;
}
 void DB_Player::clear_has_friend_action_unread_cnt() {
  _has_bits_[0] &= ~0x00000200u;
}
 void DB_Player::clear_friend_action_unread_cnt() {
  friend_action_unread_cnt_ = 0;
  clear_has_friend_action_unread_cnt();
}
 ::google::protobuf::int32 DB_Player::friend_action_unread_cnt() const {
  // @@protoc_insertion_point(field_get:DB_Player.friend_action_unread_cnt)
  return friend_action_unread_cnt_;
}
 void DB_Player::set_friend_action_unread_cnt(::google::protobuf::int32 value) {
  set_has_friend_action_unread_cnt();
  friend_action_unread_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.friend_action_unread_cnt)
}

// repeated .DB_ActionRecord friend_actions = 11;
 int DB_Player::friend_actions_size() const {
  return friend_actions_.size();
}
 void DB_Player::clear_friend_actions() {
  friend_actions_.Clear();
}
 const ::DB_ActionRecord& DB_Player::friend_actions(int index) const {
  // @@protoc_insertion_point(field_get:DB_Player.friend_actions)
  return friend_actions_.Get(index);
}
 ::DB_ActionRecord* DB_Player::mutable_friend_actions(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Player.friend_actions)
  return friend_actions_.Mutable(index);
}
 ::DB_ActionRecord* DB_Player::add_friend_actions() {
  // @@protoc_insertion_point(field_add:DB_Player.friend_actions)
  return friend_actions_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord >&
DB_Player::friend_actions() const {
  // @@protoc_insertion_point(field_list:DB_Player.friend_actions)
  return friend_actions_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord >*
DB_Player::mutable_friend_actions() {
  // @@protoc_insertion_point(field_mutable_list:DB_Player.friend_actions)
  return &friend_actions_;
}

// optional .DB_Option option = 12;
 bool DB_Player::has_option() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void DB_Player::set_has_option() {
  _has_bits_[0] |= 0x00000800u;
}
 void DB_Player::clear_has_option() {
  _has_bits_[0] &= ~0x00000800u;
}
 void DB_Player::clear_option() {
  if (option_ != NULL) option_->::DB_Option::Clear();
  clear_has_option();
}
 const ::DB_Option& DB_Player::option() const {
  // @@protoc_insertion_point(field_get:DB_Player.option)
  return option_ != NULL ? *option_ : *default_instance_->option_;
}
 ::DB_Option* DB_Player::mutable_option() {
  set_has_option();
  if (option_ == NULL) {
    option_ = new ::DB_Option;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.option)
  return option_;
}
 ::DB_Option* DB_Player::release_option() {
  clear_has_option();
  ::DB_Option* temp = option_;
  option_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_option(::DB_Option* option) {
  delete option_;
  option_ = option;
  if (option) {
    set_has_option();
  } else {
    clear_has_option();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.option)
}

// optional .DB_BitCache OnceOperating = 13;
 bool DB_Player::has_onceoperating() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void DB_Player::set_has_onceoperating() {
  _has_bits_[0] |= 0x00001000u;
}
 void DB_Player::clear_has_onceoperating() {
  _has_bits_[0] &= ~0x00001000u;
}
 void DB_Player::clear_onceoperating() {
  if (onceoperating_ != NULL) onceoperating_->::DB_BitCache::Clear();
  clear_has_onceoperating();
}
 const ::DB_BitCache& DB_Player::onceoperating() const {
  // @@protoc_insertion_point(field_get:DB_Player.OnceOperating)
  return onceoperating_ != NULL ? *onceoperating_ : *default_instance_->onceoperating_;
}
 ::DB_BitCache* DB_Player::mutable_onceoperating() {
  set_has_onceoperating();
  if (onceoperating_ == NULL) {
    onceoperating_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.OnceOperating)
  return onceoperating_;
}
 ::DB_BitCache* DB_Player::release_onceoperating() {
  clear_has_onceoperating();
  ::DB_BitCache* temp = onceoperating_;
  onceoperating_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_onceoperating(::DB_BitCache* onceoperating) {
  delete onceoperating_;
  onceoperating_ = onceoperating;
  if (onceoperating) {
    set_has_onceoperating();
  } else {
    clear_has_onceoperating();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.OnceOperating)
}

// optional int64 last_login_reward_time = 14 [default = 0];
 bool DB_Player::has_last_login_reward_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
 void DB_Player::set_has_last_login_reward_time() {
  _has_bits_[0] |= 0x00002000u;
}
 void DB_Player::clear_has_last_login_reward_time() {
  _has_bits_[0] &= ~0x00002000u;
}
 void DB_Player::clear_last_login_reward_time() {
  last_login_reward_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_login_reward_time();
}
 ::google::protobuf::int64 DB_Player::last_login_reward_time() const {
  // @@protoc_insertion_point(field_get:DB_Player.last_login_reward_time)
  return last_login_reward_time_;
}
 void DB_Player::set_last_login_reward_time(::google::protobuf::int64 value) {
  set_has_last_login_reward_time();
  last_login_reward_time_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.last_login_reward_time)
}

// optional .DB_Limit limit = 15;
 bool DB_Player::has_limit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
 void DB_Player::set_has_limit() {
  _has_bits_[0] |= 0x00004000u;
}
 void DB_Player::clear_has_limit() {
  _has_bits_[0] &= ~0x00004000u;
}
 void DB_Player::clear_limit() {
  if (limit_ != NULL) limit_->::DB_Limit::Clear();
  clear_has_limit();
}
 const ::DB_Limit& DB_Player::limit() const {
  // @@protoc_insertion_point(field_get:DB_Player.limit)
  return limit_ != NULL ? *limit_ : *default_instance_->limit_;
}
 ::DB_Limit* DB_Player::mutable_limit() {
  set_has_limit();
  if (limit_ == NULL) {
    limit_ = new ::DB_Limit;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.limit)
  return limit_;
}
 ::DB_Limit* DB_Player::release_limit() {
  clear_has_limit();
  ::DB_Limit* temp = limit_;
  limit_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_limit(::DB_Limit* limit) {
  delete limit_;
  limit_ = limit;
  if (limit) {
    set_has_limit();
  } else {
    clear_has_limit();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.limit)
}

// repeated .DB_WebBuyRecord web_buy_record = 16;
 int DB_Player::web_buy_record_size() const {
  return web_buy_record_.size();
}
 void DB_Player::clear_web_buy_record() {
  web_buy_record_.Clear();
}
 const ::DB_WebBuyRecord& DB_Player::web_buy_record(int index) const {
  // @@protoc_insertion_point(field_get:DB_Player.web_buy_record)
  return web_buy_record_.Get(index);
}
 ::DB_WebBuyRecord* DB_Player::mutable_web_buy_record(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Player.web_buy_record)
  return web_buy_record_.Mutable(index);
}
 ::DB_WebBuyRecord* DB_Player::add_web_buy_record() {
  // @@protoc_insertion_point(field_add:DB_Player.web_buy_record)
  return web_buy_record_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_WebBuyRecord >&
DB_Player::web_buy_record() const {
  // @@protoc_insertion_point(field_list:DB_Player.web_buy_record)
  return web_buy_record_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_WebBuyRecord >*
DB_Player::mutable_web_buy_record() {
  // @@protoc_insertion_point(field_mutable_list:DB_Player.web_buy_record)
  return &web_buy_record_;
}

// repeated .DB_CDKey cdkey_counter = 18;
 int DB_Player::cdkey_counter_size() const {
  return cdkey_counter_.size();
}
 void DB_Player::clear_cdkey_counter() {
  cdkey_counter_.Clear();
}
 const ::DB_CDKey& DB_Player::cdkey_counter(int index) const {
  // @@protoc_insertion_point(field_get:DB_Player.cdkey_counter)
  return cdkey_counter_.Get(index);
}
 ::DB_CDKey* DB_Player::mutable_cdkey_counter(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Player.cdkey_counter)
  return cdkey_counter_.Mutable(index);
}
 ::DB_CDKey* DB_Player::add_cdkey_counter() {
  // @@protoc_insertion_point(field_add:DB_Player.cdkey_counter)
  return cdkey_counter_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::DB_CDKey >&
DB_Player::cdkey_counter() const {
  // @@protoc_insertion_point(field_list:DB_Player.cdkey_counter)
  return cdkey_counter_;
}
 ::google::protobuf::RepeatedPtrField< ::DB_CDKey >*
DB_Player::mutable_cdkey_counter() {
  // @@protoc_insertion_point(field_mutable_list:DB_Player.cdkey_counter)
  return &cdkey_counter_;
}

// optional .DB_Weibo weibo = 19;
 bool DB_Player::has_weibo() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
 void DB_Player::set_has_weibo() {
  _has_bits_[0] |= 0x00020000u;
}
 void DB_Player::clear_has_weibo() {
  _has_bits_[0] &= ~0x00020000u;
}
 void DB_Player::clear_weibo() {
  if (weibo_ != NULL) weibo_->::DB_Weibo::Clear();
  clear_has_weibo();
}
 const ::DB_Weibo& DB_Player::weibo() const {
  // @@protoc_insertion_point(field_get:DB_Player.weibo)
  return weibo_ != NULL ? *weibo_ : *default_instance_->weibo_;
}
 ::DB_Weibo* DB_Player::mutable_weibo() {
  set_has_weibo();
  if (weibo_ == NULL) {
    weibo_ = new ::DB_Weibo;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.weibo)
  return weibo_;
}
 ::DB_Weibo* DB_Player::release_weibo() {
  clear_has_weibo();
  ::DB_Weibo* temp = weibo_;
  weibo_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_weibo(::DB_Weibo* weibo) {
  delete weibo_;
  weibo_ = weibo;
  if (weibo) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.weibo)
}

// repeated string qqunion_key = 20;
 int DB_Player::qqunion_key_size() const {
  return qqunion_key_.size();
}
 void DB_Player::clear_qqunion_key() {
  qqunion_key_.Clear();
}
 const ::std::string& DB_Player::qqunion_key(int index) const {
  // @@protoc_insertion_point(field_get:DB_Player.qqunion_key)
  return qqunion_key_.Get(index);
}
 ::std::string* DB_Player::mutable_qqunion_key(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Player.qqunion_key)
  return qqunion_key_.Mutable(index);
}
 void DB_Player::set_qqunion_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_Player.qqunion_key)
  qqunion_key_.Mutable(index)->assign(value);
}
 void DB_Player::set_qqunion_key(int index, const char* value) {
  qqunion_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_Player.qqunion_key)
}
 void DB_Player::set_qqunion_key(int index, const char* value, size_t size) {
  qqunion_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_Player.qqunion_key)
}
 ::std::string* DB_Player::add_qqunion_key() {
  return qqunion_key_.Add();
}
 void DB_Player::add_qqunion_key(const ::std::string& value) {
  qqunion_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_Player.qqunion_key)
}
 void DB_Player::add_qqunion_key(const char* value) {
  qqunion_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_Player.qqunion_key)
}
 void DB_Player::add_qqunion_key(const char* value, size_t size) {
  qqunion_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_Player.qqunion_key)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_Player::qqunion_key() const {
  // @@protoc_insertion_point(field_list:DB_Player.qqunion_key)
  return qqunion_key_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_Player::mutable_qqunion_key() {
  // @@protoc_insertion_point(field_mutable_list:DB_Player.qqunion_key)
  return &qqunion_key_;
}

// optional .DB_NewFunc new_func_record = 21;
 bool DB_Player::has_new_func_record() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
 void DB_Player::set_has_new_func_record() {
  _has_bits_[0] |= 0x00080000u;
}
 void DB_Player::clear_has_new_func_record() {
  _has_bits_[0] &= ~0x00080000u;
}
 void DB_Player::clear_new_func_record() {
  if (new_func_record_ != NULL) new_func_record_->::DB_NewFunc::Clear();
  clear_has_new_func_record();
}
 const ::DB_NewFunc& DB_Player::new_func_record() const {
  // @@protoc_insertion_point(field_get:DB_Player.new_func_record)
  return new_func_record_ != NULL ? *new_func_record_ : *default_instance_->new_func_record_;
}
 ::DB_NewFunc* DB_Player::mutable_new_func_record() {
  set_has_new_func_record();
  if (new_func_record_ == NULL) {
    new_func_record_ = new ::DB_NewFunc;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.new_func_record)
  return new_func_record_;
}
 ::DB_NewFunc* DB_Player::release_new_func_record() {
  clear_has_new_func_record();
  ::DB_NewFunc* temp = new_func_record_;
  new_func_record_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_new_func_record(::DB_NewFunc* new_func_record) {
  delete new_func_record_;
  new_func_record_ = new_func_record;
  if (new_func_record) {
    set_has_new_func_record();
  } else {
    clear_has_new_func_record();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.new_func_record)
}

// optional int32 dallygiftday = 22 [default = 0];
 bool DB_Player::has_dallygiftday() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
 void DB_Player::set_has_dallygiftday() {
  _has_bits_[0] |= 0x00100000u;
}
 void DB_Player::clear_has_dallygiftday() {
  _has_bits_[0] &= ~0x00100000u;
}
 void DB_Player::clear_dallygiftday() {
  dallygiftday_ = 0;
  clear_has_dallygiftday();
}
 ::google::protobuf::int32 DB_Player::dallygiftday() const {
  // @@protoc_insertion_point(field_get:DB_Player.dallygiftday)
  return dallygiftday_;
}
 void DB_Player::set_dallygiftday(::google::protobuf::int32 value) {
  set_has_dallygiftday();
  dallygiftday_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.dallygiftday)
}

// optional .DB_FuncSwitch func = 23;
 bool DB_Player::has_func() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
 void DB_Player::set_has_func() {
  _has_bits_[0] |= 0x00200000u;
}
 void DB_Player::clear_has_func() {
  _has_bits_[0] &= ~0x00200000u;
}
 void DB_Player::clear_func() {
  if (func_ != NULL) func_->::DB_FuncSwitch::Clear();
  clear_has_func();
}
 const ::DB_FuncSwitch& DB_Player::func() const {
  // @@protoc_insertion_point(field_get:DB_Player.func)
  return func_ != NULL ? *func_ : *default_instance_->func_;
}
 ::DB_FuncSwitch* DB_Player::mutable_func() {
  set_has_func();
  if (func_ == NULL) {
    func_ = new ::DB_FuncSwitch;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.func)
  return func_;
}
 ::DB_FuncSwitch* DB_Player::release_func() {
  clear_has_func();
  ::DB_FuncSwitch* temp = func_;
  func_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_func(::DB_FuncSwitch* func) {
  delete func_;
  func_ = func;
  if (func) {
    set_has_func();
  } else {
    clear_has_func();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.func)
}

// optional .DB_Limit share = 24;
 bool DB_Player::has_share() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
 void DB_Player::set_has_share() {
  _has_bits_[0] |= 0x00400000u;
}
 void DB_Player::clear_has_share() {
  _has_bits_[0] &= ~0x00400000u;
}
 void DB_Player::clear_share() {
  if (share_ != NULL) share_->::DB_Limit::Clear();
  clear_has_share();
}
 const ::DB_Limit& DB_Player::share() const {
  // @@protoc_insertion_point(field_get:DB_Player.share)
  return share_ != NULL ? *share_ : *default_instance_->share_;
}
 ::DB_Limit* DB_Player::mutable_share() {
  set_has_share();
  if (share_ == NULL) {
    share_ = new ::DB_Limit;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.share)
  return share_;
}
 ::DB_Limit* DB_Player::release_share() {
  clear_has_share();
  ::DB_Limit* temp = share_;
  share_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_share(::DB_Limit* share) {
  delete share_;
  share_ = share;
  if (share) {
    set_has_share();
  } else {
    clear_has_share();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.share)
}

// optional .DB_FriendGift friend_gift = 25;
 bool DB_Player::has_friend_gift() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
 void DB_Player::set_has_friend_gift() {
  _has_bits_[0] |= 0x00800000u;
}
 void DB_Player::clear_has_friend_gift() {
  _has_bits_[0] &= ~0x00800000u;
}
 void DB_Player::clear_friend_gift() {
  if (friend_gift_ != NULL) friend_gift_->::DB_FriendGift::Clear();
  clear_has_friend_gift();
}
 const ::DB_FriendGift& DB_Player::friend_gift() const {
  // @@protoc_insertion_point(field_get:DB_Player.friend_gift)
  return friend_gift_ != NULL ? *friend_gift_ : *default_instance_->friend_gift_;
}
 ::DB_FriendGift* DB_Player::mutable_friend_gift() {
  set_has_friend_gift();
  if (friend_gift_ == NULL) {
    friend_gift_ = new ::DB_FriendGift;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.friend_gift)
  return friend_gift_;
}
 ::DB_FriendGift* DB_Player::release_friend_gift() {
  clear_has_friend_gift();
  ::DB_FriendGift* temp = friend_gift_;
  friend_gift_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_friend_gift(::DB_FriendGift* friend_gift) {
  delete friend_gift_;
  friend_gift_ = friend_gift;
  if (friend_gift) {
    set_has_friend_gift();
  } else {
    clear_has_friend_gift();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.friend_gift)
}

// optional .DB_BanLogin banlogin = 26;
 bool DB_Player::has_banlogin() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
 void DB_Player::set_has_banlogin() {
  _has_bits_[0] |= 0x01000000u;
}
 void DB_Player::clear_has_banlogin() {
  _has_bits_[0] &= ~0x01000000u;
}
 void DB_Player::clear_banlogin() {
  if (banlogin_ != NULL) banlogin_->::DB_BanLogin::Clear();
  clear_has_banlogin();
}
 const ::DB_BanLogin& DB_Player::banlogin() const {
  // @@protoc_insertion_point(field_get:DB_Player.banlogin)
  return banlogin_ != NULL ? *banlogin_ : *default_instance_->banlogin_;
}
 ::DB_BanLogin* DB_Player::mutable_banlogin() {
  set_has_banlogin();
  if (banlogin_ == NULL) {
    banlogin_ = new ::DB_BanLogin;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.banlogin)
  return banlogin_;
}
 ::DB_BanLogin* DB_Player::release_banlogin() {
  clear_has_banlogin();
  ::DB_BanLogin* temp = banlogin_;
  banlogin_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_banlogin(::DB_BanLogin* banlogin) {
  delete banlogin_;
  banlogin_ = banlogin;
  if (banlogin) {
    set_has_banlogin();
  } else {
    clear_has_banlogin();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.banlogin)
}

// optional int32 broadcast_unread_cnt = 32 [default = 0];
 bool DB_Player::has_broadcast_unread_cnt() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
 void DB_Player::set_has_broadcast_unread_cnt() {
  _has_bits_[0] |= 0x02000000u;
}
 void DB_Player::clear_has_broadcast_unread_cnt() {
  _has_bits_[0] &= ~0x02000000u;
}
 void DB_Player::clear_broadcast_unread_cnt() {
  broadcast_unread_cnt_ = 0;
  clear_has_broadcast_unread_cnt();
}
 ::google::protobuf::int32 DB_Player::broadcast_unread_cnt() const {
  // @@protoc_insertion_point(field_get:DB_Player.broadcast_unread_cnt)
  return broadcast_unread_cnt_;
}
 void DB_Player::set_broadcast_unread_cnt(::google::protobuf::int32 value) {
  set_has_broadcast_unread_cnt();
  broadcast_unread_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.broadcast_unread_cnt)
}

// optional int32 messages_unread_cnt = 34 [default = 0];
 bool DB_Player::has_messages_unread_cnt() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
 void DB_Player::set_has_messages_unread_cnt() {
  _has_bits_[0] |= 0x04000000u;
}
 void DB_Player::clear_has_messages_unread_cnt() {
  _has_bits_[0] &= ~0x04000000u;
}
 void DB_Player::clear_messages_unread_cnt() {
  messages_unread_cnt_ = 0;
  clear_has_messages_unread_cnt();
}
 ::google::protobuf::int32 DB_Player::messages_unread_cnt() const {
  // @@protoc_insertion_point(field_get:DB_Player.messages_unread_cnt)
  return messages_unread_cnt_;
}
 void DB_Player::set_messages_unread_cnt(::google::protobuf::int32 value) {
  set_has_messages_unread_cnt();
  messages_unread_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.messages_unread_cnt)
}

// optional .TimeLimitedUidSet FriendGiftLiveHistory = 35;
 bool DB_Player::has_friendgiftlivehistory() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
 void DB_Player::set_has_friendgiftlivehistory() {
  _has_bits_[0] |= 0x08000000u;
}
 void DB_Player::clear_has_friendgiftlivehistory() {
  _has_bits_[0] &= ~0x08000000u;
}
 void DB_Player::clear_friendgiftlivehistory() {
  if (friendgiftlivehistory_ != NULL) friendgiftlivehistory_->::TimeLimitedUidSet::Clear();
  clear_has_friendgiftlivehistory();
}
 const ::TimeLimitedUidSet& DB_Player::friendgiftlivehistory() const {
  // @@protoc_insertion_point(field_get:DB_Player.FriendGiftLiveHistory)
  return friendgiftlivehistory_ != NULL ? *friendgiftlivehistory_ : *default_instance_->friendgiftlivehistory_;
}
 ::TimeLimitedUidSet* DB_Player::mutable_friendgiftlivehistory() {
  set_has_friendgiftlivehistory();
  if (friendgiftlivehistory_ == NULL) {
    friendgiftlivehistory_ = new ::TimeLimitedUidSet;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.FriendGiftLiveHistory)
  return friendgiftlivehistory_;
}
 ::TimeLimitedUidSet* DB_Player::release_friendgiftlivehistory() {
  clear_has_friendgiftlivehistory();
  ::TimeLimitedUidSet* temp = friendgiftlivehistory_;
  friendgiftlivehistory_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_friendgiftlivehistory(::TimeLimitedUidSet* friendgiftlivehistory) {
  delete friendgiftlivehistory_;
  friendgiftlivehistory_ = friendgiftlivehistory;
  if (friendgiftlivehistory) {
    set_has_friendgiftlivehistory();
  } else {
    clear_has_friendgiftlivehistory();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.FriendGiftLiveHistory)
}

// optional .DB_Singed SingedHistory = 36;
 bool DB_Player::has_singedhistory() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
 void DB_Player::set_has_singedhistory() {
  _has_bits_[0] |= 0x10000000u;
}
 void DB_Player::clear_has_singedhistory() {
  _has_bits_[0] &= ~0x10000000u;
}
 void DB_Player::clear_singedhistory() {
  if (singedhistory_ != NULL) singedhistory_->::DB_Singed::Clear();
  clear_has_singedhistory();
}
 const ::DB_Singed& DB_Player::singedhistory() const {
  // @@protoc_insertion_point(field_get:DB_Player.SingedHistory)
  return singedhistory_ != NULL ? *singedhistory_ : *default_instance_->singedhistory_;
}
 ::DB_Singed* DB_Player::mutable_singedhistory() {
  set_has_singedhistory();
  if (singedhistory_ == NULL) {
    singedhistory_ = new ::DB_Singed;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.SingedHistory)
  return singedhistory_;
}
 ::DB_Singed* DB_Player::release_singedhistory() {
  clear_has_singedhistory();
  ::DB_Singed* temp = singedhistory_;
  singedhistory_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_singedhistory(::DB_Singed* singedhistory) {
  delete singedhistory_;
  singedhistory_ = singedhistory;
  if (singedhistory) {
    set_has_singedhistory();
  } else {
    clear_has_singedhistory();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.SingedHistory)
}

// optional int32 invite_version = 17 [default = 0];
 bool DB_Player::has_invite_version() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
 void DB_Player::set_has_invite_version() {
  _has_bits_[0] |= 0x20000000u;
}
 void DB_Player::clear_has_invite_version() {
  _has_bits_[0] &= ~0x20000000u;
}
 void DB_Player::clear_invite_version() {
  invite_version_ = 0;
  clear_has_invite_version();
}
 ::google::protobuf::int32 DB_Player::invite_version() const {
  // @@protoc_insertion_point(field_get:DB_Player.invite_version)
  return invite_version_;
}
 void DB_Player::set_invite_version(::google::protobuf::int32 value) {
  set_has_invite_version();
  invite_version_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.invite_version)
}

// optional int32 invite_count_o1 = 50 [default = 0];
 bool DB_Player::has_invite_count_o1() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
 void DB_Player::set_has_invite_count_o1() {
  _has_bits_[0] |= 0x40000000u;
}
 void DB_Player::clear_has_invite_count_o1() {
  _has_bits_[0] &= ~0x40000000u;
}
 void DB_Player::clear_invite_count_o1() {
  invite_count_o1_ = 0;
  clear_has_invite_count_o1();
}
 ::google::protobuf::int32 DB_Player::invite_count_o1() const {
  // @@protoc_insertion_point(field_get:DB_Player.invite_count_o1)
  return invite_count_o1_;
}
 void DB_Player::set_invite_count_o1(::google::protobuf::int32 value) {
  set_has_invite_count_o1();
  invite_count_o1_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.invite_count_o1)
}

// optional string inviter_openid = 38 [default = ""];
 bool DB_Player::has_inviter_openid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
 void DB_Player::set_has_inviter_openid() {
  _has_bits_[0] |= 0x80000000u;
}
 void DB_Player::clear_has_inviter_openid() {
  _has_bits_[0] &= ~0x80000000u;
}
 void DB_Player::clear_inviter_openid() {
  inviter_openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inviter_openid();
}
 const ::std::string& DB_Player::inviter_openid() const {
  // @@protoc_insertion_point(field_get:DB_Player.inviter_openid)
  return inviter_openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_Player::set_inviter_openid(const ::std::string& value) {
  set_has_inviter_openid();
  inviter_openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_Player.inviter_openid)
}
 void DB_Player::set_inviter_openid(const char* value) {
  set_has_inviter_openid();
  inviter_openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_Player.inviter_openid)
}
 void DB_Player::set_inviter_openid(const char* value, size_t size) {
  set_has_inviter_openid();
  inviter_openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_Player.inviter_openid)
}
 ::std::string* DB_Player::mutable_inviter_openid() {
  set_has_inviter_openid();
  // @@protoc_insertion_point(field_mutable:DB_Player.inviter_openid)
  return inviter_openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_Player::release_inviter_openid() {
  clear_has_inviter_openid();
  return inviter_openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_Player::set_allocated_inviter_openid(::std::string* inviter_openid) {
  if (inviter_openid != NULL) {
    set_has_inviter_openid();
  } else {
    clear_has_inviter_openid();
  }
  inviter_openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviter_openid);
  // @@protoc_insertion_point(field_set_allocated:DB_Player.inviter_openid)
}

// optional .DB_Yelldmd yelldmd = 39;
 bool DB_Player::has_yelldmd() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
 void DB_Player::set_has_yelldmd() {
  _has_bits_[1] |= 0x00000001u;
}
 void DB_Player::clear_has_yelldmd() {
  _has_bits_[1] &= ~0x00000001u;
}
 void DB_Player::clear_yelldmd() {
  if (yelldmd_ != NULL) yelldmd_->::DB_Yelldmd::Clear();
  clear_has_yelldmd();
}
 const ::DB_Yelldmd& DB_Player::yelldmd() const {
  // @@protoc_insertion_point(field_get:DB_Player.yelldmd)
  return yelldmd_ != NULL ? *yelldmd_ : *default_instance_->yelldmd_;
}
 ::DB_Yelldmd* DB_Player::mutable_yelldmd() {
  set_has_yelldmd();
  if (yelldmd_ == NULL) {
    yelldmd_ = new ::DB_Yelldmd;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.yelldmd)
  return yelldmd_;
}
 ::DB_Yelldmd* DB_Player::release_yelldmd() {
  clear_has_yelldmd();
  ::DB_Yelldmd* temp = yelldmd_;
  yelldmd_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_yelldmd(::DB_Yelldmd* yelldmd) {
  delete yelldmd_;
  yelldmd_ = yelldmd;
  if (yelldmd) {
    set_has_yelldmd();
  } else {
    clear_has_yelldmd();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.yelldmd)
}

// optional .DB_SignHistory sign_history = 40;
 bool DB_Player::has_sign_history() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
 void DB_Player::set_has_sign_history() {
  _has_bits_[1] |= 0x00000002u;
}
 void DB_Player::clear_has_sign_history() {
  _has_bits_[1] &= ~0x00000002u;
}
 void DB_Player::clear_sign_history() {
  if (sign_history_ != NULL) sign_history_->::DB_SignHistory::Clear();
  clear_has_sign_history();
}
 const ::DB_SignHistory& DB_Player::sign_history() const {
  // @@protoc_insertion_point(field_get:DB_Player.sign_history)
  return sign_history_ != NULL ? *sign_history_ : *default_instance_->sign_history_;
}
 ::DB_SignHistory* DB_Player::mutable_sign_history() {
  set_has_sign_history();
  if (sign_history_ == NULL) {
    sign_history_ = new ::DB_SignHistory;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.sign_history)
  return sign_history_;
}
 ::DB_SignHistory* DB_Player::release_sign_history() {
  clear_has_sign_history();
  ::DB_SignHistory* temp = sign_history_;
  sign_history_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_sign_history(::DB_SignHistory* sign_history) {
  delete sign_history_;
  sign_history_ = sign_history;
  if (sign_history) {
    set_has_sign_history();
  } else {
    clear_has_sign_history();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.sign_history)
}

// optional .DB_BitCache cdkey_pickhistory = 41;
 bool DB_Player::has_cdkey_pickhistory() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
 void DB_Player::set_has_cdkey_pickhistory() {
  _has_bits_[1] |= 0x00000004u;
}
 void DB_Player::clear_has_cdkey_pickhistory() {
  _has_bits_[1] &= ~0x00000004u;
}
 void DB_Player::clear_cdkey_pickhistory() {
  if (cdkey_pickhistory_ != NULL) cdkey_pickhistory_->::DB_BitCache::Clear();
  clear_has_cdkey_pickhistory();
}
 const ::DB_BitCache& DB_Player::cdkey_pickhistory() const {
  // @@protoc_insertion_point(field_get:DB_Player.cdkey_pickhistory)
  return cdkey_pickhistory_ != NULL ? *cdkey_pickhistory_ : *default_instance_->cdkey_pickhistory_;
}
 ::DB_BitCache* DB_Player::mutable_cdkey_pickhistory() {
  set_has_cdkey_pickhistory();
  if (cdkey_pickhistory_ == NULL) {
    cdkey_pickhistory_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.cdkey_pickhistory)
  return cdkey_pickhistory_;
}
 ::DB_BitCache* DB_Player::release_cdkey_pickhistory() {
  clear_has_cdkey_pickhistory();
  ::DB_BitCache* temp = cdkey_pickhistory_;
  cdkey_pickhistory_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_cdkey_pickhistory(::DB_BitCache* cdkey_pickhistory) {
  delete cdkey_pickhistory_;
  cdkey_pickhistory_ = cdkey_pickhistory;
  if (cdkey_pickhistory) {
    set_has_cdkey_pickhistory();
  } else {
    clear_has_cdkey_pickhistory();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.cdkey_pickhistory)
}

// optional .DB_BitCache new_user_save_gift = 42;
 bool DB_Player::has_new_user_save_gift() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
 void DB_Player::set_has_new_user_save_gift() {
  _has_bits_[1] |= 0x00000008u;
}
 void DB_Player::clear_has_new_user_save_gift() {
  _has_bits_[1] &= ~0x00000008u;
}
 void DB_Player::clear_new_user_save_gift() {
  if (new_user_save_gift_ != NULL) new_user_save_gift_->::DB_BitCache::Clear();
  clear_has_new_user_save_gift();
}
 const ::DB_BitCache& DB_Player::new_user_save_gift() const {
  // @@protoc_insertion_point(field_get:DB_Player.new_user_save_gift)
  return new_user_save_gift_ != NULL ? *new_user_save_gift_ : *default_instance_->new_user_save_gift_;
}
 ::DB_BitCache* DB_Player::mutable_new_user_save_gift() {
  set_has_new_user_save_gift();
  if (new_user_save_gift_ == NULL) {
    new_user_save_gift_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.new_user_save_gift)
  return new_user_save_gift_;
}
 ::DB_BitCache* DB_Player::release_new_user_save_gift() {
  clear_has_new_user_save_gift();
  ::DB_BitCache* temp = new_user_save_gift_;
  new_user_save_gift_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_new_user_save_gift(::DB_BitCache* new_user_save_gift) {
  delete new_user_save_gift_;
  new_user_save_gift_ = new_user_save_gift;
  if (new_user_save_gift) {
    set_has_new_user_save_gift();
  } else {
    clear_has_new_user_save_gift();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.new_user_save_gift)
}

// optional .DB_EasyTimeSet easytimeset = 43;
 bool DB_Player::has_easytimeset() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
 void DB_Player::set_has_easytimeset() {
  _has_bits_[1] |= 0x00000010u;
}
 void DB_Player::clear_has_easytimeset() {
  _has_bits_[1] &= ~0x00000010u;
}
 void DB_Player::clear_easytimeset() {
  if (easytimeset_ != NULL) easytimeset_->::DB_EasyTimeSet::Clear();
  clear_has_easytimeset();
}
 const ::DB_EasyTimeSet& DB_Player::easytimeset() const {
  // @@protoc_insertion_point(field_get:DB_Player.easytimeset)
  return easytimeset_ != NULL ? *easytimeset_ : *default_instance_->easytimeset_;
}
 ::DB_EasyTimeSet* DB_Player::mutable_easytimeset() {
  set_has_easytimeset();
  if (easytimeset_ == NULL) {
    easytimeset_ = new ::DB_EasyTimeSet;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.easytimeset)
  return easytimeset_;
}
 ::DB_EasyTimeSet* DB_Player::release_easytimeset() {
  clear_has_easytimeset();
  ::DB_EasyTimeSet* temp = easytimeset_;
  easytimeset_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_easytimeset(::DB_EasyTimeSet* easytimeset) {
  delete easytimeset_;
  easytimeset_ = easytimeset;
  if (easytimeset) {
    set_has_easytimeset();
  } else {
    clear_has_easytimeset();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.easytimeset)
}

// optional bool SkipLog = 44 [default = false];
 bool DB_Player::has_skiplog() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
 void DB_Player::set_has_skiplog() {
  _has_bits_[1] |= 0x00000020u;
}
 void DB_Player::clear_has_skiplog() {
  _has_bits_[1] &= ~0x00000020u;
}
 void DB_Player::clear_skiplog() {
  skiplog_ = false;
  clear_has_skiplog();
}
 bool DB_Player::skiplog() const {
  // @@protoc_insertion_point(field_get:DB_Player.SkipLog)
  return skiplog_;
}
 void DB_Player::set_skiplog(bool value) {
  set_has_skiplog();
  skiplog_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.SkipLog)
}

// optional int32 invite_send_count = 45 [default = 0];
 bool DB_Player::has_invite_send_count() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
 void DB_Player::set_has_invite_send_count() {
  _has_bits_[1] |= 0x00000040u;
}
 void DB_Player::clear_has_invite_send_count() {
  _has_bits_[1] &= ~0x00000040u;
}
 void DB_Player::clear_invite_send_count() {
  invite_send_count_ = 0;
  clear_has_invite_send_count();
}
 ::google::protobuf::int32 DB_Player::invite_send_count() const {
  // @@protoc_insertion_point(field_get:DB_Player.invite_send_count)
  return invite_send_count_;
}
 void DB_Player::set_invite_send_count(::google::protobuf::int32 value) {
  set_has_invite_send_count();
  invite_send_count_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.invite_send_count)
}

// optional .DB_DallyUniverseInfo dally_universe = 46;
 bool DB_Player::has_dally_universe() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
 void DB_Player::set_has_dally_universe() {
  _has_bits_[1] |= 0x00000080u;
}
 void DB_Player::clear_has_dally_universe() {
  _has_bits_[1] &= ~0x00000080u;
}
 void DB_Player::clear_dally_universe() {
  if (dally_universe_ != NULL) dally_universe_->::DB_DallyUniverseInfo::Clear();
  clear_has_dally_universe();
}
 const ::DB_DallyUniverseInfo& DB_Player::dally_universe() const {
  // @@protoc_insertion_point(field_get:DB_Player.dally_universe)
  return dally_universe_ != NULL ? *dally_universe_ : *default_instance_->dally_universe_;
}
 ::DB_DallyUniverseInfo* DB_Player::mutable_dally_universe() {
  set_has_dally_universe();
  if (dally_universe_ == NULL) {
    dally_universe_ = new ::DB_DallyUniverseInfo;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.dally_universe)
  return dally_universe_;
}
 ::DB_DallyUniverseInfo* DB_Player::release_dally_universe() {
  clear_has_dally_universe();
  ::DB_DallyUniverseInfo* temp = dally_universe_;
  dally_universe_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_dally_universe(::DB_DallyUniverseInfo* dally_universe) {
  delete dally_universe_;
  dally_universe_ = dally_universe;
  if (dally_universe) {
    set_has_dally_universe();
  } else {
    clear_has_dally_universe();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.dally_universe)
}

// optional int32 now_playing_level = 47;
 bool DB_Player::has_now_playing_level() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
 void DB_Player::set_has_now_playing_level() {
  _has_bits_[1] |= 0x00000100u;
}
 void DB_Player::clear_has_now_playing_level() {
  _has_bits_[1] &= ~0x00000100u;
}
 void DB_Player::clear_now_playing_level() {
  now_playing_level_ = 0;
  clear_has_now_playing_level();
}
 ::google::protobuf::int32 DB_Player::now_playing_level() const {
  // @@protoc_insertion_point(field_get:DB_Player.now_playing_level)
  return now_playing_level_;
}
 void DB_Player::set_now_playing_level(::google::protobuf::int32 value) {
  set_has_now_playing_level();
  now_playing_level_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.now_playing_level)
}

// optional .DB_DailyCounter dailycounter = 48;
 bool DB_Player::has_dailycounter() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
 void DB_Player::set_has_dailycounter() {
  _has_bits_[1] |= 0x00000200u;
}
 void DB_Player::clear_has_dailycounter() {
  _has_bits_[1] &= ~0x00000200u;
}
 void DB_Player::clear_dailycounter() {
  if (dailycounter_ != NULL) dailycounter_->::DB_DailyCounter::Clear();
  clear_has_dailycounter();
}
 const ::DB_DailyCounter& DB_Player::dailycounter() const {
  // @@protoc_insertion_point(field_get:DB_Player.dailycounter)
  return dailycounter_ != NULL ? *dailycounter_ : *default_instance_->dailycounter_;
}
 ::DB_DailyCounter* DB_Player::mutable_dailycounter() {
  set_has_dailycounter();
  if (dailycounter_ == NULL) {
    dailycounter_ = new ::DB_DailyCounter;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.dailycounter)
  return dailycounter_;
}
 ::DB_DailyCounter* DB_Player::release_dailycounter() {
  clear_has_dailycounter();
  ::DB_DailyCounter* temp = dailycounter_;
  dailycounter_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_dailycounter(::DB_DailyCounter* dailycounter) {
  delete dailycounter_;
  dailycounter_ = dailycounter;
  if (dailycounter) {
    set_has_dailycounter();
  } else {
    clear_has_dailycounter();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.dailycounter)
}

// optional .DB_BitCache rewared_bit_cache = 49;
 bool DB_Player::has_rewared_bit_cache() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
 void DB_Player::set_has_rewared_bit_cache() {
  _has_bits_[1] |= 0x00000400u;
}
 void DB_Player::clear_has_rewared_bit_cache() {
  _has_bits_[1] &= ~0x00000400u;
}
 void DB_Player::clear_rewared_bit_cache() {
  if (rewared_bit_cache_ != NULL) rewared_bit_cache_->::DB_BitCache::Clear();
  clear_has_rewared_bit_cache();
}
 const ::DB_BitCache& DB_Player::rewared_bit_cache() const {
  // @@protoc_insertion_point(field_get:DB_Player.rewared_bit_cache)
  return rewared_bit_cache_ != NULL ? *rewared_bit_cache_ : *default_instance_->rewared_bit_cache_;
}
 ::DB_BitCache* DB_Player::mutable_rewared_bit_cache() {
  set_has_rewared_bit_cache();
  if (rewared_bit_cache_ == NULL) {
    rewared_bit_cache_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.rewared_bit_cache)
  return rewared_bit_cache_;
}
 ::DB_BitCache* DB_Player::release_rewared_bit_cache() {
  clear_has_rewared_bit_cache();
  ::DB_BitCache* temp = rewared_bit_cache_;
  rewared_bit_cache_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_rewared_bit_cache(::DB_BitCache* rewared_bit_cache) {
  delete rewared_bit_cache_;
  rewared_bit_cache_ = rewared_bit_cache;
  if (rewared_bit_cache) {
    set_has_rewared_bit_cache();
  } else {
    clear_has_rewared_bit_cache();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.rewared_bit_cache)
}

// optional .DB_CallBack callback = 51;
 bool DB_Player::has_callback() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
 void DB_Player::set_has_callback() {
  _has_bits_[1] |= 0x00000800u;
}
 void DB_Player::clear_has_callback() {
  _has_bits_[1] &= ~0x00000800u;
}
 void DB_Player::clear_callback() {
  if (callback_ != NULL) callback_->::DB_CallBack::Clear();
  clear_has_callback();
}
 const ::DB_CallBack& DB_Player::callback() const {
  // @@protoc_insertion_point(field_get:DB_Player.callback)
  return callback_ != NULL ? *callback_ : *default_instance_->callback_;
}
 ::DB_CallBack* DB_Player::mutable_callback() {
  set_has_callback();
  if (callback_ == NULL) {
    callback_ = new ::DB_CallBack;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.callback)
  return callback_;
}
 ::DB_CallBack* DB_Player::release_callback() {
  clear_has_callback();
  ::DB_CallBack* temp = callback_;
  callback_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_callback(::DB_CallBack* callback) {
  delete callback_;
  callback_ = callback;
  if (callback) {
    set_has_callback();
  } else {
    clear_has_callback();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.callback)
}

// optional bool from_zynga_city = 52 [default = false];
 bool DB_Player::has_from_zynga_city() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
 void DB_Player::set_has_from_zynga_city() {
  _has_bits_[1] |= 0x00001000u;
}
 void DB_Player::clear_has_from_zynga_city() {
  _has_bits_[1] &= ~0x00001000u;
}
 void DB_Player::clear_from_zynga_city() {
  from_zynga_city_ = false;
  clear_has_from_zynga_city();
}
 bool DB_Player::from_zynga_city() const {
  // @@protoc_insertion_point(field_get:DB_Player.from_zynga_city)
  return from_zynga_city_;
}
 void DB_Player::set_from_zynga_city(bool value) {
  set_has_from_zynga_city();
  from_zynga_city_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.from_zynga_city)
}

// optional .TimeLimitedUidSet FriendGiftLiveSendHistory = 53;
 bool DB_Player::has_friendgiftlivesendhistory() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
 void DB_Player::set_has_friendgiftlivesendhistory() {
  _has_bits_[1] |= 0x00002000u;
}
 void DB_Player::clear_has_friendgiftlivesendhistory() {
  _has_bits_[1] &= ~0x00002000u;
}
 void DB_Player::clear_friendgiftlivesendhistory() {
  if (friendgiftlivesendhistory_ != NULL) friendgiftlivesendhistory_->::TimeLimitedUidSet::Clear();
  clear_has_friendgiftlivesendhistory();
}
 const ::TimeLimitedUidSet& DB_Player::friendgiftlivesendhistory() const {
  // @@protoc_insertion_point(field_get:DB_Player.FriendGiftLiveSendHistory)
  return friendgiftlivesendhistory_ != NULL ? *friendgiftlivesendhistory_ : *default_instance_->friendgiftlivesendhistory_;
}
 ::TimeLimitedUidSet* DB_Player::mutable_friendgiftlivesendhistory() {
  set_has_friendgiftlivesendhistory();
  if (friendgiftlivesendhistory_ == NULL) {
    friendgiftlivesendhistory_ = new ::TimeLimitedUidSet;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.FriendGiftLiveSendHistory)
  return friendgiftlivesendhistory_;
}
 ::TimeLimitedUidSet* DB_Player::release_friendgiftlivesendhistory() {
  clear_has_friendgiftlivesendhistory();
  ::TimeLimitedUidSet* temp = friendgiftlivesendhistory_;
  friendgiftlivesendhistory_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_friendgiftlivesendhistory(::TimeLimitedUidSet* friendgiftlivesendhistory) {
  delete friendgiftlivesendhistory_;
  friendgiftlivesendhistory_ = friendgiftlivesendhistory;
  if (friendgiftlivesendhistory) {
    set_has_friendgiftlivesendhistory();
  } else {
    clear_has_friendgiftlivesendhistory();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.FriendGiftLiveSendHistory)
}

// optional .DB_ContinuousDays ContinousLoginDays = 54;
 bool DB_Player::has_continouslogindays() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
 void DB_Player::set_has_continouslogindays() {
  _has_bits_[1] |= 0x00004000u;
}
 void DB_Player::clear_has_continouslogindays() {
  _has_bits_[1] &= ~0x00004000u;
}
 void DB_Player::clear_continouslogindays() {
  if (continouslogindays_ != NULL) continouslogindays_->::DB_ContinuousDays::Clear();
  clear_has_continouslogindays();
}
 const ::DB_ContinuousDays& DB_Player::continouslogindays() const {
  // @@protoc_insertion_point(field_get:DB_Player.ContinousLoginDays)
  return continouslogindays_ != NULL ? *continouslogindays_ : *default_instance_->continouslogindays_;
}
 ::DB_ContinuousDays* DB_Player::mutable_continouslogindays() {
  set_has_continouslogindays();
  if (continouslogindays_ == NULL) {
    continouslogindays_ = new ::DB_ContinuousDays;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.ContinousLoginDays)
  return continouslogindays_;
}
 ::DB_ContinuousDays* DB_Player::release_continouslogindays() {
  clear_has_continouslogindays();
  ::DB_ContinuousDays* temp = continouslogindays_;
  continouslogindays_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_continouslogindays(::DB_ContinuousDays* continouslogindays) {
  delete continouslogindays_;
  continouslogindays_ = continouslogindays;
  if (continouslogindays) {
    set_has_continouslogindays();
  } else {
    clear_has_continouslogindays();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.ContinousLoginDays)
}

// optional .DB_Map Room = 55;
 bool DB_Player::has_room() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
 void DB_Player::set_has_room() {
  _has_bits_[1] |= 0x00008000u;
}
 void DB_Player::clear_has_room() {
  _has_bits_[1] &= ~0x00008000u;
}
 void DB_Player::clear_room() {
  if (room_ != NULL) room_->::DB_Map::Clear();
  clear_has_room();
}
 const ::DB_Map& DB_Player::room() const {
  // @@protoc_insertion_point(field_get:DB_Player.Room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
 ::DB_Map* DB_Player::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::DB_Map;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.Room)
  return room_;
}
 ::DB_Map* DB_Player::release_room() {
  clear_has_room();
  ::DB_Map* temp = room_;
  room_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_room(::DB_Map* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.Room)
}

// optional int32 invite_count = 56 [default = 0];
 bool DB_Player::has_invite_count() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
 void DB_Player::set_has_invite_count() {
  _has_bits_[1] |= 0x00010000u;
}
 void DB_Player::clear_has_invite_count() {
  _has_bits_[1] &= ~0x00010000u;
}
 void DB_Player::clear_invite_count() {
  invite_count_ = 0;
  clear_has_invite_count();
}
 ::google::protobuf::int32 DB_Player::invite_count() const {
  // @@protoc_insertion_point(field_get:DB_Player.invite_count)
  return invite_count_;
}
 void DB_Player::set_invite_count(::google::protobuf::int32 value) {
  set_has_invite_count();
  invite_count_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.invite_count)
}

// optional .DB_DragboatFvl Dragboatfestivl = 57;
 bool DB_Player::has_dragboatfestivl() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
 void DB_Player::set_has_dragboatfestivl() {
  _has_bits_[1] |= 0x00020000u;
}
 void DB_Player::clear_has_dragboatfestivl() {
  _has_bits_[1] &= ~0x00020000u;
}
 void DB_Player::clear_dragboatfestivl() {
  if (dragboatfestivl_ != NULL) dragboatfestivl_->::DB_DragboatFvl::Clear();
  clear_has_dragboatfestivl();
}
 const ::DB_DragboatFvl& DB_Player::dragboatfestivl() const {
  // @@protoc_insertion_point(field_get:DB_Player.Dragboatfestivl)
  return dragboatfestivl_ != NULL ? *dragboatfestivl_ : *default_instance_->dragboatfestivl_;
}
 ::DB_DragboatFvl* DB_Player::mutable_dragboatfestivl() {
  set_has_dragboatfestivl();
  if (dragboatfestivl_ == NULL) {
    dragboatfestivl_ = new ::DB_DragboatFvl;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.Dragboatfestivl)
  return dragboatfestivl_;
}
 ::DB_DragboatFvl* DB_Player::release_dragboatfestivl() {
  clear_has_dragboatfestivl();
  ::DB_DragboatFvl* temp = dragboatfestivl_;
  dragboatfestivl_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_dragboatfestivl(::DB_DragboatFvl* dragboatfestivl) {
  delete dragboatfestivl_;
  dragboatfestivl_ = dragboatfestivl;
  if (dragboatfestivl) {
    set_has_dragboatfestivl();
  } else {
    clear_has_dragboatfestivl();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.Dragboatfestivl)
}

// optional .DB_ActiveInviteself ActiveInviteself = 58;
 bool DB_Player::has_activeinviteself() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
 void DB_Player::set_has_activeinviteself() {
  _has_bits_[1] |= 0x00040000u;
}
 void DB_Player::clear_has_activeinviteself() {
  _has_bits_[1] &= ~0x00040000u;
}
 void DB_Player::clear_activeinviteself() {
  if (activeinviteself_ != NULL) activeinviteself_->::DB_ActiveInviteself::Clear();
  clear_has_activeinviteself();
}
 const ::DB_ActiveInviteself& DB_Player::activeinviteself() const {
  // @@protoc_insertion_point(field_get:DB_Player.ActiveInviteself)
  return activeinviteself_ != NULL ? *activeinviteself_ : *default_instance_->activeinviteself_;
}
 ::DB_ActiveInviteself* DB_Player::mutable_activeinviteself() {
  set_has_activeinviteself();
  if (activeinviteself_ == NULL) {
    activeinviteself_ = new ::DB_ActiveInviteself;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.ActiveInviteself)
  return activeinviteself_;
}
 ::DB_ActiveInviteself* DB_Player::release_activeinviteself() {
  clear_has_activeinviteself();
  ::DB_ActiveInviteself* temp = activeinviteself_;
  activeinviteself_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_activeinviteself(::DB_ActiveInviteself* activeinviteself) {
  delete activeinviteself_;
  activeinviteself_ = activeinviteself;
  if (activeinviteself) {
    set_has_activeinviteself();
  } else {
    clear_has_activeinviteself();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.ActiveInviteself)
}

// optional int32 qpoint_usage_feedback = 59 [default = 0];
 bool DB_Player::has_qpoint_usage_feedback() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
 void DB_Player::set_has_qpoint_usage_feedback() {
  _has_bits_[1] |= 0x00080000u;
}
 void DB_Player::clear_has_qpoint_usage_feedback() {
  _has_bits_[1] &= ~0x00080000u;
}
 void DB_Player::clear_qpoint_usage_feedback() {
  qpoint_usage_feedback_ = 0;
  clear_has_qpoint_usage_feedback();
}
 ::google::protobuf::int32 DB_Player::qpoint_usage_feedback() const {
  // @@protoc_insertion_point(field_get:DB_Player.qpoint_usage_feedback)
  return qpoint_usage_feedback_;
}
 void DB_Player::set_qpoint_usage_feedback(::google::protobuf::int32 value) {
  set_has_qpoint_usage_feedback();
  qpoint_usage_feedback_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.qpoint_usage_feedback)
}

// optional int32 MobileDeviceSyncCnt = 60 [default = 0];
 bool DB_Player::has_mobiledevicesynccnt() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
 void DB_Player::set_has_mobiledevicesynccnt() {
  _has_bits_[1] |= 0x00100000u;
}
 void DB_Player::clear_has_mobiledevicesynccnt() {
  _has_bits_[1] &= ~0x00100000u;
}
 void DB_Player::clear_mobiledevicesynccnt() {
  mobiledevicesynccnt_ = 0;
  clear_has_mobiledevicesynccnt();
}
 ::google::protobuf::int32 DB_Player::mobiledevicesynccnt() const {
  // @@protoc_insertion_point(field_get:DB_Player.MobileDeviceSyncCnt)
  return mobiledevicesynccnt_;
}
 void DB_Player::set_mobiledevicesynccnt(::google::protobuf::int32 value) {
  set_has_mobiledevicesynccnt();
  mobiledevicesynccnt_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.MobileDeviceSyncCnt)
}

// optional .DB_ActiveCallBack ActiveCallBack = 61;
 bool DB_Player::has_activecallback() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
 void DB_Player::set_has_activecallback() {
  _has_bits_[1] |= 0x00200000u;
}
 void DB_Player::clear_has_activecallback() {
  _has_bits_[1] &= ~0x00200000u;
}
 void DB_Player::clear_activecallback() {
  if (activecallback_ != NULL) activecallback_->::DB_ActiveCallBack::Clear();
  clear_has_activecallback();
}
 const ::DB_ActiveCallBack& DB_Player::activecallback() const {
  // @@protoc_insertion_point(field_get:DB_Player.ActiveCallBack)
  return activecallback_ != NULL ? *activecallback_ : *default_instance_->activecallback_;
}
 ::DB_ActiveCallBack* DB_Player::mutable_activecallback() {
  set_has_activecallback();
  if (activecallback_ == NULL) {
    activecallback_ = new ::DB_ActiveCallBack;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.ActiveCallBack)
  return activecallback_;
}
 ::DB_ActiveCallBack* DB_Player::release_activecallback() {
  clear_has_activecallback();
  ::DB_ActiveCallBack* temp = activecallback_;
  activecallback_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_activecallback(::DB_ActiveCallBack* activecallback) {
  delete activecallback_;
  activecallback_ = activecallback;
  if (activecallback) {
    set_has_activecallback();
  } else {
    clear_has_activecallback();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.ActiveCallBack)
}

// optional .DB_KingOfStar KingOfStar = 62;
 bool DB_Player::has_kingofstar() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
 void DB_Player::set_has_kingofstar() {
  _has_bits_[1] |= 0x00400000u;
}
 void DB_Player::clear_has_kingofstar() {
  _has_bits_[1] &= ~0x00400000u;
}
 void DB_Player::clear_kingofstar() {
  if (kingofstar_ != NULL) kingofstar_->::DB_KingOfStar::Clear();
  clear_has_kingofstar();
}
 const ::DB_KingOfStar& DB_Player::kingofstar() const {
  // @@protoc_insertion_point(field_get:DB_Player.KingOfStar)
  return kingofstar_ != NULL ? *kingofstar_ : *default_instance_->kingofstar_;
}
 ::DB_KingOfStar* DB_Player::mutable_kingofstar() {
  set_has_kingofstar();
  if (kingofstar_ == NULL) {
    kingofstar_ = new ::DB_KingOfStar;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.KingOfStar)
  return kingofstar_;
}
 ::DB_KingOfStar* DB_Player::release_kingofstar() {
  clear_has_kingofstar();
  ::DB_KingOfStar* temp = kingofstar_;
  kingofstar_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_kingofstar(::DB_KingOfStar* kingofstar) {
  delete kingofstar_;
  kingofstar_ = kingofstar;
  if (kingofstar) {
    set_has_kingofstar();
  } else {
    clear_has_kingofstar();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.KingOfStar)
}

// optional .DB_ExpLevel exp_level = 63;
 bool DB_Player::has_exp_level() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
 void DB_Player::set_has_exp_level() {
  _has_bits_[1] |= 0x00800000u;
}
 void DB_Player::clear_has_exp_level() {
  _has_bits_[1] &= ~0x00800000u;
}
 void DB_Player::clear_exp_level() {
  if (exp_level_ != NULL) exp_level_->::DB_ExpLevel::Clear();
  clear_has_exp_level();
}
 const ::DB_ExpLevel& DB_Player::exp_level() const {
  // @@protoc_insertion_point(field_get:DB_Player.exp_level)
  return exp_level_ != NULL ? *exp_level_ : *default_instance_->exp_level_;
}
 ::DB_ExpLevel* DB_Player::mutable_exp_level() {
  set_has_exp_level();
  if (exp_level_ == NULL) {
    exp_level_ = new ::DB_ExpLevel;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.exp_level)
  return exp_level_;
}
 ::DB_ExpLevel* DB_Player::release_exp_level() {
  clear_has_exp_level();
  ::DB_ExpLevel* temp = exp_level_;
  exp_level_ = NULL;
  return temp;
}
 void DB_Player::set_allocated_exp_level(::DB_ExpLevel* exp_level) {
  delete exp_level_;
  exp_level_ = exp_level;
  if (exp_level) {
    set_has_exp_level();
  } else {
    clear_has_exp_level();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.exp_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DB_User::kIdFieldNumber;
const int DB_User::kPlatformIdFieldNumber;
const int DB_User::kNameFieldNumber;
const int DB_User::kProfileLinkFieldNumber;
const int DB_User::kGenderFieldNumber;
const int DB_User::kLastLoginTimeFieldNumber;
const int DB_User::kLastLoginIpFieldNumber;
const int DB_User::kRegistTimeFieldNumber;
const int DB_User::kYellowDmdLvlFieldNumber;
const int DB_User::kIsYellowDmdFieldNumber;
const int DB_User::kIsYellowDmdYearFieldNumber;
const int DB_User::kPlayerFieldNumber;
const int DB_User::kQPointFieldNumber;
const int DB_User::kVersionFieldNumber;
const int DB_User::kSecretFieldNumber;
const int DB_User::kSecretGentimeFieldNumber;
const int DB_User::kPlatformtypeFieldNumber;
const int DB_User::kCheckvalFirstFieldNumber;
const int DB_User::kCheckvalSecondFieldNumber;
const int DB_User::kPassvalFieldNumber;
const int DB_User::kOpenkeyFieldNumber;
const int DB_User::kLogincntFieldNumber;
const int DB_User::kActiveDaysFieldNumber;
const int DB_User::kTotalLoginDaysFieldNumber;
const int DB_User::kUserFromFieldNumber;
const int DB_User::kUserCmemVFieldNumber;
const int DB_User::kLastActiveDayFieldNumber;
const int DB_User::kIngameCashFieldNumber;
#endif  // !_MSC_VER

DB_User::DB_User()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DB_User)
}

void DB_User::InitAsDefaultInstance() {
  player_ = const_cast< ::DB_Player*>(&::DB_Player::default_instance());
}

DB_User::DB_User(const DB_User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DB_User)
}

void DB_User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  platform_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_login_time_ = GOOGLE_LONGLONG(0);
  last_login_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regist_time_ = GOOGLE_LONGLONG(0);
  yellowdmdlvl_ = 0;
  isyellowdmd_ = false;
  isyellowdmdyear_ = false;
  player_ = NULL;
  qpoint_ = 0;
  version_ = 0;
  secret_ = GOOGLE_LONGLONG(0);
  secret_gentime_ = GOOGLE_LONGLONG(0);
  platformtype_ = 1;
  checkval_first_ = 0;
  checkval_second_ = 0;
  passval_ = 0;
  openkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logincnt_ = 0;
  active_days_ = 0;
  total_login_days_ = 0;
  user_from_ = 0;
  user_cmem_v_ = 0;
  last_active_day_ = GOOGLE_LONGLONG(0);
  ingame_cash_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_User::~DB_User() {
  // @@protoc_insertion_point(destructor:DB_User)
  SharedDtor();
}

void DB_User::SharedDtor() {
  platform_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_login_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete player_;
  }
}

void DB_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_User_descriptor_;
}

const DB_User& DB_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbinterface_2eproto();
  return *default_instance_;
}

DB_User* DB_User::default_instance_ = NULL;

DB_User* DB_User::New(::google::protobuf::Arena* arena) const {
  DB_User* n = new DB_User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DB_User::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DB_User*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 227) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_platform_id()) {
      platform_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    last_login_time_ = GOOGLE_LONGLONG(0);
    if (has_last_login_ip()) {
      last_login_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    regist_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(yellowdmdlvl_, isyellowdmdyear_);
    ZR_(qpoint_, secret_gentime_);
    if (has_player()) {
      if (player_ != NULL) player_->::DB_Player::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(checkval_first_, passval_);
    ZR_(logincnt_, total_login_days_);
    platformtype_ = 1;
    if (has_openkey()) {
      openkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(user_from_, ingame_cash_);

#undef ZR_HELPER_
#undef ZR_

  name_.Clear();
  profile_link_.Clear();
  gender_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DB_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DB_User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_platform_id;
        break;
      }

      // required string platform_id = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_platform_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform_id().data(), this->platform_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_User.platform_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // repeated string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_User.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        if (input->ExpectTag(34)) goto parse_profile_link;
        break;
      }

      // repeated string profile_link = 4;
      case 4: {
        if (tag == 34) {
         parse_profile_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_profile_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->profile_link(this->profile_link_size() - 1).data(),
            this->profile_link(this->profile_link_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_User.profile_link");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_profile_link;
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // repeated int32 gender = 5;
      case 5: {
        if (tag == 40) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_gender())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gender())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        if (input->ExpectTag(64)) goto parse_last_login_time;
        break;
      }

      // required int64 last_login_time = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_last_login_ip;
        break;
      }

      // required string last_login_ip = 9 [default = ""];
      case 9: {
        if (tag == 74) {
         parse_last_login_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_login_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_login_ip().data(), this->last_login_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_User.last_login_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_regist_time;
        break;
      }

      // required int64 regist_time = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_regist_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &regist_time_)));
          set_has_regist_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_yellowDmdLvl;
        break;
      }

      // optional int32 yellowDmdLvl = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_yellowDmdLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yellowdmdlvl_)));
          set_has_yellowdmdlvl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_isYellowDmd;
        break;
      }

      // optional bool isYellowDmd = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_isYellowDmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isyellowdmd_)));
          set_has_isyellowdmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_isYellowDmdYear;
        break;
      }

      // optional bool isYellowDmdYear = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_isYellowDmdYear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isyellowdmdyear_)));
          set_has_isyellowdmdyear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_player;
        break;
      }

      // optional .DB_Player player = 19;
      case 19: {
        if (tag == 154) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_QPoint;
        break;
      }

      // optional int32 QPoint = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_QPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qpoint_)));
          set_has_qpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_version;
        break;
      }

      // optional int32 version = 21;
      case 21: {
        if (tag == 168) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_secret;
        break;
      }

      // optional int64 secret = 22 [default = 0];
      case 22: {
        if (tag == 176) {
         parse_secret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &secret_)));
          set_has_secret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_secret_gentime;
        break;
      }

      // optional int64 secret_gentime = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_secret_gentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &secret_gentime_)));
          set_has_secret_gentime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_platformtype;
        break;
      }

      // optional int32 platformtype = 26 [default = 1];
      case 26: {
        if (tag == 208) {
         parse_platformtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platformtype_)));
          set_has_platformtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_checkval_first;
        break;
      }

      // optional int32 checkval_first = 27 [default = 0];
      case 27: {
        if (tag == 216) {
         parse_checkval_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkval_first_)));
          set_has_checkval_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_checkval_second;
        break;
      }

      // optional int32 checkval_second = 28 [default = 0];
      case 28: {
        if (tag == 224) {
         parse_checkval_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkval_second_)));
          set_has_checkval_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_passval;
        break;
      }

      // optional int32 passval = 29 [default = 0];
      case 29: {
        if (tag == 232) {
         parse_passval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passval_)));
          set_has_passval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_openkey;
        break;
      }

      // optional string openkey = 30 [default = ""];
      case 30: {
        if (tag == 242) {
         parse_openkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openkey().data(), this->openkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DB_User.openkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_logincnt;
        break;
      }

      // optional int32 logincnt = 31 [default = 0];
      case 31: {
        if (tag == 248) {
         parse_logincnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logincnt_)));
          set_has_logincnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_active_days;
        break;
      }

      // optional int32 active_days = 32 [default = 0];
      case 32: {
        if (tag == 256) {
         parse_active_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_days_)));
          set_has_active_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_total_login_days;
        break;
      }

      // optional int32 total_login_days = 33 [default = 0];
      case 33: {
        if (tag == 264) {
         parse_total_login_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_login_days_)));
          set_has_total_login_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_user_from;
        break;
      }

      // optional int32 user_from = 34 [default = 0];
      case 34: {
        if (tag == 272) {
         parse_user_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_from_)));
          set_has_user_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_user_cmem_v;
        break;
      }

      // optional int32 user_cmem_v = 35 [default = 0];
      case 35: {
        if (tag == 280) {
         parse_user_cmem_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_cmem_v_)));
          set_has_user_cmem_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_last_active_day;
        break;
      }

      // optional int64 last_active_day = 36 [default = 0];
      case 36: {
        if (tag == 288) {
         parse_last_active_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_active_day_)));
          set_has_last_active_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_ingame_cash;
        break;
      }

      // optional int32 ingame_cash = 37 [default = 0];
      case 37: {
        if (tag == 296) {
         parse_ingame_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ingame_cash_)));
          set_has_ingame_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DB_User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DB_User)
  return false;
#undef DO_
}

void DB_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DB_User)
  // required int64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required string platform_id = 2 [default = ""];
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_User.platform_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->platform_id(), output);
  }

  // repeated string name = 3;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "DB_User.name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(i), output);
  }

  // repeated string profile_link = 4;
  for (int i = 0; i < this->profile_link_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->profile_link(i).data(), this->profile_link(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "DB_User.profile_link");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->profile_link(i), output);
  }

  // repeated int32 gender = 5;
  for (int i = 0; i < this->gender_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->gender(i), output);
  }

  // required int64 last_login_time = 8 [default = 0];
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->last_login_time(), output);
  }

  // required string last_login_ip = 9 [default = ""];
  if (has_last_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_login_ip().data(), this->last_login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_User.last_login_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->last_login_ip(), output);
  }

  // required int64 regist_time = 10 [default = 0];
  if (has_regist_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->regist_time(), output);
  }

  // optional int32 yellowDmdLvl = 13 [default = 0];
  if (has_yellowdmdlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->yellowdmdlvl(), output);
  }

  // optional bool isYellowDmd = 14 [default = false];
  if (has_isyellowdmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isyellowdmd(), output);
  }

  // optional bool isYellowDmdYear = 15 [default = false];
  if (has_isyellowdmdyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isyellowdmdyear(), output);
  }

  // optional .DB_Player player = 19;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->player_, output);
  }

  // optional int32 QPoint = 20 [default = 0];
  if (has_qpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->qpoint(), output);
  }

  // optional int32 version = 21;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->version(), output);
  }

  // optional int64 secret = 22 [default = 0];
  if (has_secret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->secret(), output);
  }

  // optional int64 secret_gentime = 23 [default = 0];
  if (has_secret_gentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->secret_gentime(), output);
  }

  // optional int32 platformtype = 26 [default = 1];
  if (has_platformtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->platformtype(), output);
  }

  // optional int32 checkval_first = 27 [default = 0];
  if (has_checkval_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->checkval_first(), output);
  }

  // optional int32 checkval_second = 28 [default = 0];
  if (has_checkval_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->checkval_second(), output);
  }

  // optional int32 passval = 29 [default = 0];
  if (has_passval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->passval(), output);
  }

  // optional string openkey = 30 [default = ""];
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_User.openkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->openkey(), output);
  }

  // optional int32 logincnt = 31 [default = 0];
  if (has_logincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->logincnt(), output);
  }

  // optional int32 active_days = 32 [default = 0];
  if (has_active_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->active_days(), output);
  }

  // optional int32 total_login_days = 33 [default = 0];
  if (has_total_login_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->total_login_days(), output);
  }

  // optional int32 user_from = 34 [default = 0];
  if (has_user_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->user_from(), output);
  }

  // optional int32 user_cmem_v = 35 [default = 0];
  if (has_user_cmem_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->user_cmem_v(), output);
  }

  // optional int64 last_active_day = 36 [default = 0];
  if (has_last_active_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->last_active_day(), output);
  }

  // optional int32 ingame_cash = 37 [default = 0];
  if (has_ingame_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->ingame_cash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DB_User)
}

::google::protobuf::uint8* DB_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_User)
  // required int64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required string platform_id = 2 [default = ""];
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_User.platform_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform_id(), target);
  }

  // repeated string name = 3;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_User.name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->name(i), target);
  }

  // repeated string profile_link = 4;
  for (int i = 0; i < this->profile_link_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profile_link(i).data(), this->profile_link(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_User.profile_link");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->profile_link(i), target);
  }

  // repeated int32 gender = 5;
  for (int i = 0; i < this->gender_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->gender(i), target);
  }

  // required int64 last_login_time = 8 [default = 0];
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->last_login_time(), target);
  }

  // required string last_login_ip = 9 [default = ""];
  if (has_last_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_login_ip().data(), this->last_login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_User.last_login_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->last_login_ip(), target);
  }

  // required int64 regist_time = 10 [default = 0];
  if (has_regist_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->regist_time(), target);
  }

  // optional int32 yellowDmdLvl = 13 [default = 0];
  if (has_yellowdmdlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->yellowdmdlvl(), target);
  }

  // optional bool isYellowDmd = 14 [default = false];
  if (has_isyellowdmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isyellowdmd(), target);
  }

  // optional bool isYellowDmdYear = 15 [default = false];
  if (has_isyellowdmdyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isyellowdmdyear(), target);
  }

  // optional .DB_Player player = 19;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, *this->player_, target);
  }

  // optional int32 QPoint = 20 [default = 0];
  if (has_qpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->qpoint(), target);
  }

  // optional int32 version = 21;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->version(), target);
  }

  // optional int64 secret = 22 [default = 0];
  if (has_secret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->secret(), target);
  }

  // optional int64 secret_gentime = 23 [default = 0];
  if (has_secret_gentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->secret_gentime(), target);
  }

  // optional int32 platformtype = 26 [default = 1];
  if (has_platformtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->platformtype(), target);
  }

  // optional int32 checkval_first = 27 [default = 0];
  if (has_checkval_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->checkval_first(), target);
  }

  // optional int32 checkval_second = 28 [default = 0];
  if (has_checkval_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->checkval_second(), target);
  }

  // optional int32 passval = 29 [default = 0];
  if (has_passval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->passval(), target);
  }

  // optional string openkey = 30 [default = ""];
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DB_User.openkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->openkey(), target);
  }

  // optional int32 logincnt = 31 [default = 0];
  if (has_logincnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->logincnt(), target);
  }

  // optional int32 active_days = 32 [default = 0];
  if (has_active_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->active_days(), target);
  }

  // optional int32 total_login_days = 33 [default = 0];
  if (has_total_login_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->total_login_days(), target);
  }

  // optional int32 user_from = 34 [default = 0];
  if (has_user_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->user_from(), target);
  }

  // optional int32 user_cmem_v = 35 [default = 0];
  if (has_user_cmem_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->user_cmem_v(), target);
  }

  // optional int64 last_active_day = 36 [default = 0];
  if (has_last_active_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->last_active_day(), target);
  }

  // optional int32 ingame_cash = 37 [default = 0];
  if (has_ingame_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->ingame_cash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_User)
  return target;
}

int DB_User::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int64 id = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_platform_id()) {
    // required string platform_id = 2 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platform_id());
  }

  if (has_last_login_time()) {
    // required int64 last_login_time = 8 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_login_time());
  }

  if (has_last_login_ip()) {
    // required string last_login_ip = 9 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_login_ip());
  }

  if (has_regist_time()) {
    // required int64 regist_time = 10 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->regist_time());
  }

  return total_size;
}
int DB_User::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000e3) ^ 0x000000e3) == 0) {  // All required fields are present.
    // required int64 id = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required string platform_id = 2 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platform_id());

    // required int64 last_login_time = 8 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_login_time());

    // required string last_login_ip = 9 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_login_ip());

    // required int64 regist_time = 10 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->regist_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 65280) {
    // optional int32 yellowDmdLvl = 13 [default = 0];
    if (has_yellowdmdlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yellowdmdlvl());
    }

    // optional bool isYellowDmd = 14 [default = false];
    if (has_isyellowdmd()) {
      total_size += 1 + 1;
    }

    // optional bool isYellowDmdYear = 15 [default = false];
    if (has_isyellowdmdyear()) {
      total_size += 1 + 1;
    }

    // optional .DB_Player player = 19;
    if (has_player()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->player_);
    }

    // optional int32 QPoint = 20 [default = 0];
    if (has_qpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qpoint());
    }

    // optional int32 version = 21;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int64 secret = 22 [default = 0];
    if (has_secret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->secret());
    }

    // optional int64 secret_gentime = 23 [default = 0];
    if (has_secret_gentime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->secret_gentime());
    }

  }
  if (_has_bits_[16 / 32] & 16711680) {
    // optional int32 platformtype = 26 [default = 1];
    if (has_platformtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platformtype());
    }

    // optional int32 checkval_first = 27 [default = 0];
    if (has_checkval_first()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkval_first());
    }

    // optional int32 checkval_second = 28 [default = 0];
    if (has_checkval_second()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkval_second());
    }

    // optional int32 passval = 29 [default = 0];
    if (has_passval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passval());
    }

    // optional string openkey = 30 [default = ""];
    if (has_openkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openkey());
    }

    // optional int32 logincnt = 31 [default = 0];
    if (has_logincnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logincnt());
    }

    // optional int32 active_days = 32 [default = 0];
    if (has_active_days()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_days());
    }

    // optional int32 total_login_days = 33 [default = 0];
    if (has_total_login_days()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_login_days());
    }

  }
  if (_has_bits_[24 / 32] & 251658240) {
    // optional int32 user_from = 34 [default = 0];
    if (has_user_from()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_from());
    }

    // optional int32 user_cmem_v = 35 [default = 0];
    if (has_user_cmem_v()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_cmem_v());
    }

    // optional int64 last_active_day = 36 [default = 0];
    if (has_last_active_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_active_day());
    }

    // optional int32 ingame_cash = 37 [default = 0];
    if (has_ingame_cash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ingame_cash());
    }

  }
  // repeated string name = 3;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  // repeated string profile_link = 4;
  total_size += 1 * this->profile_link_size();
  for (int i = 0; i < this->profile_link_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->profile_link(i));
  }

  // repeated int32 gender = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->gender_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gender(i));
    }
    total_size += 1 * this->gender_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_User::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DB_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_User::MergeFrom(const DB_User& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  name_.MergeFrom(from.name_);
  profile_link_.MergeFrom(from.profile_link_);
  gender_.MergeFrom(from.gender_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_platform_id()) {
      set_has_platform_id();
      platform_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_id_);
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_last_login_ip()) {
      set_has_last_login_ip();
      last_login_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_login_ip_);
    }
    if (from.has_regist_time()) {
      set_regist_time(from.regist_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yellowdmdlvl()) {
      set_yellowdmdlvl(from.yellowdmdlvl());
    }
    if (from.has_isyellowdmd()) {
      set_isyellowdmd(from.isyellowdmd());
    }
    if (from.has_isyellowdmdyear()) {
      set_isyellowdmdyear(from.isyellowdmdyear());
    }
    if (from.has_player()) {
      mutable_player()->::DB_Player::MergeFrom(from.player());
    }
    if (from.has_qpoint()) {
      set_qpoint(from.qpoint());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_secret()) {
      set_secret(from.secret());
    }
    if (from.has_secret_gentime()) {
      set_secret_gentime(from.secret_gentime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_platformtype()) {
      set_platformtype(from.platformtype());
    }
    if (from.has_checkval_first()) {
      set_checkval_first(from.checkval_first());
    }
    if (from.has_checkval_second()) {
      set_checkval_second(from.checkval_second());
    }
    if (from.has_passval()) {
      set_passval(from.passval());
    }
    if (from.has_openkey()) {
      set_has_openkey();
      openkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openkey_);
    }
    if (from.has_logincnt()) {
      set_logincnt(from.logincnt());
    }
    if (from.has_active_days()) {
      set_active_days(from.active_days());
    }
    if (from.has_total_login_days()) {
      set_total_login_days(from.total_login_days());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_user_from()) {
      set_user_from(from.user_from());
    }
    if (from.has_user_cmem_v()) {
      set_user_cmem_v(from.user_cmem_v());
    }
    if (from.has_last_active_day()) {
      set_last_active_day(from.last_active_day());
    }
    if (from.has_ingame_cash()) {
      set_ingame_cash(from.ingame_cash());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DB_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_User::CopyFrom(const DB_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e3) != 0x000000e3) return false;

  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  return true;
}

void DB_User::Swap(DB_User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DB_User::InternalSwap(DB_User* other) {
  std::swap(id_, other->id_);
  platform_id_.Swap(&other->platform_id_);
  name_.UnsafeArenaSwap(&other->name_);
  profile_link_.UnsafeArenaSwap(&other->profile_link_);
  gender_.UnsafeArenaSwap(&other->gender_);
  std::swap(last_login_time_, other->last_login_time_);
  last_login_ip_.Swap(&other->last_login_ip_);
  std::swap(regist_time_, other->regist_time_);
  std::swap(yellowdmdlvl_, other->yellowdmdlvl_);
  std::swap(isyellowdmd_, other->isyellowdmd_);
  std::swap(isyellowdmdyear_, other->isyellowdmdyear_);
  std::swap(player_, other->player_);
  std::swap(qpoint_, other->qpoint_);
  std::swap(version_, other->version_);
  std::swap(secret_, other->secret_);
  std::swap(secret_gentime_, other->secret_gentime_);
  std::swap(platformtype_, other->platformtype_);
  std::swap(checkval_first_, other->checkval_first_);
  std::swap(checkval_second_, other->checkval_second_);
  std::swap(passval_, other->passval_);
  openkey_.Swap(&other->openkey_);
  std::swap(logincnt_, other->logincnt_);
  std::swap(active_days_, other->active_days_);
  std::swap(total_login_days_, other->total_login_days_);
  std::swap(user_from_, other->user_from_);
  std::swap(user_cmem_v_, other->user_cmem_v_);
  std::swap(last_active_day_, other->last_active_day_);
  std::swap(ingame_cash_, other->ingame_cash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DB_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_User_descriptor_;
  metadata.reflection = DB_User_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_User

// required int64 id = 1 [default = 0];
 bool DB_User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DB_User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void DB_User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DB_User::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 DB_User::id() const {
  // @@protoc_insertion_point(field_get:DB_User.id)
  return id_;
}
 void DB_User::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DB_User.id)
}

// required string platform_id = 2 [default = ""];
 bool DB_User::has_platform_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DB_User::set_has_platform_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void DB_User::clear_has_platform_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DB_User::clear_platform_id() {
  platform_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform_id();
}
 const ::std::string& DB_User::platform_id() const {
  // @@protoc_insertion_point(field_get:DB_User.platform_id)
  return platform_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_User::set_platform_id(const ::std::string& value) {
  set_has_platform_id();
  platform_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_User.platform_id)
}
 void DB_User::set_platform_id(const char* value) {
  set_has_platform_id();
  platform_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_User.platform_id)
}
 void DB_User::set_platform_id(const char* value, size_t size) {
  set_has_platform_id();
  platform_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_User.platform_id)
}
 ::std::string* DB_User::mutable_platform_id() {
  set_has_platform_id();
  // @@protoc_insertion_point(field_mutable:DB_User.platform_id)
  return platform_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_User::release_platform_id() {
  clear_has_platform_id();
  return platform_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_User::set_allocated_platform_id(::std::string* platform_id) {
  if (platform_id != NULL) {
    set_has_platform_id();
  } else {
    clear_has_platform_id();
  }
  platform_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform_id);
  // @@protoc_insertion_point(field_set_allocated:DB_User.platform_id)
}

// repeated string name = 3;
 int DB_User::name_size() const {
  return name_.size();
}
 void DB_User::clear_name() {
  name_.Clear();
}
 const ::std::string& DB_User::name(int index) const {
  // @@protoc_insertion_point(field_get:DB_User.name)
  return name_.Get(index);
}
 ::std::string* DB_User::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:DB_User.name)
  return name_.Mutable(index);
}
 void DB_User::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_User.name)
  name_.Mutable(index)->assign(value);
}
 void DB_User::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_User.name)
}
 void DB_User::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_User.name)
}
 ::std::string* DB_User::add_name() {
  return name_.Add();
}
 void DB_User::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_User.name)
}
 void DB_User::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_User.name)
}
 void DB_User::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_User.name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_User::name() const {
  // @@protoc_insertion_point(field_list:DB_User.name)
  return name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_User::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:DB_User.name)
  return &name_;
}

// repeated string profile_link = 4;
 int DB_User::profile_link_size() const {
  return profile_link_.size();
}
 void DB_User::clear_profile_link() {
  profile_link_.Clear();
}
 const ::std::string& DB_User::profile_link(int index) const {
  // @@protoc_insertion_point(field_get:DB_User.profile_link)
  return profile_link_.Get(index);
}
 ::std::string* DB_User::mutable_profile_link(int index) {
  // @@protoc_insertion_point(field_mutable:DB_User.profile_link)
  return profile_link_.Mutable(index);
}
 void DB_User::set_profile_link(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_User.profile_link)
  profile_link_.Mutable(index)->assign(value);
}
 void DB_User::set_profile_link(int index, const char* value) {
  profile_link_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_User.profile_link)
}
 void DB_User::set_profile_link(int index, const char* value, size_t size) {
  profile_link_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_User.profile_link)
}
 ::std::string* DB_User::add_profile_link() {
  return profile_link_.Add();
}
 void DB_User::add_profile_link(const ::std::string& value) {
  profile_link_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_User.profile_link)
}
 void DB_User::add_profile_link(const char* value) {
  profile_link_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_User.profile_link)
}
 void DB_User::add_profile_link(const char* value, size_t size) {
  profile_link_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_User.profile_link)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_User::profile_link() const {
  // @@protoc_insertion_point(field_list:DB_User.profile_link)
  return profile_link_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_User::mutable_profile_link() {
  // @@protoc_insertion_point(field_mutable_list:DB_User.profile_link)
  return &profile_link_;
}

// repeated int32 gender = 5;
 int DB_User::gender_size() const {
  return gender_.size();
}
 void DB_User::clear_gender() {
  gender_.Clear();
}
 ::google::protobuf::int32 DB_User::gender(int index) const {
  // @@protoc_insertion_point(field_get:DB_User.gender)
  return gender_.Get(index);
}
 void DB_User::set_gender(int index, ::google::protobuf::int32 value) {
  gender_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_User.gender)
}
 void DB_User::add_gender(::google::protobuf::int32 value) {
  gender_.Add(value);
  // @@protoc_insertion_point(field_add:DB_User.gender)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_User::gender() const {
  // @@protoc_insertion_point(field_list:DB_User.gender)
  return gender_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_User::mutable_gender() {
  // @@protoc_insertion_point(field_mutable_list:DB_User.gender)
  return &gender_;
}

// required int64 last_login_time = 8 [default = 0];
 bool DB_User::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void DB_User::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000020u;
}
 void DB_User::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000020u;
}
 void DB_User::clear_last_login_time() {
  last_login_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_login_time();
}
 ::google::protobuf::int64 DB_User::last_login_time() const {
  // @@protoc_insertion_point(field_get:DB_User.last_login_time)
  return last_login_time_;
}
 void DB_User::set_last_login_time(::google::protobuf::int64 value) {
  set_has_last_login_time();
  last_login_time_ = value;
  // @@protoc_insertion_point(field_set:DB_User.last_login_time)
}

// required string last_login_ip = 9 [default = ""];
 bool DB_User::has_last_login_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void DB_User::set_has_last_login_ip() {
  _has_bits_[0] |= 0x00000040u;
}
 void DB_User::clear_has_last_login_ip() {
  _has_bits_[0] &= ~0x00000040u;
}
 void DB_User::clear_last_login_ip() {
  last_login_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_login_ip();
}
 const ::std::string& DB_User::last_login_ip() const {
  // @@protoc_insertion_point(field_get:DB_User.last_login_ip)
  return last_login_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_User::set_last_login_ip(const ::std::string& value) {
  set_has_last_login_ip();
  last_login_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_User.last_login_ip)
}
 void DB_User::set_last_login_ip(const char* value) {
  set_has_last_login_ip();
  last_login_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_User.last_login_ip)
}
 void DB_User::set_last_login_ip(const char* value, size_t size) {
  set_has_last_login_ip();
  last_login_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_User.last_login_ip)
}
 ::std::string* DB_User::mutable_last_login_ip() {
  set_has_last_login_ip();
  // @@protoc_insertion_point(field_mutable:DB_User.last_login_ip)
  return last_login_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_User::release_last_login_ip() {
  clear_has_last_login_ip();
  return last_login_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_User::set_allocated_last_login_ip(::std::string* last_login_ip) {
  if (last_login_ip != NULL) {
    set_has_last_login_ip();
  } else {
    clear_has_last_login_ip();
  }
  last_login_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_login_ip);
  // @@protoc_insertion_point(field_set_allocated:DB_User.last_login_ip)
}

// required int64 regist_time = 10 [default = 0];
 bool DB_User::has_regist_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void DB_User::set_has_regist_time() {
  _has_bits_[0] |= 0x00000080u;
}
 void DB_User::clear_has_regist_time() {
  _has_bits_[0] &= ~0x00000080u;
}
 void DB_User::clear_regist_time() {
  regist_time_ = GOOGLE_LONGLONG(0);
  clear_has_regist_time();
}
 ::google::protobuf::int64 DB_User::regist_time() const {
  // @@protoc_insertion_point(field_get:DB_User.regist_time)
  return regist_time_;
}
 void DB_User::set_regist_time(::google::protobuf::int64 value) {
  set_has_regist_time();
  regist_time_ = value;
  // @@protoc_insertion_point(field_set:DB_User.regist_time)
}

// optional int32 yellowDmdLvl = 13 [default = 0];
 bool DB_User::has_yellowdmdlvl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void DB_User::set_has_yellowdmdlvl() {
  _has_bits_[0] |= 0x00000100u;
}
 void DB_User::clear_has_yellowdmdlvl() {
  _has_bits_[0] &= ~0x00000100u;
}
 void DB_User::clear_yellowdmdlvl() {
  yellowdmdlvl_ = 0;
  clear_has_yellowdmdlvl();
}
 ::google::protobuf::int32 DB_User::yellowdmdlvl() const {
  // @@protoc_insertion_point(field_get:DB_User.yellowDmdLvl)
  return yellowdmdlvl_;
}
 void DB_User::set_yellowdmdlvl(::google::protobuf::int32 value) {
  set_has_yellowdmdlvl();
  yellowdmdlvl_ = value;
  // @@protoc_insertion_point(field_set:DB_User.yellowDmdLvl)
}

// optional bool isYellowDmd = 14 [default = false];
 bool DB_User::has_isyellowdmd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void DB_User::set_has_isyellowdmd() {
  _has_bits_[0] |= 0x00000200u;
}
 void DB_User::clear_has_isyellowdmd() {
  _has_bits_[0] &= ~0x00000200u;
}
 void DB_User::clear_isyellowdmd() {
  isyellowdmd_ = false;
  clear_has_isyellowdmd();
}
 bool DB_User::isyellowdmd() const {
  // @@protoc_insertion_point(field_get:DB_User.isYellowDmd)
  return isyellowdmd_;
}
 void DB_User::set_isyellowdmd(bool value) {
  set_has_isyellowdmd();
  isyellowdmd_ = value;
  // @@protoc_insertion_point(field_set:DB_User.isYellowDmd)
}

// optional bool isYellowDmdYear = 15 [default = false];
 bool DB_User::has_isyellowdmdyear() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void DB_User::set_has_isyellowdmdyear() {
  _has_bits_[0] |= 0x00000400u;
}
 void DB_User::clear_has_isyellowdmdyear() {
  _has_bits_[0] &= ~0x00000400u;
}
 void DB_User::clear_isyellowdmdyear() {
  isyellowdmdyear_ = false;
  clear_has_isyellowdmdyear();
}
 bool DB_User::isyellowdmdyear() const {
  // @@protoc_insertion_point(field_get:DB_User.isYellowDmdYear)
  return isyellowdmdyear_;
}
 void DB_User::set_isyellowdmdyear(bool value) {
  set_has_isyellowdmdyear();
  isyellowdmdyear_ = value;
  // @@protoc_insertion_point(field_set:DB_User.isYellowDmdYear)
}

// optional .DB_Player player = 19;
 bool DB_User::has_player() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void DB_User::set_has_player() {
  _has_bits_[0] |= 0x00000800u;
}
 void DB_User::clear_has_player() {
  _has_bits_[0] &= ~0x00000800u;
}
 void DB_User::clear_player() {
  if (player_ != NULL) player_->::DB_Player::Clear();
  clear_has_player();
}
 const ::DB_Player& DB_User::player() const {
  // @@protoc_insertion_point(field_get:DB_User.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
 ::DB_Player* DB_User::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    player_ = new ::DB_Player;
  }
  // @@protoc_insertion_point(field_mutable:DB_User.player)
  return player_;
}
 ::DB_Player* DB_User::release_player() {
  clear_has_player();
  ::DB_Player* temp = player_;
  player_ = NULL;
  return temp;
}
 void DB_User::set_allocated_player(::DB_Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_User.player)
}

// optional int32 QPoint = 20 [default = 0];
 bool DB_User::has_qpoint() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void DB_User::set_has_qpoint() {
  _has_bits_[0] |= 0x00001000u;
}
 void DB_User::clear_has_qpoint() {
  _has_bits_[0] &= ~0x00001000u;
}
 void DB_User::clear_qpoint() {
  qpoint_ = 0;
  clear_has_qpoint();
}
 ::google::protobuf::int32 DB_User::qpoint() const {
  // @@protoc_insertion_point(field_get:DB_User.QPoint)
  return qpoint_;
}
 void DB_User::set_qpoint(::google::protobuf::int32 value) {
  set_has_qpoint();
  qpoint_ = value;
  // @@protoc_insertion_point(field_set:DB_User.QPoint)
}

// optional int32 version = 21;
 bool DB_User::has_version() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
 void DB_User::set_has_version() {
  _has_bits_[0] |= 0x00002000u;
}
 void DB_User::clear_has_version() {
  _has_bits_[0] &= ~0x00002000u;
}
 void DB_User::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 DB_User::version() const {
  // @@protoc_insertion_point(field_get:DB_User.version)
  return version_;
}
 void DB_User::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:DB_User.version)
}

// optional int64 secret = 22 [default = 0];
 bool DB_User::has_secret() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
 void DB_User::set_has_secret() {
  _has_bits_[0] |= 0x00004000u;
}
 void DB_User::clear_has_secret() {
  _has_bits_[0] &= ~0x00004000u;
}
 void DB_User::clear_secret() {
  secret_ = GOOGLE_LONGLONG(0);
  clear_has_secret();
}
 ::google::protobuf::int64 DB_User::secret() const {
  // @@protoc_insertion_point(field_get:DB_User.secret)
  return secret_;
}
 void DB_User::set_secret(::google::protobuf::int64 value) {
  set_has_secret();
  secret_ = value;
  // @@protoc_insertion_point(field_set:DB_User.secret)
}

// optional int64 secret_gentime = 23 [default = 0];
 bool DB_User::has_secret_gentime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
 void DB_User::set_has_secret_gentime() {
  _has_bits_[0] |= 0x00008000u;
}
 void DB_User::clear_has_secret_gentime() {
  _has_bits_[0] &= ~0x00008000u;
}
 void DB_User::clear_secret_gentime() {
  secret_gentime_ = GOOGLE_LONGLONG(0);
  clear_has_secret_gentime();
}
 ::google::protobuf::int64 DB_User::secret_gentime() const {
  // @@protoc_insertion_point(field_get:DB_User.secret_gentime)
  return secret_gentime_;
}
 void DB_User::set_secret_gentime(::google::protobuf::int64 value) {
  set_has_secret_gentime();
  secret_gentime_ = value;
  // @@protoc_insertion_point(field_set:DB_User.secret_gentime)
}

// optional int32 platformtype = 26 [default = 1];
 bool DB_User::has_platformtype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
 void DB_User::set_has_platformtype() {
  _has_bits_[0] |= 0x00010000u;
}
 void DB_User::clear_has_platformtype() {
  _has_bits_[0] &= ~0x00010000u;
}
 void DB_User::clear_platformtype() {
  platformtype_ = 1;
  clear_has_platformtype();
}
 ::google::protobuf::int32 DB_User::platformtype() const {
  // @@protoc_insertion_point(field_get:DB_User.platformtype)
  return platformtype_;
}
 void DB_User::set_platformtype(::google::protobuf::int32 value) {
  set_has_platformtype();
  platformtype_ = value;
  // @@protoc_insertion_point(field_set:DB_User.platformtype)
}

// optional int32 checkval_first = 27 [default = 0];
 bool DB_User::has_checkval_first() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
 void DB_User::set_has_checkval_first() {
  _has_bits_[0] |= 0x00020000u;
}
 void DB_User::clear_has_checkval_first() {
  _has_bits_[0] &= ~0x00020000u;
}
 void DB_User::clear_checkval_first() {
  checkval_first_ = 0;
  clear_has_checkval_first();
}
 ::google::protobuf::int32 DB_User::checkval_first() const {
  // @@protoc_insertion_point(field_get:DB_User.checkval_first)
  return checkval_first_;
}
 void DB_User::set_checkval_first(::google::protobuf::int32 value) {
  set_has_checkval_first();
  checkval_first_ = value;
  // @@protoc_insertion_point(field_set:DB_User.checkval_first)
}

// optional int32 checkval_second = 28 [default = 0];
 bool DB_User::has_checkval_second() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
 void DB_User::set_has_checkval_second() {
  _has_bits_[0] |= 0x00040000u;
}
 void DB_User::clear_has_checkval_second() {
  _has_bits_[0] &= ~0x00040000u;
}
 void DB_User::clear_checkval_second() {
  checkval_second_ = 0;
  clear_has_checkval_second();
}
 ::google::protobuf::int32 DB_User::checkval_second() const {
  // @@protoc_insertion_point(field_get:DB_User.checkval_second)
  return checkval_second_;
}
 void DB_User::set_checkval_second(::google::protobuf::int32 value) {
  set_has_checkval_second();
  checkval_second_ = value;
  // @@protoc_insertion_point(field_set:DB_User.checkval_second)
}

// optional int32 passval = 29 [default = 0];
 bool DB_User::has_passval() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
 void DB_User::set_has_passval() {
  _has_bits_[0] |= 0x00080000u;
}
 void DB_User::clear_has_passval() {
  _has_bits_[0] &= ~0x00080000u;
}
 void DB_User::clear_passval() {
  passval_ = 0;
  clear_has_passval();
}
 ::google::protobuf::int32 DB_User::passval() const {
  // @@protoc_insertion_point(field_get:DB_User.passval)
  return passval_;
}
 void DB_User::set_passval(::google::protobuf::int32 value) {
  set_has_passval();
  passval_ = value;
  // @@protoc_insertion_point(field_set:DB_User.passval)
}

// optional string openkey = 30 [default = ""];
 bool DB_User::has_openkey() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
 void DB_User::set_has_openkey() {
  _has_bits_[0] |= 0x00100000u;
}
 void DB_User::clear_has_openkey() {
  _has_bits_[0] &= ~0x00100000u;
}
 void DB_User::clear_openkey() {
  openkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openkey();
}
 const ::std::string& DB_User::openkey() const {
  // @@protoc_insertion_point(field_get:DB_User.openkey)
  return openkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_User::set_openkey(const ::std::string& value) {
  set_has_openkey();
  openkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_User.openkey)
}
 void DB_User::set_openkey(const char* value) {
  set_has_openkey();
  openkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_User.openkey)
}
 void DB_User::set_openkey(const char* value, size_t size) {
  set_has_openkey();
  openkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_User.openkey)
}
 ::std::string* DB_User::mutable_openkey() {
  set_has_openkey();
  // @@protoc_insertion_point(field_mutable:DB_User.openkey)
  return openkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DB_User::release_openkey() {
  clear_has_openkey();
  return openkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DB_User::set_allocated_openkey(::std::string* openkey) {
  if (openkey != NULL) {
    set_has_openkey();
  } else {
    clear_has_openkey();
  }
  openkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openkey);
  // @@protoc_insertion_point(field_set_allocated:DB_User.openkey)
}

// optional int32 logincnt = 31 [default = 0];
 bool DB_User::has_logincnt() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
 void DB_User::set_has_logincnt() {
  _has_bits_[0] |= 0x00200000u;
}
 void DB_User::clear_has_logincnt() {
  _has_bits_[0] &= ~0x00200000u;
}
 void DB_User::clear_logincnt() {
  logincnt_ = 0;
  clear_has_logincnt();
}
 ::google::protobuf::int32 DB_User::logincnt() const {
  // @@protoc_insertion_point(field_get:DB_User.logincnt)
  return logincnt_;
}
 void DB_User::set_logincnt(::google::protobuf::int32 value) {
  set_has_logincnt();
  logincnt_ = value;
  // @@protoc_insertion_point(field_set:DB_User.logincnt)
}

// optional int32 active_days = 32 [default = 0];
 bool DB_User::has_active_days() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
 void DB_User::set_has_active_days() {
  _has_bits_[0] |= 0x00400000u;
}
 void DB_User::clear_has_active_days() {
  _has_bits_[0] &= ~0x00400000u;
}
 void DB_User::clear_active_days() {
  active_days_ = 0;
  clear_has_active_days();
}
 ::google::protobuf::int32 DB_User::active_days() const {
  // @@protoc_insertion_point(field_get:DB_User.active_days)
  return active_days_;
}
 void DB_User::set_active_days(::google::protobuf::int32 value) {
  set_has_active_days();
  active_days_ = value;
  // @@protoc_insertion_point(field_set:DB_User.active_days)
}

// optional int32 total_login_days = 33 [default = 0];
 bool DB_User::has_total_login_days() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
 void DB_User::set_has_total_login_days() {
  _has_bits_[0] |= 0x00800000u;
}
 void DB_User::clear_has_total_login_days() {
  _has_bits_[0] &= ~0x00800000u;
}
 void DB_User::clear_total_login_days() {
  total_login_days_ = 0;
  clear_has_total_login_days();
}
 ::google::protobuf::int32 DB_User::total_login_days() const {
  // @@protoc_insertion_point(field_get:DB_User.total_login_days)
  return total_login_days_;
}
 void DB_User::set_total_login_days(::google::protobuf::int32 value) {
  set_has_total_login_days();
  total_login_days_ = value;
  // @@protoc_insertion_point(field_set:DB_User.total_login_days)
}

// optional int32 user_from = 34 [default = 0];
 bool DB_User::has_user_from() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
 void DB_User::set_has_user_from() {
  _has_bits_[0] |= 0x01000000u;
}
 void DB_User::clear_has_user_from() {
  _has_bits_[0] &= ~0x01000000u;
}
 void DB_User::clear_user_from() {
  user_from_ = 0;
  clear_has_user_from();
}
 ::google::protobuf::int32 DB_User::user_from() const {
  // @@protoc_insertion_point(field_get:DB_User.user_from)
  return user_from_;
}
 void DB_User::set_user_from(::google::protobuf::int32 value) {
  set_has_user_from();
  user_from_ = value;
  // @@protoc_insertion_point(field_set:DB_User.user_from)
}

// optional int32 user_cmem_v = 35 [default = 0];
 bool DB_User::has_user_cmem_v() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
 void DB_User::set_has_user_cmem_v() {
  _has_bits_[0] |= 0x02000000u;
}
 void DB_User::clear_has_user_cmem_v() {
  _has_bits_[0] &= ~0x02000000u;
}
 void DB_User::clear_user_cmem_v() {
  user_cmem_v_ = 0;
  clear_has_user_cmem_v();
}
 ::google::protobuf::int32 DB_User::user_cmem_v() const {
  // @@protoc_insertion_point(field_get:DB_User.user_cmem_v)
  return user_cmem_v_;
}
 void DB_User::set_user_cmem_v(::google::protobuf::int32 value) {
  set_has_user_cmem_v();
  user_cmem_v_ = value;
  // @@protoc_insertion_point(field_set:DB_User.user_cmem_v)
}

// optional int64 last_active_day = 36 [default = 0];
 bool DB_User::has_last_active_day() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
 void DB_User::set_has_last_active_day() {
  _has_bits_[0] |= 0x04000000u;
}
 void DB_User::clear_has_last_active_day() {
  _has_bits_[0] &= ~0x04000000u;
}
 void DB_User::clear_last_active_day() {
  last_active_day_ = GOOGLE_LONGLONG(0);
  clear_has_last_active_day();
}
 ::google::protobuf::int64 DB_User::last_active_day() const {
  // @@protoc_insertion_point(field_get:DB_User.last_active_day)
  return last_active_day_;
}
 void DB_User::set_last_active_day(::google::protobuf::int64 value) {
  set_has_last_active_day();
  last_active_day_ = value;
  // @@protoc_insertion_point(field_set:DB_User.last_active_day)
}

// optional int32 ingame_cash = 37 [default = 0];
 bool DB_User::has_ingame_cash() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
 void DB_User::set_has_ingame_cash() {
  _has_bits_[0] |= 0x08000000u;
}
 void DB_User::clear_has_ingame_cash() {
  _has_bits_[0] &= ~0x08000000u;
}
 void DB_User::clear_ingame_cash() {
  ingame_cash_ = 0;
  clear_has_ingame_cash();
}
 ::google::protobuf::int32 DB_User::ingame_cash() const {
  // @@protoc_insertion_point(field_get:DB_User.ingame_cash)
  return ingame_cash_;
}
 void DB_User::set_ingame_cash(::google::protobuf::int32 value) {
  set_has_ingame_cash();
  ingame_cash_ = value;
  // @@protoc_insertion_point(field_set:DB_User.ingame_cash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
