// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameConfig.proto

#ifndef PROTOBUF_GameConfig_2eproto__INCLUDED
#define PROTOBUF_GameConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_GameConfig_2eproto();
void protobuf_AssignDesc_GameConfig_2eproto();
void protobuf_ShutdownFile_GameConfig_2eproto();

class ActivetyConfig;
class CFG_GameConfig;

// ===================================================================

class ActivetyConfig : public ::google::protobuf::Message {
 public:
  ActivetyConfig();
  virtual ~ActivetyConfig();

  ActivetyConfig(const ActivetyConfig& from);

  inline ActivetyConfig& operator=(const ActivetyConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivetyConfig& default_instance();

  void Swap(ActivetyConfig* other);

  // implements Message ----------------------------------------------

  inline ActivetyConfig* New() const { return New(NULL); }

  ActivetyConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivetyConfig& from);
  void MergeFrom(const ActivetyConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivetyConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional int64 begin_date = 2;
  bool has_begin_date() const;
  void clear_begin_date();
  static const int kBeginDateFieldNumber = 2;
  ::google::protobuf::int64 begin_date() const;
  void set_begin_date(::google::protobuf::int64 value);

  // optional int64 end_date = 3;
  bool has_end_date() const;
  void clear_end_date();
  static const int kEndDateFieldNumber = 3;
  ::google::protobuf::int64 end_date() const;
  void set_end_date(::google::protobuf::int64 value);

  // optional int32 award_guest = 4;
  bool has_award_guest() const;
  void clear_award_guest();
  static const int kAwardGuestFieldNumber = 4;
  ::google::protobuf::int32 award_guest() const;
  void set_award_guest(::google::protobuf::int32 value);

  // optional int32 enable_flag = 5;
  bool has_enable_flag() const;
  void clear_enable_flag();
  static const int kEnableFlagFieldNumber = 5;
  ::google::protobuf::int32 enable_flag() const;
  void set_enable_flag(::google::protobuf::int32 value);

  // optional int64 fresh_time = 6;
  bool has_fresh_time() const;
  void clear_fresh_time();
  static const int kFreshTimeFieldNumber = 6;
  ::google::protobuf::int64 fresh_time() const;
  void set_fresh_time(::google::protobuf::int64 value);

  // optional int64 interval_time = 7;
  bool has_interval_time() const;
  void clear_interval_time();
  static const int kIntervalTimeFieldNumber = 7;
  ::google::protobuf::int64 interval_time() const;
  void set_interval_time(::google::protobuf::int64 value);

  // optional int32 max_cnt = 8;
  bool has_max_cnt() const;
  void clear_max_cnt();
  static const int kMaxCntFieldNumber = 8;
  ::google::protobuf::int32 max_cnt() const;
  void set_max_cnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ActivetyConfig)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_begin_date();
  inline void clear_has_begin_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_award_guest();
  inline void clear_has_award_guest();
  inline void set_has_enable_flag();
  inline void clear_has_enable_flag();
  inline void set_has_fresh_time();
  inline void clear_has_fresh_time();
  inline void set_has_interval_time();
  inline void clear_has_interval_time();
  inline void set_has_max_cnt();
  inline void clear_has_max_cnt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 begin_date_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 award_guest_;
  ::google::protobuf::int64 end_date_;
  ::google::protobuf::int64 fresh_time_;
  ::google::protobuf::int32 enable_flag_;
  ::google::protobuf::int32 max_cnt_;
  ::google::protobuf::int64 interval_time_;
  friend void  protobuf_AddDesc_GameConfig_2eproto();
  friend void protobuf_AssignDesc_GameConfig_2eproto();
  friend void protobuf_ShutdownFile_GameConfig_2eproto();

  void InitAsDefaultInstance();
  static ActivetyConfig* default_instance_;
};
// -------------------------------------------------------------------

class CFG_GameConfig : public ::google::protobuf::Message {
 public:
  CFG_GameConfig();
  virtual ~CFG_GameConfig();

  CFG_GameConfig(const CFG_GameConfig& from);

  inline CFG_GameConfig& operator=(const CFG_GameConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CFG_GameConfig& default_instance();

  void Swap(CFG_GameConfig* other);

  // implements Message ----------------------------------------------

  inline CFG_GameConfig* New() const { return New(NULL); }

  CFG_GameConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CFG_GameConfig& from);
  void MergeFrom(const CFG_GameConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CFG_GameConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MaxGroupBuyingTime = 1 [default = 1800];
  bool has_maxgroupbuyingtime() const;
  void clear_maxgroupbuyingtime();
  static const int kMaxGroupBuyingTimeFieldNumber = 1;
  ::google::protobuf::int32 maxgroupbuyingtime() const;
  void set_maxgroupbuyingtime(::google::protobuf::int32 value);

  // optional int32 MinGroupBuyingTime = 2 [default = 0];
  bool has_mingroupbuyingtime() const;
  void clear_mingroupbuyingtime();
  static const int kMinGroupBuyingTimeFieldNumber = 2;
  ::google::protobuf::int32 mingroupbuyingtime() const;
  void set_mingroupbuyingtime(::google::protobuf::int32 value);

  // optional int32 MaxBuyPer = 3 [default = 50];
  bool has_maxbuyper() const;
  void clear_maxbuyper();
  static const int kMaxBuyPerFieldNumber = 3;
  ::google::protobuf::int32 maxbuyper() const;
  void set_maxbuyper(::google::protobuf::int32 value);

  // optional int32 MinBuyPer = 4 [default = 20];
  bool has_minbuyper() const;
  void clear_minbuyper();
  static const int kMinBuyPerFieldNumber = 4;
  ::google::protobuf::int32 minbuyper() const;
  void set_minbuyper(::google::protobuf::int32 value);

  // optional int32 LoseBagItemsPer = 5 [default = 5];
  bool has_losebagitemsper() const;
  void clear_losebagitemsper();
  static const int kLoseBagItemsPerFieldNumber = 5;
  ::google::protobuf::int32 losebagitemsper() const;
  void set_losebagitemsper(::google::protobuf::int32 value);

  // optional int32 LoseBagMoneyPer = 6 [default = 5];
  bool has_losebagmoneyper() const;
  void clear_losebagmoneyper();
  static const int kLoseBagMoneyPerFieldNumber = 6;
  ::google::protobuf::int32 losebagmoneyper() const;
  void set_losebagmoneyper(::google::protobuf::int32 value);

  // optional float EveryUnitSpeed = 7 [default = 0.8];
  bool has_everyunitspeed() const;
  void clear_everyunitspeed();
  static const int kEveryUnitSpeedFieldNumber = 7;
  float everyunitspeed() const;
  void set_everyunitspeed(float value);

  // optional int32 CashierPathLength = 8 [default = 2];
  bool has_cashierpathlength() const;
  void clear_cashierpathlength();
  static const int kCashierPathLengthFieldNumber = 8;
  ::google::protobuf::int32 cashierpathlength() const;
  void set_cashierpathlength(::google::protobuf::int32 value);

  // optional int32 MaxGuestCntEveryTimes = 9 [default = 20];
  bool has_maxguestcnteverytimes() const;
  void clear_maxguestcnteverytimes();
  static const int kMaxGuestCntEveryTimesFieldNumber = 9;
  ::google::protobuf::int32 maxguestcnteverytimes() const;
  void set_maxguestcnteverytimes(::google::protobuf::int32 value);

  // optional int32 MaxGroupBuyingTimes = 10 [default = 20];
  bool has_maxgroupbuyingtimes() const;
  void clear_maxgroupbuyingtimes();
  static const int kMaxGroupBuyingTimesFieldNumber = 10;
  ::google::protobuf::int32 maxgroupbuyingtimes() const;
  void set_maxgroupbuyingtimes(::google::protobuf::int32 value);

  // optional int32 GuestIncreaseTimeTick = 11 [default = 1800];
  bool has_guestincreasetimetick() const;
  void clear_guestincreasetimetick();
  static const int kGuestIncreaseTimeTickFieldNumber = 11;
  ::google::protobuf::int32 guestincreasetimetick() const;
  void set_guestincreasetimetick(::google::protobuf::int32 value);

  // optional int32 FriendsTakeGuestAwayMinCnt = 12 [default = 16];
  bool has_friendstakeguestawaymincnt() const;
  void clear_friendstakeguestawaymincnt();
  static const int kFriendsTakeGuestAwayMinCntFieldNumber = 12;
  ::google::protobuf::int32 friendstakeguestawaymincnt() const;
  void set_friendstakeguestawaymincnt(::google::protobuf::int32 value);

  // optional int32 CostMoneyTakeAwayGuest = 13 [default = 150];
  bool has_costmoneytakeawayguest() const;
  void clear_costmoneytakeawayguest();
  static const int kCostMoneyTakeAwayGuestFieldNumber = 13;
  ::google::protobuf::int32 costmoneytakeawayguest() const;
  void set_costmoneytakeawayguest(::google::protobuf::int32 value);

  // optional int32 CostMoneyAddEmployee = 14 [default = 100];
  bool has_costmoneyaddemployee() const;
  void clear_costmoneyaddemployee();
  static const int kCostMoneyAddEmployeeFieldNumber = 14;
  ::google::protobuf::int32 costmoneyaddemployee() const;
  void set_costmoneyaddemployee(::google::protobuf::int32 value);

  // optional int32 EmployeeTiLiMax = 15 [default = 72];
  bool has_employeetilimax() const;
  void clear_employeetilimax();
  static const int kEmployeeTiLiMaxFieldNumber = 15;
  ::google::protobuf::int32 employeetilimax() const;
  void set_employeetilimax(::google::protobuf::int32 value);

  // optional int32 PublicPraiseOrigon = 16 [default = 500];
  bool has_publicpraiseorigon() const;
  void clear_publicpraiseorigon();
  static const int kPublicPraiseOrigonFieldNumber = 16;
  ::google::protobuf::int32 publicpraiseorigon() const;
  void set_publicpraiseorigon(::google::protobuf::int32 value);

  // optional int32 PublicPraiseMax = 17 [default = 1000];
  bool has_publicpraisemax() const;
  void clear_publicpraisemax();
  static const int kPublicPraiseMaxFieldNumber = 17;
  ::google::protobuf::int32 publicpraisemax() const;
  void set_publicpraisemax(::google::protobuf::int32 value);

  // optional int32 PublicPraiseMin = 18 [default = 0];
  bool has_publicpraisemin() const;
  void clear_publicpraisemin();
  static const int kPublicPraiseMinFieldNumber = 18;
  ::google::protobuf::int32 publicpraisemin() const;
  void set_publicpraisemin(::google::protobuf::int32 value);

  // optional int32 EnableChecked = 19 [default = 0];
  bool has_enablechecked() const;
  void clear_enablechecked();
  static const int kEnableCheckedFieldNumber = 19;
  ::google::protobuf::int32 enablechecked() const;
  void set_enablechecked(::google::protobuf::int32 value);

  // optional int32 MaxFreshManStep = 20 [default = 15];
  bool has_maxfreshmanstep() const;
  void clear_maxfreshmanstep();
  static const int kMaxFreshManStepFieldNumber = 20;
  ::google::protobuf::int32 maxfreshmanstep() const;
  void set_maxfreshmanstep(::google::protobuf::int32 value);

  // optional bool EnableFreshMan = 21 [default = true];
  bool has_enablefreshman() const;
  void clear_enablefreshman();
  static const int kEnableFreshManFieldNumber = 21;
  bool enablefreshman() const;
  void set_enablefreshman(bool value);

  // optional bool EnableSpecialGuest = 22 [default = false];
  bool has_enablespecialguest() const;
  void clear_enablespecialguest();
  static const int kEnableSpecialGuestFieldNumber = 22;
  bool enablespecialguest() const;
  void set_enablespecialguest(bool value);

  // optional int32 GarbageProduceTime = 23 [default = 30];
  bool has_garbageproducetime() const;
  void clear_garbageproducetime();
  static const int kGarbageProduceTimeFieldNumber = 23;
  ::google::protobuf::int32 garbageproducetime() const;
  void set_garbageproducetime(::google::protobuf::int32 value);

  // optional int32 GarbageRemoveMoney = 24 [default = 10];
  bool has_garbageremovemoney() const;
  void clear_garbageremovemoney();
  static const int kGarbageRemoveMoneyFieldNumber = 24;
  ::google::protobuf::int32 garbageremovemoney() const;
  void set_garbageremovemoney(::google::protobuf::int32 value);

  // optional int32 GarbageProduceMax = 25 [default = 4];
  bool has_garbageproducemax() const;
  void clear_garbageproducemax();
  static const int kGarbageProduceMaxFieldNumber = 25;
  ::google::protobuf::int32 garbageproducemax() const;
  void set_garbageproducemax(::google::protobuf::int32 value);

  // optional float PublicPraisePer = 26 [default = 0.333];
  bool has_publicpraiseper() const;
  void clear_publicpraiseper();
  static const int kPublicPraisePerFieldNumber = 26;
  float publicpraiseper() const;
  void set_publicpraiseper(float value);

  // optional int32 EnableSystemFluentPrice = 27 [default = 0];
  bool has_enablesystemfluentprice() const;
  void clear_enablesystemfluentprice();
  static const int kEnableSystemFluentPriceFieldNumber = 27;
  ::google::protobuf::int32 enablesystemfluentprice() const;
  void set_enablesystemfluentprice(::google::protobuf::int32 value);

  // optional int32 EnableEveryDayAward = 28 [default = 0];
  bool has_enableeverydayaward() const;
  void clear_enableeverydayaward();
  static const int kEnableEveryDayAwardFieldNumber = 28;
  ::google::protobuf::int32 enableeverydayaward() const;
  void set_enableeverydayaward(::google::protobuf::int32 value);

  // optional .ActivetyConfig ChristmasActivety = 29;
  bool has_christmasactivety() const;
  void clear_christmasactivety();
  static const int kChristmasActivetyFieldNumber = 29;
  const ::ActivetyConfig& christmasactivety() const;
  ::ActivetyConfig* mutable_christmasactivety();
  ::ActivetyConfig* release_christmasactivety();
  void set_allocated_christmasactivety(::ActivetyConfig* christmasactivety);

  // optional .ActivetyConfig FreshBossActivety = 30;
  bool has_freshbossactivety() const;
  void clear_freshbossactivety();
  static const int kFreshBossActivetyFieldNumber = 30;
  const ::ActivetyConfig& freshbossactivety() const;
  ::ActivetyConfig* mutable_freshbossactivety();
  ::ActivetyConfig* release_freshbossactivety();
  void set_allocated_freshbossactivety(::ActivetyConfig* freshbossactivety);

  // optional int32 EnableFreeUser = 31 [default = 0];
  bool has_enablefreeuser() const;
  void clear_enablefreeuser();
  static const int kEnableFreeUserFieldNumber = 31;
  ::google::protobuf::int32 enablefreeuser() const;
  void set_enablefreeuser(::google::protobuf::int32 value);

  // optional int32 MaxUserCnt = 32;
  bool has_maxusercnt() const;
  void clear_maxusercnt();
  static const int kMaxUserCntFieldNumber = 32;
  ::google::protobuf::int32 maxusercnt() const;
  void set_maxusercnt(::google::protobuf::int32 value);

  // optional int32 FreeUserUpdate = 33;
  bool has_freeuserupdate() const;
  void clear_freeuserupdate();
  static const int kFreeUserUpdateFieldNumber = 33;
  ::google::protobuf::int32 freeuserupdate() const;
  void set_freeuserupdate(::google::protobuf::int32 value);

  // optional int32 MaxNoUserTime = 34;
  bool has_maxnousertime() const;
  void clear_maxnousertime();
  static const int kMaxNoUserTimeFieldNumber = 34;
  ::google::protobuf::int32 maxnousertime() const;
  void set_maxnousertime(::google::protobuf::int32 value);

  // optional int32 MaxFreeUserCnt = 35;
  bool has_maxfreeusercnt() const;
  void clear_maxfreeusercnt();
  static const int kMaxFreeUserCntFieldNumber = 35;
  ::google::protobuf::int32 maxfreeusercnt() const;
  void set_maxfreeusercnt(::google::protobuf::int32 value);

  // optional int32 MaxFriendCnt = 36;
  bool has_maxfriendcnt() const;
  void clear_maxfriendcnt();
  static const int kMaxFriendCntFieldNumber = 36;
  ::google::protobuf::int32 maxfriendcnt() const;
  void set_maxfriendcnt(::google::protobuf::int32 value);

  // optional int32 MaxGuestSpeed = 37;
  bool has_maxguestspeed() const;
  void clear_maxguestspeed();
  static const int kMaxGuestSpeedFieldNumber = 37;
  ::google::protobuf::int32 maxguestspeed() const;
  void set_maxguestspeed(::google::protobuf::int32 value);

  // optional int32 EnableGuestTimeCheck = 38;
  bool has_enableguesttimecheck() const;
  void clear_enableguesttimecheck();
  static const int kEnableGuestTimeCheckFieldNumber = 38;
  ::google::protobuf::int32 enableguesttimecheck() const;
  void set_enableguesttimecheck(::google::protobuf::int32 value);

  // optional int32 EnableFreeUserStatisic = 39;
  bool has_enablefreeuserstatisic() const;
  void clear_enablefreeuserstatisic();
  static const int kEnableFreeUserStatisicFieldNumber = 39;
  ::google::protobuf::int32 enablefreeuserstatisic() const;
  void set_enablefreeuserstatisic(::google::protobuf::int32 value);

  // optional int32 CDKeyWorldID = 40;
  bool has_cdkeyworldid() const;
  void clear_cdkeyworldid();
  static const int kCDKeyWorldIDFieldNumber = 40;
  ::google::protobuf::int32 cdkeyworldid() const;
  void set_cdkeyworldid(::google::protobuf::int32 value);

  // optional int32 EnableCDKey = 41;
  bool has_enablecdkey() const;
  void clear_enablecdkey();
  static const int kEnableCDKeyFieldNumber = 41;
  ::google::protobuf::int32 enablecdkey() const;
  void set_enablecdkey(::google::protobuf::int32 value);

  // optional int32 EnableDataToQQ = 42;
  bool has_enabledatatoqq() const;
  void clear_enabledatatoqq();
  static const int kEnableDataToQQFieldNumber = 42;
  ::google::protobuf::int32 enabledatatoqq() const;
  void set_enabledatatoqq(::google::protobuf::int32 value);

  // optional .ActivetyConfig TreeActivety = 43;
  bool has_treeactivety() const;
  void clear_treeactivety();
  static const int kTreeActivetyFieldNumber = 43;
  const ::ActivetyConfig& treeactivety() const;
  ::ActivetyConfig* mutable_treeactivety();
  ::ActivetyConfig* release_treeactivety();
  void set_allocated_treeactivety(::ActivetyConfig* treeactivety);

  // optional int32 SafeDataToQQMax = 44;
  bool has_safedatatoqqmax() const;
  void clear_safedatatoqqmax();
  static const int kSafeDataToQQMaxFieldNumber = 44;
  ::google::protobuf::int32 safedatatoqqmax() const;
  void set_safedatatoqqmax(::google::protobuf::int32 value);

  // optional int32 EnableNetCachePool = 45;
  bool has_enablenetcachepool() const;
  void clear_enablenetcachepool();
  static const int kEnableNetCachePoolFieldNumber = 45;
  ::google::protobuf::int32 enablenetcachepool() const;
  void set_enablenetcachepool(::google::protobuf::int32 value);

  // optional .ActivetyConfig BallActivety = 46;
  bool has_ballactivety() const;
  void clear_ballactivety();
  static const int kBallActivetyFieldNumber = 46;
  const ::ActivetyConfig& ballactivety() const;
  ::ActivetyConfig* mutable_ballactivety();
  ::ActivetyConfig* release_ballactivety();
  void set_allocated_ballactivety(::ActivetyConfig* ballactivety);

  // optional .ActivetyConfig ADActivety = 47;
  bool has_adactivety() const;
  void clear_adactivety();
  static const int kADActivetyFieldNumber = 47;
  const ::ActivetyConfig& adactivety() const;
  ::ActivetyConfig* mutable_adactivety();
  ::ActivetyConfig* release_adactivety();
  void set_allocated_adactivety(::ActivetyConfig* adactivety);

  // @@protoc_insertion_point(class_scope:CFG_GameConfig)
 private:
  inline void set_has_maxgroupbuyingtime();
  inline void clear_has_maxgroupbuyingtime();
  inline void set_has_mingroupbuyingtime();
  inline void clear_has_mingroupbuyingtime();
  inline void set_has_maxbuyper();
  inline void clear_has_maxbuyper();
  inline void set_has_minbuyper();
  inline void clear_has_minbuyper();
  inline void set_has_losebagitemsper();
  inline void clear_has_losebagitemsper();
  inline void set_has_losebagmoneyper();
  inline void clear_has_losebagmoneyper();
  inline void set_has_everyunitspeed();
  inline void clear_has_everyunitspeed();
  inline void set_has_cashierpathlength();
  inline void clear_has_cashierpathlength();
  inline void set_has_maxguestcnteverytimes();
  inline void clear_has_maxguestcnteverytimes();
  inline void set_has_maxgroupbuyingtimes();
  inline void clear_has_maxgroupbuyingtimes();
  inline void set_has_guestincreasetimetick();
  inline void clear_has_guestincreasetimetick();
  inline void set_has_friendstakeguestawaymincnt();
  inline void clear_has_friendstakeguestawaymincnt();
  inline void set_has_costmoneytakeawayguest();
  inline void clear_has_costmoneytakeawayguest();
  inline void set_has_costmoneyaddemployee();
  inline void clear_has_costmoneyaddemployee();
  inline void set_has_employeetilimax();
  inline void clear_has_employeetilimax();
  inline void set_has_publicpraiseorigon();
  inline void clear_has_publicpraiseorigon();
  inline void set_has_publicpraisemax();
  inline void clear_has_publicpraisemax();
  inline void set_has_publicpraisemin();
  inline void clear_has_publicpraisemin();
  inline void set_has_enablechecked();
  inline void clear_has_enablechecked();
  inline void set_has_maxfreshmanstep();
  inline void clear_has_maxfreshmanstep();
  inline void set_has_enablefreshman();
  inline void clear_has_enablefreshman();
  inline void set_has_enablespecialguest();
  inline void clear_has_enablespecialguest();
  inline void set_has_garbageproducetime();
  inline void clear_has_garbageproducetime();
  inline void set_has_garbageremovemoney();
  inline void clear_has_garbageremovemoney();
  inline void set_has_garbageproducemax();
  inline void clear_has_garbageproducemax();
  inline void set_has_publicpraiseper();
  inline void clear_has_publicpraiseper();
  inline void set_has_enablesystemfluentprice();
  inline void clear_has_enablesystemfluentprice();
  inline void set_has_enableeverydayaward();
  inline void clear_has_enableeverydayaward();
  inline void set_has_christmasactivety();
  inline void clear_has_christmasactivety();
  inline void set_has_freshbossactivety();
  inline void clear_has_freshbossactivety();
  inline void set_has_enablefreeuser();
  inline void clear_has_enablefreeuser();
  inline void set_has_maxusercnt();
  inline void clear_has_maxusercnt();
  inline void set_has_freeuserupdate();
  inline void clear_has_freeuserupdate();
  inline void set_has_maxnousertime();
  inline void clear_has_maxnousertime();
  inline void set_has_maxfreeusercnt();
  inline void clear_has_maxfreeusercnt();
  inline void set_has_maxfriendcnt();
  inline void clear_has_maxfriendcnt();
  inline void set_has_maxguestspeed();
  inline void clear_has_maxguestspeed();
  inline void set_has_enableguesttimecheck();
  inline void clear_has_enableguesttimecheck();
  inline void set_has_enablefreeuserstatisic();
  inline void clear_has_enablefreeuserstatisic();
  inline void set_has_cdkeyworldid();
  inline void clear_has_cdkeyworldid();
  inline void set_has_enablecdkey();
  inline void clear_has_enablecdkey();
  inline void set_has_enabledatatoqq();
  inline void clear_has_enabledatatoqq();
  inline void set_has_treeactivety();
  inline void clear_has_treeactivety();
  inline void set_has_safedatatoqqmax();
  inline void clear_has_safedatatoqqmax();
  inline void set_has_enablenetcachepool();
  inline void clear_has_enablenetcachepool();
  inline void set_has_ballactivety();
  inline void clear_has_ballactivety();
  inline void set_has_adactivety();
  inline void clear_has_adactivety();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::int32 maxgroupbuyingtime_;
  ::google::protobuf::int32 mingroupbuyingtime_;
  ::google::protobuf::int32 maxbuyper_;
  ::google::protobuf::int32 minbuyper_;
  ::google::protobuf::int32 losebagitemsper_;
  ::google::protobuf::int32 losebagmoneyper_;
  float everyunitspeed_;
  ::google::protobuf::int32 cashierpathlength_;
  ::google::protobuf::int32 maxguestcnteverytimes_;
  ::google::protobuf::int32 maxgroupbuyingtimes_;
  ::google::protobuf::int32 guestincreasetimetick_;
  ::google::protobuf::int32 friendstakeguestawaymincnt_;
  ::google::protobuf::int32 costmoneytakeawayguest_;
  ::google::protobuf::int32 costmoneyaddemployee_;
  ::google::protobuf::int32 employeetilimax_;
  ::google::protobuf::int32 publicpraiseorigon_;
  ::google::protobuf::int32 publicpraisemax_;
  ::google::protobuf::int32 publicpraisemin_;
  ::google::protobuf::int32 enablechecked_;
  ::google::protobuf::int32 maxfreshmanstep_;
  bool enablefreshman_;
  bool enablespecialguest_;
  ::google::protobuf::int32 garbageproducetime_;
  ::google::protobuf::int32 garbageremovemoney_;
  ::google::protobuf::int32 garbageproducemax_;
  float publicpraiseper_;
  ::google::protobuf::int32 enablesystemfluentprice_;
  ::ActivetyConfig* christmasactivety_;
  ::google::protobuf::int32 enableeverydayaward_;
  ::google::protobuf::int32 enablefreeuser_;
  ::ActivetyConfig* freshbossactivety_;
  ::google::protobuf::int32 maxusercnt_;
  ::google::protobuf::int32 freeuserupdate_;
  ::google::protobuf::int32 maxnousertime_;
  ::google::protobuf::int32 maxfreeusercnt_;
  ::google::protobuf::int32 maxfriendcnt_;
  ::google::protobuf::int32 maxguestspeed_;
  ::google::protobuf::int32 enableguesttimecheck_;
  ::google::protobuf::int32 enablefreeuserstatisic_;
  ::google::protobuf::int32 cdkeyworldid_;
  ::google::protobuf::int32 enablecdkey_;
  ::ActivetyConfig* treeactivety_;
  ::google::protobuf::int32 enabledatatoqq_;
  ::google::protobuf::int32 safedatatoqqmax_;
  ::ActivetyConfig* ballactivety_;
  ::ActivetyConfig* adactivety_;
  ::google::protobuf::int32 enablenetcachepool_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameConfig_2eproto();
  friend void protobuf_AssignDesc_GameConfig_2eproto();
  friend void protobuf_ShutdownFile_GameConfig_2eproto();

  void InitAsDefaultInstance();
  static CFG_GameConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivetyConfig

// optional int32 index = 1;
inline bool ActivetyConfig::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivetyConfig::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivetyConfig::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivetyConfig::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ActivetyConfig::index() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.index)
  return index_;
}
inline void ActivetyConfig::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.index)
}

// optional int64 begin_date = 2;
inline bool ActivetyConfig::has_begin_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivetyConfig::set_has_begin_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivetyConfig::clear_has_begin_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivetyConfig::clear_begin_date() {
  begin_date_ = GOOGLE_LONGLONG(0);
  clear_has_begin_date();
}
inline ::google::protobuf::int64 ActivetyConfig::begin_date() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.begin_date)
  return begin_date_;
}
inline void ActivetyConfig::set_begin_date(::google::protobuf::int64 value) {
  set_has_begin_date();
  begin_date_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.begin_date)
}

// optional int64 end_date = 3;
inline bool ActivetyConfig::has_end_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivetyConfig::set_has_end_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivetyConfig::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivetyConfig::clear_end_date() {
  end_date_ = GOOGLE_LONGLONG(0);
  clear_has_end_date();
}
inline ::google::protobuf::int64 ActivetyConfig::end_date() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.end_date)
  return end_date_;
}
inline void ActivetyConfig::set_end_date(::google::protobuf::int64 value) {
  set_has_end_date();
  end_date_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.end_date)
}

// optional int32 award_guest = 4;
inline bool ActivetyConfig::has_award_guest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivetyConfig::set_has_award_guest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivetyConfig::clear_has_award_guest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivetyConfig::clear_award_guest() {
  award_guest_ = 0;
  clear_has_award_guest();
}
inline ::google::protobuf::int32 ActivetyConfig::award_guest() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.award_guest)
  return award_guest_;
}
inline void ActivetyConfig::set_award_guest(::google::protobuf::int32 value) {
  set_has_award_guest();
  award_guest_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.award_guest)
}

// optional int32 enable_flag = 5;
inline bool ActivetyConfig::has_enable_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivetyConfig::set_has_enable_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActivetyConfig::clear_has_enable_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActivetyConfig::clear_enable_flag() {
  enable_flag_ = 0;
  clear_has_enable_flag();
}
inline ::google::protobuf::int32 ActivetyConfig::enable_flag() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.enable_flag)
  return enable_flag_;
}
inline void ActivetyConfig::set_enable_flag(::google::protobuf::int32 value) {
  set_has_enable_flag();
  enable_flag_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.enable_flag)
}

// optional int64 fresh_time = 6;
inline bool ActivetyConfig::has_fresh_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActivetyConfig::set_has_fresh_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ActivetyConfig::clear_has_fresh_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ActivetyConfig::clear_fresh_time() {
  fresh_time_ = GOOGLE_LONGLONG(0);
  clear_has_fresh_time();
}
inline ::google::protobuf::int64 ActivetyConfig::fresh_time() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.fresh_time)
  return fresh_time_;
}
inline void ActivetyConfig::set_fresh_time(::google::protobuf::int64 value) {
  set_has_fresh_time();
  fresh_time_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.fresh_time)
}

// optional int64 interval_time = 7;
inline bool ActivetyConfig::has_interval_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ActivetyConfig::set_has_interval_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ActivetyConfig::clear_has_interval_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ActivetyConfig::clear_interval_time() {
  interval_time_ = GOOGLE_LONGLONG(0);
  clear_has_interval_time();
}
inline ::google::protobuf::int64 ActivetyConfig::interval_time() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.interval_time)
  return interval_time_;
}
inline void ActivetyConfig::set_interval_time(::google::protobuf::int64 value) {
  set_has_interval_time();
  interval_time_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.interval_time)
}

// optional int32 max_cnt = 8;
inline bool ActivetyConfig::has_max_cnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ActivetyConfig::set_has_max_cnt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ActivetyConfig::clear_has_max_cnt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ActivetyConfig::clear_max_cnt() {
  max_cnt_ = 0;
  clear_has_max_cnt();
}
inline ::google::protobuf::int32 ActivetyConfig::max_cnt() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.max_cnt)
  return max_cnt_;
}
inline void ActivetyConfig::set_max_cnt(::google::protobuf::int32 value) {
  set_has_max_cnt();
  max_cnt_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.max_cnt)
}

// -------------------------------------------------------------------

// CFG_GameConfig

// optional int32 MaxGroupBuyingTime = 1 [default = 1800];
inline bool CFG_GameConfig::has_maxgroupbuyingtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFG_GameConfig::set_has_maxgroupbuyingtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CFG_GameConfig::clear_has_maxgroupbuyingtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CFG_GameConfig::clear_maxgroupbuyingtime() {
  maxgroupbuyingtime_ = 1800;
  clear_has_maxgroupbuyingtime();
}
inline ::google::protobuf::int32 CFG_GameConfig::maxgroupbuyingtime() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxGroupBuyingTime)
  return maxgroupbuyingtime_;
}
inline void CFG_GameConfig::set_maxgroupbuyingtime(::google::protobuf::int32 value) {
  set_has_maxgroupbuyingtime();
  maxgroupbuyingtime_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxGroupBuyingTime)
}

// optional int32 MinGroupBuyingTime = 2 [default = 0];
inline bool CFG_GameConfig::has_mingroupbuyingtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFG_GameConfig::set_has_mingroupbuyingtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CFG_GameConfig::clear_has_mingroupbuyingtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CFG_GameConfig::clear_mingroupbuyingtime() {
  mingroupbuyingtime_ = 0;
  clear_has_mingroupbuyingtime();
}
inline ::google::protobuf::int32 CFG_GameConfig::mingroupbuyingtime() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MinGroupBuyingTime)
  return mingroupbuyingtime_;
}
inline void CFG_GameConfig::set_mingroupbuyingtime(::google::protobuf::int32 value) {
  set_has_mingroupbuyingtime();
  mingroupbuyingtime_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MinGroupBuyingTime)
}

// optional int32 MaxBuyPer = 3 [default = 50];
inline bool CFG_GameConfig::has_maxbuyper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CFG_GameConfig::set_has_maxbuyper() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CFG_GameConfig::clear_has_maxbuyper() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CFG_GameConfig::clear_maxbuyper() {
  maxbuyper_ = 50;
  clear_has_maxbuyper();
}
inline ::google::protobuf::int32 CFG_GameConfig::maxbuyper() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxBuyPer)
  return maxbuyper_;
}
inline void CFG_GameConfig::set_maxbuyper(::google::protobuf::int32 value) {
  set_has_maxbuyper();
  maxbuyper_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxBuyPer)
}

// optional int32 MinBuyPer = 4 [default = 20];
inline bool CFG_GameConfig::has_minbuyper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CFG_GameConfig::set_has_minbuyper() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CFG_GameConfig::clear_has_minbuyper() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CFG_GameConfig::clear_minbuyper() {
  minbuyper_ = 20;
  clear_has_minbuyper();
}
inline ::google::protobuf::int32 CFG_GameConfig::minbuyper() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MinBuyPer)
  return minbuyper_;
}
inline void CFG_GameConfig::set_minbuyper(::google::protobuf::int32 value) {
  set_has_minbuyper();
  minbuyper_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MinBuyPer)
}

// optional int32 LoseBagItemsPer = 5 [default = 5];
inline bool CFG_GameConfig::has_losebagitemsper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CFG_GameConfig::set_has_losebagitemsper() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CFG_GameConfig::clear_has_losebagitemsper() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CFG_GameConfig::clear_losebagitemsper() {
  losebagitemsper_ = 5;
  clear_has_losebagitemsper();
}
inline ::google::protobuf::int32 CFG_GameConfig::losebagitemsper() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.LoseBagItemsPer)
  return losebagitemsper_;
}
inline void CFG_GameConfig::set_losebagitemsper(::google::protobuf::int32 value) {
  set_has_losebagitemsper();
  losebagitemsper_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.LoseBagItemsPer)
}

// optional int32 LoseBagMoneyPer = 6 [default = 5];
inline bool CFG_GameConfig::has_losebagmoneyper() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CFG_GameConfig::set_has_losebagmoneyper() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CFG_GameConfig::clear_has_losebagmoneyper() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CFG_GameConfig::clear_losebagmoneyper() {
  losebagmoneyper_ = 5;
  clear_has_losebagmoneyper();
}
inline ::google::protobuf::int32 CFG_GameConfig::losebagmoneyper() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.LoseBagMoneyPer)
  return losebagmoneyper_;
}
inline void CFG_GameConfig::set_losebagmoneyper(::google::protobuf::int32 value) {
  set_has_losebagmoneyper();
  losebagmoneyper_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.LoseBagMoneyPer)
}

// optional float EveryUnitSpeed = 7 [default = 0.8];
inline bool CFG_GameConfig::has_everyunitspeed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CFG_GameConfig::set_has_everyunitspeed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CFG_GameConfig::clear_has_everyunitspeed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CFG_GameConfig::clear_everyunitspeed() {
  everyunitspeed_ = 0.8f;
  clear_has_everyunitspeed();
}
inline float CFG_GameConfig::everyunitspeed() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EveryUnitSpeed)
  return everyunitspeed_;
}
inline void CFG_GameConfig::set_everyunitspeed(float value) {
  set_has_everyunitspeed();
  everyunitspeed_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EveryUnitSpeed)
}

// optional int32 CashierPathLength = 8 [default = 2];
inline bool CFG_GameConfig::has_cashierpathlength() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CFG_GameConfig::set_has_cashierpathlength() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CFG_GameConfig::clear_has_cashierpathlength() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CFG_GameConfig::clear_cashierpathlength() {
  cashierpathlength_ = 2;
  clear_has_cashierpathlength();
}
inline ::google::protobuf::int32 CFG_GameConfig::cashierpathlength() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.CashierPathLength)
  return cashierpathlength_;
}
inline void CFG_GameConfig::set_cashierpathlength(::google::protobuf::int32 value) {
  set_has_cashierpathlength();
  cashierpathlength_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.CashierPathLength)
}

// optional int32 MaxGuestCntEveryTimes = 9 [default = 20];
inline bool CFG_GameConfig::has_maxguestcnteverytimes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CFG_GameConfig::set_has_maxguestcnteverytimes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CFG_GameConfig::clear_has_maxguestcnteverytimes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CFG_GameConfig::clear_maxguestcnteverytimes() {
  maxguestcnteverytimes_ = 20;
  clear_has_maxguestcnteverytimes();
}
inline ::google::protobuf::int32 CFG_GameConfig::maxguestcnteverytimes() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxGuestCntEveryTimes)
  return maxguestcnteverytimes_;
}
inline void CFG_GameConfig::set_maxguestcnteverytimes(::google::protobuf::int32 value) {
  set_has_maxguestcnteverytimes();
  maxguestcnteverytimes_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxGuestCntEveryTimes)
}

// optional int32 MaxGroupBuyingTimes = 10 [default = 20];
inline bool CFG_GameConfig::has_maxgroupbuyingtimes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CFG_GameConfig::set_has_maxgroupbuyingtimes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CFG_GameConfig::clear_has_maxgroupbuyingtimes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CFG_GameConfig::clear_maxgroupbuyingtimes() {
  maxgroupbuyingtimes_ = 20;
  clear_has_maxgroupbuyingtimes();
}
inline ::google::protobuf::int32 CFG_GameConfig::maxgroupbuyingtimes() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxGroupBuyingTimes)
  return maxgroupbuyingtimes_;
}
inline void CFG_GameConfig::set_maxgroupbuyingtimes(::google::protobuf::int32 value) {
  set_has_maxgroupbuyingtimes();
  maxgroupbuyingtimes_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxGroupBuyingTimes)
}

// optional int32 GuestIncreaseTimeTick = 11 [default = 1800];
inline bool CFG_GameConfig::has_guestincreasetimetick() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CFG_GameConfig::set_has_guestincreasetimetick() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CFG_GameConfig::clear_has_guestincreasetimetick() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CFG_GameConfig::clear_guestincreasetimetick() {
  guestincreasetimetick_ = 1800;
  clear_has_guestincreasetimetick();
}
inline ::google::protobuf::int32 CFG_GameConfig::guestincreasetimetick() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.GuestIncreaseTimeTick)
  return guestincreasetimetick_;
}
inline void CFG_GameConfig::set_guestincreasetimetick(::google::protobuf::int32 value) {
  set_has_guestincreasetimetick();
  guestincreasetimetick_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.GuestIncreaseTimeTick)
}

// optional int32 FriendsTakeGuestAwayMinCnt = 12 [default = 16];
inline bool CFG_GameConfig::has_friendstakeguestawaymincnt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CFG_GameConfig::set_has_friendstakeguestawaymincnt() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CFG_GameConfig::clear_has_friendstakeguestawaymincnt() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CFG_GameConfig::clear_friendstakeguestawaymincnt() {
  friendstakeguestawaymincnt_ = 16;
  clear_has_friendstakeguestawaymincnt();
}
inline ::google::protobuf::int32 CFG_GameConfig::friendstakeguestawaymincnt() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.FriendsTakeGuestAwayMinCnt)
  return friendstakeguestawaymincnt_;
}
inline void CFG_GameConfig::set_friendstakeguestawaymincnt(::google::protobuf::int32 value) {
  set_has_friendstakeguestawaymincnt();
  friendstakeguestawaymincnt_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.FriendsTakeGuestAwayMinCnt)
}

// optional int32 CostMoneyTakeAwayGuest = 13 [default = 150];
inline bool CFG_GameConfig::has_costmoneytakeawayguest() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CFG_GameConfig::set_has_costmoneytakeawayguest() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CFG_GameConfig::clear_has_costmoneytakeawayguest() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CFG_GameConfig::clear_costmoneytakeawayguest() {
  costmoneytakeawayguest_ = 150;
  clear_has_costmoneytakeawayguest();
}
inline ::google::protobuf::int32 CFG_GameConfig::costmoneytakeawayguest() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.CostMoneyTakeAwayGuest)
  return costmoneytakeawayguest_;
}
inline void CFG_GameConfig::set_costmoneytakeawayguest(::google::protobuf::int32 value) {
  set_has_costmoneytakeawayguest();
  costmoneytakeawayguest_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.CostMoneyTakeAwayGuest)
}

// optional int32 CostMoneyAddEmployee = 14 [default = 100];
inline bool CFG_GameConfig::has_costmoneyaddemployee() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CFG_GameConfig::set_has_costmoneyaddemployee() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CFG_GameConfig::clear_has_costmoneyaddemployee() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CFG_GameConfig::clear_costmoneyaddemployee() {
  costmoneyaddemployee_ = 100;
  clear_has_costmoneyaddemployee();
}
inline ::google::protobuf::int32 CFG_GameConfig::costmoneyaddemployee() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.CostMoneyAddEmployee)
  return costmoneyaddemployee_;
}
inline void CFG_GameConfig::set_costmoneyaddemployee(::google::protobuf::int32 value) {
  set_has_costmoneyaddemployee();
  costmoneyaddemployee_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.CostMoneyAddEmployee)
}

// optional int32 EmployeeTiLiMax = 15 [default = 72];
inline bool CFG_GameConfig::has_employeetilimax() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CFG_GameConfig::set_has_employeetilimax() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CFG_GameConfig::clear_has_employeetilimax() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CFG_GameConfig::clear_employeetilimax() {
  employeetilimax_ = 72;
  clear_has_employeetilimax();
}
inline ::google::protobuf::int32 CFG_GameConfig::employeetilimax() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EmployeeTiLiMax)
  return employeetilimax_;
}
inline void CFG_GameConfig::set_employeetilimax(::google::protobuf::int32 value) {
  set_has_employeetilimax();
  employeetilimax_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EmployeeTiLiMax)
}

// optional int32 PublicPraiseOrigon = 16 [default = 500];
inline bool CFG_GameConfig::has_publicpraiseorigon() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CFG_GameConfig::set_has_publicpraiseorigon() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CFG_GameConfig::clear_has_publicpraiseorigon() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CFG_GameConfig::clear_publicpraiseorigon() {
  publicpraiseorigon_ = 500;
  clear_has_publicpraiseorigon();
}
inline ::google::protobuf::int32 CFG_GameConfig::publicpraiseorigon() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.PublicPraiseOrigon)
  return publicpraiseorigon_;
}
inline void CFG_GameConfig::set_publicpraiseorigon(::google::protobuf::int32 value) {
  set_has_publicpraiseorigon();
  publicpraiseorigon_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.PublicPraiseOrigon)
}

// optional int32 PublicPraiseMax = 17 [default = 1000];
inline bool CFG_GameConfig::has_publicpraisemax() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CFG_GameConfig::set_has_publicpraisemax() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CFG_GameConfig::clear_has_publicpraisemax() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CFG_GameConfig::clear_publicpraisemax() {
  publicpraisemax_ = 1000;
  clear_has_publicpraisemax();
}
inline ::google::protobuf::int32 CFG_GameConfig::publicpraisemax() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.PublicPraiseMax)
  return publicpraisemax_;
}
inline void CFG_GameConfig::set_publicpraisemax(::google::protobuf::int32 value) {
  set_has_publicpraisemax();
  publicpraisemax_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.PublicPraiseMax)
}

// optional int32 PublicPraiseMin = 18 [default = 0];
inline bool CFG_GameConfig::has_publicpraisemin() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CFG_GameConfig::set_has_publicpraisemin() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CFG_GameConfig::clear_has_publicpraisemin() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CFG_GameConfig::clear_publicpraisemin() {
  publicpraisemin_ = 0;
  clear_has_publicpraisemin();
}
inline ::google::protobuf::int32 CFG_GameConfig::publicpraisemin() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.PublicPraiseMin)
  return publicpraisemin_;
}
inline void CFG_GameConfig::set_publicpraisemin(::google::protobuf::int32 value) {
  set_has_publicpraisemin();
  publicpraisemin_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.PublicPraiseMin)
}

// optional int32 EnableChecked = 19 [default = 0];
inline bool CFG_GameConfig::has_enablechecked() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CFG_GameConfig::set_has_enablechecked() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CFG_GameConfig::clear_has_enablechecked() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CFG_GameConfig::clear_enablechecked() {
  enablechecked_ = 0;
  clear_has_enablechecked();
}
inline ::google::protobuf::int32 CFG_GameConfig::enablechecked() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableChecked)
  return enablechecked_;
}
inline void CFG_GameConfig::set_enablechecked(::google::protobuf::int32 value) {
  set_has_enablechecked();
  enablechecked_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableChecked)
}

// optional int32 MaxFreshManStep = 20 [default = 15];
inline bool CFG_GameConfig::has_maxfreshmanstep() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CFG_GameConfig::set_has_maxfreshmanstep() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CFG_GameConfig::clear_has_maxfreshmanstep() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CFG_GameConfig::clear_maxfreshmanstep() {
  maxfreshmanstep_ = 15;
  clear_has_maxfreshmanstep();
}
inline ::google::protobuf::int32 CFG_GameConfig::maxfreshmanstep() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxFreshManStep)
  return maxfreshmanstep_;
}
inline void CFG_GameConfig::set_maxfreshmanstep(::google::protobuf::int32 value) {
  set_has_maxfreshmanstep();
  maxfreshmanstep_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxFreshManStep)
}

// optional bool EnableFreshMan = 21 [default = true];
inline bool CFG_GameConfig::has_enablefreshman() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CFG_GameConfig::set_has_enablefreshman() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CFG_GameConfig::clear_has_enablefreshman() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CFG_GameConfig::clear_enablefreshman() {
  enablefreshman_ = true;
  clear_has_enablefreshman();
}
inline bool CFG_GameConfig::enablefreshman() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableFreshMan)
  return enablefreshman_;
}
inline void CFG_GameConfig::set_enablefreshman(bool value) {
  set_has_enablefreshman();
  enablefreshman_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableFreshMan)
}

// optional bool EnableSpecialGuest = 22 [default = false];
inline bool CFG_GameConfig::has_enablespecialguest() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CFG_GameConfig::set_has_enablespecialguest() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CFG_GameConfig::clear_has_enablespecialguest() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CFG_GameConfig::clear_enablespecialguest() {
  enablespecialguest_ = false;
  clear_has_enablespecialguest();
}
inline bool CFG_GameConfig::enablespecialguest() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableSpecialGuest)
  return enablespecialguest_;
}
inline void CFG_GameConfig::set_enablespecialguest(bool value) {
  set_has_enablespecialguest();
  enablespecialguest_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableSpecialGuest)
}

// optional int32 GarbageProduceTime = 23 [default = 30];
inline bool CFG_GameConfig::has_garbageproducetime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CFG_GameConfig::set_has_garbageproducetime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CFG_GameConfig::clear_has_garbageproducetime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CFG_GameConfig::clear_garbageproducetime() {
  garbageproducetime_ = 30;
  clear_has_garbageproducetime();
}
inline ::google::protobuf::int32 CFG_GameConfig::garbageproducetime() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.GarbageProduceTime)
  return garbageproducetime_;
}
inline void CFG_GameConfig::set_garbageproducetime(::google::protobuf::int32 value) {
  set_has_garbageproducetime();
  garbageproducetime_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.GarbageProduceTime)
}

// optional int32 GarbageRemoveMoney = 24 [default = 10];
inline bool CFG_GameConfig::has_garbageremovemoney() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CFG_GameConfig::set_has_garbageremovemoney() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CFG_GameConfig::clear_has_garbageremovemoney() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CFG_GameConfig::clear_garbageremovemoney() {
  garbageremovemoney_ = 10;
  clear_has_garbageremovemoney();
}
inline ::google::protobuf::int32 CFG_GameConfig::garbageremovemoney() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.GarbageRemoveMoney)
  return garbageremovemoney_;
}
inline void CFG_GameConfig::set_garbageremovemoney(::google::protobuf::int32 value) {
  set_has_garbageremovemoney();
  garbageremovemoney_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.GarbageRemoveMoney)
}

// optional int32 GarbageProduceMax = 25 [default = 4];
inline bool CFG_GameConfig::has_garbageproducemax() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CFG_GameConfig::set_has_garbageproducemax() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CFG_GameConfig::clear_has_garbageproducemax() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CFG_GameConfig::clear_garbageproducemax() {
  garbageproducemax_ = 4;
  clear_has_garbageproducemax();
}
inline ::google::protobuf::int32 CFG_GameConfig::garbageproducemax() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.GarbageProduceMax)
  return garbageproducemax_;
}
inline void CFG_GameConfig::set_garbageproducemax(::google::protobuf::int32 value) {
  set_has_garbageproducemax();
  garbageproducemax_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.GarbageProduceMax)
}

// optional float PublicPraisePer = 26 [default = 0.333];
inline bool CFG_GameConfig::has_publicpraiseper() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CFG_GameConfig::set_has_publicpraiseper() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CFG_GameConfig::clear_has_publicpraiseper() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CFG_GameConfig::clear_publicpraiseper() {
  publicpraiseper_ = 0.333f;
  clear_has_publicpraiseper();
}
inline float CFG_GameConfig::publicpraiseper() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.PublicPraisePer)
  return publicpraiseper_;
}
inline void CFG_GameConfig::set_publicpraiseper(float value) {
  set_has_publicpraiseper();
  publicpraiseper_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.PublicPraisePer)
}

// optional int32 EnableSystemFluentPrice = 27 [default = 0];
inline bool CFG_GameConfig::has_enablesystemfluentprice() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CFG_GameConfig::set_has_enablesystemfluentprice() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CFG_GameConfig::clear_has_enablesystemfluentprice() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CFG_GameConfig::clear_enablesystemfluentprice() {
  enablesystemfluentprice_ = 0;
  clear_has_enablesystemfluentprice();
}
inline ::google::protobuf::int32 CFG_GameConfig::enablesystemfluentprice() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableSystemFluentPrice)
  return enablesystemfluentprice_;
}
inline void CFG_GameConfig::set_enablesystemfluentprice(::google::protobuf::int32 value) {
  set_has_enablesystemfluentprice();
  enablesystemfluentprice_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableSystemFluentPrice)
}

// optional int32 EnableEveryDayAward = 28 [default = 0];
inline bool CFG_GameConfig::has_enableeverydayaward() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CFG_GameConfig::set_has_enableeverydayaward() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CFG_GameConfig::clear_has_enableeverydayaward() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CFG_GameConfig::clear_enableeverydayaward() {
  enableeverydayaward_ = 0;
  clear_has_enableeverydayaward();
}
inline ::google::protobuf::int32 CFG_GameConfig::enableeverydayaward() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableEveryDayAward)
  return enableeverydayaward_;
}
inline void CFG_GameConfig::set_enableeverydayaward(::google::protobuf::int32 value) {
  set_has_enableeverydayaward();
  enableeverydayaward_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableEveryDayAward)
}

// optional .ActivetyConfig ChristmasActivety = 29;
inline bool CFG_GameConfig::has_christmasactivety() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CFG_GameConfig::set_has_christmasactivety() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CFG_GameConfig::clear_has_christmasactivety() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CFG_GameConfig::clear_christmasactivety() {
  if (christmasactivety_ != NULL) christmasactivety_->::ActivetyConfig::Clear();
  clear_has_christmasactivety();
}
inline const ::ActivetyConfig& CFG_GameConfig::christmasactivety() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.ChristmasActivety)
  return christmasactivety_ != NULL ? *christmasactivety_ : *default_instance_->christmasactivety_;
}
inline ::ActivetyConfig* CFG_GameConfig::mutable_christmasactivety() {
  set_has_christmasactivety();
  if (christmasactivety_ == NULL) {
    christmasactivety_ = new ::ActivetyConfig;
  }
  // @@protoc_insertion_point(field_mutable:CFG_GameConfig.ChristmasActivety)
  return christmasactivety_;
}
inline ::ActivetyConfig* CFG_GameConfig::release_christmasactivety() {
  clear_has_christmasactivety();
  ::ActivetyConfig* temp = christmasactivety_;
  christmasactivety_ = NULL;
  return temp;
}
inline void CFG_GameConfig::set_allocated_christmasactivety(::ActivetyConfig* christmasactivety) {
  delete christmasactivety_;
  christmasactivety_ = christmasactivety;
  if (christmasactivety) {
    set_has_christmasactivety();
  } else {
    clear_has_christmasactivety();
  }
  // @@protoc_insertion_point(field_set_allocated:CFG_GameConfig.ChristmasActivety)
}

// optional .ActivetyConfig FreshBossActivety = 30;
inline bool CFG_GameConfig::has_freshbossactivety() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CFG_GameConfig::set_has_freshbossactivety() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CFG_GameConfig::clear_has_freshbossactivety() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CFG_GameConfig::clear_freshbossactivety() {
  if (freshbossactivety_ != NULL) freshbossactivety_->::ActivetyConfig::Clear();
  clear_has_freshbossactivety();
}
inline const ::ActivetyConfig& CFG_GameConfig::freshbossactivety() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.FreshBossActivety)
  return freshbossactivety_ != NULL ? *freshbossactivety_ : *default_instance_->freshbossactivety_;
}
inline ::ActivetyConfig* CFG_GameConfig::mutable_freshbossactivety() {
  set_has_freshbossactivety();
  if (freshbossactivety_ == NULL) {
    freshbossactivety_ = new ::ActivetyConfig;
  }
  // @@protoc_insertion_point(field_mutable:CFG_GameConfig.FreshBossActivety)
  return freshbossactivety_;
}
inline ::ActivetyConfig* CFG_GameConfig::release_freshbossactivety() {
  clear_has_freshbossactivety();
  ::ActivetyConfig* temp = freshbossactivety_;
  freshbossactivety_ = NULL;
  return temp;
}
inline void CFG_GameConfig::set_allocated_freshbossactivety(::ActivetyConfig* freshbossactivety) {
  delete freshbossactivety_;
  freshbossactivety_ = freshbossactivety;
  if (freshbossactivety) {
    set_has_freshbossactivety();
  } else {
    clear_has_freshbossactivety();
  }
  // @@protoc_insertion_point(field_set_allocated:CFG_GameConfig.FreshBossActivety)
}

// optional int32 EnableFreeUser = 31 [default = 0];
inline bool CFG_GameConfig::has_enablefreeuser() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CFG_GameConfig::set_has_enablefreeuser() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CFG_GameConfig::clear_has_enablefreeuser() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CFG_GameConfig::clear_enablefreeuser() {
  enablefreeuser_ = 0;
  clear_has_enablefreeuser();
}
inline ::google::protobuf::int32 CFG_GameConfig::enablefreeuser() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableFreeUser)
  return enablefreeuser_;
}
inline void CFG_GameConfig::set_enablefreeuser(::google::protobuf::int32 value) {
  set_has_enablefreeuser();
  enablefreeuser_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableFreeUser)
}

// optional int32 MaxUserCnt = 32;
inline bool CFG_GameConfig::has_maxusercnt() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CFG_GameConfig::set_has_maxusercnt() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CFG_GameConfig::clear_has_maxusercnt() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CFG_GameConfig::clear_maxusercnt() {
  maxusercnt_ = 0;
  clear_has_maxusercnt();
}
inline ::google::protobuf::int32 CFG_GameConfig::maxusercnt() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxUserCnt)
  return maxusercnt_;
}
inline void CFG_GameConfig::set_maxusercnt(::google::protobuf::int32 value) {
  set_has_maxusercnt();
  maxusercnt_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxUserCnt)
}

// optional int32 FreeUserUpdate = 33;
inline bool CFG_GameConfig::has_freeuserupdate() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CFG_GameConfig::set_has_freeuserupdate() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CFG_GameConfig::clear_has_freeuserupdate() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CFG_GameConfig::clear_freeuserupdate() {
  freeuserupdate_ = 0;
  clear_has_freeuserupdate();
}
inline ::google::protobuf::int32 CFG_GameConfig::freeuserupdate() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.FreeUserUpdate)
  return freeuserupdate_;
}
inline void CFG_GameConfig::set_freeuserupdate(::google::protobuf::int32 value) {
  set_has_freeuserupdate();
  freeuserupdate_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.FreeUserUpdate)
}

// optional int32 MaxNoUserTime = 34;
inline bool CFG_GameConfig::has_maxnousertime() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CFG_GameConfig::set_has_maxnousertime() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CFG_GameConfig::clear_has_maxnousertime() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CFG_GameConfig::clear_maxnousertime() {
  maxnousertime_ = 0;
  clear_has_maxnousertime();
}
inline ::google::protobuf::int32 CFG_GameConfig::maxnousertime() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxNoUserTime)
  return maxnousertime_;
}
inline void CFG_GameConfig::set_maxnousertime(::google::protobuf::int32 value) {
  set_has_maxnousertime();
  maxnousertime_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxNoUserTime)
}

// optional int32 MaxFreeUserCnt = 35;
inline bool CFG_GameConfig::has_maxfreeusercnt() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CFG_GameConfig::set_has_maxfreeusercnt() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CFG_GameConfig::clear_has_maxfreeusercnt() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CFG_GameConfig::clear_maxfreeusercnt() {
  maxfreeusercnt_ = 0;
  clear_has_maxfreeusercnt();
}
inline ::google::protobuf::int32 CFG_GameConfig::maxfreeusercnt() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxFreeUserCnt)
  return maxfreeusercnt_;
}
inline void CFG_GameConfig::set_maxfreeusercnt(::google::protobuf::int32 value) {
  set_has_maxfreeusercnt();
  maxfreeusercnt_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxFreeUserCnt)
}

// optional int32 MaxFriendCnt = 36;
inline bool CFG_GameConfig::has_maxfriendcnt() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CFG_GameConfig::set_has_maxfriendcnt() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CFG_GameConfig::clear_has_maxfriendcnt() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CFG_GameConfig::clear_maxfriendcnt() {
  maxfriendcnt_ = 0;
  clear_has_maxfriendcnt();
}
inline ::google::protobuf::int32 CFG_GameConfig::maxfriendcnt() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxFriendCnt)
  return maxfriendcnt_;
}
inline void CFG_GameConfig::set_maxfriendcnt(::google::protobuf::int32 value) {
  set_has_maxfriendcnt();
  maxfriendcnt_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxFriendCnt)
}

// optional int32 MaxGuestSpeed = 37;
inline bool CFG_GameConfig::has_maxguestspeed() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CFG_GameConfig::set_has_maxguestspeed() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CFG_GameConfig::clear_has_maxguestspeed() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CFG_GameConfig::clear_maxguestspeed() {
  maxguestspeed_ = 0;
  clear_has_maxguestspeed();
}
inline ::google::protobuf::int32 CFG_GameConfig::maxguestspeed() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxGuestSpeed)
  return maxguestspeed_;
}
inline void CFG_GameConfig::set_maxguestspeed(::google::protobuf::int32 value) {
  set_has_maxguestspeed();
  maxguestspeed_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxGuestSpeed)
}

// optional int32 EnableGuestTimeCheck = 38;
inline bool CFG_GameConfig::has_enableguesttimecheck() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CFG_GameConfig::set_has_enableguesttimecheck() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CFG_GameConfig::clear_has_enableguesttimecheck() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CFG_GameConfig::clear_enableguesttimecheck() {
  enableguesttimecheck_ = 0;
  clear_has_enableguesttimecheck();
}
inline ::google::protobuf::int32 CFG_GameConfig::enableguesttimecheck() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableGuestTimeCheck)
  return enableguesttimecheck_;
}
inline void CFG_GameConfig::set_enableguesttimecheck(::google::protobuf::int32 value) {
  set_has_enableguesttimecheck();
  enableguesttimecheck_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableGuestTimeCheck)
}

// optional int32 EnableFreeUserStatisic = 39;
inline bool CFG_GameConfig::has_enablefreeuserstatisic() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CFG_GameConfig::set_has_enablefreeuserstatisic() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CFG_GameConfig::clear_has_enablefreeuserstatisic() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CFG_GameConfig::clear_enablefreeuserstatisic() {
  enablefreeuserstatisic_ = 0;
  clear_has_enablefreeuserstatisic();
}
inline ::google::protobuf::int32 CFG_GameConfig::enablefreeuserstatisic() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableFreeUserStatisic)
  return enablefreeuserstatisic_;
}
inline void CFG_GameConfig::set_enablefreeuserstatisic(::google::protobuf::int32 value) {
  set_has_enablefreeuserstatisic();
  enablefreeuserstatisic_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableFreeUserStatisic)
}

// optional int32 CDKeyWorldID = 40;
inline bool CFG_GameConfig::has_cdkeyworldid() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CFG_GameConfig::set_has_cdkeyworldid() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CFG_GameConfig::clear_has_cdkeyworldid() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CFG_GameConfig::clear_cdkeyworldid() {
  cdkeyworldid_ = 0;
  clear_has_cdkeyworldid();
}
inline ::google::protobuf::int32 CFG_GameConfig::cdkeyworldid() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.CDKeyWorldID)
  return cdkeyworldid_;
}
inline void CFG_GameConfig::set_cdkeyworldid(::google::protobuf::int32 value) {
  set_has_cdkeyworldid();
  cdkeyworldid_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.CDKeyWorldID)
}

// optional int32 EnableCDKey = 41;
inline bool CFG_GameConfig::has_enablecdkey() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CFG_GameConfig::set_has_enablecdkey() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CFG_GameConfig::clear_has_enablecdkey() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CFG_GameConfig::clear_enablecdkey() {
  enablecdkey_ = 0;
  clear_has_enablecdkey();
}
inline ::google::protobuf::int32 CFG_GameConfig::enablecdkey() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableCDKey)
  return enablecdkey_;
}
inline void CFG_GameConfig::set_enablecdkey(::google::protobuf::int32 value) {
  set_has_enablecdkey();
  enablecdkey_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableCDKey)
}

// optional int32 EnableDataToQQ = 42;
inline bool CFG_GameConfig::has_enabledatatoqq() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CFG_GameConfig::set_has_enabledatatoqq() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CFG_GameConfig::clear_has_enabledatatoqq() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CFG_GameConfig::clear_enabledatatoqq() {
  enabledatatoqq_ = 0;
  clear_has_enabledatatoqq();
}
inline ::google::protobuf::int32 CFG_GameConfig::enabledatatoqq() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableDataToQQ)
  return enabledatatoqq_;
}
inline void CFG_GameConfig::set_enabledatatoqq(::google::protobuf::int32 value) {
  set_has_enabledatatoqq();
  enabledatatoqq_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableDataToQQ)
}

// optional .ActivetyConfig TreeActivety = 43;
inline bool CFG_GameConfig::has_treeactivety() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CFG_GameConfig::set_has_treeactivety() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CFG_GameConfig::clear_has_treeactivety() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CFG_GameConfig::clear_treeactivety() {
  if (treeactivety_ != NULL) treeactivety_->::ActivetyConfig::Clear();
  clear_has_treeactivety();
}
inline const ::ActivetyConfig& CFG_GameConfig::treeactivety() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.TreeActivety)
  return treeactivety_ != NULL ? *treeactivety_ : *default_instance_->treeactivety_;
}
inline ::ActivetyConfig* CFG_GameConfig::mutable_treeactivety() {
  set_has_treeactivety();
  if (treeactivety_ == NULL) {
    treeactivety_ = new ::ActivetyConfig;
  }
  // @@protoc_insertion_point(field_mutable:CFG_GameConfig.TreeActivety)
  return treeactivety_;
}
inline ::ActivetyConfig* CFG_GameConfig::release_treeactivety() {
  clear_has_treeactivety();
  ::ActivetyConfig* temp = treeactivety_;
  treeactivety_ = NULL;
  return temp;
}
inline void CFG_GameConfig::set_allocated_treeactivety(::ActivetyConfig* treeactivety) {
  delete treeactivety_;
  treeactivety_ = treeactivety;
  if (treeactivety) {
    set_has_treeactivety();
  } else {
    clear_has_treeactivety();
  }
  // @@protoc_insertion_point(field_set_allocated:CFG_GameConfig.TreeActivety)
}

// optional int32 SafeDataToQQMax = 44;
inline bool CFG_GameConfig::has_safedatatoqqmax() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CFG_GameConfig::set_has_safedatatoqqmax() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CFG_GameConfig::clear_has_safedatatoqqmax() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CFG_GameConfig::clear_safedatatoqqmax() {
  safedatatoqqmax_ = 0;
  clear_has_safedatatoqqmax();
}
inline ::google::protobuf::int32 CFG_GameConfig::safedatatoqqmax() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.SafeDataToQQMax)
  return safedatatoqqmax_;
}
inline void CFG_GameConfig::set_safedatatoqqmax(::google::protobuf::int32 value) {
  set_has_safedatatoqqmax();
  safedatatoqqmax_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.SafeDataToQQMax)
}

// optional int32 EnableNetCachePool = 45;
inline bool CFG_GameConfig::has_enablenetcachepool() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CFG_GameConfig::set_has_enablenetcachepool() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CFG_GameConfig::clear_has_enablenetcachepool() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CFG_GameConfig::clear_enablenetcachepool() {
  enablenetcachepool_ = 0;
  clear_has_enablenetcachepool();
}
inline ::google::protobuf::int32 CFG_GameConfig::enablenetcachepool() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableNetCachePool)
  return enablenetcachepool_;
}
inline void CFG_GameConfig::set_enablenetcachepool(::google::protobuf::int32 value) {
  set_has_enablenetcachepool();
  enablenetcachepool_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableNetCachePool)
}

// optional .ActivetyConfig BallActivety = 46;
inline bool CFG_GameConfig::has_ballactivety() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CFG_GameConfig::set_has_ballactivety() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CFG_GameConfig::clear_has_ballactivety() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CFG_GameConfig::clear_ballactivety() {
  if (ballactivety_ != NULL) ballactivety_->::ActivetyConfig::Clear();
  clear_has_ballactivety();
}
inline const ::ActivetyConfig& CFG_GameConfig::ballactivety() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.BallActivety)
  return ballactivety_ != NULL ? *ballactivety_ : *default_instance_->ballactivety_;
}
inline ::ActivetyConfig* CFG_GameConfig::mutable_ballactivety() {
  set_has_ballactivety();
  if (ballactivety_ == NULL) {
    ballactivety_ = new ::ActivetyConfig;
  }
  // @@protoc_insertion_point(field_mutable:CFG_GameConfig.BallActivety)
  return ballactivety_;
}
inline ::ActivetyConfig* CFG_GameConfig::release_ballactivety() {
  clear_has_ballactivety();
  ::ActivetyConfig* temp = ballactivety_;
  ballactivety_ = NULL;
  return temp;
}
inline void CFG_GameConfig::set_allocated_ballactivety(::ActivetyConfig* ballactivety) {
  delete ballactivety_;
  ballactivety_ = ballactivety;
  if (ballactivety) {
    set_has_ballactivety();
  } else {
    clear_has_ballactivety();
  }
  // @@protoc_insertion_point(field_set_allocated:CFG_GameConfig.BallActivety)
}

// optional .ActivetyConfig ADActivety = 47;
inline bool CFG_GameConfig::has_adactivety() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CFG_GameConfig::set_has_adactivety() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CFG_GameConfig::clear_has_adactivety() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CFG_GameConfig::clear_adactivety() {
  if (adactivety_ != NULL) adactivety_->::ActivetyConfig::Clear();
  clear_has_adactivety();
}
inline const ::ActivetyConfig& CFG_GameConfig::adactivety() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.ADActivety)
  return adactivety_ != NULL ? *adactivety_ : *default_instance_->adactivety_;
}
inline ::ActivetyConfig* CFG_GameConfig::mutable_adactivety() {
  set_has_adactivety();
  if (adactivety_ == NULL) {
    adactivety_ = new ::ActivetyConfig;
  }
  // @@protoc_insertion_point(field_mutable:CFG_GameConfig.ADActivety)
  return adactivety_;
}
inline ::ActivetyConfig* CFG_GameConfig::release_adactivety() {
  clear_has_adactivety();
  ::ActivetyConfig* temp = adactivety_;
  adactivety_ = NULL;
  return temp;
}
inline void CFG_GameConfig::set_allocated_adactivety(::ActivetyConfig* adactivety) {
  delete adactivety_;
  adactivety_ = adactivety;
  if (adactivety) {
    set_has_adactivety();
  } else {
    clear_has_adactivety();
  }
  // @@protoc_insertion_point(field_set_allocated:CFG_GameConfig.ADActivety)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameConfig_2eproto__INCLUDED
