//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : GameConfig.cpp
//  @ Date : 2011/5/18
//  @ Author :
//
//


#include "GameConfig.h"
#include "common/Ini.h"
#include "common/string-util.h"
#include "common/DBC.h"
#include "stdio.h"
const char* GameConfig::szConfigFile = "Config/gameconfig.ini";
GameConfig* GameConfig::_sMgr = NULL;
////////////////////////////////////////////////////////////////
//             ????????                                     //
////////////////////////////////////////////////////////////////

GameConfig* GameConfig::CreateInstance(void )
{
    if (_sMgr == NULL)
    {
        _sMgr = new GameConfig();
    }
    return _sMgr;
}

void GameConfig::ReleaseInstance(void )
{
    if (_sMgr)
    {
        delete _sMgr;
        _sMgr = NULL;
    }
}

GameConfig* GameConfig::GetInstance(void )
{
    return _sMgr;
}
////////////////////////////////////////////////////////////////
//             ????                                            //
////////////////////////////////////////////////////////////////

bool GameConfig::LoadInfo(void )
{
    LoadVersion();
    m_czFuncAdd = "";
    Ini myini;
    if (myini.Open(szConfigFile) == false)
    {
        return false;
    }
    char speed[1024] = {0};
    myini.ReadText("GroupBuying", "EveryUnitSpeed", speed, 32);
    float test(0) ;
    safe_atof(speed, test);
    m_GameConfig.set_cashierpathlength(myini.Readint("GroupBuying", "CashierPathLength"));
    m_GameConfig.set_everyunitspeed(test);
    m_GameConfig.set_losebagitemsper(myini.Readint("GroupBuying", "LoseBagItemsPer"));
    m_GameConfig.set_losebagmoneyper(myini.Readint("GroupBuying", "LoseBagMoneyPer"));
    m_GameConfig.set_maxbuyper(myini.Readint("GroupBuying", "MaxBuyPer"));
    m_GameConfig.set_minbuyper(myini.Readint("GroupBuying", "MinBuyPer"));
    m_GameConfig.set_maxgroupbuyingtime(myini.Readint("GroupBuying", "MaxGroupBuyingTime"));
    m_GameConfig.set_mingroupbuyingtime(myini.Readint("GroupBuying", "MinGroupBuyingTime"));
    m_GameConfig.set_maxguestcnteverytimes(myini.Readint("GroupBuying", "MaxGuestCntEveryTimes"));
    m_GameConfig.set_maxgroupbuyingtimes(myini.Readint("GroupBuying", "MaxGroupBuyingTimes"));
    m_GameConfig.set_guestincreasetimetick(myini.Readint("GroupBuying", "GuestIncreaseTimeTick"));
    m_GameConfig.set_costmoneytakeawayguest(myini.Readint("GroupBuying", "CostMoneyTakeAwayGuest"));
    m_GameConfig.set_friendstakeguestawaymincnt(myini.Readint("GroupBuying", "FriendsTakeGuestAwayMinCnt"));
    m_GameConfig.set_enablechecked(myini.Readint("GroupBuying", "EnableChecked"));
    m_GameConfig.set_enablespecialguest(myini.Readint("GroupBuying", "EnableSpecialGuest"));

    m_GameConfig.set_employeetilimax(myini.Readint("EmployeeSystem", "EmployeeTiLiMax"));
    m_GameConfig.set_costmoneyaddemployee(myini.Readint("EmployeeSystem", "CostMoneyAddEmployee"));

    m_GameConfig.set_publicpraiseorigon(myini.Readint("PubicPraise", "PublicPraiseOrigon"));
    m_GameConfig.set_publicpraisemax(myini.Readint("PubicPraise", "PublicPraiseMax"));
    m_GameConfig.set_publicpraisemin(myini.Readint("PubicPraise", "PublicPraiseMin"));

    m_GameConfig.set_enablefreshman(myini.Readint("FreshMan", "EnableFreshMan"));
    m_GameConfig.set_maxfreshmanstep(myini.Readint("FreshMan", "MaxFreshManStep"));
    m_nFlashManStepInLv2 = myini.Readint("FreshMan", "MaxFreshManStepLv2");


    m_nInitGold = myini.Readint("FreshMan", "NewUserGold");
    m_nGuestIncreaseTimeReduse = myini.Readint("GroupBuying", "GuestIncreaseTimeReduse");

    m_GameConfig.set_garbageproducetime(myini.Readint("Item", "GarbageProduceTime"));
    m_GameConfig.set_garbageremovemoney(myini.Readint("Item", "GarbageRemoveMoney"));
    m_GameConfig.set_garbageproducemax(myini.Readint("Item", "GarbageProduceMax"));

    m_GameConfig.set_enableeverydayaward(myini.Readint("EveryDayAward", "EnableEveryDayAward"));

    m_nHireFriendCost           = myini.Readint("EmployeeSystem", "HireFriendCost");
    m_nHireFriendSystemRatePer  = myini.Readint("EmployeeSystem", "HireFriendSystemRate");

    m_nHistoryGuestIncreaseTime = myini.Readint("HistoryMap", "HistoryMapGuestIncreaseTime");
    m_nHistoryGuestMax          = myini.Readint("HistoryMap", "HistoryMapGuestMax");

    m_nMaxPickGuestPerDay       = myini.Readint("FriendLimit", "PickMaxPerDay");
    m_nMaxWaterPerDay           = myini.Readint("FriendLimit", "WaterMaxPerDay");
    m_nTreasureBoxHelpReward    = myini.Readint("FriendLimit", "TreasureBoxHelpReward");
    m_bGuestBoxEnable           = (bool)myini.Readint("FriendLimit", "EnableGuestBox");
    m_GameConfig.set_enablesystemfluentprice(myini.Readint("FluentPrice", "EnableSystemFluentPrice"));

    ActivetyConfig * pChristmasActivety = m_GameConfig.mutable_christmasactivety();
    pChristmasActivety->set_award_guest(myini.Readint("ChristmasDay", "AwardGuestIndex"));
    pChristmasActivety->set_index(myini.Readint("ChristmasDay", "ActivetyIndex"));
    char end_date_str[1024] = {0};
    myini.ReadText("ChristmasDay", "EndDate", end_date_str, 1024);
    vector<int> vec_end_date;
    tokenize_as_int(end_date_str, vec_end_date, string(":"));
    if (vec_end_date.size() >= 6)
    {
        pChristmasActivety->set_end_date(tm_val_to_time_t(vec_end_date[0], vec_end_date[1], vec_end_date[2], vec_end_date[3], vec_end_date[4], vec_end_date[5]));
    }
    pChristmasActivety->set_enable_flag(myini.Readint("ChristmasDay", "EnableFlag"));

    ActivetyConfig * pFreshBossActivety = m_GameConfig.mutable_freshbossactivety();
    pFreshBossActivety->set_index(myini.Readint("FreshBoss", "ActivetyIndex"));
    pFreshBossActivety->set_enable_flag(myini.Readint("FreshBoss", "EnableFlag"));
    pFreshBossActivety->set_fresh_time(myini.Readint("FreshBoss", "MaxFreshTime"));
    pFreshBossActivety->set_max_cnt(myini.Readint("FreshBoss", "MaxCnt"));
    char public_praise_per[1024] = {0};
    myini.ReadText("GroupBuying", "PublicPraisePer", public_praise_per, 32);
    float public_praise_dec_per(0) ;
    safe_atof(public_praise_per, public_praise_dec_per);
    m_GameConfig.set_publicpraiseper(public_praise_dec_per);
    //??????
    m_GameConfig.set_enablefreeuser(myini.Readint("UserFree", "EnableFlag"));
    m_GameConfig.set_freeuserupdate(myini.Readint("UserFree", "FreeUpdate"));
    m_GameConfig.set_maxfreeusercnt(myini.Readint("UserFree", "FreeCnt"));
    m_GameConfig.set_maxusercnt(myini.Readint("UserFree", "MaxUserCnt"));
    m_GameConfig.set_maxnousertime(myini.Readint("UserFree", "MaxUserTime"));
    m_GameConfig.set_maxfriendcnt(myini.Readint("Friend", "FriendCntMax"));

    m_GameConfig.set_maxguestspeed(myini.Readint("GuestSpeed", "GuestSpeed"));
    m_GameConfig.set_enableguesttimecheck(myini.Readint("GuestSpeed", "GuestTimeCheckEnable"));
    m_bFriendInfoServerEnable = myini.Readint("FriendInfoServer", "enable");
    m_bFriendInfoServerEnableThread = myini.Readint("FriendInfoServer", "EnabeThread");

    m_GameConfig.set_enablefreeuserstatisic(myini.Readint("UserFree", "EnableStatisic"));
    m_nInviteVersion = myini.Readint("FriendLimit", "InviteVersion");

    m_GameConfig.set_cdkeyworldid(myini.Readint("CDKey", "world_id"));
    m_GameConfig.set_enablecdkey(myini.Readint("CDKey", "EnableFlag"));

    m_GameConfig.set_enabledatatoqq(myini.Readint("DataToQQ", "EnableFlag"));
    m_GameConfig.set_safedatatoqqmax(myini.Readint("DataToQQ", "SafeDataToQQMax"));

    ActivetyConfig * pTreeActivety = m_GameConfig.mutable_treeactivety();
    pTreeActivety->set_award_guest(myini.Readint("Tree", "AwardGuestIndex"));
    //char end_date_str[1024] = {0};
    memset(end_date_str, 0, 1024);
    myini.ReadText("Tree", "EndDate", end_date_str, 1024);
    vec_end_date.clear();
    tokenize_as_int(end_date_str, vec_end_date, string(":"));
    if (vec_end_date.size() >= 6)
    {
        pTreeActivety->set_end_date(tm_val_to_time_t(vec_end_date[0], vec_end_date[1], vec_end_date[2], vec_end_date[3], vec_end_date[4], vec_end_date[5]));
    }
    pTreeActivety->set_enable_flag(myini.Readint("Tree", "EnableFlag"));
    int tree_max_times(0);
    if (myini.ReadintIfExist("Tree", "MaxCnt", tree_max_times) == false)
    {
        tree_max_times = 2;
    }
    pTreeActivety->set_max_cnt(tree_max_times);


    ActivetyConfig * pADActivety = m_GameConfig.mutable_adactivety();
    pADActivety->set_award_guest(myini.Readint("AD", "AwardGuestIndex"));
    //char end_date_str[1024] = {0};
    memset(end_date_str, 0, 1024);
    myini.ReadText("AD", "EndDate", end_date_str, 1024);
    vec_end_date.clear();
    tokenize_as_int(end_date_str, vec_end_date, string(":"));
    if (vec_end_date.size() >= 6)
    {
        pADActivety->set_end_date(tm_val_to_time_t(vec_end_date[0], vec_end_date[1], vec_end_date[2], vec_end_date[3], vec_end_date[4], vec_end_date[5]));
    }
    pADActivety->set_enable_flag(myini.Readint("AD", "EnableFlag"));
    pADActivety->set_max_cnt(myini.Readint("AD", "MaxCnt"));

    m_GameConfig.set_enablenetcachepool(myini.Readint("NetCache", "EnableFlag"));

    Ini alarm_ini;
    alarm_ini.Open("Config/Alarm.ini") ;
    m_bAlarmEnable      = alarm_ini.Readint("Alarm", "Enable");
    m_bAlarmDebugEnable = alarm_ini.Readint("Alarm", "Debug");
    char ipaddr[255];
    m_czAlarmServerAddr = alarm_ini.ReadText("Alarm", "ip", ipaddr, 254);
    if (m_czAlarmServerAddr.length() < 4)
    {
        m_czAlarmServerAddr = "119.147.19.43";
    }
    m_bSendEmptyAlarmOnLogin = alarm_ini.Readint("Alarm", "ClearOnLogin");
    m_nAlarmBusAdd = alarm_ini.Readint("Alarm", "BusAdd");
    m_nAlarmGuestAdd = alarm_ini.Readint("Alarm", "GuestAdd");
    m_nAlarmQueueMax = alarm_ini.Readint("Alarm", "QMax");

    m_nRankWorldId = myini.Readint("Rank", "RankWorldId");
    m_nMinClearSecond = myini.Readint("ShelfLevelUp", "MinClearSecond");

    m_nDuanWuGuestNum = myini.Readint("DuanWu", "GuestNum");
    m_nFortuneCostDay = myini.Readint("Fortune", "CostDay");
    m_nFortuneStealNum = myini.Readint("Fortune", "StealNum");
    m_nFortuneCostRate = myini.Readint("Fortune", "CostRate");

    m_nReturnGiftId_1 = myini.Readint("ReturnGift", "GiftId_1");
    m_nReturnGiftId_2 = myini.Readint("ReturnGift", "GiftId_2");
    m_nReturnGiftId_3 = myini.Readint("ReturnGift", "GiftId_3");

    m_nReturnGiftYId_1 = myini.Readint("ReturnGiftY", "GiftId_1");
    m_nReturnGiftYId_2 = myini.Readint("ReturnGiftY", "GiftId_2");

    m_jieRiIndex = myini.Readint("JieRi", "Index");
    m_jieRiItemId = myini.Readint("JieRi", "ItemId");
    m_jieRiExchangeItemId_1 = myini.Readint("JieRi", "ExchangeItemId_1");
    m_jieRiExchangeItemId_2 = myini.Readint("JieRi", "ExchangeItemId_2");
    m_jieRiExchangeItemId_3 = myini.Readint("JieRi", "ExchangeItemId_3");
    m_jieRiExchangeItemId_4 = myini.Readint("JieRi", "ExchangeItemId_4");
    m_jieRiExchangeItemNum_1 = myini.Readint("JieRi", "ExchangeItemNum_1");
    m_jieRiExchangeItemNum_2 = myini.Readint("JieRi", "ExchangeItemNum_2");
    m_jieRiExchangeItemNum_3 = myini.Readint("JieRi", "ExchangeItemNum_3");
    m_jieRiExchangeItemNum_4 = myini.Readint("JieRi", "ExchangeItemNum_4");
    m_jieRiGuestIdBegin = myini.Readint("JieRi", "GuestIdBegin");
    m_jieRiGuestIdEnd = myini.Readint("JieRi", "GuestIdEnd");
    m_jieRiCachierId = myini.Readint("JieRi", "CachierId");
    m_jieRiCachierTableId = myini.Readint("JieRi", "CachierTableId");

    m_fsg_itemId_1 = myini.Readint("FriendSendGift", "ItemId_1");
    m_fsg_packetMe_1 = myini.Readint("FriendSendGift", "PacketMe_1");
    m_fsg_packetFriend_1 = myini.Readint("FriendSendGift", "PacketFriend_1");
    m_fsg_itemId_2 = myini.Readint("FriendSendGift", "ItemId_2");
    m_fsg_packetMe_2 = myini.Readint("FriendSendGift", "PacketMe_2");
    m_fsg_packetFriend_2 = myini.Readint("FriendSendGift", "PacketFriend_2");

    ActivetyConfig * pBallActivety = m_GameConfig.mutable_ballactivety();
    pBallActivety->set_index(myini.Readint("Ball", "ActivetyIndex"));
    pBallActivety->set_enable_flag(myini.Readint("Ball", "EnableFlag"));
    ;
    pBallActivety->set_award_guest(myini.Readint("Ball", "AwardGuestIndex"));
    memset(end_date_str, 0, 1024);
    myini.ReadText("Ball", "EndDate", end_date_str, 1024);
    vec_end_date.clear();
    tokenize_as_int(end_date_str, vec_end_date, string(":"));
    if (vec_end_date.size() >= 6)
    {
        pBallActivety->set_end_date(tm_val_to_time_t(vec_end_date[0], vec_end_date[1], vec_end_date[2], vec_end_date[3], vec_end_date[4], vec_end_date[5]));
    }
    m_bShelfGemAllOpenAtLevel10 = false;
    int tmpsgaoal = 0;
    myini.ReadintIfExist("Gem", "allopenatlvl10", tmpsgaoal);
    m_bShelfGemAllOpenAtLevel10 = (tmpsgaoal != 0);
    m_bMemCacheEnable = (bool)myini.Readint("MemCache", "EnableFlag");
    m_nMemCacheUpdateTime = myini.Readint("MemCache", "FreeUpdateTime");
    m_nMemCacheFreeCnt	= myini.Readint("MemCache", "FreeCnt");
    m_nMemCacheSaveInterval = myini.Readint("MemCache", "SaveInterval");
    m_nMemCacheSaveUpdateTime = myini.Readint("MemCache", "SaveUpdateTime");
    m_nMemCacheRemoveTime = myini.Readint("MemCache", "RemoveTime");
    Ini memini;
    int m_nMemCacheErr = 0;
    if (memini.Open("MemErr.ini"))
    {
        m_nMemCacheErr = memini.Readint("MemCache", "MemCacheError");
    }

    if (m_nMemCacheErr > 0)
    {
        m_bMemCacheEnable = false;
    }

    m_nSaveIntervalMinute = 5;
    myini.ReadintIfExist("SaveInterval", "minute", m_nSaveIntervalMinute);

    m_bReconnectSendKickOnAuth = false;
    m_bReconnectSendGuestOnAuth = false;
    m_llTokenRefalshTime = 3600;
    m_bReconnectSendKickOnWebLogin = false;
    m_bReconnectSendNoConnectOnInit = false;
    Ini Reconnect;
    if (Reconnect.Open("Config/reconnect.ini"))
    {
        m_bReconnectSendKickOnWebLogin  = Reconnect.Readint("Reconnect", "SendKickOnWebLogin");
        m_bReconnectSendKickOnAuth      = Reconnect.Readint("Reconnect", "SendGuestOnAuth");
        m_bReconnectSendGuestOnAuth     = Reconnect.Readint("Reconnect", "SendGuestOnAuth");
        m_bReconnectSendNoConnectOnInit = Reconnect.Readint("Reconnect", "SendNoConnectOnInit");
        m_llTokenRefalshTime            = Reconnect.Readint("Reconnect", "TokenTime");
    }
    m_nYellowDmdDallyTaskVersion = myini.Readint("DallyTask", "DallyTaskVersion");
    Ini hotcache_ini;
    if (hotcache_ini.Open("Config/HotCache.ini") == false)
    {
        m_bHotCacheEnableLoad  = false;
        m_bHotCacheEnableWrite = false;
    }
    else
    {
        m_bHotCacheEnableLoad  = hotcache_ini.Readint("HotCache", "Load");
        m_bHotCacheEnableWrite = hotcache_ini.Readint("HotCache", "Write");
    }
    printf("hotcacheconfig %d %d\n", m_bHotCacheEnableLoad, m_bHotCacheEnableWrite);
    m_nWapEnable = myini.Readint("Wap", "EnableFlag");
    m_nWapInterval = myini.Readint("Wap", "Interval");

    m_nCupResetEnableFlag = myini.Readint("CupReset", "EnableFlag");

    m_nMaxKeepOnlineGiftCnt = 0;
    m_nMaxKeepOnlineGiftCnt =  myini.Readint("GiftPacketKeepOnline", "step");

    Ini location_ini;
    if (location_ini.Open("location.ini") == false)
    {
        m_czLocation = Locat_CH;
    }
    else
    {
        char lc[255];
        myini.ReadText("location", "loc", lc, 254);
        m_czLocation = lc;
    }
    Ini factroy_ini;
    if (factroy_ini.Open("Config/Factory/Factory.ini") == false )
    {
        m_nFactoryLoadRandom    = 1;
        m_nFactoryMaxType       = 10;
        m_nFactorySaveSpan      = 1;
        m_nFactoryRoomMaxPlayer = 60;
        m_nFactoryRoomSitCost1  = 1;
        m_nFactoryRoomSitCost2  = 1;
        m_nFactoryRoomSitCost3  = 1;
        m_nFactoryGoodCostRate1 = 0;
        m_nFactoryGoodCostRate2 = 0;
        m_nFactoryGoodCostRate3 = 0;
        m_nFactoryItemHavRate   = 0;
        m_nFactoryItemDropTime1 = 0;
        m_nFactoryItemDropTime2 = 0;
        m_nFactoryItemDropTime3 = 0;
        m_nFactoryDallyFinishTime = -1;
        m_nFactoryLibTime       = 6;
        m_bFactoryFakeReward = false;
        m_bFactoryFakeLostFound = false;
    }
    else
    {
        m_nFactorySaveSpan   = factroy_ini.Readint("Factory", "SaveSpan");
        m_nFactoryMaxType    = factroy_ini.Readint("Factory", "MaxTypeForLogic");
        m_nFactoryLoadRandom = factroy_ini.Readint("Factory", "LoadMaxPerRandom");
        m_nFactoryRoomMaxPlayer = factroy_ini.Readint("Factory", "MaxPlayer");
        m_nFactoryRoomFistNotEmpty = factroy_ini.Readint("Factory", "FirstNotEmpty");

        m_nFactoryRoomSitCost1 = factroy_ini.Readint("Factory", "SitCost1");
        m_nFactoryRoomSitCost2 = factroy_ini.Readint("Factory", "SitCost2");
        m_nFactoryRoomSitCost3 = factroy_ini.Readint("Factory", "SitCost3");

        m_nFactoryGoodCostRate1 = factroy_ini.Readint("Factory", "GoodCostRatePer1");
        m_nFactoryGoodCostRate2 = factroy_ini.Readint("Factory", "GoodCostRatePer2");
        m_nFactoryGoodCostRate3 = factroy_ini.Readint("Factory", "GoodCostRatePer3");

        m_nFactoryItemHavRate   = factroy_ini.Readint("Factory", "ItemHavRate");

        m_nFactoryItemDropTime1 = factroy_ini.Readint("Factory", "ItemDropTime1");
        m_nFactoryItemDropTime2 = factroy_ini.Readint("Factory", "ItemDropTime2");
        m_nFactoryItemDropTime3 = factroy_ini.Readint("Factory", "ItemDropTime3");

        m_nFactoryDallyFinishTime = factroy_ini.Readint("Factory", "DallyFinishTime");
        m_nFactoryLibTime       = factroy_ini.Readint("Factory", "LibHour");
        m_bFactoryFakeReward  = (bool)(factroy_ini.Readint("Factory", "FakeReward") != 0);
        m_bFactoryFakeLostFound  = (bool)(factroy_ini.Readint("Factory", "FakeLostFound") != 0);
    }
    LoadNotice();
    LoadTimerConfig();
    return true;

}

#define NoticeFile "notice.txt"
#define NoticeMsgMaxLength (1024*10)

bool GameConfig::SaveNotice(int nNoticeNumber, const std::string& dat, const std::string& msg)
{
    m_strNoticeMsg = msg;
    m_nNoticeNum = nNoticeNumber;
    m_strNoticeDate = dat;
    FILE* pFlie = fopen(NoticeFile, "w");
    if (pFlie == NULL)
    {
        return false;
    }
    if (msg.size() >= NoticeMsgMaxLength)
    {
        return false;
    }
    fprintf(pFlie, "%d\n%s\n%s\n", nNoticeNumber, dat.c_str(), msg.c_str());
    fclose(pFlie);
    return true;
}

bool GameConfig::LoadNotice()
{
    FILE* pFile = fopen(NoticeFile, "r");
    if (pFile == NULL)
    {
        return false;
    }
    char msg[NoticeMsgMaxLength];
    char dat[NoticeMsgMaxLength];
    int num = 0;
    fscanf(pFile, "%d\n%s\n%[^\n]", &num, dat, msg);
    m_strNoticeMsg = msg;
    m_strNoticeDate = dat;
    fclose(pFile);
    m_nNoticeNum = num;
    return true;
}

bool GameConfig::LoadWebPath()
{
    DBCFile file(0);
    file.OpenFromTXT("Config/WebPath.dat");
    int cnt = file.GetRecordsNum();
    m_xWebPath.clear();

    enum fs
    {
        ID, NAME, VALUE
    } ;
    for (int line = 0; line < cnt; line++)
    {
        std::string name  = file.Search_Posistion(line, NAME)->pString;
        std::string value = file.Search_Posistion(line, VALUE)->pString;
        m_xWebPath[name] = value;
    }
    return true;
}

bool GameConfig::LoadTimerConfig()
{
    Ini ini;
    m_bTimerFactoryAutoReward = false;
    if (ini.Open("Config/Timer.ini"))
    {
        m_bTimerFactoryAutoReward  = ini.Readint("Timer", "FactoryAuto") != 0;
    }
    return true;
}

CFG_GameConfig *GameConfig::GetInfo(int nID)
{
    return &m_GameConfig;
}

int GameConfig::GetTotalCnt(void )
{
    return 0;
}

GameConfig::GameConfig()
{
    m_GameConfig.Clear();

    m_nFortuneCostRate = 0;

    m_nReturnGiftYId_1 = 0;
    m_nReturnGiftYId_2 = 0;
    m_nRankWorldId = 1;
}

GameConfig::~GameConfig()
{
    m_GameConfig.Clear();
}

int	GameConfig::GetCashierPathLength(void)
{
    return m_GameConfig.cashierpathlength();
}

int GameConfig::GetLoseBagItemPer(void)
{
    return m_GameConfig.losebagitemsper();
}

int GameConfig::GetLoseBagMoneyPer(void)
{
    return m_GameConfig.losebagmoneyper();
}

int GameConfig::GetMaxBuyPer(void)
{
    return m_GameConfig.maxbuyper();
}

int GameConfig::GetMinBuyPer(void)
{
    return m_GameConfig.minbuyper();
}

int GameConfig::GetMaxGroupBuyingTime(void)
{
    return m_GameConfig.maxgroupbuyingtime();
}

int GameConfig::GetMinGroupBuyingTime(void)
{
    return m_GameConfig.mingroupbuyingtime();
}

float GameConfig::GetEveryUnitSpeed(void)
{
    return m_GameConfig.everyunitspeed();
}

int GameConfig::GetMaxGuestCntEveryTimes(void)
{
    return m_GameConfig.maxguestcnteverytimes();
}

int GameConfig::GetMaxGroupBuyingTimes(void)
{
    return m_GameConfig.maxgroupbuyingtimes();
}

int GameConfig::GetGuestIncreaseTimeTick(void)
{
    return m_GameConfig.guestincreasetimetick();
}

int GameConfig::GetGuestIncreaseTimeReduse()
{
    return m_nGuestIncreaseTimeReduse;
}

int GameConfig::GetCostMoneyTakeAwayGuest(void)
{
    return m_GameConfig.costmoneytakeawayguest();
}
//employee

int GameConfig::GetEmployeeTiLiMax(void)
{
    return m_GameConfig.employeetilimax();
}

int GameConfig::GetCostMoneyAddEmployee(void)
{
    return m_GameConfig.costmoneyaddemployee();
}
//public praise

int GameConfig::GetPublicPraiseOrigon(void)
{
    return m_GameConfig.publicpraiseorigon();
}

int GameConfig::GetPublicPraiseMax(void)
{
    return m_GameConfig.publicpraisemax();
}

int GameConfig::GetPublicPraiseMin(void)
{
    return m_GameConfig.publicpraisemin();
}

int GameConfig::GetFriendsTakeGuestAwayMinCnt(void)
{
    return m_GameConfig.friendstakeguestawaymincnt();
}

bool GameConfig::GetEnabledCheckedFlag(void)
{
    return (m_GameConfig.enablechecked() == 1) ? true : false;
}

int GameConfig::GetMaxFreshManStep(void)
{
    return m_GameConfig.maxfreshmanstep();
}

bool GameConfig::GetEnabledFreshManFlag(void)
{
    return m_GameConfig.enablefreshman();
}

int GameConfig::GetNewInitUserGold()
{
    return m_nInitGold;
}

bool GameConfig::GetEnableSpecailGuest( void )
{
    return m_GameConfig.enablespecialguest();
}

int GameConfig::GetGarbageProduceTime( void )
{
    return m_GameConfig.garbageproducetime();
}

int GameConfig::GetGarbageProduceMax( void )
{
    return m_GameConfig.garbageproducemax();
}

int GameConfig::GetGarbageRemoveMoney( void )
{
    return	m_GameConfig.garbageremovemoney();
}

int GameConfig::GetHireFriendCost()
{
    return m_nHireFriendCost;
}

int GameConfig::GetBeHiredReward()
{
    return m_nHireFriendCost * (100 - m_nHireFriendSystemRatePer) / 100;
}

float GameConfig::GetPublicPraisePer( void )
{
    return m_GameConfig.publicpraiseper();
}

int GameConfig::GetMaxFreshManStepInLevel2()
{
    return m_nFlashManStepInLv2;
}

int GameConfig::GetEnableSysytemFluentPrice( void )
{
    return m_GameConfig.enablesystemfluentprice();
}

int GameConfig::GetHistoryGusetIncreaseTime()
{
    return m_nHistoryGuestIncreaseTime;
}

int GameConfig::GetHistoryGuestMax()
{
    return m_nHistoryGuestMax;
}

int GameConfig::GetMaxPickGuestPerDay()
{
    return m_nMaxPickGuestPerDay;
}

int GameConfig::GetMaxWaterPerDay()
{
    return m_nMaxWaterPerDay;
}

int GameConfig::GetTreasureBoxHelpReward()
{
    return m_nTreasureBoxHelpReward;
}

bool GameConfig::EnableGuestBox()
{
    return m_bGuestBoxEnable;
}

int GameConfig::GetEverydayAwardEnableFlag( void )
{
    return m_GameConfig.enableeverydayaward();
}

ActivetyConfig* GameConfig::GetChristmasActivetyInfo()
{
    return m_GameConfig.mutable_christmasactivety();
}

ActivetyConfig* GameConfig::GetFreshBossActivetyInfo()
{
    return m_GameConfig.mutable_freshbossactivety();
}

int GameConfig::GetFreeUpdateTime()
{
    return m_GameConfig.freeuserupdate();
}

int GameConfig::GetEnableFreeFlag()
{
    return m_GameConfig.enablefreeuser();
}

int GameConfig::GetMaxUserCnt()
{
    return m_GameConfig.maxusercnt();
}

int GameConfig::GetMaxNoUseTime()
{
    return m_GameConfig.maxnousertime();
}

int GameConfig::GetMaxFreeCnt()
{
    return m_GameConfig.maxfreeusercnt();
}

int GameConfig::GetMaxFriendCacheCnt()
{
    return m_GameConfig.maxfriendcnt();
}

int GameConfig::GetMaxGuestSpeed()
{
    return m_GameConfig.maxguestspeed();
}

bool GameConfig::EnableFriendInfoServer()
{
    return m_bFriendInfoServerEnable;
}

int GameConfig::GetGuestTimeCheckFlag()
{
    return m_GameConfig.enableguesttimecheck();
}

int GameConfig::GetEnableUserFreeStatFlag()
{
    return m_GameConfig.enablefreeuserstatisic();
}

int GameConfig::GetFriendInviteVersion()
{
    return m_nInviteVersion;
}

int GameConfig::GetCDKeyWorldID()
{
    return m_GameConfig.cdkeyworldid();
}

int GameConfig::GetCDKeyEnableFlag()
{
    return m_GameConfig.enablecdkey();
}

int GameConfig::GetDataToQQEnableFlag()
{
    return m_GameConfig.enabledatatoqq();
}

ActivetyConfig* GameConfig::GetTreeActivetyInfo()
{
    return m_GameConfig.mutable_treeactivety();
}

int GameConfig::GetSafeDataToQQMax()
{
    return m_GameConfig.safedatatoqqmax();
}

int GameConfig::GetNetCacheEnableFlag()
{
    return m_GameConfig.enablenetcachepool();
}

std::string GameConfig::GetGameVersion()
{
    return m_GameVersion;
}

bool GameConfig::LoadVersion( void )
{
    Ini myini;
    if (myini.Open("Config/VERSION.ini") == false)
    {
        //return false;
    }
    m_GameVersion = "";
    char version[1024] = {0};
    myini.ReadText("GameVersion", "version", version, 1024);
    m_GameVersion = version;
    myini.Close();
    return true;
}

bool GameConfig::GetAlarmFlag()
{
    return m_bAlarmEnable;
}

bool GameConfig::GetAlarmDebugFlag()
{
    return m_bAlarmDebugEnable;
}

std::string& GameConfig::GetAlarmIp()
{
    return m_czAlarmServerAddr;
}

int	GameConfig::GetRankWorldId()
{
    return m_nRankWorldId;
}

int	GameConfig::GetDuanWuGuestNum()
{
    return m_nDuanWuGuestNum;
}

int	GameConfig::GetFortuneCostDay()
{
    return m_nFortuneCostDay;
}

int	GameConfig::GetFortuneStealNum()
{
    return m_nFortuneStealNum;
}

int	GameConfig::GetFortuneCostRate()
{
    return m_nFortuneCostRate;
}

int	GameConfig::GetReturnGiftId_1()
{
    return m_nReturnGiftId_1;
}

int	GameConfig::GetReturnGiftId_2()
{
    return m_nReturnGiftId_2;
}

int	GameConfig::GetReturnGiftId_3()
{
    return m_nReturnGiftId_3;
}

int	GameConfig::GetReturnGiftYId_1()
{
    return m_nReturnGiftYId_1;
}

int	GameConfig::GetReturnGiftYId_2()
{
    return m_nReturnGiftYId_2;
}

int	GameConfig::GetJieRiIndex()
{
    return m_jieRiIndex;
}

int	GameConfig::GetJieRiItemId()
{
    return m_jieRiItemId;
}

int	GameConfig::GetJieRiExchangeItemId_1()
{
    return m_jieRiExchangeItemId_1;
}

int	GameConfig::GetJieRiExchangeItemId_2()
{
    return m_jieRiExchangeItemId_2;
}

int	GameConfig::GetJieRiExchangeItemId_3()
{
    return m_jieRiExchangeItemId_3;
}

int	GameConfig::GetJieRiExchangeItemId_4()
{
    return m_jieRiExchangeItemId_4;
}

int	GameConfig::GetJieRiExchangeItemNum_1()
{
    return m_jieRiExchangeItemNum_1;
}

int	GameConfig::GetJieRiExchangeItemNum_2()
{
    return m_jieRiExchangeItemNum_2;
}

int	GameConfig::GetJieRiExchangeItemNum_3()
{
    return m_jieRiExchangeItemNum_3;
}

int	GameConfig::GetJieRiExchangeItemNum_4()
{
    return m_jieRiExchangeItemNum_4;
}

int	GameConfig::GetJieRiGuestIdBegin()
{
    return m_jieRiGuestIdBegin;
}

int	GameConfig::GetJieRiGuestIdEnd()
{
    return m_jieRiGuestIdEnd;
}

int	GameConfig::GetJieRiCachierId()
{
    return m_jieRiCachierId;
}

int	GameConfig::GetJieRiCachierTableId()
{
    return m_jieRiCachierTableId;
}

int	GameConfig::GetMinClearSecond()
{
    return m_nMinClearSecond;
}

int	GameConfig::GetFsgItemId_1()
{
    return m_fsg_itemId_1;
}

int	GameConfig::GetFsgPacketMe_1()
{
    return m_fsg_packetMe_1;
}

int	GameConfig::GetFsgPacketFriend_1()
{
    return m_fsg_packetFriend_1;
}

int	GameConfig::GetFsgItemId_2()
{
    return m_fsg_itemId_2;
}

int	GameConfig::GetFsgPacketMe_2()
{
    return m_fsg_packetMe_2;
}

int	GameConfig::GetFsgPacketFriend_2()
{
    return m_fsg_packetFriend_2;
}

ActivetyConfig* GameConfig::GetBallActivetyInfo()
{
    return m_GameConfig.mutable_ballactivety();
}

bool GameConfig::EnableFriendInfoServerThread()
{
    return m_bFriendInfoServerEnableThread;
}

bool GameConfig::GetEnableMemCache()
{
    return m_bMemCacheEnable;
}

int GameConfig::GetMemCacheUpdateTime()
{
    return m_nMemCacheUpdateTime;
}

int GameConfig::GetMemCacheFreeCnt()
{
    return m_nMemCacheFreeCnt;
}

int GameConfig::GetMemCacheSaveInterval()
{
    return m_nMemCacheSaveInterval;
}

int GameConfig::GetMemCacheSaveUpdateTime()
{
    return m_nMemCacheSaveUpdateTime;
}

int GameConfig::GetMemCacheRemoveTime()
{
    return m_nMemCacheRemoveTime;
}

bool GameConfig::GetSendGuestOnAuth()
{
    return m_bReconnectSendGuestOnAuth;
}

bool GameConfig::GetSendKickOnAuth()
{
    return m_bReconnectSendKickOnAuth;
}

bool GameConfig::GetSendKickOnWebLogin()
{
    return m_bReconnectSendKickOnWebLogin;
}

bool GameConfig::GetSendNoConnectOnInit()
{
    return m_bReconnectSendNoConnectOnInit;
}

int64 GameConfig::GetTokenRefalshTime()
{
    return m_llTokenRefalshTime;
}

std::string& GameConfig::GetFuncAccString()
{
    return m_czFuncAdd;
}

bool GameConfig::GetWapEnable()
{
    if (m_nWapEnable > 0)
    {
        return true;
    }
    else
    {
        return false;
    }
}

int GameConfig::GetSaveInterval()
{
    return m_nSaveIntervalMinute;
}

ActivetyConfig* GameConfig::GetADActivetyInfo()
{
    return m_GameConfig.mutable_adactivety();
}

int GameConfig::GetWapInterval()
{
    return m_nWapInterval;
}

bool GameConfig::GetCupResetEnableFlag()
{
    return m_nCupResetEnableFlag > 0 ? true : false;
}