// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ActivetyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivetyConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CFG_GameConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CFG_GameConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameConfig_2eproto() {
  protobuf_AddDesc_GameConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ActivetyConfig_descriptor_ = file->message_type(0);
  static const int ActivetyConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivetyConfig, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivetyConfig, begin_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivetyConfig, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivetyConfig, award_guest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivetyConfig, enable_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivetyConfig, fresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivetyConfig, interval_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivetyConfig, max_cnt_),
  };
  ActivetyConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivetyConfig_descriptor_,
      ActivetyConfig::default_instance_,
      ActivetyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivetyConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActivetyConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivetyConfig, _internal_metadata_),
      -1);
  CFG_GameConfig_descriptor_ = file->message_type(1);
  static const int CFG_GameConfig_offsets_[47] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, maxgroupbuyingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, mingroupbuyingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, maxbuyper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, minbuyper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, losebagitemsper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, losebagmoneyper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, everyunitspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, cashierpathlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, maxguestcnteverytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, maxgroupbuyingtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, guestincreasetimetick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, friendstakeguestawaymincnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, costmoneytakeawayguest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, costmoneyaddemployee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, employeetilimax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, publicpraiseorigon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, publicpraisemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, publicpraisemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, enablechecked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, maxfreshmanstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, enablefreshman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, enablespecialguest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, garbageproducetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, garbageremovemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, garbageproducemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, publicpraiseper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, enablesystemfluentprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, enableeverydayaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, christmasactivety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, freshbossactivety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, enablefreeuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, maxusercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, freeuserupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, maxnousertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, maxfreeusercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, maxfriendcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, maxguestspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, enableguesttimecheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, enablefreeuserstatisic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, cdkeyworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, enablecdkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, enabledatatoqq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, treeactivety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, safedatatoqqmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, enablenetcachepool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, ballactivety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, adactivety_),
  };
  CFG_GameConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CFG_GameConfig_descriptor_,
      CFG_GameConfig::default_instance_,
      CFG_GameConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(CFG_GameConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFG_GameConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivetyConfig_descriptor_, &ActivetyConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CFG_GameConfig_descriptor_, &CFG_GameConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameConfig_2eproto() {
  delete ActivetyConfig::default_instance_;
  delete ActivetyConfig_reflection_;
  delete CFG_GameConfig::default_instance_;
  delete CFG_GameConfig_reflection_;
}

void protobuf_AddDesc_GameConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GameConfig.proto\"\253\001\n\016ActivetyConfig\022\r\n"
    "\005index\030\001 \001(\005\022\022\n\nbegin_date\030\002 \001(\003\022\020\n\010end_"
    "date\030\003 \001(\003\022\023\n\013award_guest\030\004 \001(\005\022\023\n\013enabl"
    "e_flag\030\005 \001(\005\022\022\n\nfresh_time\030\006 \001(\003\022\025\n\rinte"
    "rval_time\030\007 \001(\003\022\017\n\007max_cnt\030\010 \001(\005\"\242\013\n\016CFG"
    "_GameConfig\022 \n\022MaxGroupBuyingTime\030\001 \001(\005:"
    "\0041800\022\035\n\022MinGroupBuyingTime\030\002 \001(\005:\0010\022\025\n\t"
    "MaxBuyPer\030\003 \001(\005:\00250\022\025\n\tMinBuyPer\030\004 \001(\005:\002"
    "20\022\032\n\017LoseBagItemsPer\030\005 \001(\005:\0015\022\032\n\017LoseBa"
    "gMoneyPer\030\006 \001(\005:\0015\022\033\n\016EveryUnitSpeed\030\007 \001"
    "(\002:\0030.8\022\034\n\021CashierPathLength\030\010 \001(\005:\0012\022!\n"
    "\025MaxGuestCntEveryTimes\030\t \001(\005:\00220\022\037\n\023MaxG"
    "roupBuyingTimes\030\n \001(\005:\00220\022#\n\025GuestIncrea"
    "seTimeTick\030\013 \001(\005:\0041800\022&\n\032FriendsTakeGue"
    "stAwayMinCnt\030\014 \001(\005:\00216\022#\n\026CostMoneyTakeA"
    "wayGuest\030\r \001(\005:\003150\022!\n\024CostMoneyAddEmplo"
    "yee\030\016 \001(\005:\003100\022\033\n\017EmployeeTiLiMax\030\017 \001(\005:"
    "\00272\022\037\n\022PublicPraiseOrigon\030\020 \001(\005:\003500\022\035\n\017"
    "PublicPraiseMax\030\021 \001(\005:\0041000\022\032\n\017PublicPra"
    "iseMin\030\022 \001(\005:\0010\022\030\n\rEnableChecked\030\023 \001(\005:\001"
    "0\022\033\n\017MaxFreshManStep\030\024 \001(\005:\00215\022\034\n\016Enable"
    "FreshMan\030\025 \001(\010:\004true\022!\n\022EnableSpecialGue"
    "st\030\026 \001(\010:\005false\022\036\n\022GarbageProduceTime\030\027 "
    "\001(\005:\00230\022\036\n\022GarbageRemoveMoney\030\030 \001(\005:\00210\022"
    "\034\n\021GarbageProduceMax\030\031 \001(\005:\0014\022\036\n\017PublicP"
    "raisePer\030\032 \001(\002:\0050.333\022\"\n\027EnableSystemFlu"
    "entPrice\030\033 \001(\005:\0010\022\036\n\023EnableEveryDayAward"
    "\030\034 \001(\005:\0010\022*\n\021ChristmasActivety\030\035 \001(\0132\017.A"
    "ctivetyConfig\022*\n\021FreshBossActivety\030\036 \001(\013"
    "2\017.ActivetyConfig\022\031\n\016EnableFreeUser\030\037 \001("
    "\005:\0010\022\022\n\nMaxUserCnt\030  \001(\005\022\026\n\016FreeUserUpda"
    "te\030! \001(\005\022\025\n\rMaxNoUserTime\030\" \001(\005\022\026\n\016MaxFr"
    "eeUserCnt\030# \001(\005\022\024\n\014MaxFriendCnt\030$ \001(\005\022\025\n"
    "\rMaxGuestSpeed\030% \001(\005\022\034\n\024EnableGuestTimeC"
    "heck\030& \001(\005\022\036\n\026EnableFreeUserStatisic\030\' \001"
    "(\005\022\024\n\014CDKeyWorldID\030( \001(\005\022\023\n\013EnableCDKey\030"
    ") \001(\005\022\026\n\016EnableDataToQQ\030* \001(\005\022%\n\014TreeAct"
    "ivety\030+ \001(\0132\017.ActivetyConfig\022\027\n\017SafeData"
    "ToQQMax\030, \001(\005\022\032\n\022EnableNetCachePool\030- \001("
    "\005\022%\n\014BallActivety\030. \001(\0132\017.ActivetyConfig"
    "\022#\n\nADActivety\030/ \001(\0132\017.ActivetyConfig", 1637);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameConfig.proto", &protobuf_RegisterTypes);
  ActivetyConfig::default_instance_ = new ActivetyConfig();
  CFG_GameConfig::default_instance_ = new CFG_GameConfig();
  ActivetyConfig::default_instance_->InitAsDefaultInstance();
  CFG_GameConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameConfig_2eproto {
  StaticDescriptorInitializer_GameConfig_2eproto() {
    protobuf_AddDesc_GameConfig_2eproto();
  }
} static_descriptor_initializer_GameConfig_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ActivetyConfig::kIndexFieldNumber;
const int ActivetyConfig::kBeginDateFieldNumber;
const int ActivetyConfig::kEndDateFieldNumber;
const int ActivetyConfig::kAwardGuestFieldNumber;
const int ActivetyConfig::kEnableFlagFieldNumber;
const int ActivetyConfig::kFreshTimeFieldNumber;
const int ActivetyConfig::kIntervalTimeFieldNumber;
const int ActivetyConfig::kMaxCntFieldNumber;
#endif  // !_MSC_VER

ActivetyConfig::ActivetyConfig()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivetyConfig)
}

void ActivetyConfig::InitAsDefaultInstance() {
}

ActivetyConfig::ActivetyConfig(const ActivetyConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivetyConfig)
}

void ActivetyConfig::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  begin_date_ = GOOGLE_LONGLONG(0);
  end_date_ = GOOGLE_LONGLONG(0);
  award_guest_ = 0;
  enable_flag_ = 0;
  fresh_time_ = GOOGLE_LONGLONG(0);
  interval_time_ = GOOGLE_LONGLONG(0);
  max_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivetyConfig::~ActivetyConfig() {
  // @@protoc_insertion_point(destructor:ActivetyConfig)
  SharedDtor();
}

void ActivetyConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivetyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivetyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivetyConfig_descriptor_;
}

const ActivetyConfig& ActivetyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameConfig_2eproto();
  return *default_instance_;
}

ActivetyConfig* ActivetyConfig::default_instance_ = NULL;

ActivetyConfig* ActivetyConfig::New(::google::protobuf::Arena* arena) const {
  ActivetyConfig* n = new ActivetyConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivetyConfig::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActivetyConfig*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(begin_date_, interval_time_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivetyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivetyConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begin_date;
        break;
      }

      // optional int64 begin_date = 2;
      case 2: {
        if (tag == 16) {
         parse_begin_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_date_)));
          set_has_begin_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_date;
        break;
      }

      // optional int64 end_date = 3;
      case 3: {
        if (tag == 24) {
         parse_end_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_date_)));
          set_has_end_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_award_guest;
        break;
      }

      // optional int32 award_guest = 4;
      case 4: {
        if (tag == 32) {
         parse_award_guest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &award_guest_)));
          set_has_award_guest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_enable_flag;
        break;
      }

      // optional int32 enable_flag = 5;
      case 5: {
        if (tag == 40) {
         parse_enable_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_flag_)));
          set_has_enable_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fresh_time;
        break;
      }

      // optional int64 fresh_time = 6;
      case 6: {
        if (tag == 48) {
         parse_fresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fresh_time_)));
          set_has_fresh_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_interval_time;
        break;
      }

      // optional int64 interval_time = 7;
      case 7: {
        if (tag == 56) {
         parse_interval_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &interval_time_)));
          set_has_interval_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_cnt;
        break;
      }

      // optional int32 max_cnt = 8;
      case 8: {
        if (tag == 64) {
         parse_max_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cnt_)));
          set_has_max_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivetyConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivetyConfig)
  return false;
#undef DO_
}

void ActivetyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivetyConfig)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int64 begin_date = 2;
  if (has_begin_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begin_date(), output);
  }

  // optional int64 end_date = 3;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end_date(), output);
  }

  // optional int32 award_guest = 4;
  if (has_award_guest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->award_guest(), output);
  }

  // optional int32 enable_flag = 5;
  if (has_enable_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->enable_flag(), output);
  }

  // optional int64 fresh_time = 6;
  if (has_fresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fresh_time(), output);
  }

  // optional int64 interval_time = 7;
  if (has_interval_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->interval_time(), output);
  }

  // optional int32 max_cnt = 8;
  if (has_max_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_cnt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivetyConfig)
}

::google::protobuf::uint8* ActivetyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivetyConfig)
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int64 begin_date = 2;
  if (has_begin_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begin_date(), target);
  }

  // optional int64 end_date = 3;
  if (has_end_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end_date(), target);
  }

  // optional int32 award_guest = 4;
  if (has_award_guest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->award_guest(), target);
  }

  // optional int32 enable_flag = 5;
  if (has_enable_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->enable_flag(), target);
  }

  // optional int64 fresh_time = 6;
  if (has_fresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fresh_time(), target);
  }

  // optional int64 interval_time = 7;
  if (has_interval_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->interval_time(), target);
  }

  // optional int32 max_cnt = 8;
  if (has_max_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_cnt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivetyConfig)
  return target;
}

int ActivetyConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int64 begin_date = 2;
    if (has_begin_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_date());
    }

    // optional int64 end_date = 3;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_date());
    }

    // optional int32 award_guest = 4;
    if (has_award_guest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->award_guest());
    }

    // optional int32 enable_flag = 5;
    if (has_enable_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable_flag());
    }

    // optional int64 fresh_time = 6;
    if (has_fresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fresh_time());
    }

    // optional int64 interval_time = 7;
    if (has_interval_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->interval_time());
    }

    // optional int32 max_cnt = 8;
    if (has_max_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_cnt());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivetyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivetyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivetyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivetyConfig::MergeFrom(const ActivetyConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_begin_date()) {
      set_begin_date(from.begin_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_award_guest()) {
      set_award_guest(from.award_guest());
    }
    if (from.has_enable_flag()) {
      set_enable_flag(from.enable_flag());
    }
    if (from.has_fresh_time()) {
      set_fresh_time(from.fresh_time());
    }
    if (from.has_interval_time()) {
      set_interval_time(from.interval_time());
    }
    if (from.has_max_cnt()) {
      set_max_cnt(from.max_cnt());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActivetyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivetyConfig::CopyFrom(const ActivetyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivetyConfig::IsInitialized() const {

  return true;
}

void ActivetyConfig::Swap(ActivetyConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivetyConfig::InternalSwap(ActivetyConfig* other) {
  std::swap(index_, other->index_);
  std::swap(begin_date_, other->begin_date_);
  std::swap(end_date_, other->end_date_);
  std::swap(award_guest_, other->award_guest_);
  std::swap(enable_flag_, other->enable_flag_);
  std::swap(fresh_time_, other->fresh_time_);
  std::swap(interval_time_, other->interval_time_);
  std::swap(max_cnt_, other->max_cnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivetyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivetyConfig_descriptor_;
  metadata.reflection = ActivetyConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivetyConfig

// optional int32 index = 1;
 bool ActivetyConfig::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void ActivetyConfig::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
 void ActivetyConfig::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
 void ActivetyConfig::clear_index() {
  index_ = 0;
  clear_has_index();
}
 ::google::protobuf::int32 ActivetyConfig::index() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.index)
  return index_;
}
 void ActivetyConfig::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.index)
}

// optional int64 begin_date = 2;
 bool ActivetyConfig::has_begin_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void ActivetyConfig::set_has_begin_date() {
  _has_bits_[0] |= 0x00000002u;
}
 void ActivetyConfig::clear_has_begin_date() {
  _has_bits_[0] &= ~0x00000002u;
}
 void ActivetyConfig::clear_begin_date() {
  begin_date_ = GOOGLE_LONGLONG(0);
  clear_has_begin_date();
}
 ::google::protobuf::int64 ActivetyConfig::begin_date() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.begin_date)
  return begin_date_;
}
 void ActivetyConfig::set_begin_date(::google::protobuf::int64 value) {
  set_has_begin_date();
  begin_date_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.begin_date)
}

// optional int64 end_date = 3;
 bool ActivetyConfig::has_end_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void ActivetyConfig::set_has_end_date() {
  _has_bits_[0] |= 0x00000004u;
}
 void ActivetyConfig::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000004u;
}
 void ActivetyConfig::clear_end_date() {
  end_date_ = GOOGLE_LONGLONG(0);
  clear_has_end_date();
}
 ::google::protobuf::int64 ActivetyConfig::end_date() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.end_date)
  return end_date_;
}
 void ActivetyConfig::set_end_date(::google::protobuf::int64 value) {
  set_has_end_date();
  end_date_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.end_date)
}

// optional int32 award_guest = 4;
 bool ActivetyConfig::has_award_guest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void ActivetyConfig::set_has_award_guest() {
  _has_bits_[0] |= 0x00000008u;
}
 void ActivetyConfig::clear_has_award_guest() {
  _has_bits_[0] &= ~0x00000008u;
}
 void ActivetyConfig::clear_award_guest() {
  award_guest_ = 0;
  clear_has_award_guest();
}
 ::google::protobuf::int32 ActivetyConfig::award_guest() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.award_guest)
  return award_guest_;
}
 void ActivetyConfig::set_award_guest(::google::protobuf::int32 value) {
  set_has_award_guest();
  award_guest_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.award_guest)
}

// optional int32 enable_flag = 5;
 bool ActivetyConfig::has_enable_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void ActivetyConfig::set_has_enable_flag() {
  _has_bits_[0] |= 0x00000010u;
}
 void ActivetyConfig::clear_has_enable_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
 void ActivetyConfig::clear_enable_flag() {
  enable_flag_ = 0;
  clear_has_enable_flag();
}
 ::google::protobuf::int32 ActivetyConfig::enable_flag() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.enable_flag)
  return enable_flag_;
}
 void ActivetyConfig::set_enable_flag(::google::protobuf::int32 value) {
  set_has_enable_flag();
  enable_flag_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.enable_flag)
}

// optional int64 fresh_time = 6;
 bool ActivetyConfig::has_fresh_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void ActivetyConfig::set_has_fresh_time() {
  _has_bits_[0] |= 0x00000020u;
}
 void ActivetyConfig::clear_has_fresh_time() {
  _has_bits_[0] &= ~0x00000020u;
}
 void ActivetyConfig::clear_fresh_time() {
  fresh_time_ = GOOGLE_LONGLONG(0);
  clear_has_fresh_time();
}
 ::google::protobuf::int64 ActivetyConfig::fresh_time() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.fresh_time)
  return fresh_time_;
}
 void ActivetyConfig::set_fresh_time(::google::protobuf::int64 value) {
  set_has_fresh_time();
  fresh_time_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.fresh_time)
}

// optional int64 interval_time = 7;
 bool ActivetyConfig::has_interval_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void ActivetyConfig::set_has_interval_time() {
  _has_bits_[0] |= 0x00000040u;
}
 void ActivetyConfig::clear_has_interval_time() {
  _has_bits_[0] &= ~0x00000040u;
}
 void ActivetyConfig::clear_interval_time() {
  interval_time_ = GOOGLE_LONGLONG(0);
  clear_has_interval_time();
}
 ::google::protobuf::int64 ActivetyConfig::interval_time() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.interval_time)
  return interval_time_;
}
 void ActivetyConfig::set_interval_time(::google::protobuf::int64 value) {
  set_has_interval_time();
  interval_time_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.interval_time)
}

// optional int32 max_cnt = 8;
 bool ActivetyConfig::has_max_cnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void ActivetyConfig::set_has_max_cnt() {
  _has_bits_[0] |= 0x00000080u;
}
 void ActivetyConfig::clear_has_max_cnt() {
  _has_bits_[0] &= ~0x00000080u;
}
 void ActivetyConfig::clear_max_cnt() {
  max_cnt_ = 0;
  clear_has_max_cnt();
}
 ::google::protobuf::int32 ActivetyConfig::max_cnt() const {
  // @@protoc_insertion_point(field_get:ActivetyConfig.max_cnt)
  return max_cnt_;
}
 void ActivetyConfig::set_max_cnt(::google::protobuf::int32 value) {
  set_has_max_cnt();
  max_cnt_ = value;
  // @@protoc_insertion_point(field_set:ActivetyConfig.max_cnt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CFG_GameConfig::kMaxGroupBuyingTimeFieldNumber;
const int CFG_GameConfig::kMinGroupBuyingTimeFieldNumber;
const int CFG_GameConfig::kMaxBuyPerFieldNumber;
const int CFG_GameConfig::kMinBuyPerFieldNumber;
const int CFG_GameConfig::kLoseBagItemsPerFieldNumber;
const int CFG_GameConfig::kLoseBagMoneyPerFieldNumber;
const int CFG_GameConfig::kEveryUnitSpeedFieldNumber;
const int CFG_GameConfig::kCashierPathLengthFieldNumber;
const int CFG_GameConfig::kMaxGuestCntEveryTimesFieldNumber;
const int CFG_GameConfig::kMaxGroupBuyingTimesFieldNumber;
const int CFG_GameConfig::kGuestIncreaseTimeTickFieldNumber;
const int CFG_GameConfig::kFriendsTakeGuestAwayMinCntFieldNumber;
const int CFG_GameConfig::kCostMoneyTakeAwayGuestFieldNumber;
const int CFG_GameConfig::kCostMoneyAddEmployeeFieldNumber;
const int CFG_GameConfig::kEmployeeTiLiMaxFieldNumber;
const int CFG_GameConfig::kPublicPraiseOrigonFieldNumber;
const int CFG_GameConfig::kPublicPraiseMaxFieldNumber;
const int CFG_GameConfig::kPublicPraiseMinFieldNumber;
const int CFG_GameConfig::kEnableCheckedFieldNumber;
const int CFG_GameConfig::kMaxFreshManStepFieldNumber;
const int CFG_GameConfig::kEnableFreshManFieldNumber;
const int CFG_GameConfig::kEnableSpecialGuestFieldNumber;
const int CFG_GameConfig::kGarbageProduceTimeFieldNumber;
const int CFG_GameConfig::kGarbageRemoveMoneyFieldNumber;
const int CFG_GameConfig::kGarbageProduceMaxFieldNumber;
const int CFG_GameConfig::kPublicPraisePerFieldNumber;
const int CFG_GameConfig::kEnableSystemFluentPriceFieldNumber;
const int CFG_GameConfig::kEnableEveryDayAwardFieldNumber;
const int CFG_GameConfig::kChristmasActivetyFieldNumber;
const int CFG_GameConfig::kFreshBossActivetyFieldNumber;
const int CFG_GameConfig::kEnableFreeUserFieldNumber;
const int CFG_GameConfig::kMaxUserCntFieldNumber;
const int CFG_GameConfig::kFreeUserUpdateFieldNumber;
const int CFG_GameConfig::kMaxNoUserTimeFieldNumber;
const int CFG_GameConfig::kMaxFreeUserCntFieldNumber;
const int CFG_GameConfig::kMaxFriendCntFieldNumber;
const int CFG_GameConfig::kMaxGuestSpeedFieldNumber;
const int CFG_GameConfig::kEnableGuestTimeCheckFieldNumber;
const int CFG_GameConfig::kEnableFreeUserStatisicFieldNumber;
const int CFG_GameConfig::kCDKeyWorldIDFieldNumber;
const int CFG_GameConfig::kEnableCDKeyFieldNumber;
const int CFG_GameConfig::kEnableDataToQQFieldNumber;
const int CFG_GameConfig::kTreeActivetyFieldNumber;
const int CFG_GameConfig::kSafeDataToQQMaxFieldNumber;
const int CFG_GameConfig::kEnableNetCachePoolFieldNumber;
const int CFG_GameConfig::kBallActivetyFieldNumber;
const int CFG_GameConfig::kADActivetyFieldNumber;
#endif  // !_MSC_VER

CFG_GameConfig::CFG_GameConfig()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CFG_GameConfig)
}

void CFG_GameConfig::InitAsDefaultInstance() {
  christmasactivety_ = const_cast< ::ActivetyConfig*>(&::ActivetyConfig::default_instance());
  freshbossactivety_ = const_cast< ::ActivetyConfig*>(&::ActivetyConfig::default_instance());
  treeactivety_ = const_cast< ::ActivetyConfig*>(&::ActivetyConfig::default_instance());
  ballactivety_ = const_cast< ::ActivetyConfig*>(&::ActivetyConfig::default_instance());
  adactivety_ = const_cast< ::ActivetyConfig*>(&::ActivetyConfig::default_instance());
}

CFG_GameConfig::CFG_GameConfig(const CFG_GameConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CFG_GameConfig)
}

void CFG_GameConfig::SharedCtor() {
  _cached_size_ = 0;
  maxgroupbuyingtime_ = 1800;
  mingroupbuyingtime_ = 0;
  maxbuyper_ = 50;
  minbuyper_ = 20;
  losebagitemsper_ = 5;
  losebagmoneyper_ = 5;
  everyunitspeed_ = 0.8f;
  cashierpathlength_ = 2;
  maxguestcnteverytimes_ = 20;
  maxgroupbuyingtimes_ = 20;
  guestincreasetimetick_ = 1800;
  friendstakeguestawaymincnt_ = 16;
  costmoneytakeawayguest_ = 150;
  costmoneyaddemployee_ = 100;
  employeetilimax_ = 72;
  publicpraiseorigon_ = 500;
  publicpraisemax_ = 1000;
  publicpraisemin_ = 0;
  enablechecked_ = 0;
  maxfreshmanstep_ = 15;
  enablefreshman_ = true;
  enablespecialguest_ = false;
  garbageproducetime_ = 30;
  garbageremovemoney_ = 10;
  garbageproducemax_ = 4;
  publicpraiseper_ = 0.333f;
  enablesystemfluentprice_ = 0;
  enableeverydayaward_ = 0;
  christmasactivety_ = NULL;
  freshbossactivety_ = NULL;
  enablefreeuser_ = 0;
  maxusercnt_ = 0;
  freeuserupdate_ = 0;
  maxnousertime_ = 0;
  maxfreeusercnt_ = 0;
  maxfriendcnt_ = 0;
  maxguestspeed_ = 0;
  enableguesttimecheck_ = 0;
  enablefreeuserstatisic_ = 0;
  cdkeyworldid_ = 0;
  enablecdkey_ = 0;
  enabledatatoqq_ = 0;
  treeactivety_ = NULL;
  safedatatoqqmax_ = 0;
  enablenetcachepool_ = 0;
  ballactivety_ = NULL;
  adactivety_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CFG_GameConfig::~CFG_GameConfig() {
  // @@protoc_insertion_point(destructor:CFG_GameConfig)
  SharedDtor();
}

void CFG_GameConfig::SharedDtor() {
  if (this != default_instance_) {
    delete christmasactivety_;
    delete freshbossactivety_;
    delete treeactivety_;
    delete ballactivety_;
    delete adactivety_;
  }
}

void CFG_GameConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CFG_GameConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CFG_GameConfig_descriptor_;
}

const CFG_GameConfig& CFG_GameConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameConfig_2eproto();
  return *default_instance_;
}

CFG_GameConfig* CFG_GameConfig::default_instance_ = NULL;

CFG_GameConfig* CFG_GameConfig::New(::google::protobuf::Arena* arena) const {
  CFG_GameConfig* n = new CFG_GameConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CFG_GameConfig::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CFG_GameConfig*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    maxgroupbuyingtime_ = 1800;
    mingroupbuyingtime_ = 0;
    maxbuyper_ = 50;
    minbuyper_ = 20;
    losebagitemsper_ = 5;
    losebagmoneyper_ = 5;
    everyunitspeed_ = 0.8f;
    cashierpathlength_ = 2;
  }
  if (_has_bits_[8 / 32] & 65280) {
    maxguestcnteverytimes_ = 20;
    maxgroupbuyingtimes_ = 20;
    guestincreasetimetick_ = 1800;
    friendstakeguestawaymincnt_ = 16;
    costmoneytakeawayguest_ = 150;
    costmoneyaddemployee_ = 100;
    employeetilimax_ = 72;
    publicpraiseorigon_ = 500;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(publicpraisemin_, enablechecked_);
    publicpraisemax_ = 1000;
    maxfreshmanstep_ = 15;
    enablefreshman_ = true;
    enablespecialguest_ = false;
    garbageproducetime_ = 30;
    garbageremovemoney_ = 10;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(enableeverydayaward_, enablefreeuser_);
    garbageproducemax_ = 4;
    publicpraiseper_ = 0.333f;
    enablesystemfluentprice_ = 0;
    if (has_christmasactivety()) {
      if (christmasactivety_ != NULL) christmasactivety_->::ActivetyConfig::Clear();
    }
    if (has_freshbossactivety()) {
      if (freshbossactivety_ != NULL) freshbossactivety_->::ActivetyConfig::Clear();
    }
    maxusercnt_ = 0;
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(freeuserupdate_, cdkeyworldid_);
  }
  if (_has_bits_[40 / 32] & 32512) {
    ZR_(enabledatatoqq_, safedatatoqqmax_);
    enablecdkey_ = 0;
    if (has_treeactivety()) {
      if (treeactivety_ != NULL) treeactivety_->::ActivetyConfig::Clear();
    }
    enablenetcachepool_ = 0;
    if (has_ballactivety()) {
      if (ballactivety_ != NULL) ballactivety_->::ActivetyConfig::Clear();
    }
    if (has_adactivety()) {
      if (adactivety_ != NULL) adactivety_->::ActivetyConfig::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CFG_GameConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CFG_GameConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MaxGroupBuyingTime = 1 [default = 1800];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxgroupbuyingtime_)));
          set_has_maxgroupbuyingtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MinGroupBuyingTime;
        break;
      }

      // optional int32 MinGroupBuyingTime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_MinGroupBuyingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mingroupbuyingtime_)));
          set_has_mingroupbuyingtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxBuyPer;
        break;
      }

      // optional int32 MaxBuyPer = 3 [default = 50];
      case 3: {
        if (tag == 24) {
         parse_MaxBuyPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxbuyper_)));
          set_has_maxbuyper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MinBuyPer;
        break;
      }

      // optional int32 MinBuyPer = 4 [default = 20];
      case 4: {
        if (tag == 32) {
         parse_MinBuyPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minbuyper_)));
          set_has_minbuyper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_LoseBagItemsPer;
        break;
      }

      // optional int32 LoseBagItemsPer = 5 [default = 5];
      case 5: {
        if (tag == 40) {
         parse_LoseBagItemsPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losebagitemsper_)));
          set_has_losebagitemsper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_LoseBagMoneyPer;
        break;
      }

      // optional int32 LoseBagMoneyPer = 6 [default = 5];
      case 6: {
        if (tag == 48) {
         parse_LoseBagMoneyPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losebagmoneyper_)));
          set_has_losebagmoneyper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_EveryUnitSpeed;
        break;
      }

      // optional float EveryUnitSpeed = 7 [default = 0.8];
      case 7: {
        if (tag == 61) {
         parse_EveryUnitSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &everyunitspeed_)));
          set_has_everyunitspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_CashierPathLength;
        break;
      }

      // optional int32 CashierPathLength = 8 [default = 2];
      case 8: {
        if (tag == 64) {
         parse_CashierPathLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cashierpathlength_)));
          set_has_cashierpathlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_MaxGuestCntEveryTimes;
        break;
      }

      // optional int32 MaxGuestCntEveryTimes = 9 [default = 20];
      case 9: {
        if (tag == 72) {
         parse_MaxGuestCntEveryTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxguestcnteverytimes_)));
          set_has_maxguestcnteverytimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_MaxGroupBuyingTimes;
        break;
      }

      // optional int32 MaxGroupBuyingTimes = 10 [default = 20];
      case 10: {
        if (tag == 80) {
         parse_MaxGroupBuyingTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxgroupbuyingtimes_)));
          set_has_maxgroupbuyingtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_GuestIncreaseTimeTick;
        break;
      }

      // optional int32 GuestIncreaseTimeTick = 11 [default = 1800];
      case 11: {
        if (tag == 88) {
         parse_GuestIncreaseTimeTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guestincreasetimetick_)));
          set_has_guestincreasetimetick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_FriendsTakeGuestAwayMinCnt;
        break;
      }

      // optional int32 FriendsTakeGuestAwayMinCnt = 12 [default = 16];
      case 12: {
        if (tag == 96) {
         parse_FriendsTakeGuestAwayMinCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendstakeguestawaymincnt_)));
          set_has_friendstakeguestawaymincnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_CostMoneyTakeAwayGuest;
        break;
      }

      // optional int32 CostMoneyTakeAwayGuest = 13 [default = 150];
      case 13: {
        if (tag == 104) {
         parse_CostMoneyTakeAwayGuest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costmoneytakeawayguest_)));
          set_has_costmoneytakeawayguest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_CostMoneyAddEmployee;
        break;
      }

      // optional int32 CostMoneyAddEmployee = 14 [default = 100];
      case 14: {
        if (tag == 112) {
         parse_CostMoneyAddEmployee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costmoneyaddemployee_)));
          set_has_costmoneyaddemployee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_EmployeeTiLiMax;
        break;
      }

      // optional int32 EmployeeTiLiMax = 15 [default = 72];
      case 15: {
        if (tag == 120) {
         parse_EmployeeTiLiMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &employeetilimax_)));
          set_has_employeetilimax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_PublicPraiseOrigon;
        break;
      }

      // optional int32 PublicPraiseOrigon = 16 [default = 500];
      case 16: {
        if (tag == 128) {
         parse_PublicPraiseOrigon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publicpraiseorigon_)));
          set_has_publicpraiseorigon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_PublicPraiseMax;
        break;
      }

      // optional int32 PublicPraiseMax = 17 [default = 1000];
      case 17: {
        if (tag == 136) {
         parse_PublicPraiseMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publicpraisemax_)));
          set_has_publicpraisemax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_PublicPraiseMin;
        break;
      }

      // optional int32 PublicPraiseMin = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_PublicPraiseMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publicpraisemin_)));
          set_has_publicpraisemin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_EnableChecked;
        break;
      }

      // optional int32 EnableChecked = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_EnableChecked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enablechecked_)));
          set_has_enablechecked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_MaxFreshManStep;
        break;
      }

      // optional int32 MaxFreshManStep = 20 [default = 15];
      case 20: {
        if (tag == 160) {
         parse_MaxFreshManStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxfreshmanstep_)));
          set_has_maxfreshmanstep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_EnableFreshMan;
        break;
      }

      // optional bool EnableFreshMan = 21 [default = true];
      case 21: {
        if (tag == 168) {
         parse_EnableFreshMan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablefreshman_)));
          set_has_enablefreshman();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_EnableSpecialGuest;
        break;
      }

      // optional bool EnableSpecialGuest = 22 [default = false];
      case 22: {
        if (tag == 176) {
         parse_EnableSpecialGuest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablespecialguest_)));
          set_has_enablespecialguest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_GarbageProduceTime;
        break;
      }

      // optional int32 GarbageProduceTime = 23 [default = 30];
      case 23: {
        if (tag == 184) {
         parse_GarbageProduceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &garbageproducetime_)));
          set_has_garbageproducetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_GarbageRemoveMoney;
        break;
      }

      // optional int32 GarbageRemoveMoney = 24 [default = 10];
      case 24: {
        if (tag == 192) {
         parse_GarbageRemoveMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &garbageremovemoney_)));
          set_has_garbageremovemoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_GarbageProduceMax;
        break;
      }

      // optional int32 GarbageProduceMax = 25 [default = 4];
      case 25: {
        if (tag == 200) {
         parse_GarbageProduceMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &garbageproducemax_)));
          set_has_garbageproducemax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_PublicPraisePer;
        break;
      }

      // optional float PublicPraisePer = 26 [default = 0.333];
      case 26: {
        if (tag == 213) {
         parse_PublicPraisePer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &publicpraiseper_)));
          set_has_publicpraiseper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_EnableSystemFluentPrice;
        break;
      }

      // optional int32 EnableSystemFluentPrice = 27 [default = 0];
      case 27: {
        if (tag == 216) {
         parse_EnableSystemFluentPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enablesystemfluentprice_)));
          set_has_enablesystemfluentprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_EnableEveryDayAward;
        break;
      }

      // optional int32 EnableEveryDayAward = 28 [default = 0];
      case 28: {
        if (tag == 224) {
         parse_EnableEveryDayAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enableeverydayaward_)));
          set_has_enableeverydayaward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_ChristmasActivety;
        break;
      }

      // optional .ActivetyConfig ChristmasActivety = 29;
      case 29: {
        if (tag == 234) {
         parse_ChristmasActivety:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_christmasactivety()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_FreshBossActivety;
        break;
      }

      // optional .ActivetyConfig FreshBossActivety = 30;
      case 30: {
        if (tag == 242) {
         parse_FreshBossActivety:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freshbossactivety()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_EnableFreeUser;
        break;
      }

      // optional int32 EnableFreeUser = 31 [default = 0];
      case 31: {
        if (tag == 248) {
         parse_EnableFreeUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enablefreeuser_)));
          set_has_enablefreeuser();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_MaxUserCnt;
        break;
      }

      // optional int32 MaxUserCnt = 32;
      case 32: {
        if (tag == 256) {
         parse_MaxUserCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxusercnt_)));
          set_has_maxusercnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_FreeUserUpdate;
        break;
      }

      // optional int32 FreeUserUpdate = 33;
      case 33: {
        if (tag == 264) {
         parse_FreeUserUpdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeuserupdate_)));
          set_has_freeuserupdate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_MaxNoUserTime;
        break;
      }

      // optional int32 MaxNoUserTime = 34;
      case 34: {
        if (tag == 272) {
         parse_MaxNoUserTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnousertime_)));
          set_has_maxnousertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_MaxFreeUserCnt;
        break;
      }

      // optional int32 MaxFreeUserCnt = 35;
      case 35: {
        if (tag == 280) {
         parse_MaxFreeUserCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxfreeusercnt_)));
          set_has_maxfreeusercnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_MaxFriendCnt;
        break;
      }

      // optional int32 MaxFriendCnt = 36;
      case 36: {
        if (tag == 288) {
         parse_MaxFriendCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxfriendcnt_)));
          set_has_maxfriendcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_MaxGuestSpeed;
        break;
      }

      // optional int32 MaxGuestSpeed = 37;
      case 37: {
        if (tag == 296) {
         parse_MaxGuestSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxguestspeed_)));
          set_has_maxguestspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_EnableGuestTimeCheck;
        break;
      }

      // optional int32 EnableGuestTimeCheck = 38;
      case 38: {
        if (tag == 304) {
         parse_EnableGuestTimeCheck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enableguesttimecheck_)));
          set_has_enableguesttimecheck();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_EnableFreeUserStatisic;
        break;
      }

      // optional int32 EnableFreeUserStatisic = 39;
      case 39: {
        if (tag == 312) {
         parse_EnableFreeUserStatisic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enablefreeuserstatisic_)));
          set_has_enablefreeuserstatisic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_CDKeyWorldID;
        break;
      }

      // optional int32 CDKeyWorldID = 40;
      case 40: {
        if (tag == 320) {
         parse_CDKeyWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdkeyworldid_)));
          set_has_cdkeyworldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_EnableCDKey;
        break;
      }

      // optional int32 EnableCDKey = 41;
      case 41: {
        if (tag == 328) {
         parse_EnableCDKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enablecdkey_)));
          set_has_enablecdkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_EnableDataToQQ;
        break;
      }

      // optional int32 EnableDataToQQ = 42;
      case 42: {
        if (tag == 336) {
         parse_EnableDataToQQ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enabledatatoqq_)));
          set_has_enabledatatoqq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_TreeActivety;
        break;
      }

      // optional .ActivetyConfig TreeActivety = 43;
      case 43: {
        if (tag == 346) {
         parse_TreeActivety:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treeactivety()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_SafeDataToQQMax;
        break;
      }

      // optional int32 SafeDataToQQMax = 44;
      case 44: {
        if (tag == 352) {
         parse_SafeDataToQQMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &safedatatoqqmax_)));
          set_has_safedatatoqqmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_EnableNetCachePool;
        break;
      }

      // optional int32 EnableNetCachePool = 45;
      case 45: {
        if (tag == 360) {
         parse_EnableNetCachePool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enablenetcachepool_)));
          set_has_enablenetcachepool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_BallActivety;
        break;
      }

      // optional .ActivetyConfig BallActivety = 46;
      case 46: {
        if (tag == 370) {
         parse_BallActivety:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ballactivety()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_ADActivety;
        break;
      }

      // optional .ActivetyConfig ADActivety = 47;
      case 47: {
        if (tag == 378) {
         parse_ADActivety:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adactivety()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CFG_GameConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CFG_GameConfig)
  return false;
#undef DO_
}

void CFG_GameConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CFG_GameConfig)
  // optional int32 MaxGroupBuyingTime = 1 [default = 1800];
  if (has_maxgroupbuyingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxgroupbuyingtime(), output);
  }

  // optional int32 MinGroupBuyingTime = 2 [default = 0];
  if (has_mingroupbuyingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mingroupbuyingtime(), output);
  }

  // optional int32 MaxBuyPer = 3 [default = 50];
  if (has_maxbuyper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxbuyper(), output);
  }

  // optional int32 MinBuyPer = 4 [default = 20];
  if (has_minbuyper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minbuyper(), output);
  }

  // optional int32 LoseBagItemsPer = 5 [default = 5];
  if (has_losebagitemsper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->losebagitemsper(), output);
  }

  // optional int32 LoseBagMoneyPer = 6 [default = 5];
  if (has_losebagmoneyper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->losebagmoneyper(), output);
  }

  // optional float EveryUnitSpeed = 7 [default = 0.8];
  if (has_everyunitspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->everyunitspeed(), output);
  }

  // optional int32 CashierPathLength = 8 [default = 2];
  if (has_cashierpathlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cashierpathlength(), output);
  }

  // optional int32 MaxGuestCntEveryTimes = 9 [default = 20];
  if (has_maxguestcnteverytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxguestcnteverytimes(), output);
  }

  // optional int32 MaxGroupBuyingTimes = 10 [default = 20];
  if (has_maxgroupbuyingtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maxgroupbuyingtimes(), output);
  }

  // optional int32 GuestIncreaseTimeTick = 11 [default = 1800];
  if (has_guestincreasetimetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->guestincreasetimetick(), output);
  }

  // optional int32 FriendsTakeGuestAwayMinCnt = 12 [default = 16];
  if (has_friendstakeguestawaymincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->friendstakeguestawaymincnt(), output);
  }

  // optional int32 CostMoneyTakeAwayGuest = 13 [default = 150];
  if (has_costmoneytakeawayguest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->costmoneytakeawayguest(), output);
  }

  // optional int32 CostMoneyAddEmployee = 14 [default = 100];
  if (has_costmoneyaddemployee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->costmoneyaddemployee(), output);
  }

  // optional int32 EmployeeTiLiMax = 15 [default = 72];
  if (has_employeetilimax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->employeetilimax(), output);
  }

  // optional int32 PublicPraiseOrigon = 16 [default = 500];
  if (has_publicpraiseorigon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->publicpraiseorigon(), output);
  }

  // optional int32 PublicPraiseMax = 17 [default = 1000];
  if (has_publicpraisemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->publicpraisemax(), output);
  }

  // optional int32 PublicPraiseMin = 18 [default = 0];
  if (has_publicpraisemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->publicpraisemin(), output);
  }

  // optional int32 EnableChecked = 19 [default = 0];
  if (has_enablechecked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->enablechecked(), output);
  }

  // optional int32 MaxFreshManStep = 20 [default = 15];
  if (has_maxfreshmanstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->maxfreshmanstep(), output);
  }

  // optional bool EnableFreshMan = 21 [default = true];
  if (has_enablefreshman()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->enablefreshman(), output);
  }

  // optional bool EnableSpecialGuest = 22 [default = false];
  if (has_enablespecialguest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->enablespecialguest(), output);
  }

  // optional int32 GarbageProduceTime = 23 [default = 30];
  if (has_garbageproducetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->garbageproducetime(), output);
  }

  // optional int32 GarbageRemoveMoney = 24 [default = 10];
  if (has_garbageremovemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->garbageremovemoney(), output);
  }

  // optional int32 GarbageProduceMax = 25 [default = 4];
  if (has_garbageproducemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->garbageproducemax(), output);
  }

  // optional float PublicPraisePer = 26 [default = 0.333];
  if (has_publicpraiseper()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->publicpraiseper(), output);
  }

  // optional int32 EnableSystemFluentPrice = 27 [default = 0];
  if (has_enablesystemfluentprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->enablesystemfluentprice(), output);
  }

  // optional int32 EnableEveryDayAward = 28 [default = 0];
  if (has_enableeverydayaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->enableeverydayaward(), output);
  }

  // optional .ActivetyConfig ChristmasActivety = 29;
  if (has_christmasactivety()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->christmasactivety_, output);
  }

  // optional .ActivetyConfig FreshBossActivety = 30;
  if (has_freshbossactivety()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->freshbossactivety_, output);
  }

  // optional int32 EnableFreeUser = 31 [default = 0];
  if (has_enablefreeuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->enablefreeuser(), output);
  }

  // optional int32 MaxUserCnt = 32;
  if (has_maxusercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->maxusercnt(), output);
  }

  // optional int32 FreeUserUpdate = 33;
  if (has_freeuserupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->freeuserupdate(), output);
  }

  // optional int32 MaxNoUserTime = 34;
  if (has_maxnousertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->maxnousertime(), output);
  }

  // optional int32 MaxFreeUserCnt = 35;
  if (has_maxfreeusercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->maxfreeusercnt(), output);
  }

  // optional int32 MaxFriendCnt = 36;
  if (has_maxfriendcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->maxfriendcnt(), output);
  }

  // optional int32 MaxGuestSpeed = 37;
  if (has_maxguestspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->maxguestspeed(), output);
  }

  // optional int32 EnableGuestTimeCheck = 38;
  if (has_enableguesttimecheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->enableguesttimecheck(), output);
  }

  // optional int32 EnableFreeUserStatisic = 39;
  if (has_enablefreeuserstatisic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->enablefreeuserstatisic(), output);
  }

  // optional int32 CDKeyWorldID = 40;
  if (has_cdkeyworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->cdkeyworldid(), output);
  }

  // optional int32 EnableCDKey = 41;
  if (has_enablecdkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->enablecdkey(), output);
  }

  // optional int32 EnableDataToQQ = 42;
  if (has_enabledatatoqq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->enabledatatoqq(), output);
  }

  // optional .ActivetyConfig TreeActivety = 43;
  if (has_treeactivety()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *this->treeactivety_, output);
  }

  // optional int32 SafeDataToQQMax = 44;
  if (has_safedatatoqqmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->safedatatoqqmax(), output);
  }

  // optional int32 EnableNetCachePool = 45;
  if (has_enablenetcachepool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->enablenetcachepool(), output);
  }

  // optional .ActivetyConfig BallActivety = 46;
  if (has_ballactivety()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *this->ballactivety_, output);
  }

  // optional .ActivetyConfig ADActivety = 47;
  if (has_adactivety()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, *this->adactivety_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CFG_GameConfig)
}

::google::protobuf::uint8* CFG_GameConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFG_GameConfig)
  // optional int32 MaxGroupBuyingTime = 1 [default = 1800];
  if (has_maxgroupbuyingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxgroupbuyingtime(), target);
  }

  // optional int32 MinGroupBuyingTime = 2 [default = 0];
  if (has_mingroupbuyingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mingroupbuyingtime(), target);
  }

  // optional int32 MaxBuyPer = 3 [default = 50];
  if (has_maxbuyper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxbuyper(), target);
  }

  // optional int32 MinBuyPer = 4 [default = 20];
  if (has_minbuyper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minbuyper(), target);
  }

  // optional int32 LoseBagItemsPer = 5 [default = 5];
  if (has_losebagitemsper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->losebagitemsper(), target);
  }

  // optional int32 LoseBagMoneyPer = 6 [default = 5];
  if (has_losebagmoneyper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->losebagmoneyper(), target);
  }

  // optional float EveryUnitSpeed = 7 [default = 0.8];
  if (has_everyunitspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->everyunitspeed(), target);
  }

  // optional int32 CashierPathLength = 8 [default = 2];
  if (has_cashierpathlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cashierpathlength(), target);
  }

  // optional int32 MaxGuestCntEveryTimes = 9 [default = 20];
  if (has_maxguestcnteverytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maxguestcnteverytimes(), target);
  }

  // optional int32 MaxGroupBuyingTimes = 10 [default = 20];
  if (has_maxgroupbuyingtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->maxgroupbuyingtimes(), target);
  }

  // optional int32 GuestIncreaseTimeTick = 11 [default = 1800];
  if (has_guestincreasetimetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->guestincreasetimetick(), target);
  }

  // optional int32 FriendsTakeGuestAwayMinCnt = 12 [default = 16];
  if (has_friendstakeguestawaymincnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->friendstakeguestawaymincnt(), target);
  }

  // optional int32 CostMoneyTakeAwayGuest = 13 [default = 150];
  if (has_costmoneytakeawayguest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->costmoneytakeawayguest(), target);
  }

  // optional int32 CostMoneyAddEmployee = 14 [default = 100];
  if (has_costmoneyaddemployee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->costmoneyaddemployee(), target);
  }

  // optional int32 EmployeeTiLiMax = 15 [default = 72];
  if (has_employeetilimax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->employeetilimax(), target);
  }

  // optional int32 PublicPraiseOrigon = 16 [default = 500];
  if (has_publicpraiseorigon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->publicpraiseorigon(), target);
  }

  // optional int32 PublicPraiseMax = 17 [default = 1000];
  if (has_publicpraisemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->publicpraisemax(), target);
  }

  // optional int32 PublicPraiseMin = 18 [default = 0];
  if (has_publicpraisemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->publicpraisemin(), target);
  }

  // optional int32 EnableChecked = 19 [default = 0];
  if (has_enablechecked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->enablechecked(), target);
  }

  // optional int32 MaxFreshManStep = 20 [default = 15];
  if (has_maxfreshmanstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->maxfreshmanstep(), target);
  }

  // optional bool EnableFreshMan = 21 [default = true];
  if (has_enablefreshman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->enablefreshman(), target);
  }

  // optional bool EnableSpecialGuest = 22 [default = false];
  if (has_enablespecialguest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->enablespecialguest(), target);
  }

  // optional int32 GarbageProduceTime = 23 [default = 30];
  if (has_garbageproducetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->garbageproducetime(), target);
  }

  // optional int32 GarbageRemoveMoney = 24 [default = 10];
  if (has_garbageremovemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->garbageremovemoney(), target);
  }

  // optional int32 GarbageProduceMax = 25 [default = 4];
  if (has_garbageproducemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->garbageproducemax(), target);
  }

  // optional float PublicPraisePer = 26 [default = 0.333];
  if (has_publicpraiseper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->publicpraiseper(), target);
  }

  // optional int32 EnableSystemFluentPrice = 27 [default = 0];
  if (has_enablesystemfluentprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->enablesystemfluentprice(), target);
  }

  // optional int32 EnableEveryDayAward = 28 [default = 0];
  if (has_enableeverydayaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->enableeverydayaward(), target);
  }

  // optional .ActivetyConfig ChristmasActivety = 29;
  if (has_christmasactivety()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, *this->christmasactivety_, target);
  }

  // optional .ActivetyConfig FreshBossActivety = 30;
  if (has_freshbossactivety()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, *this->freshbossactivety_, target);
  }

  // optional int32 EnableFreeUser = 31 [default = 0];
  if (has_enablefreeuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->enablefreeuser(), target);
  }

  // optional int32 MaxUserCnt = 32;
  if (has_maxusercnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->maxusercnt(), target);
  }

  // optional int32 FreeUserUpdate = 33;
  if (has_freeuserupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->freeuserupdate(), target);
  }

  // optional int32 MaxNoUserTime = 34;
  if (has_maxnousertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->maxnousertime(), target);
  }

  // optional int32 MaxFreeUserCnt = 35;
  if (has_maxfreeusercnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->maxfreeusercnt(), target);
  }

  // optional int32 MaxFriendCnt = 36;
  if (has_maxfriendcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->maxfriendcnt(), target);
  }

  // optional int32 MaxGuestSpeed = 37;
  if (has_maxguestspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->maxguestspeed(), target);
  }

  // optional int32 EnableGuestTimeCheck = 38;
  if (has_enableguesttimecheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->enableguesttimecheck(), target);
  }

  // optional int32 EnableFreeUserStatisic = 39;
  if (has_enablefreeuserstatisic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->enablefreeuserstatisic(), target);
  }

  // optional int32 CDKeyWorldID = 40;
  if (has_cdkeyworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->cdkeyworldid(), target);
  }

  // optional int32 EnableCDKey = 41;
  if (has_enablecdkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->enablecdkey(), target);
  }

  // optional int32 EnableDataToQQ = 42;
  if (has_enabledatatoqq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->enabledatatoqq(), target);
  }

  // optional .ActivetyConfig TreeActivety = 43;
  if (has_treeactivety()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, *this->treeactivety_, target);
  }

  // optional int32 SafeDataToQQMax = 44;
  if (has_safedatatoqqmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->safedatatoqqmax(), target);
  }

  // optional int32 EnableNetCachePool = 45;
  if (has_enablenetcachepool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->enablenetcachepool(), target);
  }

  // optional .ActivetyConfig BallActivety = 46;
  if (has_ballactivety()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, *this->ballactivety_, target);
  }

  // optional .ActivetyConfig ADActivety = 47;
  if (has_adactivety()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, *this->adactivety_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFG_GameConfig)
  return target;
}

int CFG_GameConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional int32 MaxGroupBuyingTime = 1 [default = 1800];
    if (has_maxgroupbuyingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxgroupbuyingtime());
    }

    // optional int32 MinGroupBuyingTime = 2 [default = 0];
    if (has_mingroupbuyingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mingroupbuyingtime());
    }

    // optional int32 MaxBuyPer = 3 [default = 50];
    if (has_maxbuyper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxbuyper());
    }

    // optional int32 MinBuyPer = 4 [default = 20];
    if (has_minbuyper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minbuyper());
    }

    // optional int32 LoseBagItemsPer = 5 [default = 5];
    if (has_losebagitemsper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losebagitemsper());
    }

    // optional int32 LoseBagMoneyPer = 6 [default = 5];
    if (has_losebagmoneyper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losebagmoneyper());
    }

    // optional float EveryUnitSpeed = 7 [default = 0.8];
    if (has_everyunitspeed()) {
      total_size += 1 + 4;
    }

    // optional int32 CashierPathLength = 8 [default = 2];
    if (has_cashierpathlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cashierpathlength());
    }

  }
  if (_has_bits_[8 / 32] & 65280) {
    // optional int32 MaxGuestCntEveryTimes = 9 [default = 20];
    if (has_maxguestcnteverytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxguestcnteverytimes());
    }

    // optional int32 MaxGroupBuyingTimes = 10 [default = 20];
    if (has_maxgroupbuyingtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxgroupbuyingtimes());
    }

    // optional int32 GuestIncreaseTimeTick = 11 [default = 1800];
    if (has_guestincreasetimetick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guestincreasetimetick());
    }

    // optional int32 FriendsTakeGuestAwayMinCnt = 12 [default = 16];
    if (has_friendstakeguestawaymincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendstakeguestawaymincnt());
    }

    // optional int32 CostMoneyTakeAwayGuest = 13 [default = 150];
    if (has_costmoneytakeawayguest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costmoneytakeawayguest());
    }

    // optional int32 CostMoneyAddEmployee = 14 [default = 100];
    if (has_costmoneyaddemployee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costmoneyaddemployee());
    }

    // optional int32 EmployeeTiLiMax = 15 [default = 72];
    if (has_employeetilimax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->employeetilimax());
    }

    // optional int32 PublicPraiseOrigon = 16 [default = 500];
    if (has_publicpraiseorigon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publicpraiseorigon());
    }

  }
  if (_has_bits_[16 / 32] & 16711680) {
    // optional int32 PublicPraiseMax = 17 [default = 1000];
    if (has_publicpraisemax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publicpraisemax());
    }

    // optional int32 PublicPraiseMin = 18 [default = 0];
    if (has_publicpraisemin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publicpraisemin());
    }

    // optional int32 EnableChecked = 19 [default = 0];
    if (has_enablechecked()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enablechecked());
    }

    // optional int32 MaxFreshManStep = 20 [default = 15];
    if (has_maxfreshmanstep()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxfreshmanstep());
    }

    // optional bool EnableFreshMan = 21 [default = true];
    if (has_enablefreshman()) {
      total_size += 2 + 1;
    }

    // optional bool EnableSpecialGuest = 22 [default = false];
    if (has_enablespecialguest()) {
      total_size += 2 + 1;
    }

    // optional int32 GarbageProduceTime = 23 [default = 30];
    if (has_garbageproducetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->garbageproducetime());
    }

    // optional int32 GarbageRemoveMoney = 24 [default = 10];
    if (has_garbageremovemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->garbageremovemoney());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080) {
    // optional int32 GarbageProduceMax = 25 [default = 4];
    if (has_garbageproducemax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->garbageproducemax());
    }

    // optional float PublicPraisePer = 26 [default = 0.333];
    if (has_publicpraiseper()) {
      total_size += 2 + 4;
    }

    // optional int32 EnableSystemFluentPrice = 27 [default = 0];
    if (has_enablesystemfluentprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enablesystemfluentprice());
    }

    // optional int32 EnableEveryDayAward = 28 [default = 0];
    if (has_enableeverydayaward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enableeverydayaward());
    }

    // optional .ActivetyConfig ChristmasActivety = 29;
    if (has_christmasactivety()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->christmasactivety_);
    }

    // optional .ActivetyConfig FreshBossActivety = 30;
    if (has_freshbossactivety()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->freshbossactivety_);
    }

    // optional int32 EnableFreeUser = 31 [default = 0];
    if (has_enablefreeuser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enablefreeuser());
    }

    // optional int32 MaxUserCnt = 32;
    if (has_maxusercnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxusercnt());
    }

  }
  if (_has_bits_[32 / 32] & 255) {
    // optional int32 FreeUserUpdate = 33;
    if (has_freeuserupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeuserupdate());
    }

    // optional int32 MaxNoUserTime = 34;
    if (has_maxnousertime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnousertime());
    }

    // optional int32 MaxFreeUserCnt = 35;
    if (has_maxfreeusercnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxfreeusercnt());
    }

    // optional int32 MaxFriendCnt = 36;
    if (has_maxfriendcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxfriendcnt());
    }

    // optional int32 MaxGuestSpeed = 37;
    if (has_maxguestspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxguestspeed());
    }

    // optional int32 EnableGuestTimeCheck = 38;
    if (has_enableguesttimecheck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enableguesttimecheck());
    }

    // optional int32 EnableFreeUserStatisic = 39;
    if (has_enablefreeuserstatisic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enablefreeuserstatisic());
    }

    // optional int32 CDKeyWorldID = 40;
    if (has_cdkeyworldid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdkeyworldid());
    }

  }
  if (_has_bits_[40 / 32] & 32512) {
    // optional int32 EnableCDKey = 41;
    if (has_enablecdkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enablecdkey());
    }

    // optional int32 EnableDataToQQ = 42;
    if (has_enabledatatoqq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enabledatatoqq());
    }

    // optional .ActivetyConfig TreeActivety = 43;
    if (has_treeactivety()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->treeactivety_);
    }

    // optional int32 SafeDataToQQMax = 44;
    if (has_safedatatoqqmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->safedatatoqqmax());
    }

    // optional int32 EnableNetCachePool = 45;
    if (has_enablenetcachepool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enablenetcachepool());
    }

    // optional .ActivetyConfig BallActivety = 46;
    if (has_ballactivety()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ballactivety_);
    }

    // optional .ActivetyConfig ADActivety = 47;
    if (has_adactivety()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adactivety_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CFG_GameConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CFG_GameConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CFG_GameConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CFG_GameConfig::MergeFrom(const CFG_GameConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxgroupbuyingtime()) {
      set_maxgroupbuyingtime(from.maxgroupbuyingtime());
    }
    if (from.has_mingroupbuyingtime()) {
      set_mingroupbuyingtime(from.mingroupbuyingtime());
    }
    if (from.has_maxbuyper()) {
      set_maxbuyper(from.maxbuyper());
    }
    if (from.has_minbuyper()) {
      set_minbuyper(from.minbuyper());
    }
    if (from.has_losebagitemsper()) {
      set_losebagitemsper(from.losebagitemsper());
    }
    if (from.has_losebagmoneyper()) {
      set_losebagmoneyper(from.losebagmoneyper());
    }
    if (from.has_everyunitspeed()) {
      set_everyunitspeed(from.everyunitspeed());
    }
    if (from.has_cashierpathlength()) {
      set_cashierpathlength(from.cashierpathlength());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxguestcnteverytimes()) {
      set_maxguestcnteverytimes(from.maxguestcnteverytimes());
    }
    if (from.has_maxgroupbuyingtimes()) {
      set_maxgroupbuyingtimes(from.maxgroupbuyingtimes());
    }
    if (from.has_guestincreasetimetick()) {
      set_guestincreasetimetick(from.guestincreasetimetick());
    }
    if (from.has_friendstakeguestawaymincnt()) {
      set_friendstakeguestawaymincnt(from.friendstakeguestawaymincnt());
    }
    if (from.has_costmoneytakeawayguest()) {
      set_costmoneytakeawayguest(from.costmoneytakeawayguest());
    }
    if (from.has_costmoneyaddemployee()) {
      set_costmoneyaddemployee(from.costmoneyaddemployee());
    }
    if (from.has_employeetilimax()) {
      set_employeetilimax(from.employeetilimax());
    }
    if (from.has_publicpraiseorigon()) {
      set_publicpraiseorigon(from.publicpraiseorigon());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_publicpraisemax()) {
      set_publicpraisemax(from.publicpraisemax());
    }
    if (from.has_publicpraisemin()) {
      set_publicpraisemin(from.publicpraisemin());
    }
    if (from.has_enablechecked()) {
      set_enablechecked(from.enablechecked());
    }
    if (from.has_maxfreshmanstep()) {
      set_maxfreshmanstep(from.maxfreshmanstep());
    }
    if (from.has_enablefreshman()) {
      set_enablefreshman(from.enablefreshman());
    }
    if (from.has_enablespecialguest()) {
      set_enablespecialguest(from.enablespecialguest());
    }
    if (from.has_garbageproducetime()) {
      set_garbageproducetime(from.garbageproducetime());
    }
    if (from.has_garbageremovemoney()) {
      set_garbageremovemoney(from.garbageremovemoney());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_garbageproducemax()) {
      set_garbageproducemax(from.garbageproducemax());
    }
    if (from.has_publicpraiseper()) {
      set_publicpraiseper(from.publicpraiseper());
    }
    if (from.has_enablesystemfluentprice()) {
      set_enablesystemfluentprice(from.enablesystemfluentprice());
    }
    if (from.has_enableeverydayaward()) {
      set_enableeverydayaward(from.enableeverydayaward());
    }
    if (from.has_christmasactivety()) {
      mutable_christmasactivety()->::ActivetyConfig::MergeFrom(from.christmasactivety());
    }
    if (from.has_freshbossactivety()) {
      mutable_freshbossactivety()->::ActivetyConfig::MergeFrom(from.freshbossactivety());
    }
    if (from.has_enablefreeuser()) {
      set_enablefreeuser(from.enablefreeuser());
    }
    if (from.has_maxusercnt()) {
      set_maxusercnt(from.maxusercnt());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_freeuserupdate()) {
      set_freeuserupdate(from.freeuserupdate());
    }
    if (from.has_maxnousertime()) {
      set_maxnousertime(from.maxnousertime());
    }
    if (from.has_maxfreeusercnt()) {
      set_maxfreeusercnt(from.maxfreeusercnt());
    }
    if (from.has_maxfriendcnt()) {
      set_maxfriendcnt(from.maxfriendcnt());
    }
    if (from.has_maxguestspeed()) {
      set_maxguestspeed(from.maxguestspeed());
    }
    if (from.has_enableguesttimecheck()) {
      set_enableguesttimecheck(from.enableguesttimecheck());
    }
    if (from.has_enablefreeuserstatisic()) {
      set_enablefreeuserstatisic(from.enablefreeuserstatisic());
    }
    if (from.has_cdkeyworldid()) {
      set_cdkeyworldid(from.cdkeyworldid());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_enablecdkey()) {
      set_enablecdkey(from.enablecdkey());
    }
    if (from.has_enabledatatoqq()) {
      set_enabledatatoqq(from.enabledatatoqq());
    }
    if (from.has_treeactivety()) {
      mutable_treeactivety()->::ActivetyConfig::MergeFrom(from.treeactivety());
    }
    if (from.has_safedatatoqqmax()) {
      set_safedatatoqqmax(from.safedatatoqqmax());
    }
    if (from.has_enablenetcachepool()) {
      set_enablenetcachepool(from.enablenetcachepool());
    }
    if (from.has_ballactivety()) {
      mutable_ballactivety()->::ActivetyConfig::MergeFrom(from.ballactivety());
    }
    if (from.has_adactivety()) {
      mutable_adactivety()->::ActivetyConfig::MergeFrom(from.adactivety());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CFG_GameConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFG_GameConfig::CopyFrom(const CFG_GameConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFG_GameConfig::IsInitialized() const {

  return true;
}

void CFG_GameConfig::Swap(CFG_GameConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CFG_GameConfig::InternalSwap(CFG_GameConfig* other) {
  std::swap(maxgroupbuyingtime_, other->maxgroupbuyingtime_);
  std::swap(mingroupbuyingtime_, other->mingroupbuyingtime_);
  std::swap(maxbuyper_, other->maxbuyper_);
  std::swap(minbuyper_, other->minbuyper_);
  std::swap(losebagitemsper_, other->losebagitemsper_);
  std::swap(losebagmoneyper_, other->losebagmoneyper_);
  std::swap(everyunitspeed_, other->everyunitspeed_);
  std::swap(cashierpathlength_, other->cashierpathlength_);
  std::swap(maxguestcnteverytimes_, other->maxguestcnteverytimes_);
  std::swap(maxgroupbuyingtimes_, other->maxgroupbuyingtimes_);
  std::swap(guestincreasetimetick_, other->guestincreasetimetick_);
  std::swap(friendstakeguestawaymincnt_, other->friendstakeguestawaymincnt_);
  std::swap(costmoneytakeawayguest_, other->costmoneytakeawayguest_);
  std::swap(costmoneyaddemployee_, other->costmoneyaddemployee_);
  std::swap(employeetilimax_, other->employeetilimax_);
  std::swap(publicpraiseorigon_, other->publicpraiseorigon_);
  std::swap(publicpraisemax_, other->publicpraisemax_);
  std::swap(publicpraisemin_, other->publicpraisemin_);
  std::swap(enablechecked_, other->enablechecked_);
  std::swap(maxfreshmanstep_, other->maxfreshmanstep_);
  std::swap(enablefreshman_, other->enablefreshman_);
  std::swap(enablespecialguest_, other->enablespecialguest_);
  std::swap(garbageproducetime_, other->garbageproducetime_);
  std::swap(garbageremovemoney_, other->garbageremovemoney_);
  std::swap(garbageproducemax_, other->garbageproducemax_);
  std::swap(publicpraiseper_, other->publicpraiseper_);
  std::swap(enablesystemfluentprice_, other->enablesystemfluentprice_);
  std::swap(enableeverydayaward_, other->enableeverydayaward_);
  std::swap(christmasactivety_, other->christmasactivety_);
  std::swap(freshbossactivety_, other->freshbossactivety_);
  std::swap(enablefreeuser_, other->enablefreeuser_);
  std::swap(maxusercnt_, other->maxusercnt_);
  std::swap(freeuserupdate_, other->freeuserupdate_);
  std::swap(maxnousertime_, other->maxnousertime_);
  std::swap(maxfreeusercnt_, other->maxfreeusercnt_);
  std::swap(maxfriendcnt_, other->maxfriendcnt_);
  std::swap(maxguestspeed_, other->maxguestspeed_);
  std::swap(enableguesttimecheck_, other->enableguesttimecheck_);
  std::swap(enablefreeuserstatisic_, other->enablefreeuserstatisic_);
  std::swap(cdkeyworldid_, other->cdkeyworldid_);
  std::swap(enablecdkey_, other->enablecdkey_);
  std::swap(enabledatatoqq_, other->enabledatatoqq_);
  std::swap(treeactivety_, other->treeactivety_);
  std::swap(safedatatoqqmax_, other->safedatatoqqmax_);
  std::swap(enablenetcachepool_, other->enablenetcachepool_);
  std::swap(ballactivety_, other->ballactivety_);
  std::swap(adactivety_, other->adactivety_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CFG_GameConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CFG_GameConfig_descriptor_;
  metadata.reflection = CFG_GameConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CFG_GameConfig

// optional int32 MaxGroupBuyingTime = 1 [default = 1800];
 bool CFG_GameConfig::has_maxgroupbuyingtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void CFG_GameConfig::set_has_maxgroupbuyingtime() {
  _has_bits_[0] |= 0x00000001u;
}
 void CFG_GameConfig::clear_has_maxgroupbuyingtime() {
  _has_bits_[0] &= ~0x00000001u;
}
 void CFG_GameConfig::clear_maxgroupbuyingtime() {
  maxgroupbuyingtime_ = 1800;
  clear_has_maxgroupbuyingtime();
}
 ::google::protobuf::int32 CFG_GameConfig::maxgroupbuyingtime() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxGroupBuyingTime)
  return maxgroupbuyingtime_;
}
 void CFG_GameConfig::set_maxgroupbuyingtime(::google::protobuf::int32 value) {
  set_has_maxgroupbuyingtime();
  maxgroupbuyingtime_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxGroupBuyingTime)
}

// optional int32 MinGroupBuyingTime = 2 [default = 0];
 bool CFG_GameConfig::has_mingroupbuyingtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void CFG_GameConfig::set_has_mingroupbuyingtime() {
  _has_bits_[0] |= 0x00000002u;
}
 void CFG_GameConfig::clear_has_mingroupbuyingtime() {
  _has_bits_[0] &= ~0x00000002u;
}
 void CFG_GameConfig::clear_mingroupbuyingtime() {
  mingroupbuyingtime_ = 0;
  clear_has_mingroupbuyingtime();
}
 ::google::protobuf::int32 CFG_GameConfig::mingroupbuyingtime() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MinGroupBuyingTime)
  return mingroupbuyingtime_;
}
 void CFG_GameConfig::set_mingroupbuyingtime(::google::protobuf::int32 value) {
  set_has_mingroupbuyingtime();
  mingroupbuyingtime_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MinGroupBuyingTime)
}

// optional int32 MaxBuyPer = 3 [default = 50];
 bool CFG_GameConfig::has_maxbuyper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void CFG_GameConfig::set_has_maxbuyper() {
  _has_bits_[0] |= 0x00000004u;
}
 void CFG_GameConfig::clear_has_maxbuyper() {
  _has_bits_[0] &= ~0x00000004u;
}
 void CFG_GameConfig::clear_maxbuyper() {
  maxbuyper_ = 50;
  clear_has_maxbuyper();
}
 ::google::protobuf::int32 CFG_GameConfig::maxbuyper() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxBuyPer)
  return maxbuyper_;
}
 void CFG_GameConfig::set_maxbuyper(::google::protobuf::int32 value) {
  set_has_maxbuyper();
  maxbuyper_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxBuyPer)
}

// optional int32 MinBuyPer = 4 [default = 20];
 bool CFG_GameConfig::has_minbuyper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void CFG_GameConfig::set_has_minbuyper() {
  _has_bits_[0] |= 0x00000008u;
}
 void CFG_GameConfig::clear_has_minbuyper() {
  _has_bits_[0] &= ~0x00000008u;
}
 void CFG_GameConfig::clear_minbuyper() {
  minbuyper_ = 20;
  clear_has_minbuyper();
}
 ::google::protobuf::int32 CFG_GameConfig::minbuyper() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MinBuyPer)
  return minbuyper_;
}
 void CFG_GameConfig::set_minbuyper(::google::protobuf::int32 value) {
  set_has_minbuyper();
  minbuyper_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MinBuyPer)
}

// optional int32 LoseBagItemsPer = 5 [default = 5];
 bool CFG_GameConfig::has_losebagitemsper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void CFG_GameConfig::set_has_losebagitemsper() {
  _has_bits_[0] |= 0x00000010u;
}
 void CFG_GameConfig::clear_has_losebagitemsper() {
  _has_bits_[0] &= ~0x00000010u;
}
 void CFG_GameConfig::clear_losebagitemsper() {
  losebagitemsper_ = 5;
  clear_has_losebagitemsper();
}
 ::google::protobuf::int32 CFG_GameConfig::losebagitemsper() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.LoseBagItemsPer)
  return losebagitemsper_;
}
 void CFG_GameConfig::set_losebagitemsper(::google::protobuf::int32 value) {
  set_has_losebagitemsper();
  losebagitemsper_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.LoseBagItemsPer)
}

// optional int32 LoseBagMoneyPer = 6 [default = 5];
 bool CFG_GameConfig::has_losebagmoneyper() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void CFG_GameConfig::set_has_losebagmoneyper() {
  _has_bits_[0] |= 0x00000020u;
}
 void CFG_GameConfig::clear_has_losebagmoneyper() {
  _has_bits_[0] &= ~0x00000020u;
}
 void CFG_GameConfig::clear_losebagmoneyper() {
  losebagmoneyper_ = 5;
  clear_has_losebagmoneyper();
}
 ::google::protobuf::int32 CFG_GameConfig::losebagmoneyper() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.LoseBagMoneyPer)
  return losebagmoneyper_;
}
 void CFG_GameConfig::set_losebagmoneyper(::google::protobuf::int32 value) {
  set_has_losebagmoneyper();
  losebagmoneyper_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.LoseBagMoneyPer)
}

// optional float EveryUnitSpeed = 7 [default = 0.8];
 bool CFG_GameConfig::has_everyunitspeed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void CFG_GameConfig::set_has_everyunitspeed() {
  _has_bits_[0] |= 0x00000040u;
}
 void CFG_GameConfig::clear_has_everyunitspeed() {
  _has_bits_[0] &= ~0x00000040u;
}
 void CFG_GameConfig::clear_everyunitspeed() {
  everyunitspeed_ = 0.8f;
  clear_has_everyunitspeed();
}
 float CFG_GameConfig::everyunitspeed() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EveryUnitSpeed)
  return everyunitspeed_;
}
 void CFG_GameConfig::set_everyunitspeed(float value) {
  set_has_everyunitspeed();
  everyunitspeed_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EveryUnitSpeed)
}

// optional int32 CashierPathLength = 8 [default = 2];
 bool CFG_GameConfig::has_cashierpathlength() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void CFG_GameConfig::set_has_cashierpathlength() {
  _has_bits_[0] |= 0x00000080u;
}
 void CFG_GameConfig::clear_has_cashierpathlength() {
  _has_bits_[0] &= ~0x00000080u;
}
 void CFG_GameConfig::clear_cashierpathlength() {
  cashierpathlength_ = 2;
  clear_has_cashierpathlength();
}
 ::google::protobuf::int32 CFG_GameConfig::cashierpathlength() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.CashierPathLength)
  return cashierpathlength_;
}
 void CFG_GameConfig::set_cashierpathlength(::google::protobuf::int32 value) {
  set_has_cashierpathlength();
  cashierpathlength_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.CashierPathLength)
}

// optional int32 MaxGuestCntEveryTimes = 9 [default = 20];
 bool CFG_GameConfig::has_maxguestcnteverytimes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void CFG_GameConfig::set_has_maxguestcnteverytimes() {
  _has_bits_[0] |= 0x00000100u;
}
 void CFG_GameConfig::clear_has_maxguestcnteverytimes() {
  _has_bits_[0] &= ~0x00000100u;
}
 void CFG_GameConfig::clear_maxguestcnteverytimes() {
  maxguestcnteverytimes_ = 20;
  clear_has_maxguestcnteverytimes();
}
 ::google::protobuf::int32 CFG_GameConfig::maxguestcnteverytimes() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxGuestCntEveryTimes)
  return maxguestcnteverytimes_;
}
 void CFG_GameConfig::set_maxguestcnteverytimes(::google::protobuf::int32 value) {
  set_has_maxguestcnteverytimes();
  maxguestcnteverytimes_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxGuestCntEveryTimes)
}

// optional int32 MaxGroupBuyingTimes = 10 [default = 20];
 bool CFG_GameConfig::has_maxgroupbuyingtimes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void CFG_GameConfig::set_has_maxgroupbuyingtimes() {
  _has_bits_[0] |= 0x00000200u;
}
 void CFG_GameConfig::clear_has_maxgroupbuyingtimes() {
  _has_bits_[0] &= ~0x00000200u;
}
 void CFG_GameConfig::clear_maxgroupbuyingtimes() {
  maxgroupbuyingtimes_ = 20;
  clear_has_maxgroupbuyingtimes();
}
 ::google::protobuf::int32 CFG_GameConfig::maxgroupbuyingtimes() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxGroupBuyingTimes)
  return maxgroupbuyingtimes_;
}
 void CFG_GameConfig::set_maxgroupbuyingtimes(::google::protobuf::int32 value) {
  set_has_maxgroupbuyingtimes();
  maxgroupbuyingtimes_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxGroupBuyingTimes)
}

// optional int32 GuestIncreaseTimeTick = 11 [default = 1800];
 bool CFG_GameConfig::has_guestincreasetimetick() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void CFG_GameConfig::set_has_guestincreasetimetick() {
  _has_bits_[0] |= 0x00000400u;
}
 void CFG_GameConfig::clear_has_guestincreasetimetick() {
  _has_bits_[0] &= ~0x00000400u;
}
 void CFG_GameConfig::clear_guestincreasetimetick() {
  guestincreasetimetick_ = 1800;
  clear_has_guestincreasetimetick();
}
 ::google::protobuf::int32 CFG_GameConfig::guestincreasetimetick() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.GuestIncreaseTimeTick)
  return guestincreasetimetick_;
}
 void CFG_GameConfig::set_guestincreasetimetick(::google::protobuf::int32 value) {
  set_has_guestincreasetimetick();
  guestincreasetimetick_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.GuestIncreaseTimeTick)
}

// optional int32 FriendsTakeGuestAwayMinCnt = 12 [default = 16];
 bool CFG_GameConfig::has_friendstakeguestawaymincnt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void CFG_GameConfig::set_has_friendstakeguestawaymincnt() {
  _has_bits_[0] |= 0x00000800u;
}
 void CFG_GameConfig::clear_has_friendstakeguestawaymincnt() {
  _has_bits_[0] &= ~0x00000800u;
}
 void CFG_GameConfig::clear_friendstakeguestawaymincnt() {
  friendstakeguestawaymincnt_ = 16;
  clear_has_friendstakeguestawaymincnt();
}
 ::google::protobuf::int32 CFG_GameConfig::friendstakeguestawaymincnt() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.FriendsTakeGuestAwayMinCnt)
  return friendstakeguestawaymincnt_;
}
 void CFG_GameConfig::set_friendstakeguestawaymincnt(::google::protobuf::int32 value) {
  set_has_friendstakeguestawaymincnt();
  friendstakeguestawaymincnt_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.FriendsTakeGuestAwayMinCnt)
}

// optional int32 CostMoneyTakeAwayGuest = 13 [default = 150];
 bool CFG_GameConfig::has_costmoneytakeawayguest() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void CFG_GameConfig::set_has_costmoneytakeawayguest() {
  _has_bits_[0] |= 0x00001000u;
}
 void CFG_GameConfig::clear_has_costmoneytakeawayguest() {
  _has_bits_[0] &= ~0x00001000u;
}
 void CFG_GameConfig::clear_costmoneytakeawayguest() {
  costmoneytakeawayguest_ = 150;
  clear_has_costmoneytakeawayguest();
}
 ::google::protobuf::int32 CFG_GameConfig::costmoneytakeawayguest() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.CostMoneyTakeAwayGuest)
  return costmoneytakeawayguest_;
}
 void CFG_GameConfig::set_costmoneytakeawayguest(::google::protobuf::int32 value) {
  set_has_costmoneytakeawayguest();
  costmoneytakeawayguest_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.CostMoneyTakeAwayGuest)
}

// optional int32 CostMoneyAddEmployee = 14 [default = 100];
 bool CFG_GameConfig::has_costmoneyaddemployee() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
 void CFG_GameConfig::set_has_costmoneyaddemployee() {
  _has_bits_[0] |= 0x00002000u;
}
 void CFG_GameConfig::clear_has_costmoneyaddemployee() {
  _has_bits_[0] &= ~0x00002000u;
}
 void CFG_GameConfig::clear_costmoneyaddemployee() {
  costmoneyaddemployee_ = 100;
  clear_has_costmoneyaddemployee();
}
 ::google::protobuf::int32 CFG_GameConfig::costmoneyaddemployee() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.CostMoneyAddEmployee)
  return costmoneyaddemployee_;
}
 void CFG_GameConfig::set_costmoneyaddemployee(::google::protobuf::int32 value) {
  set_has_costmoneyaddemployee();
  costmoneyaddemployee_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.CostMoneyAddEmployee)
}

// optional int32 EmployeeTiLiMax = 15 [default = 72];
 bool CFG_GameConfig::has_employeetilimax() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
 void CFG_GameConfig::set_has_employeetilimax() {
  _has_bits_[0] |= 0x00004000u;
}
 void CFG_GameConfig::clear_has_employeetilimax() {
  _has_bits_[0] &= ~0x00004000u;
}
 void CFG_GameConfig::clear_employeetilimax() {
  employeetilimax_ = 72;
  clear_has_employeetilimax();
}
 ::google::protobuf::int32 CFG_GameConfig::employeetilimax() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EmployeeTiLiMax)
  return employeetilimax_;
}
 void CFG_GameConfig::set_employeetilimax(::google::protobuf::int32 value) {
  set_has_employeetilimax();
  employeetilimax_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EmployeeTiLiMax)
}

// optional int32 PublicPraiseOrigon = 16 [default = 500];
 bool CFG_GameConfig::has_publicpraiseorigon() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
 void CFG_GameConfig::set_has_publicpraiseorigon() {
  _has_bits_[0] |= 0x00008000u;
}
 void CFG_GameConfig::clear_has_publicpraiseorigon() {
  _has_bits_[0] &= ~0x00008000u;
}
 void CFG_GameConfig::clear_publicpraiseorigon() {
  publicpraiseorigon_ = 500;
  clear_has_publicpraiseorigon();
}
 ::google::protobuf::int32 CFG_GameConfig::publicpraiseorigon() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.PublicPraiseOrigon)
  return publicpraiseorigon_;
}
 void CFG_GameConfig::set_publicpraiseorigon(::google::protobuf::int32 value) {
  set_has_publicpraiseorigon();
  publicpraiseorigon_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.PublicPraiseOrigon)
}

// optional int32 PublicPraiseMax = 17 [default = 1000];
 bool CFG_GameConfig::has_publicpraisemax() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
 void CFG_GameConfig::set_has_publicpraisemax() {
  _has_bits_[0] |= 0x00010000u;
}
 void CFG_GameConfig::clear_has_publicpraisemax() {
  _has_bits_[0] &= ~0x00010000u;
}
 void CFG_GameConfig::clear_publicpraisemax() {
  publicpraisemax_ = 1000;
  clear_has_publicpraisemax();
}
 ::google::protobuf::int32 CFG_GameConfig::publicpraisemax() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.PublicPraiseMax)
  return publicpraisemax_;
}
 void CFG_GameConfig::set_publicpraisemax(::google::protobuf::int32 value) {
  set_has_publicpraisemax();
  publicpraisemax_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.PublicPraiseMax)
}

// optional int32 PublicPraiseMin = 18 [default = 0];
 bool CFG_GameConfig::has_publicpraisemin() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
 void CFG_GameConfig::set_has_publicpraisemin() {
  _has_bits_[0] |= 0x00020000u;
}
 void CFG_GameConfig::clear_has_publicpraisemin() {
  _has_bits_[0] &= ~0x00020000u;
}
 void CFG_GameConfig::clear_publicpraisemin() {
  publicpraisemin_ = 0;
  clear_has_publicpraisemin();
}
 ::google::protobuf::int32 CFG_GameConfig::publicpraisemin() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.PublicPraiseMin)
  return publicpraisemin_;
}
 void CFG_GameConfig::set_publicpraisemin(::google::protobuf::int32 value) {
  set_has_publicpraisemin();
  publicpraisemin_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.PublicPraiseMin)
}

// optional int32 EnableChecked = 19 [default = 0];
 bool CFG_GameConfig::has_enablechecked() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
 void CFG_GameConfig::set_has_enablechecked() {
  _has_bits_[0] |= 0x00040000u;
}
 void CFG_GameConfig::clear_has_enablechecked() {
  _has_bits_[0] &= ~0x00040000u;
}
 void CFG_GameConfig::clear_enablechecked() {
  enablechecked_ = 0;
  clear_has_enablechecked();
}
 ::google::protobuf::int32 CFG_GameConfig::enablechecked() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableChecked)
  return enablechecked_;
}
 void CFG_GameConfig::set_enablechecked(::google::protobuf::int32 value) {
  set_has_enablechecked();
  enablechecked_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableChecked)
}

// optional int32 MaxFreshManStep = 20 [default = 15];
 bool CFG_GameConfig::has_maxfreshmanstep() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
 void CFG_GameConfig::set_has_maxfreshmanstep() {
  _has_bits_[0] |= 0x00080000u;
}
 void CFG_GameConfig::clear_has_maxfreshmanstep() {
  _has_bits_[0] &= ~0x00080000u;
}
 void CFG_GameConfig::clear_maxfreshmanstep() {
  maxfreshmanstep_ = 15;
  clear_has_maxfreshmanstep();
}
 ::google::protobuf::int32 CFG_GameConfig::maxfreshmanstep() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxFreshManStep)
  return maxfreshmanstep_;
}
 void CFG_GameConfig::set_maxfreshmanstep(::google::protobuf::int32 value) {
  set_has_maxfreshmanstep();
  maxfreshmanstep_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxFreshManStep)
}

// optional bool EnableFreshMan = 21 [default = true];
 bool CFG_GameConfig::has_enablefreshman() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
 void CFG_GameConfig::set_has_enablefreshman() {
  _has_bits_[0] |= 0x00100000u;
}
 void CFG_GameConfig::clear_has_enablefreshman() {
  _has_bits_[0] &= ~0x00100000u;
}
 void CFG_GameConfig::clear_enablefreshman() {
  enablefreshman_ = true;
  clear_has_enablefreshman();
}
 bool CFG_GameConfig::enablefreshman() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableFreshMan)
  return enablefreshman_;
}
 void CFG_GameConfig::set_enablefreshman(bool value) {
  set_has_enablefreshman();
  enablefreshman_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableFreshMan)
}

// optional bool EnableSpecialGuest = 22 [default = false];
 bool CFG_GameConfig::has_enablespecialguest() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
 void CFG_GameConfig::set_has_enablespecialguest() {
  _has_bits_[0] |= 0x00200000u;
}
 void CFG_GameConfig::clear_has_enablespecialguest() {
  _has_bits_[0] &= ~0x00200000u;
}
 void CFG_GameConfig::clear_enablespecialguest() {
  enablespecialguest_ = false;
  clear_has_enablespecialguest();
}
 bool CFG_GameConfig::enablespecialguest() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableSpecialGuest)
  return enablespecialguest_;
}
 void CFG_GameConfig::set_enablespecialguest(bool value) {
  set_has_enablespecialguest();
  enablespecialguest_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableSpecialGuest)
}

// optional int32 GarbageProduceTime = 23 [default = 30];
 bool CFG_GameConfig::has_garbageproducetime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
 void CFG_GameConfig::set_has_garbageproducetime() {
  _has_bits_[0] |= 0x00400000u;
}
 void CFG_GameConfig::clear_has_garbageproducetime() {
  _has_bits_[0] &= ~0x00400000u;
}
 void CFG_GameConfig::clear_garbageproducetime() {
  garbageproducetime_ = 30;
  clear_has_garbageproducetime();
}
 ::google::protobuf::int32 CFG_GameConfig::garbageproducetime() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.GarbageProduceTime)
  return garbageproducetime_;
}
 void CFG_GameConfig::set_garbageproducetime(::google::protobuf::int32 value) {
  set_has_garbageproducetime();
  garbageproducetime_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.GarbageProduceTime)
}

// optional int32 GarbageRemoveMoney = 24 [default = 10];
 bool CFG_GameConfig::has_garbageremovemoney() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
 void CFG_GameConfig::set_has_garbageremovemoney() {
  _has_bits_[0] |= 0x00800000u;
}
 void CFG_GameConfig::clear_has_garbageremovemoney() {
  _has_bits_[0] &= ~0x00800000u;
}
 void CFG_GameConfig::clear_garbageremovemoney() {
  garbageremovemoney_ = 10;
  clear_has_garbageremovemoney();
}
 ::google::protobuf::int32 CFG_GameConfig::garbageremovemoney() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.GarbageRemoveMoney)
  return garbageremovemoney_;
}
 void CFG_GameConfig::set_garbageremovemoney(::google::protobuf::int32 value) {
  set_has_garbageremovemoney();
  garbageremovemoney_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.GarbageRemoveMoney)
}

// optional int32 GarbageProduceMax = 25 [default = 4];
 bool CFG_GameConfig::has_garbageproducemax() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
 void CFG_GameConfig::set_has_garbageproducemax() {
  _has_bits_[0] |= 0x01000000u;
}
 void CFG_GameConfig::clear_has_garbageproducemax() {
  _has_bits_[0] &= ~0x01000000u;
}
 void CFG_GameConfig::clear_garbageproducemax() {
  garbageproducemax_ = 4;
  clear_has_garbageproducemax();
}
 ::google::protobuf::int32 CFG_GameConfig::garbageproducemax() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.GarbageProduceMax)
  return garbageproducemax_;
}
 void CFG_GameConfig::set_garbageproducemax(::google::protobuf::int32 value) {
  set_has_garbageproducemax();
  garbageproducemax_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.GarbageProduceMax)
}

// optional float PublicPraisePer = 26 [default = 0.333];
 bool CFG_GameConfig::has_publicpraiseper() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
 void CFG_GameConfig::set_has_publicpraiseper() {
  _has_bits_[0] |= 0x02000000u;
}
 void CFG_GameConfig::clear_has_publicpraiseper() {
  _has_bits_[0] &= ~0x02000000u;
}
 void CFG_GameConfig::clear_publicpraiseper() {
  publicpraiseper_ = 0.333f;
  clear_has_publicpraiseper();
}
 float CFG_GameConfig::publicpraiseper() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.PublicPraisePer)
  return publicpraiseper_;
}
 void CFG_GameConfig::set_publicpraiseper(float value) {
  set_has_publicpraiseper();
  publicpraiseper_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.PublicPraisePer)
}

// optional int32 EnableSystemFluentPrice = 27 [default = 0];
 bool CFG_GameConfig::has_enablesystemfluentprice() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
 void CFG_GameConfig::set_has_enablesystemfluentprice() {
  _has_bits_[0] |= 0x04000000u;
}
 void CFG_GameConfig::clear_has_enablesystemfluentprice() {
  _has_bits_[0] &= ~0x04000000u;
}
 void CFG_GameConfig::clear_enablesystemfluentprice() {
  enablesystemfluentprice_ = 0;
  clear_has_enablesystemfluentprice();
}
 ::google::protobuf::int32 CFG_GameConfig::enablesystemfluentprice() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableSystemFluentPrice)
  return enablesystemfluentprice_;
}
 void CFG_GameConfig::set_enablesystemfluentprice(::google::protobuf::int32 value) {
  set_has_enablesystemfluentprice();
  enablesystemfluentprice_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableSystemFluentPrice)
}

// optional int32 EnableEveryDayAward = 28 [default = 0];
 bool CFG_GameConfig::has_enableeverydayaward() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
 void CFG_GameConfig::set_has_enableeverydayaward() {
  _has_bits_[0] |= 0x08000000u;
}
 void CFG_GameConfig::clear_has_enableeverydayaward() {
  _has_bits_[0] &= ~0x08000000u;
}
 void CFG_GameConfig::clear_enableeverydayaward() {
  enableeverydayaward_ = 0;
  clear_has_enableeverydayaward();
}
 ::google::protobuf::int32 CFG_GameConfig::enableeverydayaward() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableEveryDayAward)
  return enableeverydayaward_;
}
 void CFG_GameConfig::set_enableeverydayaward(::google::protobuf::int32 value) {
  set_has_enableeverydayaward();
  enableeverydayaward_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableEveryDayAward)
}

// optional .ActivetyConfig ChristmasActivety = 29;
 bool CFG_GameConfig::has_christmasactivety() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
 void CFG_GameConfig::set_has_christmasactivety() {
  _has_bits_[0] |= 0x10000000u;
}
 void CFG_GameConfig::clear_has_christmasactivety() {
  _has_bits_[0] &= ~0x10000000u;
}
 void CFG_GameConfig::clear_christmasactivety() {
  if (christmasactivety_ != NULL) christmasactivety_->::ActivetyConfig::Clear();
  clear_has_christmasactivety();
}
 const ::ActivetyConfig& CFG_GameConfig::christmasactivety() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.ChristmasActivety)
  return christmasactivety_ != NULL ? *christmasactivety_ : *default_instance_->christmasactivety_;
}
 ::ActivetyConfig* CFG_GameConfig::mutable_christmasactivety() {
  set_has_christmasactivety();
  if (christmasactivety_ == NULL) {
    christmasactivety_ = new ::ActivetyConfig;
  }
  // @@protoc_insertion_point(field_mutable:CFG_GameConfig.ChristmasActivety)
  return christmasactivety_;
}
 ::ActivetyConfig* CFG_GameConfig::release_christmasactivety() {
  clear_has_christmasactivety();
  ::ActivetyConfig* temp = christmasactivety_;
  christmasactivety_ = NULL;
  return temp;
}
 void CFG_GameConfig::set_allocated_christmasactivety(::ActivetyConfig* christmasactivety) {
  delete christmasactivety_;
  christmasactivety_ = christmasactivety;
  if (christmasactivety) {
    set_has_christmasactivety();
  } else {
    clear_has_christmasactivety();
  }
  // @@protoc_insertion_point(field_set_allocated:CFG_GameConfig.ChristmasActivety)
}

// optional .ActivetyConfig FreshBossActivety = 30;
 bool CFG_GameConfig::has_freshbossactivety() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
 void CFG_GameConfig::set_has_freshbossactivety() {
  _has_bits_[0] |= 0x20000000u;
}
 void CFG_GameConfig::clear_has_freshbossactivety() {
  _has_bits_[0] &= ~0x20000000u;
}
 void CFG_GameConfig::clear_freshbossactivety() {
  if (freshbossactivety_ != NULL) freshbossactivety_->::ActivetyConfig::Clear();
  clear_has_freshbossactivety();
}
 const ::ActivetyConfig& CFG_GameConfig::freshbossactivety() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.FreshBossActivety)
  return freshbossactivety_ != NULL ? *freshbossactivety_ : *default_instance_->freshbossactivety_;
}
 ::ActivetyConfig* CFG_GameConfig::mutable_freshbossactivety() {
  set_has_freshbossactivety();
  if (freshbossactivety_ == NULL) {
    freshbossactivety_ = new ::ActivetyConfig;
  }
  // @@protoc_insertion_point(field_mutable:CFG_GameConfig.FreshBossActivety)
  return freshbossactivety_;
}
 ::ActivetyConfig* CFG_GameConfig::release_freshbossactivety() {
  clear_has_freshbossactivety();
  ::ActivetyConfig* temp = freshbossactivety_;
  freshbossactivety_ = NULL;
  return temp;
}
 void CFG_GameConfig::set_allocated_freshbossactivety(::ActivetyConfig* freshbossactivety) {
  delete freshbossactivety_;
  freshbossactivety_ = freshbossactivety;
  if (freshbossactivety) {
    set_has_freshbossactivety();
  } else {
    clear_has_freshbossactivety();
  }
  // @@protoc_insertion_point(field_set_allocated:CFG_GameConfig.FreshBossActivety)
}

// optional int32 EnableFreeUser = 31 [default = 0];
 bool CFG_GameConfig::has_enablefreeuser() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
 void CFG_GameConfig::set_has_enablefreeuser() {
  _has_bits_[0] |= 0x40000000u;
}
 void CFG_GameConfig::clear_has_enablefreeuser() {
  _has_bits_[0] &= ~0x40000000u;
}
 void CFG_GameConfig::clear_enablefreeuser() {
  enablefreeuser_ = 0;
  clear_has_enablefreeuser();
}
 ::google::protobuf::int32 CFG_GameConfig::enablefreeuser() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableFreeUser)
  return enablefreeuser_;
}
 void CFG_GameConfig::set_enablefreeuser(::google::protobuf::int32 value) {
  set_has_enablefreeuser();
  enablefreeuser_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableFreeUser)
}

// optional int32 MaxUserCnt = 32;
 bool CFG_GameConfig::has_maxusercnt() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
 void CFG_GameConfig::set_has_maxusercnt() {
  _has_bits_[0] |= 0x80000000u;
}
 void CFG_GameConfig::clear_has_maxusercnt() {
  _has_bits_[0] &= ~0x80000000u;
}
 void CFG_GameConfig::clear_maxusercnt() {
  maxusercnt_ = 0;
  clear_has_maxusercnt();
}
 ::google::protobuf::int32 CFG_GameConfig::maxusercnt() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxUserCnt)
  return maxusercnt_;
}
 void CFG_GameConfig::set_maxusercnt(::google::protobuf::int32 value) {
  set_has_maxusercnt();
  maxusercnt_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxUserCnt)
}

// optional int32 FreeUserUpdate = 33;
 bool CFG_GameConfig::has_freeuserupdate() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
 void CFG_GameConfig::set_has_freeuserupdate() {
  _has_bits_[1] |= 0x00000001u;
}
 void CFG_GameConfig::clear_has_freeuserupdate() {
  _has_bits_[1] &= ~0x00000001u;
}
 void CFG_GameConfig::clear_freeuserupdate() {
  freeuserupdate_ = 0;
  clear_has_freeuserupdate();
}
 ::google::protobuf::int32 CFG_GameConfig::freeuserupdate() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.FreeUserUpdate)
  return freeuserupdate_;
}
 void CFG_GameConfig::set_freeuserupdate(::google::protobuf::int32 value) {
  set_has_freeuserupdate();
  freeuserupdate_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.FreeUserUpdate)
}

// optional int32 MaxNoUserTime = 34;
 bool CFG_GameConfig::has_maxnousertime() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
 void CFG_GameConfig::set_has_maxnousertime() {
  _has_bits_[1] |= 0x00000002u;
}
 void CFG_GameConfig::clear_has_maxnousertime() {
  _has_bits_[1] &= ~0x00000002u;
}
 void CFG_GameConfig::clear_maxnousertime() {
  maxnousertime_ = 0;
  clear_has_maxnousertime();
}
 ::google::protobuf::int32 CFG_GameConfig::maxnousertime() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxNoUserTime)
  return maxnousertime_;
}
 void CFG_GameConfig::set_maxnousertime(::google::protobuf::int32 value) {
  set_has_maxnousertime();
  maxnousertime_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxNoUserTime)
}

// optional int32 MaxFreeUserCnt = 35;
 bool CFG_GameConfig::has_maxfreeusercnt() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
 void CFG_GameConfig::set_has_maxfreeusercnt() {
  _has_bits_[1] |= 0x00000004u;
}
 void CFG_GameConfig::clear_has_maxfreeusercnt() {
  _has_bits_[1] &= ~0x00000004u;
}
 void CFG_GameConfig::clear_maxfreeusercnt() {
  maxfreeusercnt_ = 0;
  clear_has_maxfreeusercnt();
}
 ::google::protobuf::int32 CFG_GameConfig::maxfreeusercnt() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxFreeUserCnt)
  return maxfreeusercnt_;
}
 void CFG_GameConfig::set_maxfreeusercnt(::google::protobuf::int32 value) {
  set_has_maxfreeusercnt();
  maxfreeusercnt_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxFreeUserCnt)
}

// optional int32 MaxFriendCnt = 36;
 bool CFG_GameConfig::has_maxfriendcnt() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
 void CFG_GameConfig::set_has_maxfriendcnt() {
  _has_bits_[1] |= 0x00000008u;
}
 void CFG_GameConfig::clear_has_maxfriendcnt() {
  _has_bits_[1] &= ~0x00000008u;
}
 void CFG_GameConfig::clear_maxfriendcnt() {
  maxfriendcnt_ = 0;
  clear_has_maxfriendcnt();
}
 ::google::protobuf::int32 CFG_GameConfig::maxfriendcnt() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxFriendCnt)
  return maxfriendcnt_;
}
 void CFG_GameConfig::set_maxfriendcnt(::google::protobuf::int32 value) {
  set_has_maxfriendcnt();
  maxfriendcnt_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxFriendCnt)
}

// optional int32 MaxGuestSpeed = 37;
 bool CFG_GameConfig::has_maxguestspeed() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
 void CFG_GameConfig::set_has_maxguestspeed() {
  _has_bits_[1] |= 0x00000010u;
}
 void CFG_GameConfig::clear_has_maxguestspeed() {
  _has_bits_[1] &= ~0x00000010u;
}
 void CFG_GameConfig::clear_maxguestspeed() {
  maxguestspeed_ = 0;
  clear_has_maxguestspeed();
}
 ::google::protobuf::int32 CFG_GameConfig::maxguestspeed() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.MaxGuestSpeed)
  return maxguestspeed_;
}
 void CFG_GameConfig::set_maxguestspeed(::google::protobuf::int32 value) {
  set_has_maxguestspeed();
  maxguestspeed_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.MaxGuestSpeed)
}

// optional int32 EnableGuestTimeCheck = 38;
 bool CFG_GameConfig::has_enableguesttimecheck() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
 void CFG_GameConfig::set_has_enableguesttimecheck() {
  _has_bits_[1] |= 0x00000020u;
}
 void CFG_GameConfig::clear_has_enableguesttimecheck() {
  _has_bits_[1] &= ~0x00000020u;
}
 void CFG_GameConfig::clear_enableguesttimecheck() {
  enableguesttimecheck_ = 0;
  clear_has_enableguesttimecheck();
}
 ::google::protobuf::int32 CFG_GameConfig::enableguesttimecheck() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableGuestTimeCheck)
  return enableguesttimecheck_;
}
 void CFG_GameConfig::set_enableguesttimecheck(::google::protobuf::int32 value) {
  set_has_enableguesttimecheck();
  enableguesttimecheck_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableGuestTimeCheck)
}

// optional int32 EnableFreeUserStatisic = 39;
 bool CFG_GameConfig::has_enablefreeuserstatisic() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
 void CFG_GameConfig::set_has_enablefreeuserstatisic() {
  _has_bits_[1] |= 0x00000040u;
}
 void CFG_GameConfig::clear_has_enablefreeuserstatisic() {
  _has_bits_[1] &= ~0x00000040u;
}
 void CFG_GameConfig::clear_enablefreeuserstatisic() {
  enablefreeuserstatisic_ = 0;
  clear_has_enablefreeuserstatisic();
}
 ::google::protobuf::int32 CFG_GameConfig::enablefreeuserstatisic() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableFreeUserStatisic)
  return enablefreeuserstatisic_;
}
 void CFG_GameConfig::set_enablefreeuserstatisic(::google::protobuf::int32 value) {
  set_has_enablefreeuserstatisic();
  enablefreeuserstatisic_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableFreeUserStatisic)
}

// optional int32 CDKeyWorldID = 40;
 bool CFG_GameConfig::has_cdkeyworldid() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
 void CFG_GameConfig::set_has_cdkeyworldid() {
  _has_bits_[1] |= 0x00000080u;
}
 void CFG_GameConfig::clear_has_cdkeyworldid() {
  _has_bits_[1] &= ~0x00000080u;
}
 void CFG_GameConfig::clear_cdkeyworldid() {
  cdkeyworldid_ = 0;
  clear_has_cdkeyworldid();
}
 ::google::protobuf::int32 CFG_GameConfig::cdkeyworldid() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.CDKeyWorldID)
  return cdkeyworldid_;
}
 void CFG_GameConfig::set_cdkeyworldid(::google::protobuf::int32 value) {
  set_has_cdkeyworldid();
  cdkeyworldid_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.CDKeyWorldID)
}

// optional int32 EnableCDKey = 41;
 bool CFG_GameConfig::has_enablecdkey() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
 void CFG_GameConfig::set_has_enablecdkey() {
  _has_bits_[1] |= 0x00000100u;
}
 void CFG_GameConfig::clear_has_enablecdkey() {
  _has_bits_[1] &= ~0x00000100u;
}
 void CFG_GameConfig::clear_enablecdkey() {
  enablecdkey_ = 0;
  clear_has_enablecdkey();
}
 ::google::protobuf::int32 CFG_GameConfig::enablecdkey() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableCDKey)
  return enablecdkey_;
}
 void CFG_GameConfig::set_enablecdkey(::google::protobuf::int32 value) {
  set_has_enablecdkey();
  enablecdkey_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableCDKey)
}

// optional int32 EnableDataToQQ = 42;
 bool CFG_GameConfig::has_enabledatatoqq() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
 void CFG_GameConfig::set_has_enabledatatoqq() {
  _has_bits_[1] |= 0x00000200u;
}
 void CFG_GameConfig::clear_has_enabledatatoqq() {
  _has_bits_[1] &= ~0x00000200u;
}
 void CFG_GameConfig::clear_enabledatatoqq() {
  enabledatatoqq_ = 0;
  clear_has_enabledatatoqq();
}
 ::google::protobuf::int32 CFG_GameConfig::enabledatatoqq() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableDataToQQ)
  return enabledatatoqq_;
}
 void CFG_GameConfig::set_enabledatatoqq(::google::protobuf::int32 value) {
  set_has_enabledatatoqq();
  enabledatatoqq_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableDataToQQ)
}

// optional .ActivetyConfig TreeActivety = 43;
 bool CFG_GameConfig::has_treeactivety() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
 void CFG_GameConfig::set_has_treeactivety() {
  _has_bits_[1] |= 0x00000400u;
}
 void CFG_GameConfig::clear_has_treeactivety() {
  _has_bits_[1] &= ~0x00000400u;
}
 void CFG_GameConfig::clear_treeactivety() {
  if (treeactivety_ != NULL) treeactivety_->::ActivetyConfig::Clear();
  clear_has_treeactivety();
}
 const ::ActivetyConfig& CFG_GameConfig::treeactivety() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.TreeActivety)
  return treeactivety_ != NULL ? *treeactivety_ : *default_instance_->treeactivety_;
}
 ::ActivetyConfig* CFG_GameConfig::mutable_treeactivety() {
  set_has_treeactivety();
  if (treeactivety_ == NULL) {
    treeactivety_ = new ::ActivetyConfig;
  }
  // @@protoc_insertion_point(field_mutable:CFG_GameConfig.TreeActivety)
  return treeactivety_;
}
 ::ActivetyConfig* CFG_GameConfig::release_treeactivety() {
  clear_has_treeactivety();
  ::ActivetyConfig* temp = treeactivety_;
  treeactivety_ = NULL;
  return temp;
}
 void CFG_GameConfig::set_allocated_treeactivety(::ActivetyConfig* treeactivety) {
  delete treeactivety_;
  treeactivety_ = treeactivety;
  if (treeactivety) {
    set_has_treeactivety();
  } else {
    clear_has_treeactivety();
  }
  // @@protoc_insertion_point(field_set_allocated:CFG_GameConfig.TreeActivety)
}

// optional int32 SafeDataToQQMax = 44;
 bool CFG_GameConfig::has_safedatatoqqmax() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
 void CFG_GameConfig::set_has_safedatatoqqmax() {
  _has_bits_[1] |= 0x00000800u;
}
 void CFG_GameConfig::clear_has_safedatatoqqmax() {
  _has_bits_[1] &= ~0x00000800u;
}
 void CFG_GameConfig::clear_safedatatoqqmax() {
  safedatatoqqmax_ = 0;
  clear_has_safedatatoqqmax();
}
 ::google::protobuf::int32 CFG_GameConfig::safedatatoqqmax() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.SafeDataToQQMax)
  return safedatatoqqmax_;
}
 void CFG_GameConfig::set_safedatatoqqmax(::google::protobuf::int32 value) {
  set_has_safedatatoqqmax();
  safedatatoqqmax_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.SafeDataToQQMax)
}

// optional int32 EnableNetCachePool = 45;
 bool CFG_GameConfig::has_enablenetcachepool() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
 void CFG_GameConfig::set_has_enablenetcachepool() {
  _has_bits_[1] |= 0x00001000u;
}
 void CFG_GameConfig::clear_has_enablenetcachepool() {
  _has_bits_[1] &= ~0x00001000u;
}
 void CFG_GameConfig::clear_enablenetcachepool() {
  enablenetcachepool_ = 0;
  clear_has_enablenetcachepool();
}
 ::google::protobuf::int32 CFG_GameConfig::enablenetcachepool() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.EnableNetCachePool)
  return enablenetcachepool_;
}
 void CFG_GameConfig::set_enablenetcachepool(::google::protobuf::int32 value) {
  set_has_enablenetcachepool();
  enablenetcachepool_ = value;
  // @@protoc_insertion_point(field_set:CFG_GameConfig.EnableNetCachePool)
}

// optional .ActivetyConfig BallActivety = 46;
 bool CFG_GameConfig::has_ballactivety() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
 void CFG_GameConfig::set_has_ballactivety() {
  _has_bits_[1] |= 0x00002000u;
}
 void CFG_GameConfig::clear_has_ballactivety() {
  _has_bits_[1] &= ~0x00002000u;
}
 void CFG_GameConfig::clear_ballactivety() {
  if (ballactivety_ != NULL) ballactivety_->::ActivetyConfig::Clear();
  clear_has_ballactivety();
}
 const ::ActivetyConfig& CFG_GameConfig::ballactivety() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.BallActivety)
  return ballactivety_ != NULL ? *ballactivety_ : *default_instance_->ballactivety_;
}
 ::ActivetyConfig* CFG_GameConfig::mutable_ballactivety() {
  set_has_ballactivety();
  if (ballactivety_ == NULL) {
    ballactivety_ = new ::ActivetyConfig;
  }
  // @@protoc_insertion_point(field_mutable:CFG_GameConfig.BallActivety)
  return ballactivety_;
}
 ::ActivetyConfig* CFG_GameConfig::release_ballactivety() {
  clear_has_ballactivety();
  ::ActivetyConfig* temp = ballactivety_;
  ballactivety_ = NULL;
  return temp;
}
 void CFG_GameConfig::set_allocated_ballactivety(::ActivetyConfig* ballactivety) {
  delete ballactivety_;
  ballactivety_ = ballactivety;
  if (ballactivety) {
    set_has_ballactivety();
  } else {
    clear_has_ballactivety();
  }
  // @@protoc_insertion_point(field_set_allocated:CFG_GameConfig.BallActivety)
}

// optional .ActivetyConfig ADActivety = 47;
 bool CFG_GameConfig::has_adactivety() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
 void CFG_GameConfig::set_has_adactivety() {
  _has_bits_[1] |= 0x00004000u;
}
 void CFG_GameConfig::clear_has_adactivety() {
  _has_bits_[1] &= ~0x00004000u;
}
 void CFG_GameConfig::clear_adactivety() {
  if (adactivety_ != NULL) adactivety_->::ActivetyConfig::Clear();
  clear_has_adactivety();
}
 const ::ActivetyConfig& CFG_GameConfig::adactivety() const {
  // @@protoc_insertion_point(field_get:CFG_GameConfig.ADActivety)
  return adactivety_ != NULL ? *adactivety_ : *default_instance_->adactivety_;
}
 ::ActivetyConfig* CFG_GameConfig::mutable_adactivety() {
  set_has_adactivety();
  if (adactivety_ == NULL) {
    adactivety_ = new ::ActivetyConfig;
  }
  // @@protoc_insertion_point(field_mutable:CFG_GameConfig.ADActivety)
  return adactivety_;
}
 ::ActivetyConfig* CFG_GameConfig::release_adactivety() {
  clear_has_adactivety();
  ::ActivetyConfig* temp = adactivety_;
  adactivety_ = NULL;
  return temp;
}
 void CFG_GameConfig::set_allocated_adactivety(::ActivetyConfig* adactivety) {
  delete adactivety_;
  adactivety_ = adactivety;
  if (adactivety) {
    set_has_adactivety();
  } else {
    clear_has_adactivety();
  }
  // @@protoc_insertion_point(field_set_allocated:CFG_GameConfig.ADActivety)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
