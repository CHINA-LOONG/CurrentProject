// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbinterface.proto

#ifndef PROTOBUF_dbinterface_2eproto__INCLUDED
#define PROTOBUF_dbinterface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_dbinterface_2eproto();
void protobuf_AssignDesc_dbinterface_2eproto();
void protobuf_ShutdownFile_dbinterface_2eproto();

class DB_BitCache;
class TimeLimitedUidSet;
class LotteryLimited;
class DB_MaxSizedUidList;
class DB_ExpLevel;
class DB_DailyCounter;
class DB_VersionCounter;
class DB_KingOfStar;
class DB_ItemOnMap;
class DB_Map;
class DB_Task;
class DB_TaskList;
class DB_TaskStateList;
class DB_BanChat;
class DB_BanLogin;
class DB_Item;
class DB_Bag;
class DB_ActionRecord;
class DB_FakeFriendActionSet;
class DB_FreindFirstVist;
class DB_Option;
class DB_WebBuyDetail;
class DB_WebBuyRecord;
class DB_LimitRecord;
class DB_Limit;
class DB_StepWithTime;
class DB_NewFunc;
class DB_CDKey;
class DB_Weibo;
class DB_CallBackCell;
class DB_CallBack;
class DB_FuncSwitch;
class DB_FriendGift;
class DB_Universe;
class DB_DallyUniverse;
class DB_DallyLogInfo;
class DB_DallyUniverseInfo;
class DB_LivesInfo;
class DB_UniverseInfo;
class DB_StrKeyProperties;
class DB_CandyProperties;
class DB_Events;
class DB_Singed;
class DB_Yelldmd;
class DB_SignHistory;
class DB_EasyTimeSet;
class DB_ContinuousDays;
class DB_DragboatFvl;
class DB_ActiveInvite;
class DB_ActiveInviteself;
class DB_ActiveCallBack;
class DB_Player;
class DB_User;

// ===================================================================

class DB_BitCache : public ::google::protobuf::Message {
 public:
  DB_BitCache();
  virtual ~DB_BitCache();

  DB_BitCache(const DB_BitCache& from);

  inline DB_BitCache& operator=(const DB_BitCache& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_BitCache& default_instance();

  void Swap(DB_BitCache* other);

  // implements Message ----------------------------------------------

  inline DB_BitCache* New() const { return New(NULL); }

  DB_BitCache* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_BitCache& from);
  void MergeFrom(const DB_BitCache& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_BitCache* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 bit = 1;
  int bit_size() const;
  void clear_bit();
  static const int kBitFieldNumber = 1;
  ::google::protobuf::int32 bit(int index) const;
  void set_bit(int index, ::google::protobuf::int32 value);
  void add_bit(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bit() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bit();

  // @@protoc_insertion_point(class_scope:DB_BitCache)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bit_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_BitCache* default_instance_;
};
// -------------------------------------------------------------------

class TimeLimitedUidSet : public ::google::protobuf::Message {
 public:
  TimeLimitedUidSet();
  virtual ~TimeLimitedUidSet();

  TimeLimitedUidSet(const TimeLimitedUidSet& from);

  inline TimeLimitedUidSet& operator=(const TimeLimitedUidSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeLimitedUidSet& default_instance();

  void Swap(TimeLimitedUidSet* other);

  // implements Message ----------------------------------------------

  inline TimeLimitedUidSet* New() const { return New(NULL); }

  TimeLimitedUidSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeLimitedUidSet& from);
  void MergeFrom(const TimeLimitedUidSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimeLimitedUidSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 uids = 6;
  int uids_size() const;
  void clear_uids();
  static const int kUidsFieldNumber = 6;
  ::google::protobuf::int64 uids(int index) const;
  void set_uids(int index, ::google::protobuf::int64 value);
  void add_uids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      uids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_uids();

  // optional int64 checttime = 7;
  bool has_checttime() const;
  void clear_checttime();
  static const int kChecttimeFieldNumber = 7;
  ::google::protobuf::int64 checttime() const;
  void set_checttime(::google::protobuf::int64 value);

  // optional int32 uid_max = 8 [default = 0];
  bool has_uid_max() const;
  void clear_uid_max();
  static const int kUidMaxFieldNumber = 8;
  ::google::protobuf::int32 uid_max() const;
  void set_uid_max(::google::protobuf::int32 value);

  // repeated string names = 9;
  int names_size() const;
  void clear_names();
  static const int kNamesFieldNumber = 9;
  const ::std::string& names(int index) const;
  ::std::string* mutable_names(int index);
  void set_names(int index, const ::std::string& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  ::std::string* add_names();
  void add_names(const ::std::string& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // repeated string head_urls = 10;
  int head_urls_size() const;
  void clear_head_urls();
  static const int kHeadUrlsFieldNumber = 10;
  const ::std::string& head_urls(int index) const;
  ::std::string* mutable_head_urls(int index);
  void set_head_urls(int index, const ::std::string& value);
  void set_head_urls(int index, const char* value);
  void set_head_urls(int index, const char* value, size_t size);
  ::std::string* add_head_urls();
  void add_head_urls(const ::std::string& value);
  void add_head_urls(const char* value);
  void add_head_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& head_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_head_urls();

  // repeated string openids = 11;
  int openids_size() const;
  void clear_openids();
  static const int kOpenidsFieldNumber = 11;
  const ::std::string& openids(int index) const;
  ::std::string* mutable_openids(int index);
  void set_openids(int index, const ::std::string& value);
  void set_openids(int index, const char* value);
  void set_openids(int index, const char* value, size_t size);
  ::std::string* add_openids();
  void add_openids(const ::std::string& value);
  void add_openids(const char* value);
  void add_openids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& openids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_openids();

  // @@protoc_insertion_point(class_scope:TimeLimitedUidSet)
 private:
  inline void set_has_checttime();
  inline void clear_has_checttime();
  inline void set_has_uid_max();
  inline void clear_has_uid_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > uids_;
  ::google::protobuf::int64 checttime_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> head_urls_;
  ::google::protobuf::RepeatedPtrField< ::std::string> openids_;
  ::google::protobuf::int32 uid_max_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static TimeLimitedUidSet* default_instance_;
};
// -------------------------------------------------------------------

class LotteryLimited : public ::google::protobuf::Message {
 public:
  LotteryLimited();
  virtual ~LotteryLimited();

  LotteryLimited(const LotteryLimited& from);

  inline LotteryLimited& operator=(const LotteryLimited& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryLimited& default_instance();

  void Swap(LotteryLimited* other);

  // implements Message ----------------------------------------------

  inline LotteryLimited* New() const { return New(NULL); }

  LotteryLimited* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryLimited& from);
  void MergeFrom(const LotteryLimited& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LotteryLimited* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pvecounts = 1 [default = 0];
  bool has_pvecounts() const;
  void clear_pvecounts();
  static const int kPvecountsFieldNumber = 1;
  ::google::protobuf::int64 pvecounts() const;
  void set_pvecounts(::google::protobuf::int64 value);

  // optional int64 daytime = 2 [default = 0];
  bool has_daytime() const;
  void clear_daytime();
  static const int kDaytimeFieldNumber = 2;
  ::google::protobuf::int64 daytime() const;
  void set_daytime(::google::protobuf::int64 value);

  // optional int64 secondtime = 3 [default = 0];
  bool has_secondtime() const;
  void clear_secondtime();
  static const int kSecondtimeFieldNumber = 3;
  ::google::protobuf::int64 secondtime() const;
  void set_secondtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:LotteryLimited)
 private:
  inline void set_has_pvecounts();
  inline void clear_has_pvecounts();
  inline void set_has_daytime();
  inline void clear_has_daytime();
  inline void set_has_secondtime();
  inline void clear_has_secondtime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 pvecounts_;
  ::google::protobuf::int64 daytime_;
  ::google::protobuf::int64 secondtime_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static LotteryLimited* default_instance_;
};
// -------------------------------------------------------------------

class DB_MaxSizedUidList : public ::google::protobuf::Message {
 public:
  DB_MaxSizedUidList();
  virtual ~DB_MaxSizedUidList();

  DB_MaxSizedUidList(const DB_MaxSizedUidList& from);

  inline DB_MaxSizedUidList& operator=(const DB_MaxSizedUidList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_MaxSizedUidList& default_instance();

  void Swap(DB_MaxSizedUidList* other);

  // implements Message ----------------------------------------------

  inline DB_MaxSizedUidList* New() const { return New(NULL); }

  DB_MaxSizedUidList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_MaxSizedUidList& from);
  void MergeFrom(const DB_MaxSizedUidList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_MaxSizedUidList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 uid = 1;
  int uid_size() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid(int index) const;
  void set_uid(int index, ::google::protobuf::int64 value);
  void add_uid(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      uid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_uid();

  // optional int32 pos = 2 [default = 0];
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_MaxSizedUidList)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > uid_;
  ::google::protobuf::int32 pos_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_MaxSizedUidList* default_instance_;
};
// -------------------------------------------------------------------

class DB_ExpLevel : public ::google::protobuf::Message {
 public:
  DB_ExpLevel();
  virtual ~DB_ExpLevel();

  DB_ExpLevel(const DB_ExpLevel& from);

  inline DB_ExpLevel& operator=(const DB_ExpLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_ExpLevel& default_instance();

  void Swap(DB_ExpLevel* other);

  // implements Message ----------------------------------------------

  inline DB_ExpLevel* New() const { return New(NULL); }

  DB_ExpLevel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_ExpLevel& from);
  void MergeFrom(const DB_ExpLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_ExpLevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lvl = 1 [default = 0];
  bool has_lvl() const;
  void clear_lvl();
  static const int kLvlFieldNumber = 1;
  ::google::protobuf::int32 lvl() const;
  void set_lvl(::google::protobuf::int32 value);

  // optional int32 exp = 2 [default = 0];
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 2;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // optional int32 exp_total = 3 [default = 0];
  bool has_exp_total() const;
  void clear_exp_total();
  static const int kExpTotalFieldNumber = 3;
  ::google::protobuf::int32 exp_total() const;
  void set_exp_total(::google::protobuf::int32 value);

  // optional int32 exp_next = 4 [default = 0];
  bool has_exp_next() const;
  void clear_exp_next();
  static const int kExpNextFieldNumber = 4;
  ::google::protobuf::int32 exp_next() const;
  void set_exp_next(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_ExpLevel)
 private:
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_exp_total();
  inline void clear_has_exp_total();
  inline void set_has_exp_next();
  inline void clear_has_exp_next();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 lvl_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 exp_total_;
  ::google::protobuf::int32 exp_next_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_ExpLevel* default_instance_;
};
// -------------------------------------------------------------------

class DB_DailyCounter : public ::google::protobuf::Message {
 public:
  DB_DailyCounter();
  virtual ~DB_DailyCounter();

  DB_DailyCounter(const DB_DailyCounter& from);

  inline DB_DailyCounter& operator=(const DB_DailyCounter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_DailyCounter& default_instance();

  void Swap(DB_DailyCounter* other);

  // implements Message ----------------------------------------------

  inline DB_DailyCounter* New() const { return New(NULL); }

  DB_DailyCounter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_DailyCounter& from);
  void MergeFrom(const DB_DailyCounter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_DailyCounter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 num_set = 1;
  int num_set_size() const;
  void clear_num_set();
  static const int kNumSetFieldNumber = 1;
  ::google::protobuf::int32 num_set(int index) const;
  void set_num_set(int index, ::google::protobuf::int32 value);
  void add_num_set(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      num_set() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_num_set();

  // repeated string name_set = 2;
  int name_set_size() const;
  void clear_name_set();
  static const int kNameSetFieldNumber = 2;
  const ::std::string& name_set(int index) const;
  ::std::string* mutable_name_set(int index);
  void set_name_set(int index, const ::std::string& value);
  void set_name_set(int index, const char* value);
  void set_name_set(int index, const char* value, size_t size);
  ::std::string* add_name_set();
  void add_name_set(const ::std::string& value);
  void add_name_set(const char* value);
  void add_name_set(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_set() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_set();

  // optional int64 day = 3;
  bool has_day() const;
  void clear_day();
  static const int kDayFieldNumber = 3;
  ::google::protobuf::int64 day() const;
  void set_day(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DB_DailyCounter)
 private:
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > num_set_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_set_;
  ::google::protobuf::int64 day_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_DailyCounter* default_instance_;
};
// -------------------------------------------------------------------

class DB_VersionCounter : public ::google::protobuf::Message {
 public:
  DB_VersionCounter();
  virtual ~DB_VersionCounter();

  DB_VersionCounter(const DB_VersionCounter& from);

  inline DB_VersionCounter& operator=(const DB_VersionCounter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_VersionCounter& default_instance();

  void Swap(DB_VersionCounter* other);

  // implements Message ----------------------------------------------

  inline DB_VersionCounter* New() const { return New(NULL); }

  DB_VersionCounter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_VersionCounter& from);
  void MergeFrom(const DB_VersionCounter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_VersionCounter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 num_set = 1;
  int num_set_size() const;
  void clear_num_set();
  static const int kNumSetFieldNumber = 1;
  ::google::protobuf::int32 num_set(int index) const;
  void set_num_set(int index, ::google::protobuf::int32 value);
  void add_num_set(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      num_set() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_num_set();

  // repeated string name_set = 2;
  int name_set_size() const;
  void clear_name_set();
  static const int kNameSetFieldNumber = 2;
  const ::std::string& name_set(int index) const;
  ::std::string* mutable_name_set(int index);
  void set_name_set(int index, const ::std::string& value);
  void set_name_set(int index, const char* value);
  void set_name_set(int index, const char* value, size_t size);
  ::std::string* add_name_set();
  void add_name_set(const ::std::string& value);
  void add_name_set(const char* value);
  void add_name_set(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_set() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_set();

  // repeated int32 ver_set = 3;
  int ver_set_size() const;
  void clear_ver_set();
  static const int kVerSetFieldNumber = 3;
  ::google::protobuf::int32 ver_set(int index) const;
  void set_ver_set(int index, ::google::protobuf::int32 value);
  void add_ver_set(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ver_set() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ver_set();

  // @@protoc_insertion_point(class_scope:DB_VersionCounter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > num_set_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_set_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ver_set_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_VersionCounter* default_instance_;
};
// -------------------------------------------------------------------

class DB_KingOfStar : public ::google::protobuf::Message {
 public:
  DB_KingOfStar();
  virtual ~DB_KingOfStar();

  DB_KingOfStar(const DB_KingOfStar& from);

  inline DB_KingOfStar& operator=(const DB_KingOfStar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_KingOfStar& default_instance();

  void Swap(DB_KingOfStar* other);

  // implements Message ----------------------------------------------

  inline DB_KingOfStar* New() const { return New(NULL); }

  DB_KingOfStar* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_KingOfStar& from);
  void MergeFrom(const DB_KingOfStar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_KingOfStar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 total_value = 1 [default = 0];
  bool has_total_value() const;
  void clear_total_value();
  static const int kTotalValueFieldNumber = 1;
  ::google::protobuf::int32 total_value() const;
  void set_total_value(::google::protobuf::int32 value);

  // optional int32 star_value = 2 [default = 0];
  bool has_star_value() const;
  void clear_star_value();
  static const int kStarValueFieldNumber = 2;
  ::google::protobuf::int32 star_value() const;
  void set_star_value(::google::protobuf::int32 value);

  // optional int32 score_value = 3 [default = 0];
  bool has_score_value() const;
  void clear_score_value();
  static const int kScoreValueFieldNumber = 3;
  ::google::protobuf::int32 score_value() const;
  void set_score_value(::google::protobuf::int32 value);

  // optional int32 index = 4 [default = 0];
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 4;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional int32 now_playing = 5 [default = 0];
  bool has_now_playing() const;
  void clear_now_playing();
  static const int kNowPlayingFieldNumber = 5;
  ::google::protobuf::int32 now_playing() const;
  void set_now_playing(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_KingOfStar)
 private:
  inline void set_has_total_value();
  inline void clear_has_total_value();
  inline void set_has_star_value();
  inline void clear_has_star_value();
  inline void set_has_score_value();
  inline void clear_has_score_value();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_now_playing();
  inline void clear_has_now_playing();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 total_value_;
  ::google::protobuf::int32 star_value_;
  ::google::protobuf::int32 score_value_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 now_playing_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_KingOfStar* default_instance_;
};
// -------------------------------------------------------------------

class DB_ItemOnMap : public ::google::protobuf::Message {
 public:
  DB_ItemOnMap();
  virtual ~DB_ItemOnMap();

  DB_ItemOnMap(const DB_ItemOnMap& from);

  inline DB_ItemOnMap& operator=(const DB_ItemOnMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_ItemOnMap& default_instance();

  void Swap(DB_ItemOnMap* other);

  // implements Message ----------------------------------------------

  inline DB_ItemOnMap* New() const { return New(NULL); }

  DB_ItemOnMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_ItemOnMap& from);
  void MergeFrom(const DB_ItemOnMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_ItemOnMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 typeid = 2 [default = -1];
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 2;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // optional int32 posx = 3;
  bool has_posx() const;
  void clear_posx();
  static const int kPosxFieldNumber = 3;
  ::google::protobuf::int32 posx() const;
  void set_posx(::google::protobuf::int32 value);

  // optional int32 posy = 4;
  bool has_posy() const;
  void clear_posy();
  static const int kPosyFieldNumber = 4;
  ::google::protobuf::int32 posy() const;
  void set_posy(::google::protobuf::int32 value);

  // optional int32 direction = 5;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 5;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_ItemOnMap)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_typeid_();
  inline void clear_has_typeid_();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_direction();
  inline void clear_has_direction();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 direction_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_ItemOnMap* default_instance_;
};
// -------------------------------------------------------------------

class DB_Map : public ::google::protobuf::Message {
 public:
  DB_Map();
  virtual ~DB_Map();

  DB_Map(const DB_Map& from);

  inline DB_Map& operator=(const DB_Map& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Map& default_instance();

  void Swap(DB_Map* other);

  // implements Message ----------------------------------------------

  inline DB_Map* New() const { return New(NULL); }

  DB_Map* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Map& from);
  void MergeFrom(const DB_Map& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_Map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DB_ItemOnMap GroundList = 1;
  int groundlist_size() const;
  void clear_groundlist();
  static const int kGroundListFieldNumber = 1;
  const ::DB_ItemOnMap& groundlist(int index) const;
  ::DB_ItemOnMap* mutable_groundlist(int index);
  ::DB_ItemOnMap* add_groundlist();
  const ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap >&
      groundlist() const;
  ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap >*
      mutable_groundlist();

  // repeated .DB_ItemOnMap WallList = 2;
  int walllist_size() const;
  void clear_walllist();
  static const int kWallListFieldNumber = 2;
  const ::DB_ItemOnMap& walllist(int index) const;
  ::DB_ItemOnMap* mutable_walllist(int index);
  ::DB_ItemOnMap* add_walllist();
  const ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap >&
      walllist() const;
  ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap >*
      mutable_walllist();

  // optional int32 alloc_id = 3 [default = 0];
  bool has_alloc_id() const;
  void clear_alloc_id();
  static const int kAllocIdFieldNumber = 3;
  ::google::protobuf::int32 alloc_id() const;
  void set_alloc_id(::google::protobuf::int32 value);

  // optional int32 back_id = 4 [default = 0];
  bool has_back_id() const;
  void clear_back_id();
  static const int kBackIdFieldNumber = 4;
  ::google::protobuf::int32 back_id() const;
  void set_back_id(::google::protobuf::int32 value);

  // optional int32 wall_id = 5 [default = 5006];
  bool has_wall_id() const;
  void clear_wall_id();
  static const int kWallIdFieldNumber = 5;
  ::google::protobuf::int32 wall_id() const;
  void set_wall_id(::google::protobuf::int32 value);

  // optional int32 floor_id = 6 [default = 5003];
  bool has_floor_id() const;
  void clear_floor_id();
  static const int kFloorIdFieldNumber = 6;
  ::google::protobuf::int32 floor_id() const;
  void set_floor_id(::google::protobuf::int32 value);

  // optional int64 reward_time = 7 [default = 0];
  bool has_reward_time() const;
  void clear_reward_time();
  static const int kRewardTimeFieldNumber = 7;
  ::google::protobuf::int64 reward_time() const;
  void set_reward_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DB_Map)
 private:
  inline void set_has_alloc_id();
  inline void clear_has_alloc_id();
  inline void set_has_back_id();
  inline void clear_has_back_id();
  inline void set_has_wall_id();
  inline void clear_has_wall_id();
  inline void set_has_floor_id();
  inline void clear_has_floor_id();
  inline void set_has_reward_time();
  inline void clear_has_reward_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap > groundlist_;
  ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap > walllist_;
  ::google::protobuf::int32 alloc_id_;
  ::google::protobuf::int32 back_id_;
  ::google::protobuf::int32 wall_id_;
  ::google::protobuf::int32 floor_id_;
  ::google::protobuf::int64 reward_time_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_Map* default_instance_;
};
// -------------------------------------------------------------------

class DB_Task : public ::google::protobuf::Message {
 public:
  DB_Task();
  virtual ~DB_Task();

  DB_Task(const DB_Task& from);

  inline DB_Task& operator=(const DB_Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Task& default_instance();

  void Swap(DB_Task* other);

  // implements Message ----------------------------------------------

  inline DB_Task* New() const { return New(NULL); }

  DB_Task* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Task& from);
  void MergeFrom(const DB_Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 taskID = 1;
  bool has_taskid() const;
  void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  ::google::protobuf::int32 taskid() const;
  void set_taskid(::google::protobuf::int32 value);

  // optional int32 taskStep = 2;
  bool has_taskstep() const;
  void clear_taskstep();
  static const int kTaskStepFieldNumber = 2;
  ::google::protobuf::int32 taskstep() const;
  void set_taskstep(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_Task)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_taskstep();
  inline void clear_has_taskstep();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 taskid_;
  ::google::protobuf::int32 taskstep_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_Task* default_instance_;
};
// -------------------------------------------------------------------

class DB_TaskList : public ::google::protobuf::Message {
 public:
  DB_TaskList();
  virtual ~DB_TaskList();

  DB_TaskList(const DB_TaskList& from);

  inline DB_TaskList& operator=(const DB_TaskList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_TaskList& default_instance();

  void Swap(DB_TaskList* other);

  // implements Message ----------------------------------------------

  inline DB_TaskList* New() const { return New(NULL); }

  DB_TaskList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_TaskList& from);
  void MergeFrom(const DB_TaskList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_TaskList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DB_Task task = 1;
  int task_size() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  const ::DB_Task& task(int index) const;
  ::DB_Task* mutable_task(int index);
  ::DB_Task* add_task();
  const ::google::protobuf::RepeatedPtrField< ::DB_Task >&
      task() const;
  ::google::protobuf::RepeatedPtrField< ::DB_Task >*
      mutable_task();

  // @@protoc_insertion_point(class_scope:DB_TaskList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DB_Task > task_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_TaskList* default_instance_;
};
// -------------------------------------------------------------------

class DB_TaskStateList : public ::google::protobuf::Message {
 public:
  DB_TaskStateList();
  virtual ~DB_TaskStateList();

  DB_TaskStateList(const DB_TaskStateList& from);

  inline DB_TaskStateList& operator=(const DB_TaskStateList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_TaskStateList& default_instance();

  void Swap(DB_TaskStateList* other);

  // implements Message ----------------------------------------------

  inline DB_TaskStateList* New() const { return New(NULL); }

  DB_TaskStateList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_TaskStateList& from);
  void MergeFrom(const DB_TaskStateList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_TaskStateList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 taskstate = 1;
  int taskstate_size() const;
  void clear_taskstate();
  static const int kTaskstateFieldNumber = 1;
  ::google::protobuf::int64 taskstate(int index) const;
  void set_taskstate(int index, ::google::protobuf::int64 value);
  void add_taskstate(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      taskstate() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_taskstate();

  // @@protoc_insertion_point(class_scope:DB_TaskStateList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > taskstate_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_TaskStateList* default_instance_;
};
// -------------------------------------------------------------------

class DB_BanChat : public ::google::protobuf::Message {
 public:
  DB_BanChat();
  virtual ~DB_BanChat();

  DB_BanChat(const DB_BanChat& from);

  inline DB_BanChat& operator=(const DB_BanChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_BanChat& default_instance();

  void Swap(DB_BanChat* other);

  // implements Message ----------------------------------------------

  inline DB_BanChat* New() const { return New(NULL); }

  DB_BanChat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_BanChat& from);
  void MergeFrom(const DB_BanChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_BanChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool banchat = 1 [default = false];
  bool has_banchat() const;
  void clear_banchat();
  static const int kBanchatFieldNumber = 1;
  bool banchat() const;
  void set_banchat(bool value);

  // optional int64 time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // optional int64 totaltime = 3 [default = 0];
  bool has_totaltime() const;
  void clear_totaltime();
  static const int kTotaltimeFieldNumber = 3;
  ::google::protobuf::int64 totaltime() const;
  void set_totaltime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DB_BanChat)
 private:
  inline void set_has_banchat();
  inline void clear_has_banchat();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_totaltime();
  inline void clear_has_totaltime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 totaltime_;
  bool banchat_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_BanChat* default_instance_;
};
// -------------------------------------------------------------------

class DB_BanLogin : public ::google::protobuf::Message {
 public:
  DB_BanLogin();
  virtual ~DB_BanLogin();

  DB_BanLogin(const DB_BanLogin& from);

  inline DB_BanLogin& operator=(const DB_BanLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_BanLogin& default_instance();

  void Swap(DB_BanLogin* other);

  // implements Message ----------------------------------------------

  inline DB_BanLogin* New() const { return New(NULL); }

  DB_BanLogin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_BanLogin& from);
  void MergeFrom(const DB_BanLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_BanLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool banlogin = 1 [default = false];
  bool has_banlogin() const;
  void clear_banlogin();
  static const int kBanloginFieldNumber = 1;
  bool banlogin() const;
  void set_banlogin(bool value);

  // optional int64 time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // optional int64 totaltime = 3 [default = 0];
  bool has_totaltime() const;
  void clear_totaltime();
  static const int kTotaltimeFieldNumber = 3;
  ::google::protobuf::int64 totaltime() const;
  void set_totaltime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DB_BanLogin)
 private:
  inline void set_has_banlogin();
  inline void clear_has_banlogin();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_totaltime();
  inline void clear_has_totaltime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 totaltime_;
  bool banlogin_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_BanLogin* default_instance_;
};
// -------------------------------------------------------------------

class DB_Item : public ::google::protobuf::Message {
 public:
  DB_Item();
  virtual ~DB_Item();

  DB_Item(const DB_Item& from);

  inline DB_Item& operator=(const DB_Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Item& default_instance();

  void Swap(DB_Item* other);

  // implements Message ----------------------------------------------

  inline DB_Item* New() const { return New(NULL); }

  DB_Item* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Item& from);
  void MergeFrom(const DB_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 typeid = 1;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 1;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // optional int32 num = 2 [default = 0];
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional int32 unlockvalue = 3 [default = 0];
  bool has_unlockvalue() const;
  void clear_unlockvalue();
  static const int kUnlockvalueFieldNumber = 3;
  ::google::protobuf::int32 unlockvalue() const;
  void set_unlockvalue(::google::protobuf::int32 value);

  // optional bool unlockSended = 4 [default = false];
  bool has_unlocksended() const;
  void clear_unlocksended();
  static const int kUnlockSendedFieldNumber = 4;
  bool unlocksended() const;
  void set_unlocksended(bool value);

  // @@protoc_insertion_point(class_scope:DB_Item)
 private:
  inline void set_has_typeid_();
  inline void clear_has_typeid_();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_unlockvalue();
  inline void clear_has_unlockvalue();
  inline void set_has_unlocksended();
  inline void clear_has_unlocksended();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 unlockvalue_;
  bool unlocksended_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_Item* default_instance_;
};
// -------------------------------------------------------------------

class DB_Bag : public ::google::protobuf::Message {
 public:
  DB_Bag();
  virtual ~DB_Bag();

  DB_Bag(const DB_Bag& from);

  inline DB_Bag& operator=(const DB_Bag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Bag& default_instance();

  void Swap(DB_Bag* other);

  // implements Message ----------------------------------------------

  inline DB_Bag* New() const { return New(NULL); }

  DB_Bag* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Bag& from);
  void MergeFrom(const DB_Bag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_Bag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DB_Item items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::DB_Item& items(int index) const;
  ::DB_Item* mutable_items(int index);
  ::DB_Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::DB_Item >&
      items() const;
  ::google::protobuf::RepeatedPtrField< ::DB_Item >*
      mutable_items();

  // optional int64 money = 3 [default = 0];
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 3;
  ::google::protobuf::int64 money() const;
  void set_money(::google::protobuf::int64 value);

  // optional int32 maxspace = 4 [default = 0];
  bool has_maxspace() const;
  void clear_maxspace();
  static const int kMaxspaceFieldNumber = 4;
  ::google::protobuf::int32 maxspace() const;
  void set_maxspace(::google::protobuf::int32 value);

  // optional int64 cash = 5 [default = 0];
  bool has_cash() const;
  void clear_cash();
  static const int kCashFieldNumber = 5;
  ::google::protobuf::int64 cash() const;
  void set_cash(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DB_Bag)
 private:
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_maxspace();
  inline void clear_has_maxspace();
  inline void set_has_cash();
  inline void clear_has_cash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DB_Item > items_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int64 cash_;
  ::google::protobuf::int32 maxspace_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_Bag* default_instance_;
};
// -------------------------------------------------------------------

class DB_ActionRecord : public ::google::protobuf::Message {
 public:
  DB_ActionRecord();
  virtual ~DB_ActionRecord();

  DB_ActionRecord(const DB_ActionRecord& from);

  inline DB_ActionRecord& operator=(const DB_ActionRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_ActionRecord& default_instance();

  void Swap(DB_ActionRecord* other);

  // implements Message ----------------------------------------------

  inline DB_ActionRecord* New() const { return New(NULL); }

  DB_ActionRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_ActionRecord& from);
  void MergeFrom(const DB_ActionRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_ActionRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1 [default = -1];
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // optional int64 time = 2 [default = 0];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // optional string name = 3 [default = ""];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 actiontype = 4 [default = 0];
  bool has_actiontype() const;
  void clear_actiontype();
  static const int kActiontypeFieldNumber = 4;
  ::google::protobuf::int32 actiontype() const;
  void set_actiontype(::google::protobuf::int32 value);

  // optional int32 gold = 5 [default = 0];
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 5;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // optional int32 item_typeid = 6 [default = 0];
  bool has_item_typeid() const;
  void clear_item_typeid();
  static const int kItemTypeidFieldNumber = 6;
  ::google::protobuf::int32 item_typeid() const;
  void set_item_typeid(::google::protobuf::int32 value);

  // optional bool dealed = 7 [default = false];
  bool has_dealed() const;
  void clear_dealed();
  static const int kDealedFieldNumber = 7;
  bool dealed() const;
  void set_dealed(bool value);

  // optional int32 count = 8 [default = 1];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 8;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional string id = 9 [default = ""];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 9;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string head_url = 10 [default = ""];
  bool has_head_url() const;
  void clear_head_url();
  static const int kHeadUrlFieldNumber = 10;
  const ::std::string& head_url() const;
  void set_head_url(const ::std::string& value);
  void set_head_url(const char* value);
  void set_head_url(const char* value, size_t size);
  ::std::string* mutable_head_url();
  ::std::string* release_head_url();
  void set_allocated_head_url(::std::string* head_url);

  // repeated int32 item_id = 11;
  int item_id_size() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 11;
  ::google::protobuf::int32 item_id(int index) const;
  void set_item_id(int index, ::google::protobuf::int32 value);
  void add_item_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated int32 item_num = 12;
  int item_num_size() const;
  void clear_item_num();
  static const int kItemNumFieldNumber = 12;
  ::google::protobuf::int32 item_num(int index) const;
  void set_item_num(int index, ::google::protobuf::int32 value);
  void add_item_num(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_num();

  // optional string context = 13 [default = ""];
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 13;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // optional int32 guest_add = 14 [default = 0];
  bool has_guest_add() const;
  void clear_guest_add();
  static const int kGuestAddFieldNumber = 14;
  ::google::protobuf::int32 guest_add() const;
  void set_guest_add(::google::protobuf::int32 value);

  // optional string openid = 15 [default = ""];
  bool has_openid() const;
  void clear_openid();
  static const int kOpenidFieldNumber = 15;
  const ::std::string& openid() const;
  void set_openid(const ::std::string& value);
  void set_openid(const char* value);
  void set_openid(const char* value, size_t size);
  ::std::string* mutable_openid();
  ::std::string* release_openid();
  void set_allocated_openid(::std::string* openid);

  // optional int32 value_a = 16 [default = -1];
  bool has_value_a() const;
  void clear_value_a();
  static const int kValueAFieldNumber = 16;
  ::google::protobuf::int32 value_a() const;
  void set_value_a(::google::protobuf::int32 value);

  // optional int32 value_b = 17 [default = -1];
  bool has_value_b() const;
  void clear_value_b();
  static const int kValueBFieldNumber = 17;
  ::google::protobuf::int32 value_b() const;
  void set_value_b(::google::protobuf::int32 value);

  // optional int64 time_sec = 18 [default = 0];
  bool has_time_sec() const;
  void clear_time_sec();
  static const int kTimeSecFieldNumber = 18;
  ::google::protobuf::int64 time_sec() const;
  void set_time_sec(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DB_ActionRecord)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_actiontype();
  inline void clear_has_actiontype();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_item_typeid();
  inline void clear_has_item_typeid();
  inline void set_has_dealed();
  inline void clear_has_dealed();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_head_url();
  inline void clear_has_head_url();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_guest_add();
  inline void clear_has_guest_add();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_value_a();
  inline void clear_has_value_a();
  inline void set_has_value_b();
  inline void clear_has_value_b();
  inline void set_has_time_sec();
  inline void clear_has_time_sec();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 actiontype_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 item_typeid_;
  bool dealed_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr head_url_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 guest_add_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_num_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::internal::ArenaStringPtr openid_;
  ::google::protobuf::int32 value_a_;
  ::google::protobuf::int32 value_b_;
  ::google::protobuf::int64 time_sec_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_ActionRecord* default_instance_;
};
// -------------------------------------------------------------------

class DB_FakeFriendActionSet : public ::google::protobuf::Message {
 public:
  DB_FakeFriendActionSet();
  virtual ~DB_FakeFriendActionSet();

  DB_FakeFriendActionSet(const DB_FakeFriendActionSet& from);

  inline DB_FakeFriendActionSet& operator=(const DB_FakeFriendActionSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_FakeFriendActionSet& default_instance();

  void Swap(DB_FakeFriendActionSet* other);

  // implements Message ----------------------------------------------

  inline DB_FakeFriendActionSet* New() const { return New(NULL); }

  DB_FakeFriendActionSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_FakeFriendActionSet& from);
  void MergeFrom(const DB_FakeFriendActionSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_FakeFriendActionSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 fake_action_uids = 1;
  int fake_action_uids_size() const;
  void clear_fake_action_uids();
  static const int kFakeActionUidsFieldNumber = 1;
  ::google::protobuf::int64 fake_action_uids(int index) const;
  void set_fake_action_uids(int index, ::google::protobuf::int64 value);
  void add_fake_action_uids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      fake_action_uids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_fake_action_uids();

  // repeated int32 fake_action_counts = 2;
  int fake_action_counts_size() const;
  void clear_fake_action_counts();
  static const int kFakeActionCountsFieldNumber = 2;
  ::google::protobuf::int32 fake_action_counts(int index) const;
  void set_fake_action_counts(int index, ::google::protobuf::int32 value);
  void add_fake_action_counts(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fake_action_counts() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fake_action_counts();

  // optional int32 fack_action_totle_count = 3 [default = 0];
  bool has_fack_action_totle_count() const;
  void clear_fack_action_totle_count();
  static const int kFackActionTotleCountFieldNumber = 3;
  ::google::protobuf::int32 fack_action_totle_count() const;
  void set_fack_action_totle_count(::google::protobuf::int32 value);

  // optional int64 last_update_time = 4 [default = 0];
  bool has_last_update_time() const;
  void clear_last_update_time();
  static const int kLastUpdateTimeFieldNumber = 4;
  ::google::protobuf::int64 last_update_time() const;
  void set_last_update_time(::google::protobuf::int64 value);

  // repeated bool fake_action_picked = 5;
  int fake_action_picked_size() const;
  void clear_fake_action_picked();
  static const int kFakeActionPickedFieldNumber = 5;
  bool fake_action_picked(int index) const;
  void set_fake_action_picked(int index, bool value);
  void add_fake_action_picked(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      fake_action_picked() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_fake_action_picked();

  // optional int32 fake_reward_guest = 6 [default = 0];
  bool has_fake_reward_guest() const;
  void clear_fake_reward_guest();
  static const int kFakeRewardGuestFieldNumber = 6;
  ::google::protobuf::int32 fake_reward_guest() const;
  void set_fake_reward_guest(::google::protobuf::int32 value);

  // optional int32 fake_reward_gold = 7 [default = 0];
  bool has_fake_reward_gold() const;
  void clear_fake_reward_gold();
  static const int kFakeRewardGoldFieldNumber = 7;
  ::google::protobuf::int32 fake_reward_gold() const;
  void set_fake_reward_gold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_FakeFriendActionSet)
 private:
  inline void set_has_fack_action_totle_count();
  inline void clear_has_fack_action_totle_count();
  inline void set_has_last_update_time();
  inline void clear_has_last_update_time();
  inline void set_has_fake_reward_guest();
  inline void clear_has_fake_reward_guest();
  inline void set_has_fake_reward_gold();
  inline void clear_has_fake_reward_gold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > fake_action_uids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fake_action_counts_;
  ::google::protobuf::int64 last_update_time_;
  ::google::protobuf::int32 fack_action_totle_count_;
  ::google::protobuf::int32 fake_reward_guest_;
  ::google::protobuf::RepeatedField< bool > fake_action_picked_;
  ::google::protobuf::int32 fake_reward_gold_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_FakeFriendActionSet* default_instance_;
};
// -------------------------------------------------------------------

class DB_FreindFirstVist : public ::google::protobuf::Message {
 public:
  DB_FreindFirstVist();
  virtual ~DB_FreindFirstVist();

  DB_FreindFirstVist(const DB_FreindFirstVist& from);

  inline DB_FreindFirstVist& operator=(const DB_FreindFirstVist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_FreindFirstVist& default_instance();

  void Swap(DB_FreindFirstVist* other);

  // implements Message ----------------------------------------------

  inline DB_FreindFirstVist* New() const { return New(NULL); }

  DB_FreindFirstVist* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_FreindFirstVist& from);
  void MergeFrom(const DB_FreindFirstVist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_FreindFirstVist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 uids = 1;
  int uids_size() const;
  void clear_uids();
  static const int kUidsFieldNumber = 1;
  ::google::protobuf::int64 uids(int index) const;
  void set_uids(int index, ::google::protobuf::int64 value);
  void add_uids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      uids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_uids();

  // @@protoc_insertion_point(class_scope:DB_FreindFirstVist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > uids_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_FreindFirstVist* default_instance_;
};
// -------------------------------------------------------------------

class DB_Option : public ::google::protobuf::Message {
 public:
  DB_Option();
  virtual ~DB_Option();

  DB_Option(const DB_Option& from);

  inline DB_Option& operator=(const DB_Option& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Option& default_instance();

  void Swap(DB_Option* other);

  // implements Message ----------------------------------------------

  inline DB_Option* New() const { return New(NULL); }

  DB_Option* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Option& from);
  void MergeFrom(const DB_Option& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_Option* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool high_quality = 1 [default = true];
  bool has_high_quality() const;
  void clear_high_quality();
  static const int kHighQualityFieldNumber = 1;
  bool high_quality() const;
  void set_high_quality(bool value);

  // optional bool music = 2 [default = true];
  bool has_music() const;
  void clear_music();
  static const int kMusicFieldNumber = 2;
  bool music() const;
  void set_music(bool value);

  // optional bool sound = 3 [default = true];
  bool has_sound() const;
  void clear_sound();
  static const int kSoundFieldNumber = 3;
  bool sound() const;
  void set_sound(bool value);

  // @@protoc_insertion_point(class_scope:DB_Option)
 private:
  inline void set_has_high_quality();
  inline void clear_has_high_quality();
  inline void set_has_music();
  inline void clear_has_music();
  inline void set_has_sound();
  inline void clear_has_sound();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool high_quality_;
  bool music_;
  bool sound_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_Option* default_instance_;
};
// -------------------------------------------------------------------

class DB_WebBuyDetail : public ::google::protobuf::Message {
 public:
  DB_WebBuyDetail();
  virtual ~DB_WebBuyDetail();

  DB_WebBuyDetail(const DB_WebBuyDetail& from);

  inline DB_WebBuyDetail& operator=(const DB_WebBuyDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_WebBuyDetail& default_instance();

  void Swap(DB_WebBuyDetail* other);

  // implements Message ----------------------------------------------

  inline DB_WebBuyDetail* New() const { return New(NULL); }

  DB_WebBuyDetail* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_WebBuyDetail& from);
  void MergeFrom(const DB_WebBuyDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_WebBuyDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 shopid = 1;
  bool has_shopid() const;
  void clear_shopid();
  static const int kShopidFieldNumber = 1;
  ::google::protobuf::int64 shopid() const;
  void set_shopid(::google::protobuf::int64 value);

  // required int32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // required int32 indate = 3;
  bool has_indate() const;
  void clear_indate();
  static const int kIndateFieldNumber = 3;
  ::google::protobuf::int32 indate() const;
  void set_indate(::google::protobuf::int32 value);

  // required int32 price = 4;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // optional int32 posx = 5;
  bool has_posx() const;
  void clear_posx();
  static const int kPosxFieldNumber = 5;
  ::google::protobuf::int32 posx() const;
  void set_posx(::google::protobuf::int32 value);

  // optional int32 posy = 6;
  bool has_posy() const;
  void clear_posy();
  static const int kPosyFieldNumber = 6;
  ::google::protobuf::int32 posy() const;
  void set_posy(::google::protobuf::int32 value);

  // optional int32 direction = 7;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 7;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_WebBuyDetail)
 private:
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_indate();
  inline void clear_has_indate();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_direction();
  inline void clear_has_direction();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 shopid_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 indate_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 direction_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_WebBuyDetail* default_instance_;
};
// -------------------------------------------------------------------

class DB_WebBuyRecord : public ::google::protobuf::Message {
 public:
  DB_WebBuyRecord();
  virtual ~DB_WebBuyRecord();

  DB_WebBuyRecord(const DB_WebBuyRecord& from);

  inline DB_WebBuyRecord& operator=(const DB_WebBuyRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_WebBuyRecord& default_instance();

  void Swap(DB_WebBuyRecord* other);

  // implements Message ----------------------------------------------

  inline DB_WebBuyRecord* New() const { return New(NULL); }

  DB_WebBuyRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_WebBuyRecord& from);
  void MergeFrom(const DB_WebBuyRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_WebBuyRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DB_WebBuyDetail details = 2;
  int details_size() const;
  void clear_details();
  static const int kDetailsFieldNumber = 2;
  const ::DB_WebBuyDetail& details(int index) const;
  ::DB_WebBuyDetail* mutable_details(int index);
  ::DB_WebBuyDetail* add_details();
  const ::google::protobuf::RepeatedPtrField< ::DB_WebBuyDetail >&
      details() const;
  ::google::protobuf::RepeatedPtrField< ::DB_WebBuyDetail >*
      mutable_details();

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional int64 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DB_WebBuyRecord)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DB_WebBuyDetail > details_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int64 time_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_WebBuyRecord* default_instance_;
};
// -------------------------------------------------------------------

class DB_LimitRecord : public ::google::protobuf::Message {
 public:
  DB_LimitRecord();
  virtual ~DB_LimitRecord();

  DB_LimitRecord(const DB_LimitRecord& from);

  inline DB_LimitRecord& operator=(const DB_LimitRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_LimitRecord& default_instance();

  void Swap(DB_LimitRecord* other);

  // implements Message ----------------------------------------------

  inline DB_LimitRecord* New() const { return New(NULL); }

  DB_LimitRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_LimitRecord& from);
  void MergeFrom(const DB_LimitRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_LimitRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type_id = 1 [default = 0];
  bool has_type_id() const;
  void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  ::google::protobuf::int32 type_id() const;
  void set_type_id(::google::protobuf::int32 value);

  // optional int32 num = 2 [default = 0];
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional int32 limittype = 3 [default = 0];
  bool has_limittype() const;
  void clear_limittype();
  static const int kLimittypeFieldNumber = 3;
  ::google::protobuf::int32 limittype() const;
  void set_limittype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_LimitRecord)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_limittype();
  inline void clear_has_limittype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_id_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 limittype_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_LimitRecord* default_instance_;
};
// -------------------------------------------------------------------

class DB_Limit : public ::google::protobuf::Message {
 public:
  DB_Limit();
  virtual ~DB_Limit();

  DB_Limit(const DB_Limit& from);

  inline DB_Limit& operator=(const DB_Limit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Limit& default_instance();

  void Swap(DB_Limit* other);

  // implements Message ----------------------------------------------

  inline DB_Limit* New() const { return New(NULL); }

  DB_Limit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Limit& from);
  void MergeFrom(const DB_Limit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_Limit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 update = 1 [default = 0];
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 1;
  ::google::protobuf::int64 update() const;
  void set_update(::google::protobuf::int64 value);

  // repeated .DB_LimitRecord items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  const ::DB_LimitRecord& items(int index) const;
  ::DB_LimitRecord* mutable_items(int index);
  ::DB_LimitRecord* add_items();
  const ::google::protobuf::RepeatedPtrField< ::DB_LimitRecord >&
      items() const;
  ::google::protobuf::RepeatedPtrField< ::DB_LimitRecord >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:DB_Limit)
 private:
  inline void set_has_update();
  inline void clear_has_update();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 update_;
  ::google::protobuf::RepeatedPtrField< ::DB_LimitRecord > items_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_Limit* default_instance_;
};
// -------------------------------------------------------------------

class DB_StepWithTime : public ::google::protobuf::Message {
 public:
  DB_StepWithTime();
  virtual ~DB_StepWithTime();

  DB_StepWithTime(const DB_StepWithTime& from);

  inline DB_StepWithTime& operator=(const DB_StepWithTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_StepWithTime& default_instance();

  void Swap(DB_StepWithTime* other);

  // implements Message ----------------------------------------------

  inline DB_StepWithTime* New() const { return New(NULL); }

  DB_StepWithTime* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_StepWithTime& from);
  void MergeFrom(const DB_StepWithTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_StepWithTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 step = 3 [default = 0];
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 3;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // optional int64 update = 4 [default = 0];
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 4;
  ::google::protobuf::int64 update() const;
  void set_update(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DB_StepWithTime)
 private:
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_update();
  inline void clear_has_update();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 update_;
  ::google::protobuf::int32 step_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_StepWithTime* default_instance_;
};
// -------------------------------------------------------------------

class DB_NewFunc : public ::google::protobuf::Message {
 public:
  DB_NewFunc();
  virtual ~DB_NewFunc();

  DB_NewFunc(const DB_NewFunc& from);

  inline DB_NewFunc& operator=(const DB_NewFunc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_NewFunc& default_instance();

  void Swap(DB_NewFunc* other);

  // implements Message ----------------------------------------------

  inline DB_NewFunc* New() const { return New(NULL); }

  DB_NewFunc* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_NewFunc& from);
  void MergeFrom(const DB_NewFunc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_NewFunc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DB_BitCache system_info = 1;
  bool has_system_info() const;
  void clear_system_info();
  static const int kSystemInfoFieldNumber = 1;
  const ::DB_BitCache& system_info() const;
  ::DB_BitCache* mutable_system_info();
  ::DB_BitCache* release_system_info();
  void set_allocated_system_info(::DB_BitCache* system_info);

  // @@protoc_insertion_point(class_scope:DB_NewFunc)
 private:
  inline void set_has_system_info();
  inline void clear_has_system_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DB_BitCache* system_info_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_NewFunc* default_instance_;
};
// -------------------------------------------------------------------

class DB_CDKey : public ::google::protobuf::Message {
 public:
  DB_CDKey();
  virtual ~DB_CDKey();

  DB_CDKey(const DB_CDKey& from);

  inline DB_CDKey& operator=(const DB_CDKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_CDKey& default_instance();

  void Swap(DB_CDKey* other);

  // implements Message ----------------------------------------------

  inline DB_CDKey* New() const { return New(NULL); }

  DB_CDKey* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_CDKey& from);
  void MergeFrom(const DB_CDKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_CDKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cd_key = 1;
  bool has_cd_key() const;
  void clear_cd_key();
  static const int kCdKeyFieldNumber = 1;
  const ::std::string& cd_key() const;
  void set_cd_key(const ::std::string& value);
  void set_cd_key(const char* value);
  void set_cd_key(const char* value, size_t size);
  ::std::string* mutable_cd_key();
  ::std::string* release_cd_key();
  void set_allocated_cd_key(::std::string* cd_key);

  // optional int32 used_flag = 2;
  bool has_used_flag() const;
  void clear_used_flag();
  static const int kUsedFlagFieldNumber = 2;
  ::google::protobuf::int32 used_flag() const;
  void set_used_flag(::google::protobuf::int32 value);

  // optional int32 active_id = 3;
  bool has_active_id() const;
  void clear_active_id();
  static const int kActiveIdFieldNumber = 3;
  ::google::protobuf::int32 active_id() const;
  void set_active_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_CDKey)
 private:
  inline void set_has_cd_key();
  inline void clear_has_cd_key();
  inline void set_has_used_flag();
  inline void clear_has_used_flag();
  inline void set_has_active_id();
  inline void clear_has_active_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cd_key_;
  ::google::protobuf::int32 used_flag_;
  ::google::protobuf::int32 active_id_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_CDKey* default_instance_;
};
// -------------------------------------------------------------------

class DB_Weibo : public ::google::protobuf::Message {
 public:
  DB_Weibo();
  virtual ~DB_Weibo();

  DB_Weibo(const DB_Weibo& from);

  inline DB_Weibo& operator=(const DB_Weibo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Weibo& default_instance();

  void Swap(DB_Weibo* other);

  // implements Message ----------------------------------------------

  inline DB_Weibo* New() const { return New(NULL); }

  DB_Weibo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Weibo& from);
  void MergeFrom(const DB_Weibo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_Weibo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool listened = 1 [default = false];
  bool has_listened() const;
  void clear_listened();
  static const int kListenedFieldNumber = 1;
  bool listened() const;
  void set_listened(bool value);

  // optional bool listened_gift = 2 [default = false];
  bool has_listened_gift() const;
  void clear_listened_gift();
  static const int kListenedGiftFieldNumber = 2;
  bool listened_gift() const;
  void set_listened_gift(bool value);

  // optional bool forwarded = 3 [default = false];
  bool has_forwarded() const;
  void clear_forwarded();
  static const int kForwardedFieldNumber = 3;
  bool forwarded() const;
  void set_forwarded(bool value);

  // optional bool forwarded_gift = 4 [default = false];
  bool has_forwarded_gift() const;
  void clear_forwarded_gift();
  static const int kForwardedGiftFieldNumber = 4;
  bool forwarded_gift() const;
  void set_forwarded_gift(bool value);

  // optional bool qzone_followed = 5 [default = false];
  bool has_qzone_followed() const;
  void clear_qzone_followed();
  static const int kQzoneFollowedFieldNumber = 5;
  bool qzone_followed() const;
  void set_qzone_followed(bool value);

  // optional int64 qzone_day = 6 [default = 0];
  bool has_qzone_day() const;
  void clear_qzone_day();
  static const int kQzoneDayFieldNumber = 6;
  ::google::protobuf::int64 qzone_day() const;
  void set_qzone_day(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DB_Weibo)
 private:
  inline void set_has_listened();
  inline void clear_has_listened();
  inline void set_has_listened_gift();
  inline void clear_has_listened_gift();
  inline void set_has_forwarded();
  inline void clear_has_forwarded();
  inline void set_has_forwarded_gift();
  inline void clear_has_forwarded_gift();
  inline void set_has_qzone_followed();
  inline void clear_has_qzone_followed();
  inline void set_has_qzone_day();
  inline void clear_has_qzone_day();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool listened_;
  bool listened_gift_;
  bool forwarded_;
  bool forwarded_gift_;
  bool qzone_followed_;
  ::google::protobuf::int64 qzone_day_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_Weibo* default_instance_;
};
// -------------------------------------------------------------------

class DB_CallBackCell : public ::google::protobuf::Message {
 public:
  DB_CallBackCell();
  virtual ~DB_CallBackCell();

  DB_CallBackCell(const DB_CallBackCell& from);

  inline DB_CallBackCell& operator=(const DB_CallBackCell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_CallBackCell& default_instance();

  void Swap(DB_CallBackCell* other);

  // implements Message ----------------------------------------------

  inline DB_CallBackCell* New() const { return New(NULL); }

  DB_CallBackCell* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_CallBackCell& from);
  void MergeFrom(const DB_CallBackCell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_CallBackCell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timer = 1 [default = 0];
  bool has_timer() const;
  void clear_timer();
  static const int kTimerFieldNumber = 1;
  ::google::protobuf::int64 timer() const;
  void set_timer(::google::protobuf::int64 value);

  // repeated string openid_list = 4;
  int openid_list_size() const;
  void clear_openid_list();
  static const int kOpenidListFieldNumber = 4;
  const ::std::string& openid_list(int index) const;
  ::std::string* mutable_openid_list(int index);
  void set_openid_list(int index, const ::std::string& value);
  void set_openid_list(int index, const char* value);
  void set_openid_list(int index, const char* value, size_t size);
  ::std::string* add_openid_list();
  void add_openid_list(const ::std::string& value);
  void add_openid_list(const char* value);
  void add_openid_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& openid_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_openid_list();

  // repeated string name_list = 5;
  int name_list_size() const;
  void clear_name_list();
  static const int kNameListFieldNumber = 5;
  const ::std::string& name_list(int index) const;
  ::std::string* mutable_name_list(int index);
  void set_name_list(int index, const ::std::string& value);
  void set_name_list(int index, const char* value);
  void set_name_list(int index, const char* value, size_t size);
  ::std::string* add_name_list();
  void add_name_list(const ::std::string& value);
  void add_name_list(const char* value);
  void add_name_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_list();

  // repeated string url_list = 6;
  int url_list_size() const;
  void clear_url_list();
  static const int kUrlListFieldNumber = 6;
  const ::std::string& url_list(int index) const;
  ::std::string* mutable_url_list(int index);
  void set_url_list(int index, const ::std::string& value);
  void set_url_list(int index, const char* value);
  void set_url_list(int index, const char* value, size_t size);
  ::std::string* add_url_list();
  void add_url_list(const ::std::string& value);
  void add_url_list(const char* value);
  void add_url_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& url_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_url_list();

  // optional bool rewarded = 2 [default = false];
  bool has_rewarded() const;
  void clear_rewarded();
  static const int kRewardedFieldNumber = 2;
  bool rewarded() const;
  void set_rewarded(bool value);

  // optional int32 totallevel = 3 [default = 0];
  bool has_totallevel() const;
  void clear_totallevel();
  static const int kTotallevelFieldNumber = 3;
  ::google::protobuf::int32 totallevel() const;
  void set_totallevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_CallBackCell)
 private:
  inline void set_has_timer();
  inline void clear_has_timer();
  inline void set_has_rewarded();
  inline void clear_has_rewarded();
  inline void set_has_totallevel();
  inline void clear_has_totallevel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 timer_;
  ::google::protobuf::RepeatedPtrField< ::std::string> openid_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> url_list_;
  bool rewarded_;
  ::google::protobuf::int32 totallevel_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_CallBackCell* default_instance_;
};
// -------------------------------------------------------------------

class DB_CallBack : public ::google::protobuf::Message {
 public:
  DB_CallBack();
  virtual ~DB_CallBack();

  DB_CallBack(const DB_CallBack& from);

  inline DB_CallBack& operator=(const DB_CallBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_CallBack& default_instance();

  void Swap(DB_CallBack* other);

  // implements Message ----------------------------------------------

  inline DB_CallBack* New() const { return New(NULL); }

  DB_CallBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_CallBack& from);
  void MergeFrom(const DB_CallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_CallBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1 [default = 0];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // repeated .DB_CallBackCell cbcell = 2;
  int cbcell_size() const;
  void clear_cbcell();
  static const int kCbcellFieldNumber = 2;
  const ::DB_CallBackCell& cbcell(int index) const;
  ::DB_CallBackCell* mutable_cbcell(int index);
  ::DB_CallBackCell* add_cbcell();
  const ::google::protobuf::RepeatedPtrField< ::DB_CallBackCell >&
      cbcell() const;
  ::google::protobuf::RepeatedPtrField< ::DB_CallBackCell >*
      mutable_cbcell();

  // optional int32 cell_update_day = 3 [default = 0];
  bool has_cell_update_day() const;
  void clear_cell_update_day();
  static const int kCellUpdateDayFieldNumber = 3;
  ::google::protobuf::int32 cell_update_day() const;
  void set_cell_update_day(::google::protobuf::int32 value);

  // optional string callback_sender = 4 [default = ""];
  bool has_callback_sender() const;
  void clear_callback_sender();
  static const int kCallbackSenderFieldNumber = 4;
  const ::std::string& callback_sender() const;
  void set_callback_sender(const ::std::string& value);
  void set_callback_sender(const char* value);
  void set_callback_sender(const char* value, size_t size);
  ::std::string* mutable_callback_sender();
  ::std::string* release_callback_sender();
  void set_allocated_callback_sender(::std::string* callback_sender);

  // optional int32 reward_cnt_as_taker = 5 [default = 0];
  bool has_reward_cnt_as_taker() const;
  void clear_reward_cnt_as_taker();
  static const int kRewardCntAsTakerFieldNumber = 5;
  ::google::protobuf::int32 reward_cnt_as_taker() const;
  void set_reward_cnt_as_taker(::google::protobuf::int32 value);

  // repeated string cache_list = 7;
  int cache_list_size() const;
  void clear_cache_list();
  static const int kCacheListFieldNumber = 7;
  const ::std::string& cache_list(int index) const;
  ::std::string* mutable_cache_list(int index);
  void set_cache_list(int index, const ::std::string& value);
  void set_cache_list(int index, const char* value);
  void set_cache_list(int index, const char* value, size_t size);
  ::std::string* add_cache_list();
  void add_cache_list(const ::std::string& value);
  void add_cache_list(const char* value);
  void add_cache_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cache_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cache_list();

  // repeated string send_list = 8;
  int send_list_size() const;
  void clear_send_list();
  static const int kSendListFieldNumber = 8;
  const ::std::string& send_list(int index) const;
  ::std::string* mutable_send_list(int index);
  void set_send_list(int index, const ::std::string& value);
  void set_send_list(int index, const char* value);
  void set_send_list(int index, const char* value, size_t size);
  ::std::string* add_send_list();
  void add_send_list(const ::std::string& value);
  void add_send_list(const char* value);
  void add_send_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& send_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_send_list();

  // optional int32 cell_build_day = 9 [default = 0];
  bool has_cell_build_day() const;
  void clear_cell_build_day();
  static const int kCellBuildDayFieldNumber = 9;
  ::google::protobuf::int32 cell_build_day() const;
  void set_cell_build_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_CallBack)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_cell_update_day();
  inline void clear_has_cell_update_day();
  inline void set_has_callback_sender();
  inline void clear_has_callback_sender();
  inline void set_has_reward_cnt_as_taker();
  inline void clear_has_reward_cnt_as_taker();
  inline void set_has_cell_build_day();
  inline void clear_has_cell_build_day();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DB_CallBackCell > cbcell_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 cell_update_day_;
  ::google::protobuf::internal::ArenaStringPtr callback_sender_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cache_list_;
  ::google::protobuf::int32 reward_cnt_as_taker_;
  ::google::protobuf::int32 cell_build_day_;
  ::google::protobuf::RepeatedPtrField< ::std::string> send_list_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_CallBack* default_instance_;
};
// -------------------------------------------------------------------

class DB_FuncSwitch : public ::google::protobuf::Message {
 public:
  DB_FuncSwitch();
  virtual ~DB_FuncSwitch();

  DB_FuncSwitch(const DB_FuncSwitch& from);

  inline DB_FuncSwitch& operator=(const DB_FuncSwitch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_FuncSwitch& default_instance();

  void Swap(DB_FuncSwitch* other);

  // implements Message ----------------------------------------------

  inline DB_FuncSwitch* New() const { return New(NULL); }

  DB_FuncSwitch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_FuncSwitch& from);
  void MergeFrom(const DB_FuncSwitch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_FuncSwitch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time_day = 1 [default = 0];
  bool has_time_day() const;
  void clear_time_day();
  static const int kTimeDayFieldNumber = 1;
  ::google::protobuf::int64 time_day() const;
  void set_time_day(::google::protobuf::int64 value);

  // optional int64 time_second = 3 [default = 0];
  bool has_time_second() const;
  void clear_time_second();
  static const int kTimeSecondFieldNumber = 3;
  ::google::protobuf::int64 time_second() const;
  void set_time_second(::google::protobuf::int64 value);

  // optional int32 daytimes = 2 [default = 0];
  bool has_daytimes() const;
  void clear_daytimes();
  static const int kDaytimesFieldNumber = 2;
  ::google::protobuf::int32 daytimes() const;
  void set_daytimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_FuncSwitch)
 private:
  inline void set_has_time_day();
  inline void clear_has_time_day();
  inline void set_has_time_second();
  inline void clear_has_time_second();
  inline void set_has_daytimes();
  inline void clear_has_daytimes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_day_;
  ::google::protobuf::int64 time_second_;
  ::google::protobuf::int32 daytimes_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_FuncSwitch* default_instance_;
};
// -------------------------------------------------------------------

class DB_FriendGift : public ::google::protobuf::Message {
 public:
  DB_FriendGift();
  virtual ~DB_FriendGift();

  DB_FriendGift(const DB_FriendGift& from);

  inline DB_FriendGift& operator=(const DB_FriendGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_FriendGift& default_instance();

  void Swap(DB_FriendGift* other);

  // implements Message ----------------------------------------------

  inline DB_FriendGift* New() const { return New(NULL); }

  DB_FriendGift* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_FriendGift& from);
  void MergeFrom(const DB_FriendGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_FriendGift* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 friend_action_pos = 4 [default = 0];
  bool has_friend_action_pos() const;
  void clear_friend_action_pos();
  static const int kFriendActionPosFieldNumber = 4;
  ::google::protobuf::int32 friend_action_pos() const;
  void set_friend_action_pos(::google::protobuf::int32 value);

  // optional bool friend_actions_allread = 1 [default = false];
  bool has_friend_actions_allread() const;
  void clear_friend_actions_allread();
  static const int kFriendActionsAllreadFieldNumber = 1;
  bool friend_actions_allread() const;
  void set_friend_actions_allread(bool value);

  // optional int32 friend_action_unread_cnt = 2 [default = 0];
  bool has_friend_action_unread_cnt() const;
  void clear_friend_action_unread_cnt();
  static const int kFriendActionUnreadCntFieldNumber = 2;
  ::google::protobuf::int32 friend_action_unread_cnt() const;
  void set_friend_action_unread_cnt(::google::protobuf::int32 value);

  // repeated .DB_ActionRecord friend_actions = 3;
  int friend_actions_size() const;
  void clear_friend_actions();
  static const int kFriendActionsFieldNumber = 3;
  const ::DB_ActionRecord& friend_actions(int index) const;
  ::DB_ActionRecord* mutable_friend_actions(int index);
  ::DB_ActionRecord* add_friend_actions();
  const ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord >&
      friend_actions() const;
  ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord >*
      mutable_friend_actions();

  // @@protoc_insertion_point(class_scope:DB_FriendGift)
 private:
  inline void set_has_friend_action_pos();
  inline void clear_has_friend_action_pos();
  inline void set_has_friend_actions_allread();
  inline void clear_has_friend_actions_allread();
  inline void set_has_friend_action_unread_cnt();
  inline void clear_has_friend_action_unread_cnt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 friend_action_pos_;
  bool friend_actions_allread_;
  ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord > friend_actions_;
  ::google::protobuf::int32 friend_action_unread_cnt_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_FriendGift* default_instance_;
};
// -------------------------------------------------------------------

class DB_Universe : public ::google::protobuf::Message {
 public:
  DB_Universe();
  virtual ~DB_Universe();

  DB_Universe(const DB_Universe& from);

  inline DB_Universe& operator=(const DB_Universe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Universe& default_instance();

  void Swap(DB_Universe* other);

  // implements Message ----------------------------------------------

  inline DB_Universe* New() const { return New(NULL); }

  DB_Universe* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Universe& from);
  void MergeFrom(const DB_Universe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_Universe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // optional int32 stars = 3;
  bool has_stars() const;
  void clear_stars();
  static const int kStarsFieldNumber = 3;
  ::google::protobuf::int32 stars() const;
  void set_stars(::google::protobuf::int32 value);

  // optional bool unlocked = 4;
  bool has_unlocked() const;
  void clear_unlocked();
  static const int kUnlockedFieldNumber = 4;
  bool unlocked() const;
  void set_unlocked(bool value);

  // optional string json_unlockConditionDataList = 5;
  bool has_json_unlockconditiondatalist() const;
  void clear_json_unlockconditiondatalist();
  static const int kJsonUnlockConditionDataListFieldNumber = 5;
  const ::std::string& json_unlockconditiondatalist() const;
  void set_json_unlockconditiondatalist(const ::std::string& value);
  void set_json_unlockconditiondatalist(const char* value);
  void set_json_unlockconditiondatalist(const char* value, size_t size);
  ::std::string* mutable_json_unlockconditiondatalist();
  ::std::string* release_json_unlockconditiondatalist();
  void set_allocated_json_unlockconditiondatalist(::std::string* json_unlockconditiondatalist);

  // optional int32 failed_cnt = 7 [default = 0];
  bool has_failed_cnt() const;
  void clear_failed_cnt();
  static const int kFailedCntFieldNumber = 7;
  ::google::protobuf::int32 failed_cnt() const;
  void set_failed_cnt(::google::protobuf::int32 value);

  // optional int64 first_unlock_second = 8 [default = 0];
  bool has_first_unlock_second() const;
  void clear_first_unlock_second();
  static const int kFirstUnlockSecondFieldNumber = 8;
  ::google::protobuf::int64 first_unlock_second() const;
  void set_first_unlock_second(::google::protobuf::int64 value);

  // optional int64 top_player = 9 [default = 0];
  bool has_top_player() const;
  void clear_top_player();
  static const int kTopPlayerFieldNumber = 9;
  ::google::protobuf::int64 top_player() const;
  void set_top_player(::google::protobuf::int64 value);

  // optional int32 first_pass_from = 10 [default = 0];
  bool has_first_pass_from() const;
  void clear_first_pass_from();
  static const int kFirstPassFromFieldNumber = 10;
  ::google::protobuf::int32 first_pass_from() const;
  void set_first_pass_from(::google::protobuf::int32 value);

  // optional int32 value_kos = 11 [default = 0];
  bool has_value_kos() const;
  void clear_value_kos();
  static const int kValueKosFieldNumber = 11;
  ::google::protobuf::int32 value_kos() const;
  void set_value_kos(::google::protobuf::int32 value);

  // optional int32 stars_kos = 12 [default = 0];
  bool has_stars_kos() const;
  void clear_stars_kos();
  static const int kStarsKosFieldNumber = 12;
  ::google::protobuf::int32 stars_kos() const;
  void set_stars_kos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_Universe)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_stars();
  inline void clear_has_stars();
  inline void set_has_unlocked();
  inline void clear_has_unlocked();
  inline void set_has_json_unlockconditiondatalist();
  inline void clear_has_json_unlockconditiondatalist();
  inline void set_has_failed_cnt();
  inline void clear_has_failed_cnt();
  inline void set_has_first_unlock_second();
  inline void clear_has_first_unlock_second();
  inline void set_has_top_player();
  inline void clear_has_top_player();
  inline void set_has_first_pass_from();
  inline void clear_has_first_pass_from();
  inline void set_has_value_kos();
  inline void clear_has_value_kos();
  inline void set_has_stars_kos();
  inline void clear_has_stars_kos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 stars_;
  bool unlocked_;
  ::google::protobuf::internal::ArenaStringPtr json_unlockconditiondatalist_;
  ::google::protobuf::int64 first_unlock_second_;
  ::google::protobuf::int32 failed_cnt_;
  ::google::protobuf::int32 first_pass_from_;
  ::google::protobuf::int64 top_player_;
  ::google::protobuf::int32 value_kos_;
  ::google::protobuf::int32 stars_kos_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_Universe* default_instance_;
};
// -------------------------------------------------------------------

class DB_DallyUniverse : public ::google::protobuf::Message {
 public:
  DB_DallyUniverse();
  virtual ~DB_DallyUniverse();

  DB_DallyUniverse(const DB_DallyUniverse& from);

  inline DB_DallyUniverse& operator=(const DB_DallyUniverse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_DallyUniverse& default_instance();

  void Swap(DB_DallyUniverse* other);

  // implements Message ----------------------------------------------

  inline DB_DallyUniverse* New() const { return New(NULL); }

  DB_DallyUniverse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_DallyUniverse& from);
  void MergeFrom(const DB_DallyUniverse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_DallyUniverse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DB_Universe uni = 1;
  bool has_uni() const;
  void clear_uni();
  static const int kUniFieldNumber = 1;
  const ::DB_Universe& uni() const;
  ::DB_Universe* mutable_uni();
  ::DB_Universe* release_uni();
  void set_allocated_uni(::DB_Universe* uni);

  // optional int32 played_cnt = 2;
  bool has_played_cnt() const;
  void clear_played_cnt();
  static const int kPlayedCntFieldNumber = 2;
  ::google::protobuf::int32 played_cnt() const;
  void set_played_cnt(::google::protobuf::int32 value);

  // optional int32 succ_cnt = 3;
  bool has_succ_cnt() const;
  void clear_succ_cnt();
  static const int kSuccCntFieldNumber = 3;
  ::google::protobuf::int32 succ_cnt() const;
  void set_succ_cnt(::google::protobuf::int32 value);

  // optional bool unlocked = 4;
  bool has_unlocked() const;
  void clear_unlocked();
  static const int kUnlockedFieldNumber = 4;
  bool unlocked() const;
  void set_unlocked(bool value);

  // optional bool pay_open = 5;
  bool has_pay_open() const;
  void clear_pay_open();
  static const int kPayOpenFieldNumber = 5;
  bool pay_open() const;
  void set_pay_open(bool value);

  // optional int64 pay_open_day = 6 [default = 0];
  bool has_pay_open_day() const;
  void clear_pay_open_day();
  static const int kPayOpenDayFieldNumber = 6;
  ::google::protobuf::int64 pay_open_day() const;
  void set_pay_open_day(::google::protobuf::int64 value);

  // optional int32 pay_cash = 7;
  bool has_pay_cash() const;
  void clear_pay_cash();
  static const int kPayCashFieldNumber = 7;
  ::google::protobuf::int32 pay_cash() const;
  void set_pay_cash(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_DallyUniverse)
 private:
  inline void set_has_uni();
  inline void clear_has_uni();
  inline void set_has_played_cnt();
  inline void clear_has_played_cnt();
  inline void set_has_succ_cnt();
  inline void clear_has_succ_cnt();
  inline void set_has_unlocked();
  inline void clear_has_unlocked();
  inline void set_has_pay_open();
  inline void clear_has_pay_open();
  inline void set_has_pay_open_day();
  inline void clear_has_pay_open_day();
  inline void set_has_pay_cash();
  inline void clear_has_pay_cash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DB_Universe* uni_;
  ::google::protobuf::int32 played_cnt_;
  ::google::protobuf::int32 succ_cnt_;
  bool unlocked_;
  bool pay_open_;
  ::google::protobuf::int32 pay_cash_;
  ::google::protobuf::int64 pay_open_day_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_DallyUniverse* default_instance_;
};
// -------------------------------------------------------------------

class DB_DallyLogInfo : public ::google::protobuf::Message {
 public:
  DB_DallyLogInfo();
  virtual ~DB_DallyLogInfo();

  DB_DallyLogInfo(const DB_DallyLogInfo& from);

  inline DB_DallyLogInfo& operator=(const DB_DallyLogInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_DallyLogInfo& default_instance();

  void Swap(DB_DallyLogInfo* other);

  // implements Message ----------------------------------------------

  inline DB_DallyLogInfo* New() const { return New(NULL); }

  DB_DallyLogInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_DallyLogInfo& from);
  void MergeFrom(const DB_DallyLogInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_DallyLogInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 week = 1 [default = 0];
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 1;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // optional int32 totalscore = 2;
  bool has_totalscore() const;
  void clear_totalscore();
  static const int kTotalscoreFieldNumber = 2;
  ::google::protobuf::int32 totalscore() const;
  void set_totalscore(::google::protobuf::int32 value);

  // optional int32 unlocked_cnt = 3;
  bool has_unlocked_cnt() const;
  void clear_unlocked_cnt();
  static const int kUnlockedCntFieldNumber = 3;
  ::google::protobuf::int32 unlocked_cnt() const;
  void set_unlocked_cnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_DallyLogInfo)
 private:
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_totalscore();
  inline void clear_has_totalscore();
  inline void set_has_unlocked_cnt();
  inline void clear_has_unlocked_cnt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 week_;
  ::google::protobuf::int32 totalscore_;
  ::google::protobuf::int32 unlocked_cnt_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_DallyLogInfo* default_instance_;
};
// -------------------------------------------------------------------

class DB_DallyUniverseInfo : public ::google::protobuf::Message {
 public:
  DB_DallyUniverseInfo();
  virtual ~DB_DallyUniverseInfo();

  DB_DallyUniverseInfo(const DB_DallyUniverseInfo& from);

  inline DB_DallyUniverseInfo& operator=(const DB_DallyUniverseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_DallyUniverseInfo& default_instance();

  void Swap(DB_DallyUniverseInfo* other);

  // implements Message ----------------------------------------------

  inline DB_DallyUniverseInfo* New() const { return New(NULL); }

  DB_DallyUniverseInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_DallyUniverseInfo& from);
  void MergeFrom(const DB_DallyUniverseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_DallyUniverseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 week = 1;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 1;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // repeated .DB_DallyUniverse uniset = 2;
  int uniset_size() const;
  void clear_uniset();
  static const int kUnisetFieldNumber = 2;
  const ::DB_DallyUniverse& uniset(int index) const;
  ::DB_DallyUniverse* mutable_uniset(int index);
  ::DB_DallyUniverse* add_uniset();
  const ::google::protobuf::RepeatedPtrField< ::DB_DallyUniverse >&
      uniset() const;
  ::google::protobuf::RepeatedPtrField< ::DB_DallyUniverse >*
      mutable_uniset();

  // optional int32 totalsocre = 3;
  bool has_totalsocre() const;
  void clear_totalsocre();
  static const int kTotalsocreFieldNumber = 3;
  ::google::protobuf::int32 totalsocre() const;
  void set_totalsocre(::google::protobuf::int32 value);

  // optional bool rewardpicked = 4 [default = false];
  bool has_rewardpicked() const;
  void clear_rewardpicked();
  static const int kRewardpickedFieldNumber = 4;
  bool rewardpicked() const;
  void set_rewardpicked(bool value);

  // repeated .DB_DallyLogInfo historyLogs = 5;
  int historylogs_size() const;
  void clear_historylogs();
  static const int kHistoryLogsFieldNumber = 5;
  const ::DB_DallyLogInfo& historylogs(int index) const;
  ::DB_DallyLogInfo* mutable_historylogs(int index);
  ::DB_DallyLogInfo* add_historylogs();
  const ::google::protobuf::RepeatedPtrField< ::DB_DallyLogInfo >&
      historylogs() const;
  ::google::protobuf::RepeatedPtrField< ::DB_DallyLogInfo >*
      mutable_historylogs();

  // optional bool cheat_bit = 6 [default = false];
  bool has_cheat_bit() const;
  void clear_cheat_bit();
  static const int kCheatBitFieldNumber = 6;
  bool cheat_bit() const;
  void set_cheat_bit(bool value);

  // @@protoc_insertion_point(class_scope:DB_DallyUniverseInfo)
 private:
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_totalsocre();
  inline void clear_has_totalsocre();
  inline void set_has_rewardpicked();
  inline void clear_has_rewardpicked();
  inline void set_has_cheat_bit();
  inline void clear_has_cheat_bit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DB_DallyUniverse > uniset_;
  ::google::protobuf::int32 week_;
  ::google::protobuf::int32 totalsocre_;
  ::google::protobuf::RepeatedPtrField< ::DB_DallyLogInfo > historylogs_;
  bool rewardpicked_;
  bool cheat_bit_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_DallyUniverseInfo* default_instance_;
};
// -------------------------------------------------------------------

class DB_LivesInfo : public ::google::protobuf::Message {
 public:
  DB_LivesInfo();
  virtual ~DB_LivesInfo();

  DB_LivesInfo(const DB_LivesInfo& from);

  inline DB_LivesInfo& operator=(const DB_LivesInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_LivesInfo& default_instance();

  void Swap(DB_LivesInfo* other);

  // implements Message ----------------------------------------------

  inline DB_LivesInfo* New() const { return New(NULL); }

  DB_LivesInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_LivesInfo& from);
  void MergeFrom(const DB_LivesInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_LivesInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lives = 1;
  bool has_lives() const;
  void clear_lives();
  static const int kLivesFieldNumber = 1;
  ::google::protobuf::int32 lives() const;
  void set_lives(::google::protobuf::int32 value);

  // optional int64 last_cost_time_sec = 2;
  bool has_last_cost_time_sec() const;
  void clear_last_cost_time_sec();
  static const int kLastCostTimeSecFieldNumber = 2;
  ::google::protobuf::int64 last_cost_time_sec() const;
  void set_last_cost_time_sec(::google::protobuf::int64 value);

  // optional int32 lives_max = 3;
  bool has_lives_max() const;
  void clear_lives_max();
  static const int kLivesMaxFieldNumber = 3;
  ::google::protobuf::int32 lives_max() const;
  void set_lives_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_LivesInfo)
 private:
  inline void set_has_lives();
  inline void clear_has_lives();
  inline void set_has_last_cost_time_sec();
  inline void clear_has_last_cost_time_sec();
  inline void set_has_lives_max();
  inline void clear_has_lives_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 last_cost_time_sec_;
  ::google::protobuf::int32 lives_;
  ::google::protobuf::int32 lives_max_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_LivesInfo* default_instance_;
};
// -------------------------------------------------------------------

class DB_UniverseInfo : public ::google::protobuf::Message {
 public:
  DB_UniverseInfo();
  virtual ~DB_UniverseInfo();

  DB_UniverseInfo(const DB_UniverseInfo& from);

  inline DB_UniverseInfo& operator=(const DB_UniverseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_UniverseInfo& default_instance();

  void Swap(DB_UniverseInfo* other);

  // implements Message ----------------------------------------------

  inline DB_UniverseInfo* New() const { return New(NULL); }

  DB_UniverseInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_UniverseInfo& from);
  void MergeFrom(const DB_UniverseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_UniverseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 total_level = 1;
  bool has_total_level() const;
  void clear_total_level();
  static const int kTotalLevelFieldNumber = 1;
  ::google::protobuf::int32 total_level() const;
  void set_total_level(::google::protobuf::int32 value);

  // optional int32 top_level = 2;
  bool has_top_level() const;
  void clear_top_level();
  static const int kTopLevelFieldNumber = 2;
  ::google::protobuf::int32 top_level() const;
  void set_top_level(::google::protobuf::int32 value);

  // optional int32 seed = 3;
  bool has_seed() const;
  void clear_seed();
  static const int kSeedFieldNumber = 3;
  ::google::protobuf::int32 seed() const;
  void set_seed(::google::protobuf::int32 value);

  // optional int64 lvl_start_sec = 5 [default = 0];
  bool has_lvl_start_sec() const;
  void clear_lvl_start_sec();
  static const int kLvlStartSecFieldNumber = 5;
  ::google::protobuf::int64 lvl_start_sec() const;
  void set_lvl_start_sec(::google::protobuf::int64 value);

  // repeated .DB_Universe universe_set = 4;
  int universe_set_size() const;
  void clear_universe_set();
  static const int kUniverseSetFieldNumber = 4;
  const ::DB_Universe& universe_set(int index) const;
  ::DB_Universe* mutable_universe_set(int index);
  ::DB_Universe* add_universe_set();
  const ::google::protobuf::RepeatedPtrField< ::DB_Universe >&
      universe_set() const;
  ::google::protobuf::RepeatedPtrField< ::DB_Universe >*
      mutable_universe_set();

  // optional int32 now_total_levl = 6 [default = 0];
  bool has_now_total_levl() const;
  void clear_now_total_levl();
  static const int kNowTotalLevlFieldNumber = 6;
  ::google::protobuf::int32 now_total_levl() const;
  void set_now_total_levl(::google::protobuf::int32 value);

  // optional int32 checkval_first = 7 [default = 0];
  bool has_checkval_first() const;
  void clear_checkval_first();
  static const int kCheckvalFirstFieldNumber = 7;
  ::google::protobuf::int32 checkval_first() const;
  void set_checkval_first(::google::protobuf::int32 value);

  // optional int32 checkval_second = 8 [default = 0];
  bool has_checkval_second() const;
  void clear_checkval_second();
  static const int kCheckvalSecondFieldNumber = 8;
  ::google::protobuf::int32 checkval_second() const;
  void set_checkval_second(::google::protobuf::int32 value);

  // optional int32 passval = 9 [default = 0];
  bool has_passval() const;
  void clear_passval();
  static const int kPassvalFieldNumber = 9;
  ::google::protobuf::int32 passval() const;
  void set_passval(::google::protobuf::int32 value);

  // repeated int32 lvlStockedItem = 10;
  int lvlstockeditem_size() const;
  void clear_lvlstockeditem();
  static const int kLvlStockedItemFieldNumber = 10;
  ::google::protobuf::int32 lvlstockeditem(int index) const;
  void set_lvlstockeditem(int index, ::google::protobuf::int32 value);
  void add_lvlstockeditem(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lvlstockeditem() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lvlstockeditem();

  // repeated int32 egg_logic = 11;
  int egg_logic_size() const;
  void clear_egg_logic();
  static const int kEggLogicFieldNumber = 11;
  ::google::protobuf::int32 egg_logic(int index) const;
  void set_egg_logic(int index, ::google::protobuf::int32 value);
  void add_egg_logic(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      egg_logic() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_egg_logic();

  // repeated int32 mobile_submit_socres = 12;
  int mobile_submit_socres_size() const;
  void clear_mobile_submit_socres();
  static const int kMobileSubmitSocresFieldNumber = 12;
  ::google::protobuf::int32 mobile_submit_socres(int index) const;
  void set_mobile_submit_socres(int index, ::google::protobuf::int32 value);
  void add_mobile_submit_socres(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mobile_submit_socres() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mobile_submit_socres();

  // @@protoc_insertion_point(class_scope:DB_UniverseInfo)
 private:
  inline void set_has_total_level();
  inline void clear_has_total_level();
  inline void set_has_top_level();
  inline void clear_has_top_level();
  inline void set_has_seed();
  inline void clear_has_seed();
  inline void set_has_lvl_start_sec();
  inline void clear_has_lvl_start_sec();
  inline void set_has_now_total_levl();
  inline void clear_has_now_total_levl();
  inline void set_has_checkval_first();
  inline void clear_has_checkval_first();
  inline void set_has_checkval_second();
  inline void clear_has_checkval_second();
  inline void set_has_passval();
  inline void clear_has_passval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 total_level_;
  ::google::protobuf::int32 top_level_;
  ::google::protobuf::int64 lvl_start_sec_;
  ::google::protobuf::int32 seed_;
  ::google::protobuf::int32 now_total_levl_;
  ::google::protobuf::RepeatedPtrField< ::DB_Universe > universe_set_;
  ::google::protobuf::int32 checkval_first_;
  ::google::protobuf::int32 checkval_second_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lvlstockeditem_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > egg_logic_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mobile_submit_socres_;
  ::google::protobuf::int32 passval_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_UniverseInfo* default_instance_;
};
// -------------------------------------------------------------------

class DB_StrKeyProperties : public ::google::protobuf::Message {
 public:
  DB_StrKeyProperties();
  virtual ~DB_StrKeyProperties();

  DB_StrKeyProperties(const DB_StrKeyProperties& from);

  inline DB_StrKeyProperties& operator=(const DB_StrKeyProperties& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_StrKeyProperties& default_instance();

  void Swap(DB_StrKeyProperties* other);

  // implements Message ----------------------------------------------

  inline DB_StrKeyProperties* New() const { return New(NULL); }

  DB_StrKeyProperties* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_StrKeyProperties& from);
  void MergeFrom(const DB_StrKeyProperties& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_StrKeyProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bool bool_value = 2;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 2;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional int32 int_value = 3;
  bool has_int_value() const;
  void clear_int_value();
  static const int kIntValueFieldNumber = 3;
  ::google::protobuf::int32 int_value() const;
  void set_int_value(::google::protobuf::int32 value);

  // optional string str_value = 4;
  bool has_str_value() const;
  void clear_str_value();
  static const int kStrValueFieldNumber = 4;
  const ::std::string& str_value() const;
  void set_str_value(const ::std::string& value);
  void set_str_value(const char* value);
  void set_str_value(const char* value, size_t size);
  ::std::string* mutable_str_value();
  ::std::string* release_str_value();
  void set_allocated_str_value(::std::string* str_value);

  // @@protoc_insertion_point(class_scope:DB_StrKeyProperties)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_bool_value();
  inline void clear_has_bool_value();
  inline void set_has_int_value();
  inline void clear_has_int_value();
  inline void set_has_str_value();
  inline void clear_has_str_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  bool bool_value_;
  ::google::protobuf::int32 int_value_;
  ::google::protobuf::internal::ArenaStringPtr str_value_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_StrKeyProperties* default_instance_;
};
// -------------------------------------------------------------------

class DB_CandyProperties : public ::google::protobuf::Message {
 public:
  DB_CandyProperties();
  virtual ~DB_CandyProperties();

  DB_CandyProperties(const DB_CandyProperties& from);

  inline DB_CandyProperties& operator=(const DB_CandyProperties& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_CandyProperties& default_instance();

  void Swap(DB_CandyProperties* other);

  // implements Message ----------------------------------------------

  inline DB_CandyProperties* New() const { return New(NULL); }

  DB_CandyProperties* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_CandyProperties& from);
  void MergeFrom(const DB_CandyProperties& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_CandyProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DB_StrKeyProperties atts = 1;
  int atts_size() const;
  void clear_atts();
  static const int kAttsFieldNumber = 1;
  const ::DB_StrKeyProperties& atts(int index) const;
  ::DB_StrKeyProperties* mutable_atts(int index);
  ::DB_StrKeyProperties* add_atts();
  const ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties >&
      atts() const;
  ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties >*
      mutable_atts();

  // @@protoc_insertion_point(class_scope:DB_CandyProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties > atts_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_CandyProperties* default_instance_;
};
// -------------------------------------------------------------------

class DB_Events : public ::google::protobuf::Message {
 public:
  DB_Events();
  virtual ~DB_Events();

  DB_Events(const DB_Events& from);

  inline DB_Events& operator=(const DB_Events& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Events& default_instance();

  void Swap(DB_Events* other);

  // implements Message ----------------------------------------------

  inline DB_Events* New() const { return New(NULL); }

  DB_Events* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Events& from);
  void MergeFrom(const DB_Events& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_Events* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DB_StrKeyProperties atts = 1;
  int atts_size() const;
  void clear_atts();
  static const int kAttsFieldNumber = 1;
  const ::DB_StrKeyProperties& atts(int index) const;
  ::DB_StrKeyProperties* mutable_atts(int index);
  ::DB_StrKeyProperties* add_atts();
  const ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties >&
      atts() const;
  ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties >*
      mutable_atts();

  // @@protoc_insertion_point(class_scope:DB_Events)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties > atts_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_Events* default_instance_;
};
// -------------------------------------------------------------------

class DB_Singed : public ::google::protobuf::Message {
 public:
  DB_Singed();
  virtual ~DB_Singed();

  DB_Singed(const DB_Singed& from);

  inline DB_Singed& operator=(const DB_Singed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Singed& default_instance();

  void Swap(DB_Singed* other);

  // implements Message ----------------------------------------------

  inline DB_Singed* New() const { return New(NULL); }

  DB_Singed* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Singed& from);
  void MergeFrom(const DB_Singed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_Singed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pos = 1 [default = 0];
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // repeated int32 data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  ::google::protobuf::int32 data(int index) const;
  void set_data(int index, ::google::protobuf::int32 value);
  void add_data(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:DB_Singed)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  ::google::protobuf::int32 pos_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_Singed* default_instance_;
};
// -------------------------------------------------------------------

class DB_Yelldmd : public ::google::protobuf::Message {
 public:
  DB_Yelldmd();
  virtual ~DB_Yelldmd();

  DB_Yelldmd(const DB_Yelldmd& from);

  inline DB_Yelldmd& operator=(const DB_Yelldmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Yelldmd& default_instance();

  void Swap(DB_Yelldmd* other);

  // implements Message ----------------------------------------------

  inline DB_Yelldmd* New() const { return New(NULL); }

  DB_Yelldmd* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Yelldmd& from);
  void MergeFrom(const DB_Yelldmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_Yelldmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 last_reword_time_sec = 1 [default = 0];
  bool has_last_reword_time_sec() const;
  void clear_last_reword_time_sec();
  static const int kLastRewordTimeSecFieldNumber = 1;
  ::google::protobuf::int64 last_reword_time_sec() const;
  void set_last_reword_time_sec(::google::protobuf::int64 value);

  // optional bool newer_gift = 2 [default = false];
  bool has_newer_gift() const;
  void clear_newer_gift();
  static const int kNewerGiftFieldNumber = 2;
  bool newer_gift() const;
  void set_newer_gift(bool value);

  // @@protoc_insertion_point(class_scope:DB_Yelldmd)
 private:
  inline void set_has_last_reword_time_sec();
  inline void clear_has_last_reword_time_sec();
  inline void set_has_newer_gift();
  inline void clear_has_newer_gift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 last_reword_time_sec_;
  bool newer_gift_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_Yelldmd* default_instance_;
};
// -------------------------------------------------------------------

class DB_SignHistory : public ::google::protobuf::Message {
 public:
  DB_SignHistory();
  virtual ~DB_SignHistory();

  DB_SignHistory(const DB_SignHistory& from);

  inline DB_SignHistory& operator=(const DB_SignHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_SignHistory& default_instance();

  void Swap(DB_SignHistory* other);

  // implements Message ----------------------------------------------

  inline DB_SignHistory* New() const { return New(NULL); }

  DB_SignHistory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_SignHistory& from);
  void MergeFrom(const DB_SignHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_SignHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 month = 1 [default = 0];
  bool has_month() const;
  void clear_month();
  static const int kMonthFieldNumber = 1;
  ::google::protobuf::int32 month() const;
  void set_month(::google::protobuf::int32 value);

  // repeated int32 days = 2;
  int days_size() const;
  void clear_days();
  static const int kDaysFieldNumber = 2;
  ::google::protobuf::int32 days(int index) const;
  void set_days(int index, ::google::protobuf::int32 value);
  void add_days(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      days() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_days();

  // optional .DB_BitCache reward_cache = 3;
  bool has_reward_cache() const;
  void clear_reward_cache();
  static const int kRewardCacheFieldNumber = 3;
  const ::DB_BitCache& reward_cache() const;
  ::DB_BitCache* mutable_reward_cache();
  ::DB_BitCache* release_reward_cache();
  void set_allocated_reward_cache(::DB_BitCache* reward_cache);

  // optional int64 last_reword_time_sec = 4 [default = 0];
  bool has_last_reword_time_sec() const;
  void clear_last_reword_time_sec();
  static const int kLastRewordTimeSecFieldNumber = 4;
  ::google::protobuf::int64 last_reword_time_sec() const;
  void set_last_reword_time_sec(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DB_SignHistory)
 private:
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_reward_cache();
  inline void clear_has_reward_cache();
  inline void set_has_last_reword_time_sec();
  inline void clear_has_last_reword_time_sec();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > days_;
  ::DB_BitCache* reward_cache_;
  ::google::protobuf::int64 last_reword_time_sec_;
  ::google::protobuf::int32 month_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_SignHistory* default_instance_;
};
// -------------------------------------------------------------------

class DB_EasyTimeSet : public ::google::protobuf::Message {
 public:
  DB_EasyTimeSet();
  virtual ~DB_EasyTimeSet();

  DB_EasyTimeSet(const DB_EasyTimeSet& from);

  inline DB_EasyTimeSet& operator=(const DB_EasyTimeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_EasyTimeSet& default_instance();

  void Swap(DB_EasyTimeSet* other);

  // implements Message ----------------------------------------------

  inline DB_EasyTimeSet* New() const { return New(NULL); }

  DB_EasyTimeSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_EasyTimeSet& from);
  void MergeFrom(const DB_EasyTimeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_EasyTimeSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 seconds = 1;
  int seconds_size() const;
  void clear_seconds();
  static const int kSecondsFieldNumber = 1;
  ::google::protobuf::int64 seconds(int index) const;
  void set_seconds(int index, ::google::protobuf::int64 value);
  void add_seconds(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      seconds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_seconds();

  // @@protoc_insertion_point(class_scope:DB_EasyTimeSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > seconds_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_EasyTimeSet* default_instance_;
};
// -------------------------------------------------------------------

class DB_ContinuousDays : public ::google::protobuf::Message {
 public:
  DB_ContinuousDays();
  virtual ~DB_ContinuousDays();

  DB_ContinuousDays(const DB_ContinuousDays& from);

  inline DB_ContinuousDays& operator=(const DB_ContinuousDays& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_ContinuousDays& default_instance();

  void Swap(DB_ContinuousDays* other);

  // implements Message ----------------------------------------------

  inline DB_ContinuousDays* New() const { return New(NULL); }

  DB_ContinuousDays* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_ContinuousDays& from);
  void MergeFrom(const DB_ContinuousDays& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_ContinuousDays* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ContinuousDays = 1 [default = 0];
  bool has_continuousdays() const;
  void clear_continuousdays();
  static const int kContinuousDaysFieldNumber = 1;
  ::google::protobuf::int32 continuousdays() const;
  void set_continuousdays(::google::protobuf::int32 value);

  // optional .DB_BitCache reward_history = 2;
  bool has_reward_history() const;
  void clear_reward_history();
  static const int kRewardHistoryFieldNumber = 2;
  const ::DB_BitCache& reward_history() const;
  ::DB_BitCache* mutable_reward_history();
  ::DB_BitCache* release_reward_history();
  void set_allocated_reward_history(::DB_BitCache* reward_history);

  // optional int32 start_pos = 3 [default = 0];
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 3;
  ::google::protobuf::int32 start_pos() const;
  void set_start_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_ContinuousDays)
 private:
  inline void set_has_continuousdays();
  inline void clear_has_continuousdays();
  inline void set_has_reward_history();
  inline void clear_has_reward_history();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DB_BitCache* reward_history_;
  ::google::protobuf::int32 continuousdays_;
  ::google::protobuf::int32 start_pos_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_ContinuousDays* default_instance_;
};
// -------------------------------------------------------------------

class DB_DragboatFvl : public ::google::protobuf::Message {
 public:
  DB_DragboatFvl();
  virtual ~DB_DragboatFvl();

  DB_DragboatFvl(const DB_DragboatFvl& from);

  inline DB_DragboatFvl& operator=(const DB_DragboatFvl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_DragboatFvl& default_instance();

  void Swap(DB_DragboatFvl* other);

  // implements Message ----------------------------------------------

  inline DB_DragboatFvl* New() const { return New(NULL); }

  DB_DragboatFvl* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_DragboatFvl& from);
  void MergeFrom(const DB_DragboatFvl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_DragboatFvl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lastricecount = 1 [default = 0];
  bool has_lastricecount() const;
  void clear_lastricecount();
  static const int kLastricecountFieldNumber = 1;
  ::google::protobuf::int32 lastricecount() const;
  void set_lastricecount(::google::protobuf::int32 value);

  // optional bool isacquired = 2 [default = false];
  bool has_isacquired() const;
  void clear_isacquired();
  static const int kIsacquiredFieldNumber = 2;
  bool isacquired() const;
  void set_isacquired(bool value);

  // optional int64 lasttime = 3 [default = 0];
  bool has_lasttime() const;
  void clear_lasttime();
  static const int kLasttimeFieldNumber = 3;
  ::google::protobuf::int64 lasttime() const;
  void set_lasttime(::google::protobuf::int64 value);

  // optional int32 totalricecount = 4 [default = 0];
  bool has_totalricecount() const;
  void clear_totalricecount();
  static const int kTotalricecountFieldNumber = 4;
  ::google::protobuf::int32 totalricecount() const;
  void set_totalricecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_DragboatFvl)
 private:
  inline void set_has_lastricecount();
  inline void clear_has_lastricecount();
  inline void set_has_isacquired();
  inline void clear_has_isacquired();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_totalricecount();
  inline void clear_has_totalricecount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 lastricecount_;
  bool isacquired_;
  ::google::protobuf::int64 lasttime_;
  ::google::protobuf::int32 totalricecount_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_DragboatFvl* default_instance_;
};
// -------------------------------------------------------------------

class DB_ActiveInvite : public ::google::protobuf::Message {
 public:
  DB_ActiveInvite();
  virtual ~DB_ActiveInvite();

  DB_ActiveInvite(const DB_ActiveInvite& from);

  inline DB_ActiveInvite& operator=(const DB_ActiveInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_ActiveInvite& default_instance();

  void Swap(DB_ActiveInvite* other);

  // implements Message ----------------------------------------------

  inline DB_ActiveInvite* New() const { return New(NULL); }

  DB_ActiveInvite* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_ActiveInvite& from);
  void MergeFrom(const DB_ActiveInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_ActiveInvite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional int32 lastlvl = 3;
  bool has_lastlvl() const;
  void clear_lastlvl();
  static const int kLastlvlFieldNumber = 3;
  ::google::protobuf::int32 lastlvl() const;
  void set_lastlvl(::google::protobuf::int32 value);

  // optional int32 lastloginday = 4;
  bool has_lastloginday() const;
  void clear_lastloginday();
  static const int kLastlogindayFieldNumber = 4;
  ::google::protobuf::int32 lastloginday() const;
  void set_lastloginday(::google::protobuf::int32 value);

  // optional int32 nowloginday = 5;
  bool has_nowloginday() const;
  void clear_nowloginday();
  static const int kNowlogindayFieldNumber = 5;
  ::google::protobuf::int32 nowloginday() const;
  void set_nowloginday(::google::protobuf::int32 value);

  // repeated int32 isReceive1 = 6;
  int isreceive1_size() const;
  void clear_isreceive1();
  static const int kIsReceive1FieldNumber = 6;
  ::google::protobuf::int32 isreceive1(int index) const;
  void set_isreceive1(int index, ::google::protobuf::int32 value);
  void add_isreceive1(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      isreceive1() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_isreceive1();

  // optional bool isReceive2 = 7 [default = false];
  bool has_isreceive2() const;
  void clear_isreceive2();
  static const int kIsReceive2FieldNumber = 7;
  bool isreceive2() const;
  void set_isreceive2(bool value);

  // @@protoc_insertion_point(class_scope:DB_ActiveInvite)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_lastlvl();
  inline void clear_has_lastlvl();
  inline void set_has_lastloginday();
  inline void clear_has_lastloginday();
  inline void set_has_nowloginday();
  inline void clear_has_nowloginday();
  inline void set_has_isreceive2();
  inline void clear_has_isreceive2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int32 lastlvl_;
  ::google::protobuf::int32 lastloginday_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > isreceive1_;
  ::google::protobuf::int32 nowloginday_;
  bool isreceive2_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_ActiveInvite* default_instance_;
};
// -------------------------------------------------------------------

class DB_ActiveInviteself : public ::google::protobuf::Message {
 public:
  DB_ActiveInviteself();
  virtual ~DB_ActiveInviteself();

  DB_ActiveInviteself(const DB_ActiveInviteself& from);

  inline DB_ActiveInviteself& operator=(const DB_ActiveInviteself& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_ActiveInviteself& default_instance();

  void Swap(DB_ActiveInviteself* other);

  // implements Message ----------------------------------------------

  inline DB_ActiveInviteself* New() const { return New(NULL); }

  DB_ActiveInviteself* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_ActiveInviteself& from);
  void MergeFrom(const DB_ActiveInviteself& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_ActiveInviteself* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 isReceive3 = 1;
  int isreceive3_size() const;
  void clear_isreceive3();
  static const int kIsReceive3FieldNumber = 1;
  ::google::protobuf::int32 isreceive3(int index) const;
  void set_isreceive3(int index, ::google::protobuf::int32 value);
  void add_isreceive3(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      isreceive3() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_isreceive3();

  // repeated int32 completed = 2;
  int completed_size() const;
  void clear_completed();
  static const int kCompletedFieldNumber = 2;
  ::google::protobuf::int32 completed(int index) const;
  void set_completed(int index, ::google::protobuf::int32 value);
  void add_completed(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      completed() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_completed();

  // optional int32 idCnt = 3 [default = 0];
  bool has_idcnt() const;
  void clear_idcnt();
  static const int kIdCntFieldNumber = 3;
  ::google::protobuf::int32 idcnt() const;
  void set_idcnt(::google::protobuf::int32 value);

  // repeated .DB_ActiveInvite other = 4;
  int other_size() const;
  void clear_other();
  static const int kOtherFieldNumber = 4;
  const ::DB_ActiveInvite& other(int index) const;
  ::DB_ActiveInvite* mutable_other(int index);
  ::DB_ActiveInvite* add_other();
  const ::google::protobuf::RepeatedPtrField< ::DB_ActiveInvite >&
      other() const;
  ::google::protobuf::RepeatedPtrField< ::DB_ActiveInvite >*
      mutable_other();

  // @@protoc_insertion_point(class_scope:DB_ActiveInviteself)
 private:
  inline void set_has_idcnt();
  inline void clear_has_idcnt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > isreceive3_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > completed_;
  ::google::protobuf::RepeatedPtrField< ::DB_ActiveInvite > other_;
  ::google::protobuf::int32 idcnt_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_ActiveInviteself* default_instance_;
};
// -------------------------------------------------------------------

class DB_ActiveCallBack : public ::google::protobuf::Message {
 public:
  DB_ActiveCallBack();
  virtual ~DB_ActiveCallBack();

  DB_ActiveCallBack(const DB_ActiveCallBack& from);

  inline DB_ActiveCallBack& operator=(const DB_ActiveCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_ActiveCallBack& default_instance();

  void Swap(DB_ActiveCallBack* other);

  // implements Message ----------------------------------------------

  inline DB_ActiveCallBack* New() const { return New(NULL); }

  DB_ActiveCallBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_ActiveCallBack& from);
  void MergeFrom(const DB_ActiveCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_ActiveCallBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 totaldays = 1 [default = 0];
  bool has_totaldays() const;
  void clear_totaldays();
  static const int kTotaldaysFieldNumber = 1;
  ::google::protobuf::int32 totaldays() const;
  void set_totaldays(::google::protobuf::int32 value);

  // optional bool hasTKbgnum1 = 2 [default = false];
  bool has_hastkbgnum1() const;
  void clear_hastkbgnum1();
  static const int kHasTKbgnum1FieldNumber = 2;
  bool hastkbgnum1() const;
  void set_hastkbgnum1(bool value);

  // optional bool hasTKbgnum2 = 3 [default = false];
  bool has_hastkbgnum2() const;
  void clear_hastkbgnum2();
  static const int kHasTKbgnum2FieldNumber = 3;
  bool hastkbgnum2() const;
  void set_hastkbgnum2(bool value);

  // optional bool hasTKbgnum3 = 4 [default = false];
  bool has_hastkbgnum3() const;
  void clear_hastkbgnum3();
  static const int kHasTKbgnum3FieldNumber = 4;
  bool hastkbgnum3() const;
  void set_hastkbgnum3(bool value);

  // optional bool hasTKbgnum4 = 5 [default = false];
  bool has_hastkbgnum4() const;
  void clear_hastkbgnum4();
  static const int kHasTKbgnum4FieldNumber = 5;
  bool hastkbgnum4() const;
  void set_hastkbgnum4(bool value);

  // optional int64 lasttime = 6;
  bool has_lasttime() const;
  void clear_lasttime();
  static const int kLasttimeFieldNumber = 6;
  ::google::protobuf::int64 lasttime() const;
  void set_lasttime(::google::protobuf::int64 value);

  // optional int32 user_type = 7 [default = 0];
  bool has_user_type() const;
  void clear_user_type();
  static const int kUserTypeFieldNumber = 7;
  ::google::protobuf::int32 user_type() const;
  void set_user_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_ActiveCallBack)
 private:
  inline void set_has_totaldays();
  inline void clear_has_totaldays();
  inline void set_has_hastkbgnum1();
  inline void clear_has_hastkbgnum1();
  inline void set_has_hastkbgnum2();
  inline void clear_has_hastkbgnum2();
  inline void set_has_hastkbgnum3();
  inline void clear_has_hastkbgnum3();
  inline void set_has_hastkbgnum4();
  inline void clear_has_hastkbgnum4();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_user_type();
  inline void clear_has_user_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 totaldays_;
  bool hastkbgnum1_;
  bool hastkbgnum2_;
  bool hastkbgnum3_;
  bool hastkbgnum4_;
  ::google::protobuf::int64 lasttime_;
  ::google::protobuf::int32 user_type_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_ActiveCallBack* default_instance_;
};
// -------------------------------------------------------------------

class DB_Player : public ::google::protobuf::Message {
 public:
  DB_Player();
  virtual ~DB_Player();

  DB_Player(const DB_Player& from);

  inline DB_Player& operator=(const DB_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_Player& default_instance();

  void Swap(DB_Player* other);

  // implements Message ----------------------------------------------

  inline DB_Player* New() const { return New(NULL); }

  DB_Player* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_Player& from);
  void MergeFrom(const DB_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickname = 1 [default = ""];
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional .DB_Bag bag = 2;
  bool has_bag() const;
  void clear_bag();
  static const int kBagFieldNumber = 2;
  const ::DB_Bag& bag() const;
  ::DB_Bag* mutable_bag();
  ::DB_Bag* release_bag();
  void set_allocated_bag(::DB_Bag* bag);

  // optional .DB_LivesInfo lives = 3;
  bool has_lives() const;
  void clear_lives();
  static const int kLivesFieldNumber = 3;
  const ::DB_LivesInfo& lives() const;
  ::DB_LivesInfo* mutable_lives();
  ::DB_LivesInfo* release_lives();
  void set_allocated_lives(::DB_LivesInfo* lives);

  // optional .DB_UniverseInfo universeinfo = 4;
  bool has_universeinfo() const;
  void clear_universeinfo();
  static const int kUniverseinfoFieldNumber = 4;
  const ::DB_UniverseInfo& universeinfo() const;
  ::DB_UniverseInfo* mutable_universeinfo();
  ::DB_UniverseInfo* release_universeinfo();
  void set_allocated_universeinfo(::DB_UniverseInfo* universeinfo);

  // optional bool inited = 5 [default = false];
  bool has_inited() const;
  void clear_inited();
  static const int kInitedFieldNumber = 5;
  bool inited() const;
  void set_inited(bool value);

  // optional .DB_CandyProperties candy_properties = 6;
  bool has_candy_properties() const;
  void clear_candy_properties();
  static const int kCandyPropertiesFieldNumber = 6;
  const ::DB_CandyProperties& candy_properties() const;
  ::DB_CandyProperties* mutable_candy_properties();
  ::DB_CandyProperties* release_candy_properties();
  void set_allocated_candy_properties(::DB_CandyProperties* candy_properties);

  // optional .DB_Events message_events = 7;
  bool has_message_events() const;
  void clear_message_events();
  static const int kMessageEventsFieldNumber = 7;
  const ::DB_Events& message_events() const;
  ::DB_Events* mutable_message_events();
  ::DB_Events* release_message_events();
  void set_allocated_message_events(::DB_Events* message_events);

  // optional int32 friend_action_pos = 8 [default = 0];
  bool has_friend_action_pos() const;
  void clear_friend_action_pos();
  static const int kFriendActionPosFieldNumber = 8;
  ::google::protobuf::int32 friend_action_pos() const;
  void set_friend_action_pos(::google::protobuf::int32 value);

  // optional bool friend_actions_allread = 9 [default = false];
  bool has_friend_actions_allread() const;
  void clear_friend_actions_allread();
  static const int kFriendActionsAllreadFieldNumber = 9;
  bool friend_actions_allread() const;
  void set_friend_actions_allread(bool value);

  // optional int32 friend_action_unread_cnt = 10 [default = 0];
  bool has_friend_action_unread_cnt() const;
  void clear_friend_action_unread_cnt();
  static const int kFriendActionUnreadCntFieldNumber = 10;
  ::google::protobuf::int32 friend_action_unread_cnt() const;
  void set_friend_action_unread_cnt(::google::protobuf::int32 value);

  // repeated .DB_ActionRecord friend_actions = 11;
  int friend_actions_size() const;
  void clear_friend_actions();
  static const int kFriendActionsFieldNumber = 11;
  const ::DB_ActionRecord& friend_actions(int index) const;
  ::DB_ActionRecord* mutable_friend_actions(int index);
  ::DB_ActionRecord* add_friend_actions();
  const ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord >&
      friend_actions() const;
  ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord >*
      mutable_friend_actions();

  // optional .DB_Option option = 12;
  bool has_option() const;
  void clear_option();
  static const int kOptionFieldNumber = 12;
  const ::DB_Option& option() const;
  ::DB_Option* mutable_option();
  ::DB_Option* release_option();
  void set_allocated_option(::DB_Option* option);

  // optional .DB_BitCache OnceOperating = 13;
  bool has_onceoperating() const;
  void clear_onceoperating();
  static const int kOnceOperatingFieldNumber = 13;
  const ::DB_BitCache& onceoperating() const;
  ::DB_BitCache* mutable_onceoperating();
  ::DB_BitCache* release_onceoperating();
  void set_allocated_onceoperating(::DB_BitCache* onceoperating);

  // optional int64 last_login_reward_time = 14 [default = 0];
  bool has_last_login_reward_time() const;
  void clear_last_login_reward_time();
  static const int kLastLoginRewardTimeFieldNumber = 14;
  ::google::protobuf::int64 last_login_reward_time() const;
  void set_last_login_reward_time(::google::protobuf::int64 value);

  // optional .DB_Limit limit = 15;
  bool has_limit() const;
  void clear_limit();
  static const int kLimitFieldNumber = 15;
  const ::DB_Limit& limit() const;
  ::DB_Limit* mutable_limit();
  ::DB_Limit* release_limit();
  void set_allocated_limit(::DB_Limit* limit);

  // repeated .DB_WebBuyRecord web_buy_record = 16;
  int web_buy_record_size() const;
  void clear_web_buy_record();
  static const int kWebBuyRecordFieldNumber = 16;
  const ::DB_WebBuyRecord& web_buy_record(int index) const;
  ::DB_WebBuyRecord* mutable_web_buy_record(int index);
  ::DB_WebBuyRecord* add_web_buy_record();
  const ::google::protobuf::RepeatedPtrField< ::DB_WebBuyRecord >&
      web_buy_record() const;
  ::google::protobuf::RepeatedPtrField< ::DB_WebBuyRecord >*
      mutable_web_buy_record();

  // repeated .DB_CDKey cdkey_counter = 18;
  int cdkey_counter_size() const;
  void clear_cdkey_counter();
  static const int kCdkeyCounterFieldNumber = 18;
  const ::DB_CDKey& cdkey_counter(int index) const;
  ::DB_CDKey* mutable_cdkey_counter(int index);
  ::DB_CDKey* add_cdkey_counter();
  const ::google::protobuf::RepeatedPtrField< ::DB_CDKey >&
      cdkey_counter() const;
  ::google::protobuf::RepeatedPtrField< ::DB_CDKey >*
      mutable_cdkey_counter();

  // optional .DB_Weibo weibo = 19;
  bool has_weibo() const;
  void clear_weibo();
  static const int kWeiboFieldNumber = 19;
  const ::DB_Weibo& weibo() const;
  ::DB_Weibo* mutable_weibo();
  ::DB_Weibo* release_weibo();
  void set_allocated_weibo(::DB_Weibo* weibo);

  // repeated string qqunion_key = 20;
  int qqunion_key_size() const;
  void clear_qqunion_key();
  static const int kQqunionKeyFieldNumber = 20;
  const ::std::string& qqunion_key(int index) const;
  ::std::string* mutable_qqunion_key(int index);
  void set_qqunion_key(int index, const ::std::string& value);
  void set_qqunion_key(int index, const char* value);
  void set_qqunion_key(int index, const char* value, size_t size);
  ::std::string* add_qqunion_key();
  void add_qqunion_key(const ::std::string& value);
  void add_qqunion_key(const char* value);
  void add_qqunion_key(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& qqunion_key() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_qqunion_key();

  // optional .DB_NewFunc new_func_record = 21;
  bool has_new_func_record() const;
  void clear_new_func_record();
  static const int kNewFuncRecordFieldNumber = 21;
  const ::DB_NewFunc& new_func_record() const;
  ::DB_NewFunc* mutable_new_func_record();
  ::DB_NewFunc* release_new_func_record();
  void set_allocated_new_func_record(::DB_NewFunc* new_func_record);

  // optional int32 dallygiftday = 22 [default = 0];
  bool has_dallygiftday() const;
  void clear_dallygiftday();
  static const int kDallygiftdayFieldNumber = 22;
  ::google::protobuf::int32 dallygiftday() const;
  void set_dallygiftday(::google::protobuf::int32 value);

  // optional .DB_FuncSwitch func = 23;
  bool has_func() const;
  void clear_func();
  static const int kFuncFieldNumber = 23;
  const ::DB_FuncSwitch& func() const;
  ::DB_FuncSwitch* mutable_func();
  ::DB_FuncSwitch* release_func();
  void set_allocated_func(::DB_FuncSwitch* func);

  // optional .DB_Limit share = 24;
  bool has_share() const;
  void clear_share();
  static const int kShareFieldNumber = 24;
  const ::DB_Limit& share() const;
  ::DB_Limit* mutable_share();
  ::DB_Limit* release_share();
  void set_allocated_share(::DB_Limit* share);

  // optional .DB_FriendGift friend_gift = 25;
  bool has_friend_gift() const;
  void clear_friend_gift();
  static const int kFriendGiftFieldNumber = 25;
  const ::DB_FriendGift& friend_gift() const;
  ::DB_FriendGift* mutable_friend_gift();
  ::DB_FriendGift* release_friend_gift();
  void set_allocated_friend_gift(::DB_FriendGift* friend_gift);

  // optional .DB_BanLogin banlogin = 26;
  bool has_banlogin() const;
  void clear_banlogin();
  static const int kBanloginFieldNumber = 26;
  const ::DB_BanLogin& banlogin() const;
  ::DB_BanLogin* mutable_banlogin();
  ::DB_BanLogin* release_banlogin();
  void set_allocated_banlogin(::DB_BanLogin* banlogin);

  // optional int32 broadcast_unread_cnt = 32 [default = 0];
  bool has_broadcast_unread_cnt() const;
  void clear_broadcast_unread_cnt();
  static const int kBroadcastUnreadCntFieldNumber = 32;
  ::google::protobuf::int32 broadcast_unread_cnt() const;
  void set_broadcast_unread_cnt(::google::protobuf::int32 value);

  // optional int32 messages_unread_cnt = 34 [default = 0];
  bool has_messages_unread_cnt() const;
  void clear_messages_unread_cnt();
  static const int kMessagesUnreadCntFieldNumber = 34;
  ::google::protobuf::int32 messages_unread_cnt() const;
  void set_messages_unread_cnt(::google::protobuf::int32 value);

  // optional .TimeLimitedUidSet FriendGiftLiveHistory = 35;
  bool has_friendgiftlivehistory() const;
  void clear_friendgiftlivehistory();
  static const int kFriendGiftLiveHistoryFieldNumber = 35;
  const ::TimeLimitedUidSet& friendgiftlivehistory() const;
  ::TimeLimitedUidSet* mutable_friendgiftlivehistory();
  ::TimeLimitedUidSet* release_friendgiftlivehistory();
  void set_allocated_friendgiftlivehistory(::TimeLimitedUidSet* friendgiftlivehistory);

  // optional .DB_Singed SingedHistory = 36;
  bool has_singedhistory() const;
  void clear_singedhistory();
  static const int kSingedHistoryFieldNumber = 36;
  const ::DB_Singed& singedhistory() const;
  ::DB_Singed* mutable_singedhistory();
  ::DB_Singed* release_singedhistory();
  void set_allocated_singedhistory(::DB_Singed* singedhistory);

  // optional int32 invite_version = 17 [default = 0];
  bool has_invite_version() const;
  void clear_invite_version();
  static const int kInviteVersionFieldNumber = 17;
  ::google::protobuf::int32 invite_version() const;
  void set_invite_version(::google::protobuf::int32 value);

  // optional int32 invite_count_o1 = 50 [default = 0];
  bool has_invite_count_o1() const;
  void clear_invite_count_o1();
  static const int kInviteCountO1FieldNumber = 50;
  ::google::protobuf::int32 invite_count_o1() const;
  void set_invite_count_o1(::google::protobuf::int32 value);

  // optional string inviter_openid = 38 [default = ""];
  bool has_inviter_openid() const;
  void clear_inviter_openid();
  static const int kInviterOpenidFieldNumber = 38;
  const ::std::string& inviter_openid() const;
  void set_inviter_openid(const ::std::string& value);
  void set_inviter_openid(const char* value);
  void set_inviter_openid(const char* value, size_t size);
  ::std::string* mutable_inviter_openid();
  ::std::string* release_inviter_openid();
  void set_allocated_inviter_openid(::std::string* inviter_openid);

  // optional .DB_Yelldmd yelldmd = 39;
  bool has_yelldmd() const;
  void clear_yelldmd();
  static const int kYelldmdFieldNumber = 39;
  const ::DB_Yelldmd& yelldmd() const;
  ::DB_Yelldmd* mutable_yelldmd();
  ::DB_Yelldmd* release_yelldmd();
  void set_allocated_yelldmd(::DB_Yelldmd* yelldmd);

  // optional .DB_SignHistory sign_history = 40;
  bool has_sign_history() const;
  void clear_sign_history();
  static const int kSignHistoryFieldNumber = 40;
  const ::DB_SignHistory& sign_history() const;
  ::DB_SignHistory* mutable_sign_history();
  ::DB_SignHistory* release_sign_history();
  void set_allocated_sign_history(::DB_SignHistory* sign_history);

  // optional .DB_BitCache cdkey_pickhistory = 41;
  bool has_cdkey_pickhistory() const;
  void clear_cdkey_pickhistory();
  static const int kCdkeyPickhistoryFieldNumber = 41;
  const ::DB_BitCache& cdkey_pickhistory() const;
  ::DB_BitCache* mutable_cdkey_pickhistory();
  ::DB_BitCache* release_cdkey_pickhistory();
  void set_allocated_cdkey_pickhistory(::DB_BitCache* cdkey_pickhistory);

  // optional .DB_BitCache new_user_save_gift = 42;
  bool has_new_user_save_gift() const;
  void clear_new_user_save_gift();
  static const int kNewUserSaveGiftFieldNumber = 42;
  const ::DB_BitCache& new_user_save_gift() const;
  ::DB_BitCache* mutable_new_user_save_gift();
  ::DB_BitCache* release_new_user_save_gift();
  void set_allocated_new_user_save_gift(::DB_BitCache* new_user_save_gift);

  // optional .DB_EasyTimeSet easytimeset = 43;
  bool has_easytimeset() const;
  void clear_easytimeset();
  static const int kEasytimesetFieldNumber = 43;
  const ::DB_EasyTimeSet& easytimeset() const;
  ::DB_EasyTimeSet* mutable_easytimeset();
  ::DB_EasyTimeSet* release_easytimeset();
  void set_allocated_easytimeset(::DB_EasyTimeSet* easytimeset);

  // optional bool SkipLog = 44 [default = false];
  bool has_skiplog() const;
  void clear_skiplog();
  static const int kSkipLogFieldNumber = 44;
  bool skiplog() const;
  void set_skiplog(bool value);

  // optional int32 invite_send_count = 45 [default = 0];
  bool has_invite_send_count() const;
  void clear_invite_send_count();
  static const int kInviteSendCountFieldNumber = 45;
  ::google::protobuf::int32 invite_send_count() const;
  void set_invite_send_count(::google::protobuf::int32 value);

  // optional .DB_DallyUniverseInfo dally_universe = 46;
  bool has_dally_universe() const;
  void clear_dally_universe();
  static const int kDallyUniverseFieldNumber = 46;
  const ::DB_DallyUniverseInfo& dally_universe() const;
  ::DB_DallyUniverseInfo* mutable_dally_universe();
  ::DB_DallyUniverseInfo* release_dally_universe();
  void set_allocated_dally_universe(::DB_DallyUniverseInfo* dally_universe);

  // optional int32 now_playing_level = 47;
  bool has_now_playing_level() const;
  void clear_now_playing_level();
  static const int kNowPlayingLevelFieldNumber = 47;
  ::google::protobuf::int32 now_playing_level() const;
  void set_now_playing_level(::google::protobuf::int32 value);

  // optional .DB_DailyCounter dailycounter = 48;
  bool has_dailycounter() const;
  void clear_dailycounter();
  static const int kDailycounterFieldNumber = 48;
  const ::DB_DailyCounter& dailycounter() const;
  ::DB_DailyCounter* mutable_dailycounter();
  ::DB_DailyCounter* release_dailycounter();
  void set_allocated_dailycounter(::DB_DailyCounter* dailycounter);

  // optional .DB_BitCache rewared_bit_cache = 49;
  bool has_rewared_bit_cache() const;
  void clear_rewared_bit_cache();
  static const int kRewaredBitCacheFieldNumber = 49;
  const ::DB_BitCache& rewared_bit_cache() const;
  ::DB_BitCache* mutable_rewared_bit_cache();
  ::DB_BitCache* release_rewared_bit_cache();
  void set_allocated_rewared_bit_cache(::DB_BitCache* rewared_bit_cache);

  // optional .DB_CallBack callback = 51;
  bool has_callback() const;
  void clear_callback();
  static const int kCallbackFieldNumber = 51;
  const ::DB_CallBack& callback() const;
  ::DB_CallBack* mutable_callback();
  ::DB_CallBack* release_callback();
  void set_allocated_callback(::DB_CallBack* callback);

  // optional bool from_zynga_city = 52 [default = false];
  bool has_from_zynga_city() const;
  void clear_from_zynga_city();
  static const int kFromZyngaCityFieldNumber = 52;
  bool from_zynga_city() const;
  void set_from_zynga_city(bool value);

  // optional .TimeLimitedUidSet FriendGiftLiveSendHistory = 53;
  bool has_friendgiftlivesendhistory() const;
  void clear_friendgiftlivesendhistory();
  static const int kFriendGiftLiveSendHistoryFieldNumber = 53;
  const ::TimeLimitedUidSet& friendgiftlivesendhistory() const;
  ::TimeLimitedUidSet* mutable_friendgiftlivesendhistory();
  ::TimeLimitedUidSet* release_friendgiftlivesendhistory();
  void set_allocated_friendgiftlivesendhistory(::TimeLimitedUidSet* friendgiftlivesendhistory);

  // optional .DB_ContinuousDays ContinousLoginDays = 54;
  bool has_continouslogindays() const;
  void clear_continouslogindays();
  static const int kContinousLoginDaysFieldNumber = 54;
  const ::DB_ContinuousDays& continouslogindays() const;
  ::DB_ContinuousDays* mutable_continouslogindays();
  ::DB_ContinuousDays* release_continouslogindays();
  void set_allocated_continouslogindays(::DB_ContinuousDays* continouslogindays);

  // optional .DB_Map Room = 55;
  bool has_room() const;
  void clear_room();
  static const int kRoomFieldNumber = 55;
  const ::DB_Map& room() const;
  ::DB_Map* mutable_room();
  ::DB_Map* release_room();
  void set_allocated_room(::DB_Map* room);

  // optional int32 invite_count = 56 [default = 0];
  bool has_invite_count() const;
  void clear_invite_count();
  static const int kInviteCountFieldNumber = 56;
  ::google::protobuf::int32 invite_count() const;
  void set_invite_count(::google::protobuf::int32 value);

  // optional .DB_DragboatFvl Dragboatfestivl = 57;
  bool has_dragboatfestivl() const;
  void clear_dragboatfestivl();
  static const int kDragboatfestivlFieldNumber = 57;
  const ::DB_DragboatFvl& dragboatfestivl() const;
  ::DB_DragboatFvl* mutable_dragboatfestivl();
  ::DB_DragboatFvl* release_dragboatfestivl();
  void set_allocated_dragboatfestivl(::DB_DragboatFvl* dragboatfestivl);

  // optional .DB_ActiveInviteself ActiveInviteself = 58;
  bool has_activeinviteself() const;
  void clear_activeinviteself();
  static const int kActiveInviteselfFieldNumber = 58;
  const ::DB_ActiveInviteself& activeinviteself() const;
  ::DB_ActiveInviteself* mutable_activeinviteself();
  ::DB_ActiveInviteself* release_activeinviteself();
  void set_allocated_activeinviteself(::DB_ActiveInviteself* activeinviteself);

  // optional int32 qpoint_usage_feedback = 59 [default = 0];
  bool has_qpoint_usage_feedback() const;
  void clear_qpoint_usage_feedback();
  static const int kQpointUsageFeedbackFieldNumber = 59;
  ::google::protobuf::int32 qpoint_usage_feedback() const;
  void set_qpoint_usage_feedback(::google::protobuf::int32 value);

  // optional int32 MobileDeviceSyncCnt = 60 [default = 0];
  bool has_mobiledevicesynccnt() const;
  void clear_mobiledevicesynccnt();
  static const int kMobileDeviceSyncCntFieldNumber = 60;
  ::google::protobuf::int32 mobiledevicesynccnt() const;
  void set_mobiledevicesynccnt(::google::protobuf::int32 value);

  // optional .DB_ActiveCallBack ActiveCallBack = 61;
  bool has_activecallback() const;
  void clear_activecallback();
  static const int kActiveCallBackFieldNumber = 61;
  const ::DB_ActiveCallBack& activecallback() const;
  ::DB_ActiveCallBack* mutable_activecallback();
  ::DB_ActiveCallBack* release_activecallback();
  void set_allocated_activecallback(::DB_ActiveCallBack* activecallback);

  // optional .DB_KingOfStar KingOfStar = 62;
  bool has_kingofstar() const;
  void clear_kingofstar();
  static const int kKingOfStarFieldNumber = 62;
  const ::DB_KingOfStar& kingofstar() const;
  ::DB_KingOfStar* mutable_kingofstar();
  ::DB_KingOfStar* release_kingofstar();
  void set_allocated_kingofstar(::DB_KingOfStar* kingofstar);

  // optional .DB_ExpLevel exp_level = 63;
  bool has_exp_level() const;
  void clear_exp_level();
  static const int kExpLevelFieldNumber = 63;
  const ::DB_ExpLevel& exp_level() const;
  ::DB_ExpLevel* mutable_exp_level();
  ::DB_ExpLevel* release_exp_level();
  void set_allocated_exp_level(::DB_ExpLevel* exp_level);

  // @@protoc_insertion_point(class_scope:DB_Player)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_bag();
  inline void clear_has_bag();
  inline void set_has_lives();
  inline void clear_has_lives();
  inline void set_has_universeinfo();
  inline void clear_has_universeinfo();
  inline void set_has_inited();
  inline void clear_has_inited();
  inline void set_has_candy_properties();
  inline void clear_has_candy_properties();
  inline void set_has_message_events();
  inline void clear_has_message_events();
  inline void set_has_friend_action_pos();
  inline void clear_has_friend_action_pos();
  inline void set_has_friend_actions_allread();
  inline void clear_has_friend_actions_allread();
  inline void set_has_friend_action_unread_cnt();
  inline void clear_has_friend_action_unread_cnt();
  inline void set_has_option();
  inline void clear_has_option();
  inline void set_has_onceoperating();
  inline void clear_has_onceoperating();
  inline void set_has_last_login_reward_time();
  inline void clear_has_last_login_reward_time();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_weibo();
  inline void clear_has_weibo();
  inline void set_has_new_func_record();
  inline void clear_has_new_func_record();
  inline void set_has_dallygiftday();
  inline void clear_has_dallygiftday();
  inline void set_has_func();
  inline void clear_has_func();
  inline void set_has_share();
  inline void clear_has_share();
  inline void set_has_friend_gift();
  inline void clear_has_friend_gift();
  inline void set_has_banlogin();
  inline void clear_has_banlogin();
  inline void set_has_broadcast_unread_cnt();
  inline void clear_has_broadcast_unread_cnt();
  inline void set_has_messages_unread_cnt();
  inline void clear_has_messages_unread_cnt();
  inline void set_has_friendgiftlivehistory();
  inline void clear_has_friendgiftlivehistory();
  inline void set_has_singedhistory();
  inline void clear_has_singedhistory();
  inline void set_has_invite_version();
  inline void clear_has_invite_version();
  inline void set_has_invite_count_o1();
  inline void clear_has_invite_count_o1();
  inline void set_has_inviter_openid();
  inline void clear_has_inviter_openid();
  inline void set_has_yelldmd();
  inline void clear_has_yelldmd();
  inline void set_has_sign_history();
  inline void clear_has_sign_history();
  inline void set_has_cdkey_pickhistory();
  inline void clear_has_cdkey_pickhistory();
  inline void set_has_new_user_save_gift();
  inline void clear_has_new_user_save_gift();
  inline void set_has_easytimeset();
  inline void clear_has_easytimeset();
  inline void set_has_skiplog();
  inline void clear_has_skiplog();
  inline void set_has_invite_send_count();
  inline void clear_has_invite_send_count();
  inline void set_has_dally_universe();
  inline void clear_has_dally_universe();
  inline void set_has_now_playing_level();
  inline void clear_has_now_playing_level();
  inline void set_has_dailycounter();
  inline void clear_has_dailycounter();
  inline void set_has_rewared_bit_cache();
  inline void clear_has_rewared_bit_cache();
  inline void set_has_callback();
  inline void clear_has_callback();
  inline void set_has_from_zynga_city();
  inline void clear_has_from_zynga_city();
  inline void set_has_friendgiftlivesendhistory();
  inline void clear_has_friendgiftlivesendhistory();
  inline void set_has_continouslogindays();
  inline void clear_has_continouslogindays();
  inline void set_has_room();
  inline void clear_has_room();
  inline void set_has_invite_count();
  inline void clear_has_invite_count();
  inline void set_has_dragboatfestivl();
  inline void clear_has_dragboatfestivl();
  inline void set_has_activeinviteself();
  inline void clear_has_activeinviteself();
  inline void set_has_qpoint_usage_feedback();
  inline void clear_has_qpoint_usage_feedback();
  inline void set_has_mobiledevicesynccnt();
  inline void clear_has_mobiledevicesynccnt();
  inline void set_has_activecallback();
  inline void clear_has_activecallback();
  inline void set_has_kingofstar();
  inline void clear_has_kingofstar();
  inline void set_has_exp_level();
  inline void clear_has_exp_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::DB_Bag* bag_;
  ::DB_LivesInfo* lives_;
  ::DB_UniverseInfo* universeinfo_;
  ::DB_CandyProperties* candy_properties_;
  ::DB_Events* message_events_;
  ::google::protobuf::int32 friend_action_pos_;
  ::google::protobuf::int32 friend_action_unread_cnt_;
  ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord > friend_actions_;
  ::DB_Option* option_;
  ::DB_BitCache* onceoperating_;
  ::google::protobuf::int64 last_login_reward_time_;
  ::DB_Limit* limit_;
  ::google::protobuf::RepeatedPtrField< ::DB_WebBuyRecord > web_buy_record_;
  ::google::protobuf::RepeatedPtrField< ::DB_CDKey > cdkey_counter_;
  ::DB_Weibo* weibo_;
  ::google::protobuf::RepeatedPtrField< ::std::string> qqunion_key_;
  ::DB_NewFunc* new_func_record_;
  ::DB_FuncSwitch* func_;
  ::DB_Limit* share_;
  ::google::protobuf::int32 dallygiftday_;
  bool inited_;
  bool friend_actions_allread_;
  bool skiplog_;
  bool from_zynga_city_;
  ::DB_FriendGift* friend_gift_;
  ::DB_BanLogin* banlogin_;
  ::google::protobuf::int32 broadcast_unread_cnt_;
  ::google::protobuf::int32 messages_unread_cnt_;
  ::TimeLimitedUidSet* friendgiftlivehistory_;
  ::DB_Singed* singedhistory_;
  ::google::protobuf::int32 invite_version_;
  ::google::protobuf::int32 invite_count_o1_;
  ::google::protobuf::internal::ArenaStringPtr inviter_openid_;
  ::DB_Yelldmd* yelldmd_;
  ::DB_SignHistory* sign_history_;
  ::DB_BitCache* cdkey_pickhistory_;
  ::DB_BitCache* new_user_save_gift_;
  ::DB_EasyTimeSet* easytimeset_;
  ::DB_DallyUniverseInfo* dally_universe_;
  ::google::protobuf::int32 invite_send_count_;
  ::google::protobuf::int32 now_playing_level_;
  ::DB_DailyCounter* dailycounter_;
  ::DB_BitCache* rewared_bit_cache_;
  ::DB_CallBack* callback_;
  ::TimeLimitedUidSet* friendgiftlivesendhistory_;
  ::DB_ContinuousDays* continouslogindays_;
  ::DB_Map* room_;
  ::DB_DragboatFvl* dragboatfestivl_;
  ::google::protobuf::int32 invite_count_;
  ::google::protobuf::int32 qpoint_usage_feedback_;
  ::DB_ActiveInviteself* activeinviteself_;
  ::DB_ActiveCallBack* activecallback_;
  ::DB_KingOfStar* kingofstar_;
  ::DB_ExpLevel* exp_level_;
  ::google::protobuf::int32 mobiledevicesynccnt_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_Player* default_instance_;
};
// -------------------------------------------------------------------

class DB_User : public ::google::protobuf::Message {
 public:
  DB_User();
  virtual ~DB_User();

  DB_User(const DB_User& from);

  inline DB_User& operator=(const DB_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_User& default_instance();

  void Swap(DB_User* other);

  // implements Message ----------------------------------------------

  inline DB_User* New() const { return New(NULL); }

  DB_User* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_User& from);
  void MergeFrom(const DB_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DB_User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1 [default = 0];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required string platform_id = 2 [default = ""];
  bool has_platform_id() const;
  void clear_platform_id();
  static const int kPlatformIdFieldNumber = 2;
  const ::std::string& platform_id() const;
  void set_platform_id(const ::std::string& value);
  void set_platform_id(const char* value);
  void set_platform_id(const char* value, size_t size);
  ::std::string* mutable_platform_id();
  ::std::string* release_platform_id();
  void set_allocated_platform_id(::std::string* platform_id);

  // repeated string name = 3;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // repeated string profile_link = 4;
  int profile_link_size() const;
  void clear_profile_link();
  static const int kProfileLinkFieldNumber = 4;
  const ::std::string& profile_link(int index) const;
  ::std::string* mutable_profile_link(int index);
  void set_profile_link(int index, const ::std::string& value);
  void set_profile_link(int index, const char* value);
  void set_profile_link(int index, const char* value, size_t size);
  ::std::string* add_profile_link();
  void add_profile_link(const ::std::string& value);
  void add_profile_link(const char* value);
  void add_profile_link(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& profile_link() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_profile_link();

  // repeated int32 gender = 5;
  int gender_size() const;
  void clear_gender();
  static const int kGenderFieldNumber = 5;
  ::google::protobuf::int32 gender(int index) const;
  void set_gender(int index, ::google::protobuf::int32 value);
  void add_gender(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gender() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gender();

  // required int64 last_login_time = 8 [default = 0];
  bool has_last_login_time() const;
  void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 8;
  ::google::protobuf::int64 last_login_time() const;
  void set_last_login_time(::google::protobuf::int64 value);

  // required string last_login_ip = 9 [default = ""];
  bool has_last_login_ip() const;
  void clear_last_login_ip();
  static const int kLastLoginIpFieldNumber = 9;
  const ::std::string& last_login_ip() const;
  void set_last_login_ip(const ::std::string& value);
  void set_last_login_ip(const char* value);
  void set_last_login_ip(const char* value, size_t size);
  ::std::string* mutable_last_login_ip();
  ::std::string* release_last_login_ip();
  void set_allocated_last_login_ip(::std::string* last_login_ip);

  // required int64 regist_time = 10 [default = 0];
  bool has_regist_time() const;
  void clear_regist_time();
  static const int kRegistTimeFieldNumber = 10;
  ::google::protobuf::int64 regist_time() const;
  void set_regist_time(::google::protobuf::int64 value);

  // optional int32 yellowDmdLvl = 13 [default = 0];
  bool has_yellowdmdlvl() const;
  void clear_yellowdmdlvl();
  static const int kYellowDmdLvlFieldNumber = 13;
  ::google::protobuf::int32 yellowdmdlvl() const;
  void set_yellowdmdlvl(::google::protobuf::int32 value);

  // optional bool isYellowDmd = 14 [default = false];
  bool has_isyellowdmd() const;
  void clear_isyellowdmd();
  static const int kIsYellowDmdFieldNumber = 14;
  bool isyellowdmd() const;
  void set_isyellowdmd(bool value);

  // optional bool isYellowDmdYear = 15 [default = false];
  bool has_isyellowdmdyear() const;
  void clear_isyellowdmdyear();
  static const int kIsYellowDmdYearFieldNumber = 15;
  bool isyellowdmdyear() const;
  void set_isyellowdmdyear(bool value);

  // optional .DB_Player player = 19;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 19;
  const ::DB_Player& player() const;
  ::DB_Player* mutable_player();
  ::DB_Player* release_player();
  void set_allocated_player(::DB_Player* player);

  // optional int32 QPoint = 20 [default = 0];
  bool has_qpoint() const;
  void clear_qpoint();
  static const int kQPointFieldNumber = 20;
  ::google::protobuf::int32 qpoint() const;
  void set_qpoint(::google::protobuf::int32 value);

  // optional int32 version = 21;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 21;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional int64 secret = 22 [default = 0];
  bool has_secret() const;
  void clear_secret();
  static const int kSecretFieldNumber = 22;
  ::google::protobuf::int64 secret() const;
  void set_secret(::google::protobuf::int64 value);

  // optional int64 secret_gentime = 23 [default = 0];
  bool has_secret_gentime() const;
  void clear_secret_gentime();
  static const int kSecretGentimeFieldNumber = 23;
  ::google::protobuf::int64 secret_gentime() const;
  void set_secret_gentime(::google::protobuf::int64 value);

  // optional int32 platformtype = 26 [default = 1];
  bool has_platformtype() const;
  void clear_platformtype();
  static const int kPlatformtypeFieldNumber = 26;
  ::google::protobuf::int32 platformtype() const;
  void set_platformtype(::google::protobuf::int32 value);

  // optional int32 checkval_first = 27 [default = 0];
  bool has_checkval_first() const;
  void clear_checkval_first();
  static const int kCheckvalFirstFieldNumber = 27;
  ::google::protobuf::int32 checkval_first() const;
  void set_checkval_first(::google::protobuf::int32 value);

  // optional int32 checkval_second = 28 [default = 0];
  bool has_checkval_second() const;
  void clear_checkval_second();
  static const int kCheckvalSecondFieldNumber = 28;
  ::google::protobuf::int32 checkval_second() const;
  void set_checkval_second(::google::protobuf::int32 value);

  // optional int32 passval = 29 [default = 0];
  bool has_passval() const;
  void clear_passval();
  static const int kPassvalFieldNumber = 29;
  ::google::protobuf::int32 passval() const;
  void set_passval(::google::protobuf::int32 value);

  // optional string openkey = 30 [default = ""];
  bool has_openkey() const;
  void clear_openkey();
  static const int kOpenkeyFieldNumber = 30;
  const ::std::string& openkey() const;
  void set_openkey(const ::std::string& value);
  void set_openkey(const char* value);
  void set_openkey(const char* value, size_t size);
  ::std::string* mutable_openkey();
  ::std::string* release_openkey();
  void set_allocated_openkey(::std::string* openkey);

  // optional int32 logincnt = 31 [default = 0];
  bool has_logincnt() const;
  void clear_logincnt();
  static const int kLogincntFieldNumber = 31;
  ::google::protobuf::int32 logincnt() const;
  void set_logincnt(::google::protobuf::int32 value);

  // optional int32 active_days = 32 [default = 0];
  bool has_active_days() const;
  void clear_active_days();
  static const int kActiveDaysFieldNumber = 32;
  ::google::protobuf::int32 active_days() const;
  void set_active_days(::google::protobuf::int32 value);

  // optional int32 total_login_days = 33 [default = 0];
  bool has_total_login_days() const;
  void clear_total_login_days();
  static const int kTotalLoginDaysFieldNumber = 33;
  ::google::protobuf::int32 total_login_days() const;
  void set_total_login_days(::google::protobuf::int32 value);

  // optional int32 user_from = 34 [default = 0];
  bool has_user_from() const;
  void clear_user_from();
  static const int kUserFromFieldNumber = 34;
  ::google::protobuf::int32 user_from() const;
  void set_user_from(::google::protobuf::int32 value);

  // optional int32 user_cmem_v = 35 [default = 0];
  bool has_user_cmem_v() const;
  void clear_user_cmem_v();
  static const int kUserCmemVFieldNumber = 35;
  ::google::protobuf::int32 user_cmem_v() const;
  void set_user_cmem_v(::google::protobuf::int32 value);

  // optional int64 last_active_day = 36 [default = 0];
  bool has_last_active_day() const;
  void clear_last_active_day();
  static const int kLastActiveDayFieldNumber = 36;
  ::google::protobuf::int64 last_active_day() const;
  void set_last_active_day(::google::protobuf::int64 value);

  // optional int32 ingame_cash = 37 [default = 0];
  bool has_ingame_cash() const;
  void clear_ingame_cash();
  static const int kIngameCashFieldNumber = 37;
  ::google::protobuf::int32 ingame_cash() const;
  void set_ingame_cash(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_User)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_platform_id();
  inline void clear_has_platform_id();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_last_login_ip();
  inline void clear_has_last_login_ip();
  inline void set_has_regist_time();
  inline void clear_has_regist_time();
  inline void set_has_yellowdmdlvl();
  inline void clear_has_yellowdmdlvl();
  inline void set_has_isyellowdmd();
  inline void clear_has_isyellowdmd();
  inline void set_has_isyellowdmdyear();
  inline void clear_has_isyellowdmdyear();
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_qpoint();
  inline void clear_has_qpoint();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_secret();
  inline void clear_has_secret();
  inline void set_has_secret_gentime();
  inline void clear_has_secret_gentime();
  inline void set_has_platformtype();
  inline void clear_has_platformtype();
  inline void set_has_checkval_first();
  inline void clear_has_checkval_first();
  inline void set_has_checkval_second();
  inline void clear_has_checkval_second();
  inline void set_has_passval();
  inline void clear_has_passval();
  inline void set_has_openkey();
  inline void clear_has_openkey();
  inline void set_has_logincnt();
  inline void clear_has_logincnt();
  inline void set_has_active_days();
  inline void clear_has_active_days();
  inline void set_has_total_login_days();
  inline void clear_has_total_login_days();
  inline void set_has_user_from();
  inline void clear_has_user_from();
  inline void set_has_user_cmem_v();
  inline void clear_has_user_cmem_v();
  inline void set_has_last_active_day();
  inline void clear_has_last_active_day();
  inline void set_has_ingame_cash();
  inline void clear_has_ingame_cash();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr platform_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> profile_link_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gender_;
  ::google::protobuf::int64 last_login_time_;
  ::google::protobuf::internal::ArenaStringPtr last_login_ip_;
  ::google::protobuf::int64 regist_time_;
  ::google::protobuf::int32 yellowdmdlvl_;
  bool isyellowdmd_;
  bool isyellowdmdyear_;
  ::DB_Player* player_;
  ::google::protobuf::int32 qpoint_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int64 secret_;
  ::google::protobuf::int64 secret_gentime_;
  ::google::protobuf::int32 platformtype_;
  ::google::protobuf::int32 checkval_first_;
  ::google::protobuf::int32 checkval_second_;
  ::google::protobuf::int32 passval_;
  ::google::protobuf::internal::ArenaStringPtr openkey_;
  ::google::protobuf::int32 logincnt_;
  ::google::protobuf::int32 active_days_;
  ::google::protobuf::int32 total_login_days_;
  ::google::protobuf::int32 user_from_;
  ::google::protobuf::int64 last_active_day_;
  ::google::protobuf::int32 user_cmem_v_;
  ::google::protobuf::int32 ingame_cash_;
  friend void  protobuf_AddDesc_dbinterface_2eproto();
  friend void protobuf_AssignDesc_dbinterface_2eproto();
  friend void protobuf_ShutdownFile_dbinterface_2eproto();

  void InitAsDefaultInstance();
  static DB_User* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DB_BitCache

// repeated int32 bit = 1;
inline int DB_BitCache::bit_size() const {
  return bit_.size();
}
inline void DB_BitCache::clear_bit() {
  bit_.Clear();
}
inline ::google::protobuf::int32 DB_BitCache::bit(int index) const {
  // @@protoc_insertion_point(field_get:DB_BitCache.bit)
  return bit_.Get(index);
}
inline void DB_BitCache::set_bit(int index, ::google::protobuf::int32 value) {
  bit_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_BitCache.bit)
}
inline void DB_BitCache::add_bit(::google::protobuf::int32 value) {
  bit_.Add(value);
  // @@protoc_insertion_point(field_add:DB_BitCache.bit)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_BitCache::bit() const {
  // @@protoc_insertion_point(field_list:DB_BitCache.bit)
  return bit_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_BitCache::mutable_bit() {
  // @@protoc_insertion_point(field_mutable_list:DB_BitCache.bit)
  return &bit_;
}

// -------------------------------------------------------------------

// TimeLimitedUidSet

// repeated int64 uids = 6;
inline int TimeLimitedUidSet::uids_size() const {
  return uids_.size();
}
inline void TimeLimitedUidSet::clear_uids() {
  uids_.Clear();
}
inline ::google::protobuf::int64 TimeLimitedUidSet::uids(int index) const {
  // @@protoc_insertion_point(field_get:TimeLimitedUidSet.uids)
  return uids_.Get(index);
}
inline void TimeLimitedUidSet::set_uids(int index, ::google::protobuf::int64 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:TimeLimitedUidSet.uids)
}
inline void TimeLimitedUidSet::add_uids(::google::protobuf::int64 value) {
  uids_.Add(value);
  // @@protoc_insertion_point(field_add:TimeLimitedUidSet.uids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TimeLimitedUidSet::uids() const {
  // @@protoc_insertion_point(field_list:TimeLimitedUidSet.uids)
  return uids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TimeLimitedUidSet::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:TimeLimitedUidSet.uids)
  return &uids_;
}

// optional int64 checttime = 7;
inline bool TimeLimitedUidSet::has_checttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeLimitedUidSet::set_has_checttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeLimitedUidSet::clear_has_checttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeLimitedUidSet::clear_checttime() {
  checttime_ = GOOGLE_LONGLONG(0);
  clear_has_checttime();
}
inline ::google::protobuf::int64 TimeLimitedUidSet::checttime() const {
  // @@protoc_insertion_point(field_get:TimeLimitedUidSet.checttime)
  return checttime_;
}
inline void TimeLimitedUidSet::set_checttime(::google::protobuf::int64 value) {
  set_has_checttime();
  checttime_ = value;
  // @@protoc_insertion_point(field_set:TimeLimitedUidSet.checttime)
}

// optional int32 uid_max = 8 [default = 0];
inline bool TimeLimitedUidSet::has_uid_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeLimitedUidSet::set_has_uid_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeLimitedUidSet::clear_has_uid_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeLimitedUidSet::clear_uid_max() {
  uid_max_ = 0;
  clear_has_uid_max();
}
inline ::google::protobuf::int32 TimeLimitedUidSet::uid_max() const {
  // @@protoc_insertion_point(field_get:TimeLimitedUidSet.uid_max)
  return uid_max_;
}
inline void TimeLimitedUidSet::set_uid_max(::google::protobuf::int32 value) {
  set_has_uid_max();
  uid_max_ = value;
  // @@protoc_insertion_point(field_set:TimeLimitedUidSet.uid_max)
}

// repeated string names = 9;
inline int TimeLimitedUidSet::names_size() const {
  return names_.size();
}
inline void TimeLimitedUidSet::clear_names() {
  names_.Clear();
}
inline const ::std::string& TimeLimitedUidSet::names(int index) const {
  // @@protoc_insertion_point(field_get:TimeLimitedUidSet.names)
  return names_.Get(index);
}
inline ::std::string* TimeLimitedUidSet::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:TimeLimitedUidSet.names)
  return names_.Mutable(index);
}
inline void TimeLimitedUidSet::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TimeLimitedUidSet.names)
  names_.Mutable(index)->assign(value);
}
inline void TimeLimitedUidSet::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TimeLimitedUidSet.names)
}
inline void TimeLimitedUidSet::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TimeLimitedUidSet.names)
}
inline ::std::string* TimeLimitedUidSet::add_names() {
  return names_.Add();
}
inline void TimeLimitedUidSet::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TimeLimitedUidSet.names)
}
inline void TimeLimitedUidSet::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TimeLimitedUidSet.names)
}
inline void TimeLimitedUidSet::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TimeLimitedUidSet.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TimeLimitedUidSet::names() const {
  // @@protoc_insertion_point(field_list:TimeLimitedUidSet.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TimeLimitedUidSet::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:TimeLimitedUidSet.names)
  return &names_;
}

// repeated string head_urls = 10;
inline int TimeLimitedUidSet::head_urls_size() const {
  return head_urls_.size();
}
inline void TimeLimitedUidSet::clear_head_urls() {
  head_urls_.Clear();
}
inline const ::std::string& TimeLimitedUidSet::head_urls(int index) const {
  // @@protoc_insertion_point(field_get:TimeLimitedUidSet.head_urls)
  return head_urls_.Get(index);
}
inline ::std::string* TimeLimitedUidSet::mutable_head_urls(int index) {
  // @@protoc_insertion_point(field_mutable:TimeLimitedUidSet.head_urls)
  return head_urls_.Mutable(index);
}
inline void TimeLimitedUidSet::set_head_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TimeLimitedUidSet.head_urls)
  head_urls_.Mutable(index)->assign(value);
}
inline void TimeLimitedUidSet::set_head_urls(int index, const char* value) {
  head_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TimeLimitedUidSet.head_urls)
}
inline void TimeLimitedUidSet::set_head_urls(int index, const char* value, size_t size) {
  head_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TimeLimitedUidSet.head_urls)
}
inline ::std::string* TimeLimitedUidSet::add_head_urls() {
  return head_urls_.Add();
}
inline void TimeLimitedUidSet::add_head_urls(const ::std::string& value) {
  head_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TimeLimitedUidSet.head_urls)
}
inline void TimeLimitedUidSet::add_head_urls(const char* value) {
  head_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TimeLimitedUidSet.head_urls)
}
inline void TimeLimitedUidSet::add_head_urls(const char* value, size_t size) {
  head_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TimeLimitedUidSet.head_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TimeLimitedUidSet::head_urls() const {
  // @@protoc_insertion_point(field_list:TimeLimitedUidSet.head_urls)
  return head_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TimeLimitedUidSet::mutable_head_urls() {
  // @@protoc_insertion_point(field_mutable_list:TimeLimitedUidSet.head_urls)
  return &head_urls_;
}

// repeated string openids = 11;
inline int TimeLimitedUidSet::openids_size() const {
  return openids_.size();
}
inline void TimeLimitedUidSet::clear_openids() {
  openids_.Clear();
}
inline const ::std::string& TimeLimitedUidSet::openids(int index) const {
  // @@protoc_insertion_point(field_get:TimeLimitedUidSet.openids)
  return openids_.Get(index);
}
inline ::std::string* TimeLimitedUidSet::mutable_openids(int index) {
  // @@protoc_insertion_point(field_mutable:TimeLimitedUidSet.openids)
  return openids_.Mutable(index);
}
inline void TimeLimitedUidSet::set_openids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TimeLimitedUidSet.openids)
  openids_.Mutable(index)->assign(value);
}
inline void TimeLimitedUidSet::set_openids(int index, const char* value) {
  openids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TimeLimitedUidSet.openids)
}
inline void TimeLimitedUidSet::set_openids(int index, const char* value, size_t size) {
  openids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TimeLimitedUidSet.openids)
}
inline ::std::string* TimeLimitedUidSet::add_openids() {
  return openids_.Add();
}
inline void TimeLimitedUidSet::add_openids(const ::std::string& value) {
  openids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TimeLimitedUidSet.openids)
}
inline void TimeLimitedUidSet::add_openids(const char* value) {
  openids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TimeLimitedUidSet.openids)
}
inline void TimeLimitedUidSet::add_openids(const char* value, size_t size) {
  openids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TimeLimitedUidSet.openids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TimeLimitedUidSet::openids() const {
  // @@protoc_insertion_point(field_list:TimeLimitedUidSet.openids)
  return openids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TimeLimitedUidSet::mutable_openids() {
  // @@protoc_insertion_point(field_mutable_list:TimeLimitedUidSet.openids)
  return &openids_;
}

// -------------------------------------------------------------------

// LotteryLimited

// optional int64 pvecounts = 1 [default = 0];
inline bool LotteryLimited::has_pvecounts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryLimited::set_has_pvecounts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryLimited::clear_has_pvecounts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryLimited::clear_pvecounts() {
  pvecounts_ = GOOGLE_LONGLONG(0);
  clear_has_pvecounts();
}
inline ::google::protobuf::int64 LotteryLimited::pvecounts() const {
  // @@protoc_insertion_point(field_get:LotteryLimited.pvecounts)
  return pvecounts_;
}
inline void LotteryLimited::set_pvecounts(::google::protobuf::int64 value) {
  set_has_pvecounts();
  pvecounts_ = value;
  // @@protoc_insertion_point(field_set:LotteryLimited.pvecounts)
}

// optional int64 daytime = 2 [default = 0];
inline bool LotteryLimited::has_daytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryLimited::set_has_daytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryLimited::clear_has_daytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryLimited::clear_daytime() {
  daytime_ = GOOGLE_LONGLONG(0);
  clear_has_daytime();
}
inline ::google::protobuf::int64 LotteryLimited::daytime() const {
  // @@protoc_insertion_point(field_get:LotteryLimited.daytime)
  return daytime_;
}
inline void LotteryLimited::set_daytime(::google::protobuf::int64 value) {
  set_has_daytime();
  daytime_ = value;
  // @@protoc_insertion_point(field_set:LotteryLimited.daytime)
}

// optional int64 secondtime = 3 [default = 0];
inline bool LotteryLimited::has_secondtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotteryLimited::set_has_secondtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotteryLimited::clear_has_secondtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotteryLimited::clear_secondtime() {
  secondtime_ = GOOGLE_LONGLONG(0);
  clear_has_secondtime();
}
inline ::google::protobuf::int64 LotteryLimited::secondtime() const {
  // @@protoc_insertion_point(field_get:LotteryLimited.secondtime)
  return secondtime_;
}
inline void LotteryLimited::set_secondtime(::google::protobuf::int64 value) {
  set_has_secondtime();
  secondtime_ = value;
  // @@protoc_insertion_point(field_set:LotteryLimited.secondtime)
}

// -------------------------------------------------------------------

// DB_MaxSizedUidList

// repeated int64 uid = 1;
inline int DB_MaxSizedUidList::uid_size() const {
  return uid_.size();
}
inline void DB_MaxSizedUidList::clear_uid() {
  uid_.Clear();
}
inline ::google::protobuf::int64 DB_MaxSizedUidList::uid(int index) const {
  // @@protoc_insertion_point(field_get:DB_MaxSizedUidList.uid)
  return uid_.Get(index);
}
inline void DB_MaxSizedUidList::set_uid(int index, ::google::protobuf::int64 value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_MaxSizedUidList.uid)
}
inline void DB_MaxSizedUidList::add_uid(::google::protobuf::int64 value) {
  uid_.Add(value);
  // @@protoc_insertion_point(field_add:DB_MaxSizedUidList.uid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_MaxSizedUidList::uid() const {
  // @@protoc_insertion_point(field_list:DB_MaxSizedUidList.uid)
  return uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_MaxSizedUidList::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:DB_MaxSizedUidList.uid)
  return &uid_;
}

// optional int32 pos = 2 [default = 0];
inline bool DB_MaxSizedUidList::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_MaxSizedUidList::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_MaxSizedUidList::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_MaxSizedUidList::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 DB_MaxSizedUidList::pos() const {
  // @@protoc_insertion_point(field_get:DB_MaxSizedUidList.pos)
  return pos_;
}
inline void DB_MaxSizedUidList::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:DB_MaxSizedUidList.pos)
}

// -------------------------------------------------------------------

// DB_ExpLevel

// optional int32 lvl = 1 [default = 0];
inline bool DB_ExpLevel::has_lvl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_ExpLevel::set_has_lvl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_ExpLevel::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_ExpLevel::clear_lvl() {
  lvl_ = 0;
  clear_has_lvl();
}
inline ::google::protobuf::int32 DB_ExpLevel::lvl() const {
  // @@protoc_insertion_point(field_get:DB_ExpLevel.lvl)
  return lvl_;
}
inline void DB_ExpLevel::set_lvl(::google::protobuf::int32 value) {
  set_has_lvl();
  lvl_ = value;
  // @@protoc_insertion_point(field_set:DB_ExpLevel.lvl)
}

// optional int32 exp = 2 [default = 0];
inline bool DB_ExpLevel::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_ExpLevel::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_ExpLevel::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_ExpLevel::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 DB_ExpLevel::exp() const {
  // @@protoc_insertion_point(field_get:DB_ExpLevel.exp)
  return exp_;
}
inline void DB_ExpLevel::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:DB_ExpLevel.exp)
}

// optional int32 exp_total = 3 [default = 0];
inline bool DB_ExpLevel::has_exp_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_ExpLevel::set_has_exp_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_ExpLevel::clear_has_exp_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_ExpLevel::clear_exp_total() {
  exp_total_ = 0;
  clear_has_exp_total();
}
inline ::google::protobuf::int32 DB_ExpLevel::exp_total() const {
  // @@protoc_insertion_point(field_get:DB_ExpLevel.exp_total)
  return exp_total_;
}
inline void DB_ExpLevel::set_exp_total(::google::protobuf::int32 value) {
  set_has_exp_total();
  exp_total_ = value;
  // @@protoc_insertion_point(field_set:DB_ExpLevel.exp_total)
}

// optional int32 exp_next = 4 [default = 0];
inline bool DB_ExpLevel::has_exp_next() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_ExpLevel::set_has_exp_next() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_ExpLevel::clear_has_exp_next() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_ExpLevel::clear_exp_next() {
  exp_next_ = 0;
  clear_has_exp_next();
}
inline ::google::protobuf::int32 DB_ExpLevel::exp_next() const {
  // @@protoc_insertion_point(field_get:DB_ExpLevel.exp_next)
  return exp_next_;
}
inline void DB_ExpLevel::set_exp_next(::google::protobuf::int32 value) {
  set_has_exp_next();
  exp_next_ = value;
  // @@protoc_insertion_point(field_set:DB_ExpLevel.exp_next)
}

// -------------------------------------------------------------------

// DB_DailyCounter

// repeated int32 num_set = 1;
inline int DB_DailyCounter::num_set_size() const {
  return num_set_.size();
}
inline void DB_DailyCounter::clear_num_set() {
  num_set_.Clear();
}
inline ::google::protobuf::int32 DB_DailyCounter::num_set(int index) const {
  // @@protoc_insertion_point(field_get:DB_DailyCounter.num_set)
  return num_set_.Get(index);
}
inline void DB_DailyCounter::set_num_set(int index, ::google::protobuf::int32 value) {
  num_set_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_DailyCounter.num_set)
}
inline void DB_DailyCounter::add_num_set(::google::protobuf::int32 value) {
  num_set_.Add(value);
  // @@protoc_insertion_point(field_add:DB_DailyCounter.num_set)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_DailyCounter::num_set() const {
  // @@protoc_insertion_point(field_list:DB_DailyCounter.num_set)
  return num_set_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_DailyCounter::mutable_num_set() {
  // @@protoc_insertion_point(field_mutable_list:DB_DailyCounter.num_set)
  return &num_set_;
}

// repeated string name_set = 2;
inline int DB_DailyCounter::name_set_size() const {
  return name_set_.size();
}
inline void DB_DailyCounter::clear_name_set() {
  name_set_.Clear();
}
inline const ::std::string& DB_DailyCounter::name_set(int index) const {
  // @@protoc_insertion_point(field_get:DB_DailyCounter.name_set)
  return name_set_.Get(index);
}
inline ::std::string* DB_DailyCounter::mutable_name_set(int index) {
  // @@protoc_insertion_point(field_mutable:DB_DailyCounter.name_set)
  return name_set_.Mutable(index);
}
inline void DB_DailyCounter::set_name_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_DailyCounter.name_set)
  name_set_.Mutable(index)->assign(value);
}
inline void DB_DailyCounter::set_name_set(int index, const char* value) {
  name_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_DailyCounter.name_set)
}
inline void DB_DailyCounter::set_name_set(int index, const char* value, size_t size) {
  name_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_DailyCounter.name_set)
}
inline ::std::string* DB_DailyCounter::add_name_set() {
  return name_set_.Add();
}
inline void DB_DailyCounter::add_name_set(const ::std::string& value) {
  name_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_DailyCounter.name_set)
}
inline void DB_DailyCounter::add_name_set(const char* value) {
  name_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_DailyCounter.name_set)
}
inline void DB_DailyCounter::add_name_set(const char* value, size_t size) {
  name_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_DailyCounter.name_set)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_DailyCounter::name_set() const {
  // @@protoc_insertion_point(field_list:DB_DailyCounter.name_set)
  return name_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_DailyCounter::mutable_name_set() {
  // @@protoc_insertion_point(field_mutable_list:DB_DailyCounter.name_set)
  return &name_set_;
}

// optional int64 day = 3;
inline bool DB_DailyCounter::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_DailyCounter::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_DailyCounter::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_DailyCounter::clear_day() {
  day_ = GOOGLE_LONGLONG(0);
  clear_has_day();
}
inline ::google::protobuf::int64 DB_DailyCounter::day() const {
  // @@protoc_insertion_point(field_get:DB_DailyCounter.day)
  return day_;
}
inline void DB_DailyCounter::set_day(::google::protobuf::int64 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:DB_DailyCounter.day)
}

// -------------------------------------------------------------------

// DB_VersionCounter

// repeated int32 num_set = 1;
inline int DB_VersionCounter::num_set_size() const {
  return num_set_.size();
}
inline void DB_VersionCounter::clear_num_set() {
  num_set_.Clear();
}
inline ::google::protobuf::int32 DB_VersionCounter::num_set(int index) const {
  // @@protoc_insertion_point(field_get:DB_VersionCounter.num_set)
  return num_set_.Get(index);
}
inline void DB_VersionCounter::set_num_set(int index, ::google::protobuf::int32 value) {
  num_set_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_VersionCounter.num_set)
}
inline void DB_VersionCounter::add_num_set(::google::protobuf::int32 value) {
  num_set_.Add(value);
  // @@protoc_insertion_point(field_add:DB_VersionCounter.num_set)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_VersionCounter::num_set() const {
  // @@protoc_insertion_point(field_list:DB_VersionCounter.num_set)
  return num_set_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_VersionCounter::mutable_num_set() {
  // @@protoc_insertion_point(field_mutable_list:DB_VersionCounter.num_set)
  return &num_set_;
}

// repeated string name_set = 2;
inline int DB_VersionCounter::name_set_size() const {
  return name_set_.size();
}
inline void DB_VersionCounter::clear_name_set() {
  name_set_.Clear();
}
inline const ::std::string& DB_VersionCounter::name_set(int index) const {
  // @@protoc_insertion_point(field_get:DB_VersionCounter.name_set)
  return name_set_.Get(index);
}
inline ::std::string* DB_VersionCounter::mutable_name_set(int index) {
  // @@protoc_insertion_point(field_mutable:DB_VersionCounter.name_set)
  return name_set_.Mutable(index);
}
inline void DB_VersionCounter::set_name_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_VersionCounter.name_set)
  name_set_.Mutable(index)->assign(value);
}
inline void DB_VersionCounter::set_name_set(int index, const char* value) {
  name_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_VersionCounter.name_set)
}
inline void DB_VersionCounter::set_name_set(int index, const char* value, size_t size) {
  name_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_VersionCounter.name_set)
}
inline ::std::string* DB_VersionCounter::add_name_set() {
  return name_set_.Add();
}
inline void DB_VersionCounter::add_name_set(const ::std::string& value) {
  name_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_VersionCounter.name_set)
}
inline void DB_VersionCounter::add_name_set(const char* value) {
  name_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_VersionCounter.name_set)
}
inline void DB_VersionCounter::add_name_set(const char* value, size_t size) {
  name_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_VersionCounter.name_set)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_VersionCounter::name_set() const {
  // @@protoc_insertion_point(field_list:DB_VersionCounter.name_set)
  return name_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_VersionCounter::mutable_name_set() {
  // @@protoc_insertion_point(field_mutable_list:DB_VersionCounter.name_set)
  return &name_set_;
}

// repeated int32 ver_set = 3;
inline int DB_VersionCounter::ver_set_size() const {
  return ver_set_.size();
}
inline void DB_VersionCounter::clear_ver_set() {
  ver_set_.Clear();
}
inline ::google::protobuf::int32 DB_VersionCounter::ver_set(int index) const {
  // @@protoc_insertion_point(field_get:DB_VersionCounter.ver_set)
  return ver_set_.Get(index);
}
inline void DB_VersionCounter::set_ver_set(int index, ::google::protobuf::int32 value) {
  ver_set_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_VersionCounter.ver_set)
}
inline void DB_VersionCounter::add_ver_set(::google::protobuf::int32 value) {
  ver_set_.Add(value);
  // @@protoc_insertion_point(field_add:DB_VersionCounter.ver_set)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_VersionCounter::ver_set() const {
  // @@protoc_insertion_point(field_list:DB_VersionCounter.ver_set)
  return ver_set_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_VersionCounter::mutable_ver_set() {
  // @@protoc_insertion_point(field_mutable_list:DB_VersionCounter.ver_set)
  return &ver_set_;
}

// -------------------------------------------------------------------

// DB_KingOfStar

// optional int32 total_value = 1 [default = 0];
inline bool DB_KingOfStar::has_total_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_KingOfStar::set_has_total_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_KingOfStar::clear_has_total_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_KingOfStar::clear_total_value() {
  total_value_ = 0;
  clear_has_total_value();
}
inline ::google::protobuf::int32 DB_KingOfStar::total_value() const {
  // @@protoc_insertion_point(field_get:DB_KingOfStar.total_value)
  return total_value_;
}
inline void DB_KingOfStar::set_total_value(::google::protobuf::int32 value) {
  set_has_total_value();
  total_value_ = value;
  // @@protoc_insertion_point(field_set:DB_KingOfStar.total_value)
}

// optional int32 star_value = 2 [default = 0];
inline bool DB_KingOfStar::has_star_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_KingOfStar::set_has_star_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_KingOfStar::clear_has_star_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_KingOfStar::clear_star_value() {
  star_value_ = 0;
  clear_has_star_value();
}
inline ::google::protobuf::int32 DB_KingOfStar::star_value() const {
  // @@protoc_insertion_point(field_get:DB_KingOfStar.star_value)
  return star_value_;
}
inline void DB_KingOfStar::set_star_value(::google::protobuf::int32 value) {
  set_has_star_value();
  star_value_ = value;
  // @@protoc_insertion_point(field_set:DB_KingOfStar.star_value)
}

// optional int32 score_value = 3 [default = 0];
inline bool DB_KingOfStar::has_score_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_KingOfStar::set_has_score_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_KingOfStar::clear_has_score_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_KingOfStar::clear_score_value() {
  score_value_ = 0;
  clear_has_score_value();
}
inline ::google::protobuf::int32 DB_KingOfStar::score_value() const {
  // @@protoc_insertion_point(field_get:DB_KingOfStar.score_value)
  return score_value_;
}
inline void DB_KingOfStar::set_score_value(::google::protobuf::int32 value) {
  set_has_score_value();
  score_value_ = value;
  // @@protoc_insertion_point(field_set:DB_KingOfStar.score_value)
}

// optional int32 index = 4 [default = 0];
inline bool DB_KingOfStar::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_KingOfStar::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_KingOfStar::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_KingOfStar::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 DB_KingOfStar::index() const {
  // @@protoc_insertion_point(field_get:DB_KingOfStar.index)
  return index_;
}
inline void DB_KingOfStar::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:DB_KingOfStar.index)
}

// optional int32 now_playing = 5 [default = 0];
inline bool DB_KingOfStar::has_now_playing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_KingOfStar::set_has_now_playing() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_KingOfStar::clear_has_now_playing() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_KingOfStar::clear_now_playing() {
  now_playing_ = 0;
  clear_has_now_playing();
}
inline ::google::protobuf::int32 DB_KingOfStar::now_playing() const {
  // @@protoc_insertion_point(field_get:DB_KingOfStar.now_playing)
  return now_playing_;
}
inline void DB_KingOfStar::set_now_playing(::google::protobuf::int32 value) {
  set_has_now_playing();
  now_playing_ = value;
  // @@protoc_insertion_point(field_set:DB_KingOfStar.now_playing)
}

// -------------------------------------------------------------------

// DB_ItemOnMap

// required int32 id = 1;
inline bool DB_ItemOnMap::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_ItemOnMap::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_ItemOnMap::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_ItemOnMap::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DB_ItemOnMap::id() const {
  // @@protoc_insertion_point(field_get:DB_ItemOnMap.id)
  return id_;
}
inline void DB_ItemOnMap::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DB_ItemOnMap.id)
}

// optional int32 typeid = 2 [default = -1];
inline bool DB_ItemOnMap::has_typeid_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_ItemOnMap::set_has_typeid_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_ItemOnMap::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_ItemOnMap::clear_typeid_() {
  typeid__ = -1;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 DB_ItemOnMap::typeid_() const {
  // @@protoc_insertion_point(field_get:DB_ItemOnMap.typeid)
  return typeid__;
}
inline void DB_ItemOnMap::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:DB_ItemOnMap.typeid)
}

// optional int32 posx = 3;
inline bool DB_ItemOnMap::has_posx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_ItemOnMap::set_has_posx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_ItemOnMap::clear_has_posx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_ItemOnMap::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 DB_ItemOnMap::posx() const {
  // @@protoc_insertion_point(field_get:DB_ItemOnMap.posx)
  return posx_;
}
inline void DB_ItemOnMap::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:DB_ItemOnMap.posx)
}

// optional int32 posy = 4;
inline bool DB_ItemOnMap::has_posy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_ItemOnMap::set_has_posy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_ItemOnMap::clear_has_posy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_ItemOnMap::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 DB_ItemOnMap::posy() const {
  // @@protoc_insertion_point(field_get:DB_ItemOnMap.posy)
  return posy_;
}
inline void DB_ItemOnMap::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:DB_ItemOnMap.posy)
}

// optional int32 direction = 5;
inline bool DB_ItemOnMap::has_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_ItemOnMap::set_has_direction() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_ItemOnMap::clear_has_direction() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_ItemOnMap::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::google::protobuf::int32 DB_ItemOnMap::direction() const {
  // @@protoc_insertion_point(field_get:DB_ItemOnMap.direction)
  return direction_;
}
inline void DB_ItemOnMap::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:DB_ItemOnMap.direction)
}

// -------------------------------------------------------------------

// DB_Map

// repeated .DB_ItemOnMap GroundList = 1;
inline int DB_Map::groundlist_size() const {
  return groundlist_.size();
}
inline void DB_Map::clear_groundlist() {
  groundlist_.Clear();
}
inline const ::DB_ItemOnMap& DB_Map::groundlist(int index) const {
  // @@protoc_insertion_point(field_get:DB_Map.GroundList)
  return groundlist_.Get(index);
}
inline ::DB_ItemOnMap* DB_Map::mutable_groundlist(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Map.GroundList)
  return groundlist_.Mutable(index);
}
inline ::DB_ItemOnMap* DB_Map::add_groundlist() {
  // @@protoc_insertion_point(field_add:DB_Map.GroundList)
  return groundlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap >&
DB_Map::groundlist() const {
  // @@protoc_insertion_point(field_list:DB_Map.GroundList)
  return groundlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap >*
DB_Map::mutable_groundlist() {
  // @@protoc_insertion_point(field_mutable_list:DB_Map.GroundList)
  return &groundlist_;
}

// repeated .DB_ItemOnMap WallList = 2;
inline int DB_Map::walllist_size() const {
  return walllist_.size();
}
inline void DB_Map::clear_walllist() {
  walllist_.Clear();
}
inline const ::DB_ItemOnMap& DB_Map::walllist(int index) const {
  // @@protoc_insertion_point(field_get:DB_Map.WallList)
  return walllist_.Get(index);
}
inline ::DB_ItemOnMap* DB_Map::mutable_walllist(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Map.WallList)
  return walllist_.Mutable(index);
}
inline ::DB_ItemOnMap* DB_Map::add_walllist() {
  // @@protoc_insertion_point(field_add:DB_Map.WallList)
  return walllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap >&
DB_Map::walllist() const {
  // @@protoc_insertion_point(field_list:DB_Map.WallList)
  return walllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_ItemOnMap >*
DB_Map::mutable_walllist() {
  // @@protoc_insertion_point(field_mutable_list:DB_Map.WallList)
  return &walllist_;
}

// optional int32 alloc_id = 3 [default = 0];
inline bool DB_Map::has_alloc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_Map::set_has_alloc_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_Map::clear_has_alloc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_Map::clear_alloc_id() {
  alloc_id_ = 0;
  clear_has_alloc_id();
}
inline ::google::protobuf::int32 DB_Map::alloc_id() const {
  // @@protoc_insertion_point(field_get:DB_Map.alloc_id)
  return alloc_id_;
}
inline void DB_Map::set_alloc_id(::google::protobuf::int32 value) {
  set_has_alloc_id();
  alloc_id_ = value;
  // @@protoc_insertion_point(field_set:DB_Map.alloc_id)
}

// optional int32 back_id = 4 [default = 0];
inline bool DB_Map::has_back_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_Map::set_has_back_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_Map::clear_has_back_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_Map::clear_back_id() {
  back_id_ = 0;
  clear_has_back_id();
}
inline ::google::protobuf::int32 DB_Map::back_id() const {
  // @@protoc_insertion_point(field_get:DB_Map.back_id)
  return back_id_;
}
inline void DB_Map::set_back_id(::google::protobuf::int32 value) {
  set_has_back_id();
  back_id_ = value;
  // @@protoc_insertion_point(field_set:DB_Map.back_id)
}

// optional int32 wall_id = 5 [default = 5006];
inline bool DB_Map::has_wall_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_Map::set_has_wall_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_Map::clear_has_wall_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_Map::clear_wall_id() {
  wall_id_ = 5006;
  clear_has_wall_id();
}
inline ::google::protobuf::int32 DB_Map::wall_id() const {
  // @@protoc_insertion_point(field_get:DB_Map.wall_id)
  return wall_id_;
}
inline void DB_Map::set_wall_id(::google::protobuf::int32 value) {
  set_has_wall_id();
  wall_id_ = value;
  // @@protoc_insertion_point(field_set:DB_Map.wall_id)
}

// optional int32 floor_id = 6 [default = 5003];
inline bool DB_Map::has_floor_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_Map::set_has_floor_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_Map::clear_has_floor_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_Map::clear_floor_id() {
  floor_id_ = 5003;
  clear_has_floor_id();
}
inline ::google::protobuf::int32 DB_Map::floor_id() const {
  // @@protoc_insertion_point(field_get:DB_Map.floor_id)
  return floor_id_;
}
inline void DB_Map::set_floor_id(::google::protobuf::int32 value) {
  set_has_floor_id();
  floor_id_ = value;
  // @@protoc_insertion_point(field_set:DB_Map.floor_id)
}

// optional int64 reward_time = 7 [default = 0];
inline bool DB_Map::has_reward_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DB_Map::set_has_reward_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DB_Map::clear_has_reward_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DB_Map::clear_reward_time() {
  reward_time_ = GOOGLE_LONGLONG(0);
  clear_has_reward_time();
}
inline ::google::protobuf::int64 DB_Map::reward_time() const {
  // @@protoc_insertion_point(field_get:DB_Map.reward_time)
  return reward_time_;
}
inline void DB_Map::set_reward_time(::google::protobuf::int64 value) {
  set_has_reward_time();
  reward_time_ = value;
  // @@protoc_insertion_point(field_set:DB_Map.reward_time)
}

// -------------------------------------------------------------------

// DB_Task

// optional int32 taskID = 1;
inline bool DB_Task::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_Task::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_Task::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_Task::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
inline ::google::protobuf::int32 DB_Task::taskid() const {
  // @@protoc_insertion_point(field_get:DB_Task.taskID)
  return taskid_;
}
inline void DB_Task::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:DB_Task.taskID)
}

// optional int32 taskStep = 2;
inline bool DB_Task::has_taskstep() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_Task::set_has_taskstep() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_Task::clear_has_taskstep() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_Task::clear_taskstep() {
  taskstep_ = 0;
  clear_has_taskstep();
}
inline ::google::protobuf::int32 DB_Task::taskstep() const {
  // @@protoc_insertion_point(field_get:DB_Task.taskStep)
  return taskstep_;
}
inline void DB_Task::set_taskstep(::google::protobuf::int32 value) {
  set_has_taskstep();
  taskstep_ = value;
  // @@protoc_insertion_point(field_set:DB_Task.taskStep)
}

// -------------------------------------------------------------------

// DB_TaskList

// repeated .DB_Task task = 1;
inline int DB_TaskList::task_size() const {
  return task_.size();
}
inline void DB_TaskList::clear_task() {
  task_.Clear();
}
inline const ::DB_Task& DB_TaskList::task(int index) const {
  // @@protoc_insertion_point(field_get:DB_TaskList.task)
  return task_.Get(index);
}
inline ::DB_Task* DB_TaskList::mutable_task(int index) {
  // @@protoc_insertion_point(field_mutable:DB_TaskList.task)
  return task_.Mutable(index);
}
inline ::DB_Task* DB_TaskList::add_task() {
  // @@protoc_insertion_point(field_add:DB_TaskList.task)
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_Task >&
DB_TaskList::task() const {
  // @@protoc_insertion_point(field_list:DB_TaskList.task)
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_Task >*
DB_TaskList::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:DB_TaskList.task)
  return &task_;
}

// -------------------------------------------------------------------

// DB_TaskStateList

// repeated int64 taskstate = 1;
inline int DB_TaskStateList::taskstate_size() const {
  return taskstate_.size();
}
inline void DB_TaskStateList::clear_taskstate() {
  taskstate_.Clear();
}
inline ::google::protobuf::int64 DB_TaskStateList::taskstate(int index) const {
  // @@protoc_insertion_point(field_get:DB_TaskStateList.taskstate)
  return taskstate_.Get(index);
}
inline void DB_TaskStateList::set_taskstate(int index, ::google::protobuf::int64 value) {
  taskstate_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_TaskStateList.taskstate)
}
inline void DB_TaskStateList::add_taskstate(::google::protobuf::int64 value) {
  taskstate_.Add(value);
  // @@protoc_insertion_point(field_add:DB_TaskStateList.taskstate)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_TaskStateList::taskstate() const {
  // @@protoc_insertion_point(field_list:DB_TaskStateList.taskstate)
  return taskstate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_TaskStateList::mutable_taskstate() {
  // @@protoc_insertion_point(field_mutable_list:DB_TaskStateList.taskstate)
  return &taskstate_;
}

// -------------------------------------------------------------------

// DB_BanChat

// optional bool banchat = 1 [default = false];
inline bool DB_BanChat::has_banchat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_BanChat::set_has_banchat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_BanChat::clear_has_banchat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_BanChat::clear_banchat() {
  banchat_ = false;
  clear_has_banchat();
}
inline bool DB_BanChat::banchat() const {
  // @@protoc_insertion_point(field_get:DB_BanChat.banchat)
  return banchat_;
}
inline void DB_BanChat::set_banchat(bool value) {
  set_has_banchat();
  banchat_ = value;
  // @@protoc_insertion_point(field_set:DB_BanChat.banchat)
}

// optional int64 time = 2;
inline bool DB_BanChat::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_BanChat::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_BanChat::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_BanChat::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 DB_BanChat::time() const {
  // @@protoc_insertion_point(field_get:DB_BanChat.time)
  return time_;
}
inline void DB_BanChat::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:DB_BanChat.time)
}

// optional int64 totaltime = 3 [default = 0];
inline bool DB_BanChat::has_totaltime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_BanChat::set_has_totaltime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_BanChat::clear_has_totaltime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_BanChat::clear_totaltime() {
  totaltime_ = GOOGLE_LONGLONG(0);
  clear_has_totaltime();
}
inline ::google::protobuf::int64 DB_BanChat::totaltime() const {
  // @@protoc_insertion_point(field_get:DB_BanChat.totaltime)
  return totaltime_;
}
inline void DB_BanChat::set_totaltime(::google::protobuf::int64 value) {
  set_has_totaltime();
  totaltime_ = value;
  // @@protoc_insertion_point(field_set:DB_BanChat.totaltime)
}

// -------------------------------------------------------------------

// DB_BanLogin

// optional bool banlogin = 1 [default = false];
inline bool DB_BanLogin::has_banlogin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_BanLogin::set_has_banlogin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_BanLogin::clear_has_banlogin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_BanLogin::clear_banlogin() {
  banlogin_ = false;
  clear_has_banlogin();
}
inline bool DB_BanLogin::banlogin() const {
  // @@protoc_insertion_point(field_get:DB_BanLogin.banlogin)
  return banlogin_;
}
inline void DB_BanLogin::set_banlogin(bool value) {
  set_has_banlogin();
  banlogin_ = value;
  // @@protoc_insertion_point(field_set:DB_BanLogin.banlogin)
}

// optional int64 time = 2;
inline bool DB_BanLogin::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_BanLogin::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_BanLogin::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_BanLogin::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 DB_BanLogin::time() const {
  // @@protoc_insertion_point(field_get:DB_BanLogin.time)
  return time_;
}
inline void DB_BanLogin::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:DB_BanLogin.time)
}

// optional int64 totaltime = 3 [default = 0];
inline bool DB_BanLogin::has_totaltime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_BanLogin::set_has_totaltime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_BanLogin::clear_has_totaltime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_BanLogin::clear_totaltime() {
  totaltime_ = GOOGLE_LONGLONG(0);
  clear_has_totaltime();
}
inline ::google::protobuf::int64 DB_BanLogin::totaltime() const {
  // @@protoc_insertion_point(field_get:DB_BanLogin.totaltime)
  return totaltime_;
}
inline void DB_BanLogin::set_totaltime(::google::protobuf::int64 value) {
  set_has_totaltime();
  totaltime_ = value;
  // @@protoc_insertion_point(field_set:DB_BanLogin.totaltime)
}

// -------------------------------------------------------------------

// DB_Item

// optional int32 typeid = 1;
inline bool DB_Item::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_Item::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_Item::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_Item::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 DB_Item::typeid_() const {
  // @@protoc_insertion_point(field_get:DB_Item.typeid)
  return typeid__;
}
inline void DB_Item::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:DB_Item.typeid)
}

// optional int32 num = 2 [default = 0];
inline bool DB_Item::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_Item::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_Item::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_Item::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 DB_Item::num() const {
  // @@protoc_insertion_point(field_get:DB_Item.num)
  return num_;
}
inline void DB_Item::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:DB_Item.num)
}

// optional int32 unlockvalue = 3 [default = 0];
inline bool DB_Item::has_unlockvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_Item::set_has_unlockvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_Item::clear_has_unlockvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_Item::clear_unlockvalue() {
  unlockvalue_ = 0;
  clear_has_unlockvalue();
}
inline ::google::protobuf::int32 DB_Item::unlockvalue() const {
  // @@protoc_insertion_point(field_get:DB_Item.unlockvalue)
  return unlockvalue_;
}
inline void DB_Item::set_unlockvalue(::google::protobuf::int32 value) {
  set_has_unlockvalue();
  unlockvalue_ = value;
  // @@protoc_insertion_point(field_set:DB_Item.unlockvalue)
}

// optional bool unlockSended = 4 [default = false];
inline bool DB_Item::has_unlocksended() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_Item::set_has_unlocksended() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_Item::clear_has_unlocksended() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_Item::clear_unlocksended() {
  unlocksended_ = false;
  clear_has_unlocksended();
}
inline bool DB_Item::unlocksended() const {
  // @@protoc_insertion_point(field_get:DB_Item.unlockSended)
  return unlocksended_;
}
inline void DB_Item::set_unlocksended(bool value) {
  set_has_unlocksended();
  unlocksended_ = value;
  // @@protoc_insertion_point(field_set:DB_Item.unlockSended)
}

// -------------------------------------------------------------------

// DB_Bag

// repeated .DB_Item items = 1;
inline int DB_Bag::items_size() const {
  return items_.size();
}
inline void DB_Bag::clear_items() {
  items_.Clear();
}
inline const ::DB_Item& DB_Bag::items(int index) const {
  // @@protoc_insertion_point(field_get:DB_Bag.items)
  return items_.Get(index);
}
inline ::DB_Item* DB_Bag::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Bag.items)
  return items_.Mutable(index);
}
inline ::DB_Item* DB_Bag::add_items() {
  // @@protoc_insertion_point(field_add:DB_Bag.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_Item >&
DB_Bag::items() const {
  // @@protoc_insertion_point(field_list:DB_Bag.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_Item >*
DB_Bag::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:DB_Bag.items)
  return &items_;
}

// optional int64 money = 3 [default = 0];
inline bool DB_Bag::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_Bag::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_Bag::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_Bag::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 DB_Bag::money() const {
  // @@protoc_insertion_point(field_get:DB_Bag.money)
  return money_;
}
inline void DB_Bag::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:DB_Bag.money)
}

// optional int32 maxspace = 4 [default = 0];
inline bool DB_Bag::has_maxspace() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_Bag::set_has_maxspace() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_Bag::clear_has_maxspace() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_Bag::clear_maxspace() {
  maxspace_ = 0;
  clear_has_maxspace();
}
inline ::google::protobuf::int32 DB_Bag::maxspace() const {
  // @@protoc_insertion_point(field_get:DB_Bag.maxspace)
  return maxspace_;
}
inline void DB_Bag::set_maxspace(::google::protobuf::int32 value) {
  set_has_maxspace();
  maxspace_ = value;
  // @@protoc_insertion_point(field_set:DB_Bag.maxspace)
}

// optional int64 cash = 5 [default = 0];
inline bool DB_Bag::has_cash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_Bag::set_has_cash() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_Bag::clear_has_cash() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_Bag::clear_cash() {
  cash_ = GOOGLE_LONGLONG(0);
  clear_has_cash();
}
inline ::google::protobuf::int64 DB_Bag::cash() const {
  // @@protoc_insertion_point(field_get:DB_Bag.cash)
  return cash_;
}
inline void DB_Bag::set_cash(::google::protobuf::int64 value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:DB_Bag.cash)
}

// -------------------------------------------------------------------

// DB_ActionRecord

// optional int64 uid = 1 [default = -1];
inline bool DB_ActionRecord::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_ActionRecord::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_ActionRecord::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_ActionRecord::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
inline ::google::protobuf::int64 DB_ActionRecord::uid() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.uid)
  return uid_;
}
inline void DB_ActionRecord::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.uid)
}

// optional int64 time = 2 [default = 0];
inline bool DB_ActionRecord::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_ActionRecord::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_ActionRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_ActionRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 DB_ActionRecord::time() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.time)
  return time_;
}
inline void DB_ActionRecord::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.time)
}

// optional string name = 3 [default = ""];
inline bool DB_ActionRecord::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_ActionRecord::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_ActionRecord::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_ActionRecord::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DB_ActionRecord::name() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_ActionRecord::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.name)
}
inline void DB_ActionRecord::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_ActionRecord.name)
}
inline void DB_ActionRecord::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_ActionRecord.name)
}
inline ::std::string* DB_ActionRecord::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:DB_ActionRecord.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_ActionRecord::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_ActionRecord::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DB_ActionRecord.name)
}

// optional int32 actiontype = 4 [default = 0];
inline bool DB_ActionRecord::has_actiontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_ActionRecord::set_has_actiontype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_ActionRecord::clear_has_actiontype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_ActionRecord::clear_actiontype() {
  actiontype_ = 0;
  clear_has_actiontype();
}
inline ::google::protobuf::int32 DB_ActionRecord::actiontype() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.actiontype)
  return actiontype_;
}
inline void DB_ActionRecord::set_actiontype(::google::protobuf::int32 value) {
  set_has_actiontype();
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.actiontype)
}

// optional int32 gold = 5 [default = 0];
inline bool DB_ActionRecord::has_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_ActionRecord::set_has_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_ActionRecord::clear_has_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_ActionRecord::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 DB_ActionRecord::gold() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.gold)
  return gold_;
}
inline void DB_ActionRecord::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.gold)
}

// optional int32 item_typeid = 6 [default = 0];
inline bool DB_ActionRecord::has_item_typeid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_ActionRecord::set_has_item_typeid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_ActionRecord::clear_has_item_typeid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_ActionRecord::clear_item_typeid() {
  item_typeid_ = 0;
  clear_has_item_typeid();
}
inline ::google::protobuf::int32 DB_ActionRecord::item_typeid() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.item_typeid)
  return item_typeid_;
}
inline void DB_ActionRecord::set_item_typeid(::google::protobuf::int32 value) {
  set_has_item_typeid();
  item_typeid_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.item_typeid)
}

// optional bool dealed = 7 [default = false];
inline bool DB_ActionRecord::has_dealed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DB_ActionRecord::set_has_dealed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DB_ActionRecord::clear_has_dealed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DB_ActionRecord::clear_dealed() {
  dealed_ = false;
  clear_has_dealed();
}
inline bool DB_ActionRecord::dealed() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.dealed)
  return dealed_;
}
inline void DB_ActionRecord::set_dealed(bool value) {
  set_has_dealed();
  dealed_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.dealed)
}

// optional int32 count = 8 [default = 1];
inline bool DB_ActionRecord::has_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DB_ActionRecord::set_has_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DB_ActionRecord::clear_has_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DB_ActionRecord::clear_count() {
  count_ = 1;
  clear_has_count();
}
inline ::google::protobuf::int32 DB_ActionRecord::count() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.count)
  return count_;
}
inline void DB_ActionRecord::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.count)
}

// optional string id = 9 [default = ""];
inline bool DB_ActionRecord::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DB_ActionRecord::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DB_ActionRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DB_ActionRecord::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& DB_ActionRecord::id() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_ActionRecord::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.id)
}
inline void DB_ActionRecord::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_ActionRecord.id)
}
inline void DB_ActionRecord::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_ActionRecord.id)
}
inline ::std::string* DB_ActionRecord::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:DB_ActionRecord.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_ActionRecord::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_ActionRecord::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:DB_ActionRecord.id)
}

// optional string head_url = 10 [default = ""];
inline bool DB_ActionRecord::has_head_url() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DB_ActionRecord::set_has_head_url() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DB_ActionRecord::clear_has_head_url() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DB_ActionRecord::clear_head_url() {
  head_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_head_url();
}
inline const ::std::string& DB_ActionRecord::head_url() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.head_url)
  return head_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_ActionRecord::set_head_url(const ::std::string& value) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.head_url)
}
inline void DB_ActionRecord::set_head_url(const char* value) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_ActionRecord.head_url)
}
inline void DB_ActionRecord::set_head_url(const char* value, size_t size) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_ActionRecord.head_url)
}
inline ::std::string* DB_ActionRecord::mutable_head_url() {
  set_has_head_url();
  // @@protoc_insertion_point(field_mutable:DB_ActionRecord.head_url)
  return head_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_ActionRecord::release_head_url() {
  clear_has_head_url();
  return head_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_ActionRecord::set_allocated_head_url(::std::string* head_url) {
  if (head_url != NULL) {
    set_has_head_url();
  } else {
    clear_has_head_url();
  }
  head_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head_url);
  // @@protoc_insertion_point(field_set_allocated:DB_ActionRecord.head_url)
}

// repeated int32 item_id = 11;
inline int DB_ActionRecord::item_id_size() const {
  return item_id_.size();
}
inline void DB_ActionRecord::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 DB_ActionRecord::item_id(int index) const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.item_id)
  return item_id_.Get(index);
}
inline void DB_ActionRecord::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.item_id)
}
inline void DB_ActionRecord::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:DB_ActionRecord.item_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_ActionRecord::item_id() const {
  // @@protoc_insertion_point(field_list:DB_ActionRecord.item_id)
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_ActionRecord::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:DB_ActionRecord.item_id)
  return &item_id_;
}

// repeated int32 item_num = 12;
inline int DB_ActionRecord::item_num_size() const {
  return item_num_.size();
}
inline void DB_ActionRecord::clear_item_num() {
  item_num_.Clear();
}
inline ::google::protobuf::int32 DB_ActionRecord::item_num(int index) const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.item_num)
  return item_num_.Get(index);
}
inline void DB_ActionRecord::set_item_num(int index, ::google::protobuf::int32 value) {
  item_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.item_num)
}
inline void DB_ActionRecord::add_item_num(::google::protobuf::int32 value) {
  item_num_.Add(value);
  // @@protoc_insertion_point(field_add:DB_ActionRecord.item_num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_ActionRecord::item_num() const {
  // @@protoc_insertion_point(field_list:DB_ActionRecord.item_num)
  return item_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_ActionRecord::mutable_item_num() {
  // @@protoc_insertion_point(field_mutable_list:DB_ActionRecord.item_num)
  return &item_num_;
}

// optional string context = 13 [default = ""];
inline bool DB_ActionRecord::has_context() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DB_ActionRecord::set_has_context() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DB_ActionRecord::clear_has_context() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DB_ActionRecord::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
inline const ::std::string& DB_ActionRecord::context() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_ActionRecord::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.context)
}
inline void DB_ActionRecord::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_ActionRecord.context)
}
inline void DB_ActionRecord::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_ActionRecord.context)
}
inline ::std::string* DB_ActionRecord::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:DB_ActionRecord.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_ActionRecord::release_context() {
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_ActionRecord::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:DB_ActionRecord.context)
}

// optional int32 guest_add = 14 [default = 0];
inline bool DB_ActionRecord::has_guest_add() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DB_ActionRecord::set_has_guest_add() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DB_ActionRecord::clear_has_guest_add() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DB_ActionRecord::clear_guest_add() {
  guest_add_ = 0;
  clear_has_guest_add();
}
inline ::google::protobuf::int32 DB_ActionRecord::guest_add() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.guest_add)
  return guest_add_;
}
inline void DB_ActionRecord::set_guest_add(::google::protobuf::int32 value) {
  set_has_guest_add();
  guest_add_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.guest_add)
}

// optional string openid = 15 [default = ""];
inline bool DB_ActionRecord::has_openid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DB_ActionRecord::set_has_openid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DB_ActionRecord::clear_has_openid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DB_ActionRecord::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
inline const ::std::string& DB_ActionRecord::openid() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_ActionRecord::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_ActionRecord.openid)
}
inline void DB_ActionRecord::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_ActionRecord.openid)
}
inline void DB_ActionRecord::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_ActionRecord.openid)
}
inline ::std::string* DB_ActionRecord::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:DB_ActionRecord.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_ActionRecord::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_ActionRecord::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:DB_ActionRecord.openid)
}

// optional int32 value_a = 16 [default = -1];
inline bool DB_ActionRecord::has_value_a() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DB_ActionRecord::set_has_value_a() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DB_ActionRecord::clear_has_value_a() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DB_ActionRecord::clear_value_a() {
  value_a_ = -1;
  clear_has_value_a();
}
inline ::google::protobuf::int32 DB_ActionRecord::value_a() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.value_a)
  return value_a_;
}
inline void DB_ActionRecord::set_value_a(::google::protobuf::int32 value) {
  set_has_value_a();
  value_a_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.value_a)
}

// optional int32 value_b = 17 [default = -1];
inline bool DB_ActionRecord::has_value_b() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DB_ActionRecord::set_has_value_b() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DB_ActionRecord::clear_has_value_b() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DB_ActionRecord::clear_value_b() {
  value_b_ = -1;
  clear_has_value_b();
}
inline ::google::protobuf::int32 DB_ActionRecord::value_b() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.value_b)
  return value_b_;
}
inline void DB_ActionRecord::set_value_b(::google::protobuf::int32 value) {
  set_has_value_b();
  value_b_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.value_b)
}

// optional int64 time_sec = 18 [default = 0];
inline bool DB_ActionRecord::has_time_sec() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DB_ActionRecord::set_has_time_sec() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DB_ActionRecord::clear_has_time_sec() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DB_ActionRecord::clear_time_sec() {
  time_sec_ = GOOGLE_LONGLONG(0);
  clear_has_time_sec();
}
inline ::google::protobuf::int64 DB_ActionRecord::time_sec() const {
  // @@protoc_insertion_point(field_get:DB_ActionRecord.time_sec)
  return time_sec_;
}
inline void DB_ActionRecord::set_time_sec(::google::protobuf::int64 value) {
  set_has_time_sec();
  time_sec_ = value;
  // @@protoc_insertion_point(field_set:DB_ActionRecord.time_sec)
}

// -------------------------------------------------------------------

// DB_FakeFriendActionSet

// repeated int64 fake_action_uids = 1;
inline int DB_FakeFriendActionSet::fake_action_uids_size() const {
  return fake_action_uids_.size();
}
inline void DB_FakeFriendActionSet::clear_fake_action_uids() {
  fake_action_uids_.Clear();
}
inline ::google::protobuf::int64 DB_FakeFriendActionSet::fake_action_uids(int index) const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.fake_action_uids)
  return fake_action_uids_.Get(index);
}
inline void DB_FakeFriendActionSet::set_fake_action_uids(int index, ::google::protobuf::int64 value) {
  fake_action_uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.fake_action_uids)
}
inline void DB_FakeFriendActionSet::add_fake_action_uids(::google::protobuf::int64 value) {
  fake_action_uids_.Add(value);
  // @@protoc_insertion_point(field_add:DB_FakeFriendActionSet.fake_action_uids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_FakeFriendActionSet::fake_action_uids() const {
  // @@protoc_insertion_point(field_list:DB_FakeFriendActionSet.fake_action_uids)
  return fake_action_uids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_FakeFriendActionSet::mutable_fake_action_uids() {
  // @@protoc_insertion_point(field_mutable_list:DB_FakeFriendActionSet.fake_action_uids)
  return &fake_action_uids_;
}

// repeated int32 fake_action_counts = 2;
inline int DB_FakeFriendActionSet::fake_action_counts_size() const {
  return fake_action_counts_.size();
}
inline void DB_FakeFriendActionSet::clear_fake_action_counts() {
  fake_action_counts_.Clear();
}
inline ::google::protobuf::int32 DB_FakeFriendActionSet::fake_action_counts(int index) const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.fake_action_counts)
  return fake_action_counts_.Get(index);
}
inline void DB_FakeFriendActionSet::set_fake_action_counts(int index, ::google::protobuf::int32 value) {
  fake_action_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.fake_action_counts)
}
inline void DB_FakeFriendActionSet::add_fake_action_counts(::google::protobuf::int32 value) {
  fake_action_counts_.Add(value);
  // @@protoc_insertion_point(field_add:DB_FakeFriendActionSet.fake_action_counts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_FakeFriendActionSet::fake_action_counts() const {
  // @@protoc_insertion_point(field_list:DB_FakeFriendActionSet.fake_action_counts)
  return fake_action_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_FakeFriendActionSet::mutable_fake_action_counts() {
  // @@protoc_insertion_point(field_mutable_list:DB_FakeFriendActionSet.fake_action_counts)
  return &fake_action_counts_;
}

// optional int32 fack_action_totle_count = 3 [default = 0];
inline bool DB_FakeFriendActionSet::has_fack_action_totle_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_FakeFriendActionSet::set_has_fack_action_totle_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_FakeFriendActionSet::clear_has_fack_action_totle_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_FakeFriendActionSet::clear_fack_action_totle_count() {
  fack_action_totle_count_ = 0;
  clear_has_fack_action_totle_count();
}
inline ::google::protobuf::int32 DB_FakeFriendActionSet::fack_action_totle_count() const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.fack_action_totle_count)
  return fack_action_totle_count_;
}
inline void DB_FakeFriendActionSet::set_fack_action_totle_count(::google::protobuf::int32 value) {
  set_has_fack_action_totle_count();
  fack_action_totle_count_ = value;
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.fack_action_totle_count)
}

// optional int64 last_update_time = 4 [default = 0];
inline bool DB_FakeFriendActionSet::has_last_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_FakeFriendActionSet::set_has_last_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_FakeFriendActionSet::clear_has_last_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_FakeFriendActionSet::clear_last_update_time() {
  last_update_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_update_time();
}
inline ::google::protobuf::int64 DB_FakeFriendActionSet::last_update_time() const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.last_update_time)
  return last_update_time_;
}
inline void DB_FakeFriendActionSet::set_last_update_time(::google::protobuf::int64 value) {
  set_has_last_update_time();
  last_update_time_ = value;
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.last_update_time)
}

// repeated bool fake_action_picked = 5;
inline int DB_FakeFriendActionSet::fake_action_picked_size() const {
  return fake_action_picked_.size();
}
inline void DB_FakeFriendActionSet::clear_fake_action_picked() {
  fake_action_picked_.Clear();
}
inline bool DB_FakeFriendActionSet::fake_action_picked(int index) const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.fake_action_picked)
  return fake_action_picked_.Get(index);
}
inline void DB_FakeFriendActionSet::set_fake_action_picked(int index, bool value) {
  fake_action_picked_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.fake_action_picked)
}
inline void DB_FakeFriendActionSet::add_fake_action_picked(bool value) {
  fake_action_picked_.Add(value);
  // @@protoc_insertion_point(field_add:DB_FakeFriendActionSet.fake_action_picked)
}
inline const ::google::protobuf::RepeatedField< bool >&
DB_FakeFriendActionSet::fake_action_picked() const {
  // @@protoc_insertion_point(field_list:DB_FakeFriendActionSet.fake_action_picked)
  return fake_action_picked_;
}
inline ::google::protobuf::RepeatedField< bool >*
DB_FakeFriendActionSet::mutable_fake_action_picked() {
  // @@protoc_insertion_point(field_mutable_list:DB_FakeFriendActionSet.fake_action_picked)
  return &fake_action_picked_;
}

// optional int32 fake_reward_guest = 6 [default = 0];
inline bool DB_FakeFriendActionSet::has_fake_reward_guest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_FakeFriendActionSet::set_has_fake_reward_guest() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_FakeFriendActionSet::clear_has_fake_reward_guest() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_FakeFriendActionSet::clear_fake_reward_guest() {
  fake_reward_guest_ = 0;
  clear_has_fake_reward_guest();
}
inline ::google::protobuf::int32 DB_FakeFriendActionSet::fake_reward_guest() const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.fake_reward_guest)
  return fake_reward_guest_;
}
inline void DB_FakeFriendActionSet::set_fake_reward_guest(::google::protobuf::int32 value) {
  set_has_fake_reward_guest();
  fake_reward_guest_ = value;
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.fake_reward_guest)
}

// optional int32 fake_reward_gold = 7 [default = 0];
inline bool DB_FakeFriendActionSet::has_fake_reward_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DB_FakeFriendActionSet::set_has_fake_reward_gold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DB_FakeFriendActionSet::clear_has_fake_reward_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DB_FakeFriendActionSet::clear_fake_reward_gold() {
  fake_reward_gold_ = 0;
  clear_has_fake_reward_gold();
}
inline ::google::protobuf::int32 DB_FakeFriendActionSet::fake_reward_gold() const {
  // @@protoc_insertion_point(field_get:DB_FakeFriendActionSet.fake_reward_gold)
  return fake_reward_gold_;
}
inline void DB_FakeFriendActionSet::set_fake_reward_gold(::google::protobuf::int32 value) {
  set_has_fake_reward_gold();
  fake_reward_gold_ = value;
  // @@protoc_insertion_point(field_set:DB_FakeFriendActionSet.fake_reward_gold)
}

// -------------------------------------------------------------------

// DB_FreindFirstVist

// repeated int64 uids = 1;
inline int DB_FreindFirstVist::uids_size() const {
  return uids_.size();
}
inline void DB_FreindFirstVist::clear_uids() {
  uids_.Clear();
}
inline ::google::protobuf::int64 DB_FreindFirstVist::uids(int index) const {
  // @@protoc_insertion_point(field_get:DB_FreindFirstVist.uids)
  return uids_.Get(index);
}
inline void DB_FreindFirstVist::set_uids(int index, ::google::protobuf::int64 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_FreindFirstVist.uids)
}
inline void DB_FreindFirstVist::add_uids(::google::protobuf::int64 value) {
  uids_.Add(value);
  // @@protoc_insertion_point(field_add:DB_FreindFirstVist.uids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_FreindFirstVist::uids() const {
  // @@protoc_insertion_point(field_list:DB_FreindFirstVist.uids)
  return uids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_FreindFirstVist::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:DB_FreindFirstVist.uids)
  return &uids_;
}

// -------------------------------------------------------------------

// DB_Option

// optional bool high_quality = 1 [default = true];
inline bool DB_Option::has_high_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_Option::set_has_high_quality() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_Option::clear_has_high_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_Option::clear_high_quality() {
  high_quality_ = true;
  clear_has_high_quality();
}
inline bool DB_Option::high_quality() const {
  // @@protoc_insertion_point(field_get:DB_Option.high_quality)
  return high_quality_;
}
inline void DB_Option::set_high_quality(bool value) {
  set_has_high_quality();
  high_quality_ = value;
  // @@protoc_insertion_point(field_set:DB_Option.high_quality)
}

// optional bool music = 2 [default = true];
inline bool DB_Option::has_music() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_Option::set_has_music() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_Option::clear_has_music() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_Option::clear_music() {
  music_ = true;
  clear_has_music();
}
inline bool DB_Option::music() const {
  // @@protoc_insertion_point(field_get:DB_Option.music)
  return music_;
}
inline void DB_Option::set_music(bool value) {
  set_has_music();
  music_ = value;
  // @@protoc_insertion_point(field_set:DB_Option.music)
}

// optional bool sound = 3 [default = true];
inline bool DB_Option::has_sound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_Option::set_has_sound() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_Option::clear_has_sound() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_Option::clear_sound() {
  sound_ = true;
  clear_has_sound();
}
inline bool DB_Option::sound() const {
  // @@protoc_insertion_point(field_get:DB_Option.sound)
  return sound_;
}
inline void DB_Option::set_sound(bool value) {
  set_has_sound();
  sound_ = value;
  // @@protoc_insertion_point(field_set:DB_Option.sound)
}

// -------------------------------------------------------------------

// DB_WebBuyDetail

// required int64 shopid = 1;
inline bool DB_WebBuyDetail::has_shopid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_WebBuyDetail::set_has_shopid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_WebBuyDetail::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_WebBuyDetail::clear_shopid() {
  shopid_ = GOOGLE_LONGLONG(0);
  clear_has_shopid();
}
inline ::google::protobuf::int64 DB_WebBuyDetail::shopid() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.shopid)
  return shopid_;
}
inline void DB_WebBuyDetail::set_shopid(::google::protobuf::int64 value) {
  set_has_shopid();
  shopid_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.shopid)
}

// required int32 count = 2;
inline bool DB_WebBuyDetail::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_WebBuyDetail::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_WebBuyDetail::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_WebBuyDetail::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 DB_WebBuyDetail::count() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.count)
  return count_;
}
inline void DB_WebBuyDetail::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.count)
}

// required int32 indate = 3;
inline bool DB_WebBuyDetail::has_indate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_WebBuyDetail::set_has_indate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_WebBuyDetail::clear_has_indate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_WebBuyDetail::clear_indate() {
  indate_ = 0;
  clear_has_indate();
}
inline ::google::protobuf::int32 DB_WebBuyDetail::indate() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.indate)
  return indate_;
}
inline void DB_WebBuyDetail::set_indate(::google::protobuf::int32 value) {
  set_has_indate();
  indate_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.indate)
}

// required int32 price = 4;
inline bool DB_WebBuyDetail::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_WebBuyDetail::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_WebBuyDetail::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_WebBuyDetail::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 DB_WebBuyDetail::price() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.price)
  return price_;
}
inline void DB_WebBuyDetail::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.price)
}

// optional int32 posx = 5;
inline bool DB_WebBuyDetail::has_posx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_WebBuyDetail::set_has_posx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_WebBuyDetail::clear_has_posx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_WebBuyDetail::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 DB_WebBuyDetail::posx() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.posx)
  return posx_;
}
inline void DB_WebBuyDetail::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.posx)
}

// optional int32 posy = 6;
inline bool DB_WebBuyDetail::has_posy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_WebBuyDetail::set_has_posy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_WebBuyDetail::clear_has_posy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_WebBuyDetail::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 DB_WebBuyDetail::posy() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.posy)
  return posy_;
}
inline void DB_WebBuyDetail::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.posy)
}

// optional int32 direction = 7;
inline bool DB_WebBuyDetail::has_direction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DB_WebBuyDetail::set_has_direction() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DB_WebBuyDetail::clear_has_direction() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DB_WebBuyDetail::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::google::protobuf::int32 DB_WebBuyDetail::direction() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyDetail.direction)
  return direction_;
}
inline void DB_WebBuyDetail::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyDetail.direction)
}

// -------------------------------------------------------------------

// DB_WebBuyRecord

// repeated .DB_WebBuyDetail details = 2;
inline int DB_WebBuyRecord::details_size() const {
  return details_.size();
}
inline void DB_WebBuyRecord::clear_details() {
  details_.Clear();
}
inline const ::DB_WebBuyDetail& DB_WebBuyRecord::details(int index) const {
  // @@protoc_insertion_point(field_get:DB_WebBuyRecord.details)
  return details_.Get(index);
}
inline ::DB_WebBuyDetail* DB_WebBuyRecord::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:DB_WebBuyRecord.details)
  return details_.Mutable(index);
}
inline ::DB_WebBuyDetail* DB_WebBuyRecord::add_details() {
  // @@protoc_insertion_point(field_add:DB_WebBuyRecord.details)
  return details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_WebBuyDetail >&
DB_WebBuyRecord::details() const {
  // @@protoc_insertion_point(field_list:DB_WebBuyRecord.details)
  return details_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_WebBuyDetail >*
DB_WebBuyRecord::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:DB_WebBuyRecord.details)
  return &details_;
}

// optional string key = 1;
inline bool DB_WebBuyRecord::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_WebBuyRecord::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_WebBuyRecord::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_WebBuyRecord::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& DB_WebBuyRecord::key() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyRecord.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_WebBuyRecord::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_WebBuyRecord.key)
}
inline void DB_WebBuyRecord::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_WebBuyRecord.key)
}
inline void DB_WebBuyRecord::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_WebBuyRecord.key)
}
inline ::std::string* DB_WebBuyRecord::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:DB_WebBuyRecord.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_WebBuyRecord::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_WebBuyRecord::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:DB_WebBuyRecord.key)
}

// optional int64 time = 3;
inline bool DB_WebBuyRecord::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_WebBuyRecord::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_WebBuyRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_WebBuyRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 DB_WebBuyRecord::time() const {
  // @@protoc_insertion_point(field_get:DB_WebBuyRecord.time)
  return time_;
}
inline void DB_WebBuyRecord::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:DB_WebBuyRecord.time)
}

// -------------------------------------------------------------------

// DB_LimitRecord

// optional int32 type_id = 1 [default = 0];
inline bool DB_LimitRecord::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_LimitRecord::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_LimitRecord::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_LimitRecord::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 DB_LimitRecord::type_id() const {
  // @@protoc_insertion_point(field_get:DB_LimitRecord.type_id)
  return type_id_;
}
inline void DB_LimitRecord::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:DB_LimitRecord.type_id)
}

// optional int32 num = 2 [default = 0];
inline bool DB_LimitRecord::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_LimitRecord::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_LimitRecord::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_LimitRecord::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 DB_LimitRecord::num() const {
  // @@protoc_insertion_point(field_get:DB_LimitRecord.num)
  return num_;
}
inline void DB_LimitRecord::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:DB_LimitRecord.num)
}

// optional int32 limittype = 3 [default = 0];
inline bool DB_LimitRecord::has_limittype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_LimitRecord::set_has_limittype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_LimitRecord::clear_has_limittype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_LimitRecord::clear_limittype() {
  limittype_ = 0;
  clear_has_limittype();
}
inline ::google::protobuf::int32 DB_LimitRecord::limittype() const {
  // @@protoc_insertion_point(field_get:DB_LimitRecord.limittype)
  return limittype_;
}
inline void DB_LimitRecord::set_limittype(::google::protobuf::int32 value) {
  set_has_limittype();
  limittype_ = value;
  // @@protoc_insertion_point(field_set:DB_LimitRecord.limittype)
}

// -------------------------------------------------------------------

// DB_Limit

// optional int64 update = 1 [default = 0];
inline bool DB_Limit::has_update() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_Limit::set_has_update() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_Limit::clear_has_update() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_Limit::clear_update() {
  update_ = GOOGLE_LONGLONG(0);
  clear_has_update();
}
inline ::google::protobuf::int64 DB_Limit::update() const {
  // @@protoc_insertion_point(field_get:DB_Limit.update)
  return update_;
}
inline void DB_Limit::set_update(::google::protobuf::int64 value) {
  set_has_update();
  update_ = value;
  // @@protoc_insertion_point(field_set:DB_Limit.update)
}

// repeated .DB_LimitRecord items = 2;
inline int DB_Limit::items_size() const {
  return items_.size();
}
inline void DB_Limit::clear_items() {
  items_.Clear();
}
inline const ::DB_LimitRecord& DB_Limit::items(int index) const {
  // @@protoc_insertion_point(field_get:DB_Limit.items)
  return items_.Get(index);
}
inline ::DB_LimitRecord* DB_Limit::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Limit.items)
  return items_.Mutable(index);
}
inline ::DB_LimitRecord* DB_Limit::add_items() {
  // @@protoc_insertion_point(field_add:DB_Limit.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_LimitRecord >&
DB_Limit::items() const {
  // @@protoc_insertion_point(field_list:DB_Limit.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_LimitRecord >*
DB_Limit::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:DB_Limit.items)
  return &items_;
}

// -------------------------------------------------------------------

// DB_StepWithTime

// optional int32 step = 3 [default = 0];
inline bool DB_StepWithTime::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_StepWithTime::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_StepWithTime::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_StepWithTime::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 DB_StepWithTime::step() const {
  // @@protoc_insertion_point(field_get:DB_StepWithTime.step)
  return step_;
}
inline void DB_StepWithTime::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:DB_StepWithTime.step)
}

// optional int64 update = 4 [default = 0];
inline bool DB_StepWithTime::has_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_StepWithTime::set_has_update() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_StepWithTime::clear_has_update() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_StepWithTime::clear_update() {
  update_ = GOOGLE_LONGLONG(0);
  clear_has_update();
}
inline ::google::protobuf::int64 DB_StepWithTime::update() const {
  // @@protoc_insertion_point(field_get:DB_StepWithTime.update)
  return update_;
}
inline void DB_StepWithTime::set_update(::google::protobuf::int64 value) {
  set_has_update();
  update_ = value;
  // @@protoc_insertion_point(field_set:DB_StepWithTime.update)
}

// -------------------------------------------------------------------

// DB_NewFunc

// optional .DB_BitCache system_info = 1;
inline bool DB_NewFunc::has_system_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_NewFunc::set_has_system_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_NewFunc::clear_has_system_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_NewFunc::clear_system_info() {
  if (system_info_ != NULL) system_info_->::DB_BitCache::Clear();
  clear_has_system_info();
}
inline const ::DB_BitCache& DB_NewFunc::system_info() const {
  // @@protoc_insertion_point(field_get:DB_NewFunc.system_info)
  return system_info_ != NULL ? *system_info_ : *default_instance_->system_info_;
}
inline ::DB_BitCache* DB_NewFunc::mutable_system_info() {
  set_has_system_info();
  if (system_info_ == NULL) {
    system_info_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_NewFunc.system_info)
  return system_info_;
}
inline ::DB_BitCache* DB_NewFunc::release_system_info() {
  clear_has_system_info();
  ::DB_BitCache* temp = system_info_;
  system_info_ = NULL;
  return temp;
}
inline void DB_NewFunc::set_allocated_system_info(::DB_BitCache* system_info) {
  delete system_info_;
  system_info_ = system_info;
  if (system_info) {
    set_has_system_info();
  } else {
    clear_has_system_info();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_NewFunc.system_info)
}

// -------------------------------------------------------------------

// DB_CDKey

// optional string cd_key = 1;
inline bool DB_CDKey::has_cd_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_CDKey::set_has_cd_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_CDKey::clear_has_cd_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_CDKey::clear_cd_key() {
  cd_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cd_key();
}
inline const ::std::string& DB_CDKey::cd_key() const {
  // @@protoc_insertion_point(field_get:DB_CDKey.cd_key)
  return cd_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CDKey::set_cd_key(const ::std::string& value) {
  set_has_cd_key();
  cd_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_CDKey.cd_key)
}
inline void DB_CDKey::set_cd_key(const char* value) {
  set_has_cd_key();
  cd_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_CDKey.cd_key)
}
inline void DB_CDKey::set_cd_key(const char* value, size_t size) {
  set_has_cd_key();
  cd_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_CDKey.cd_key)
}
inline ::std::string* DB_CDKey::mutable_cd_key() {
  set_has_cd_key();
  // @@protoc_insertion_point(field_mutable:DB_CDKey.cd_key)
  return cd_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_CDKey::release_cd_key() {
  clear_has_cd_key();
  return cd_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CDKey::set_allocated_cd_key(::std::string* cd_key) {
  if (cd_key != NULL) {
    set_has_cd_key();
  } else {
    clear_has_cd_key();
  }
  cd_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cd_key);
  // @@protoc_insertion_point(field_set_allocated:DB_CDKey.cd_key)
}

// optional int32 used_flag = 2;
inline bool DB_CDKey::has_used_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_CDKey::set_has_used_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_CDKey::clear_has_used_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_CDKey::clear_used_flag() {
  used_flag_ = 0;
  clear_has_used_flag();
}
inline ::google::protobuf::int32 DB_CDKey::used_flag() const {
  // @@protoc_insertion_point(field_get:DB_CDKey.used_flag)
  return used_flag_;
}
inline void DB_CDKey::set_used_flag(::google::protobuf::int32 value) {
  set_has_used_flag();
  used_flag_ = value;
  // @@protoc_insertion_point(field_set:DB_CDKey.used_flag)
}

// optional int32 active_id = 3;
inline bool DB_CDKey::has_active_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_CDKey::set_has_active_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_CDKey::clear_has_active_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_CDKey::clear_active_id() {
  active_id_ = 0;
  clear_has_active_id();
}
inline ::google::protobuf::int32 DB_CDKey::active_id() const {
  // @@protoc_insertion_point(field_get:DB_CDKey.active_id)
  return active_id_;
}
inline void DB_CDKey::set_active_id(::google::protobuf::int32 value) {
  set_has_active_id();
  active_id_ = value;
  // @@protoc_insertion_point(field_set:DB_CDKey.active_id)
}

// -------------------------------------------------------------------

// DB_Weibo

// optional bool listened = 1 [default = false];
inline bool DB_Weibo::has_listened() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_Weibo::set_has_listened() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_Weibo::clear_has_listened() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_Weibo::clear_listened() {
  listened_ = false;
  clear_has_listened();
}
inline bool DB_Weibo::listened() const {
  // @@protoc_insertion_point(field_get:DB_Weibo.listened)
  return listened_;
}
inline void DB_Weibo::set_listened(bool value) {
  set_has_listened();
  listened_ = value;
  // @@protoc_insertion_point(field_set:DB_Weibo.listened)
}

// optional bool listened_gift = 2 [default = false];
inline bool DB_Weibo::has_listened_gift() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_Weibo::set_has_listened_gift() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_Weibo::clear_has_listened_gift() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_Weibo::clear_listened_gift() {
  listened_gift_ = false;
  clear_has_listened_gift();
}
inline bool DB_Weibo::listened_gift() const {
  // @@protoc_insertion_point(field_get:DB_Weibo.listened_gift)
  return listened_gift_;
}
inline void DB_Weibo::set_listened_gift(bool value) {
  set_has_listened_gift();
  listened_gift_ = value;
  // @@protoc_insertion_point(field_set:DB_Weibo.listened_gift)
}

// optional bool forwarded = 3 [default = false];
inline bool DB_Weibo::has_forwarded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_Weibo::set_has_forwarded() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_Weibo::clear_has_forwarded() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_Weibo::clear_forwarded() {
  forwarded_ = false;
  clear_has_forwarded();
}
inline bool DB_Weibo::forwarded() const {
  // @@protoc_insertion_point(field_get:DB_Weibo.forwarded)
  return forwarded_;
}
inline void DB_Weibo::set_forwarded(bool value) {
  set_has_forwarded();
  forwarded_ = value;
  // @@protoc_insertion_point(field_set:DB_Weibo.forwarded)
}

// optional bool forwarded_gift = 4 [default = false];
inline bool DB_Weibo::has_forwarded_gift() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_Weibo::set_has_forwarded_gift() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_Weibo::clear_has_forwarded_gift() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_Weibo::clear_forwarded_gift() {
  forwarded_gift_ = false;
  clear_has_forwarded_gift();
}
inline bool DB_Weibo::forwarded_gift() const {
  // @@protoc_insertion_point(field_get:DB_Weibo.forwarded_gift)
  return forwarded_gift_;
}
inline void DB_Weibo::set_forwarded_gift(bool value) {
  set_has_forwarded_gift();
  forwarded_gift_ = value;
  // @@protoc_insertion_point(field_set:DB_Weibo.forwarded_gift)
}

// optional bool qzone_followed = 5 [default = false];
inline bool DB_Weibo::has_qzone_followed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_Weibo::set_has_qzone_followed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_Weibo::clear_has_qzone_followed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_Weibo::clear_qzone_followed() {
  qzone_followed_ = false;
  clear_has_qzone_followed();
}
inline bool DB_Weibo::qzone_followed() const {
  // @@protoc_insertion_point(field_get:DB_Weibo.qzone_followed)
  return qzone_followed_;
}
inline void DB_Weibo::set_qzone_followed(bool value) {
  set_has_qzone_followed();
  qzone_followed_ = value;
  // @@protoc_insertion_point(field_set:DB_Weibo.qzone_followed)
}

// optional int64 qzone_day = 6 [default = 0];
inline bool DB_Weibo::has_qzone_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_Weibo::set_has_qzone_day() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_Weibo::clear_has_qzone_day() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_Weibo::clear_qzone_day() {
  qzone_day_ = GOOGLE_LONGLONG(0);
  clear_has_qzone_day();
}
inline ::google::protobuf::int64 DB_Weibo::qzone_day() const {
  // @@protoc_insertion_point(field_get:DB_Weibo.qzone_day)
  return qzone_day_;
}
inline void DB_Weibo::set_qzone_day(::google::protobuf::int64 value) {
  set_has_qzone_day();
  qzone_day_ = value;
  // @@protoc_insertion_point(field_set:DB_Weibo.qzone_day)
}

// -------------------------------------------------------------------

// DB_CallBackCell

// optional int64 timer = 1 [default = 0];
inline bool DB_CallBackCell::has_timer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_CallBackCell::set_has_timer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_CallBackCell::clear_has_timer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_CallBackCell::clear_timer() {
  timer_ = GOOGLE_LONGLONG(0);
  clear_has_timer();
}
inline ::google::protobuf::int64 DB_CallBackCell::timer() const {
  // @@protoc_insertion_point(field_get:DB_CallBackCell.timer)
  return timer_;
}
inline void DB_CallBackCell::set_timer(::google::protobuf::int64 value) {
  set_has_timer();
  timer_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBackCell.timer)
}

// repeated string openid_list = 4;
inline int DB_CallBackCell::openid_list_size() const {
  return openid_list_.size();
}
inline void DB_CallBackCell::clear_openid_list() {
  openid_list_.Clear();
}
inline const ::std::string& DB_CallBackCell::openid_list(int index) const {
  // @@protoc_insertion_point(field_get:DB_CallBackCell.openid_list)
  return openid_list_.Get(index);
}
inline ::std::string* DB_CallBackCell::mutable_openid_list(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CallBackCell.openid_list)
  return openid_list_.Mutable(index);
}
inline void DB_CallBackCell::set_openid_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_CallBackCell.openid_list)
  openid_list_.Mutable(index)->assign(value);
}
inline void DB_CallBackCell::set_openid_list(int index, const char* value) {
  openid_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_CallBackCell.openid_list)
}
inline void DB_CallBackCell::set_openid_list(int index, const char* value, size_t size) {
  openid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_CallBackCell.openid_list)
}
inline ::std::string* DB_CallBackCell::add_openid_list() {
  return openid_list_.Add();
}
inline void DB_CallBackCell::add_openid_list(const ::std::string& value) {
  openid_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_CallBackCell.openid_list)
}
inline void DB_CallBackCell::add_openid_list(const char* value) {
  openid_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_CallBackCell.openid_list)
}
inline void DB_CallBackCell::add_openid_list(const char* value, size_t size) {
  openid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_CallBackCell.openid_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_CallBackCell::openid_list() const {
  // @@protoc_insertion_point(field_list:DB_CallBackCell.openid_list)
  return openid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_CallBackCell::mutable_openid_list() {
  // @@protoc_insertion_point(field_mutable_list:DB_CallBackCell.openid_list)
  return &openid_list_;
}

// repeated string name_list = 5;
inline int DB_CallBackCell::name_list_size() const {
  return name_list_.size();
}
inline void DB_CallBackCell::clear_name_list() {
  name_list_.Clear();
}
inline const ::std::string& DB_CallBackCell::name_list(int index) const {
  // @@protoc_insertion_point(field_get:DB_CallBackCell.name_list)
  return name_list_.Get(index);
}
inline ::std::string* DB_CallBackCell::mutable_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CallBackCell.name_list)
  return name_list_.Mutable(index);
}
inline void DB_CallBackCell::set_name_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_CallBackCell.name_list)
  name_list_.Mutable(index)->assign(value);
}
inline void DB_CallBackCell::set_name_list(int index, const char* value) {
  name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_CallBackCell.name_list)
}
inline void DB_CallBackCell::set_name_list(int index, const char* value, size_t size) {
  name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_CallBackCell.name_list)
}
inline ::std::string* DB_CallBackCell::add_name_list() {
  return name_list_.Add();
}
inline void DB_CallBackCell::add_name_list(const ::std::string& value) {
  name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_CallBackCell.name_list)
}
inline void DB_CallBackCell::add_name_list(const char* value) {
  name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_CallBackCell.name_list)
}
inline void DB_CallBackCell::add_name_list(const char* value, size_t size) {
  name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_CallBackCell.name_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_CallBackCell::name_list() const {
  // @@protoc_insertion_point(field_list:DB_CallBackCell.name_list)
  return name_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_CallBackCell::mutable_name_list() {
  // @@protoc_insertion_point(field_mutable_list:DB_CallBackCell.name_list)
  return &name_list_;
}

// repeated string url_list = 6;
inline int DB_CallBackCell::url_list_size() const {
  return url_list_.size();
}
inline void DB_CallBackCell::clear_url_list() {
  url_list_.Clear();
}
inline const ::std::string& DB_CallBackCell::url_list(int index) const {
  // @@protoc_insertion_point(field_get:DB_CallBackCell.url_list)
  return url_list_.Get(index);
}
inline ::std::string* DB_CallBackCell::mutable_url_list(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CallBackCell.url_list)
  return url_list_.Mutable(index);
}
inline void DB_CallBackCell::set_url_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_CallBackCell.url_list)
  url_list_.Mutable(index)->assign(value);
}
inline void DB_CallBackCell::set_url_list(int index, const char* value) {
  url_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_CallBackCell.url_list)
}
inline void DB_CallBackCell::set_url_list(int index, const char* value, size_t size) {
  url_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_CallBackCell.url_list)
}
inline ::std::string* DB_CallBackCell::add_url_list() {
  return url_list_.Add();
}
inline void DB_CallBackCell::add_url_list(const ::std::string& value) {
  url_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_CallBackCell.url_list)
}
inline void DB_CallBackCell::add_url_list(const char* value) {
  url_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_CallBackCell.url_list)
}
inline void DB_CallBackCell::add_url_list(const char* value, size_t size) {
  url_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_CallBackCell.url_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_CallBackCell::url_list() const {
  // @@protoc_insertion_point(field_list:DB_CallBackCell.url_list)
  return url_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_CallBackCell::mutable_url_list() {
  // @@protoc_insertion_point(field_mutable_list:DB_CallBackCell.url_list)
  return &url_list_;
}

// optional bool rewarded = 2 [default = false];
inline bool DB_CallBackCell::has_rewarded() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_CallBackCell::set_has_rewarded() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_CallBackCell::clear_has_rewarded() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_CallBackCell::clear_rewarded() {
  rewarded_ = false;
  clear_has_rewarded();
}
inline bool DB_CallBackCell::rewarded() const {
  // @@protoc_insertion_point(field_get:DB_CallBackCell.rewarded)
  return rewarded_;
}
inline void DB_CallBackCell::set_rewarded(bool value) {
  set_has_rewarded();
  rewarded_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBackCell.rewarded)
}

// optional int32 totallevel = 3 [default = 0];
inline bool DB_CallBackCell::has_totallevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_CallBackCell::set_has_totallevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_CallBackCell::clear_has_totallevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_CallBackCell::clear_totallevel() {
  totallevel_ = 0;
  clear_has_totallevel();
}
inline ::google::protobuf::int32 DB_CallBackCell::totallevel() const {
  // @@protoc_insertion_point(field_get:DB_CallBackCell.totallevel)
  return totallevel_;
}
inline void DB_CallBackCell::set_totallevel(::google::protobuf::int32 value) {
  set_has_totallevel();
  totallevel_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBackCell.totallevel)
}

// -------------------------------------------------------------------

// DB_CallBack

// optional int32 version = 1 [default = 0];
inline bool DB_CallBack::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_CallBack::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_CallBack::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_CallBack::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 DB_CallBack::version() const {
  // @@protoc_insertion_point(field_get:DB_CallBack.version)
  return version_;
}
inline void DB_CallBack::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBack.version)
}

// repeated .DB_CallBackCell cbcell = 2;
inline int DB_CallBack::cbcell_size() const {
  return cbcell_.size();
}
inline void DB_CallBack::clear_cbcell() {
  cbcell_.Clear();
}
inline const ::DB_CallBackCell& DB_CallBack::cbcell(int index) const {
  // @@protoc_insertion_point(field_get:DB_CallBack.cbcell)
  return cbcell_.Get(index);
}
inline ::DB_CallBackCell* DB_CallBack::mutable_cbcell(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CallBack.cbcell)
  return cbcell_.Mutable(index);
}
inline ::DB_CallBackCell* DB_CallBack::add_cbcell() {
  // @@protoc_insertion_point(field_add:DB_CallBack.cbcell)
  return cbcell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_CallBackCell >&
DB_CallBack::cbcell() const {
  // @@protoc_insertion_point(field_list:DB_CallBack.cbcell)
  return cbcell_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_CallBackCell >*
DB_CallBack::mutable_cbcell() {
  // @@protoc_insertion_point(field_mutable_list:DB_CallBack.cbcell)
  return &cbcell_;
}

// optional int32 cell_update_day = 3 [default = 0];
inline bool DB_CallBack::has_cell_update_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_CallBack::set_has_cell_update_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_CallBack::clear_has_cell_update_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_CallBack::clear_cell_update_day() {
  cell_update_day_ = 0;
  clear_has_cell_update_day();
}
inline ::google::protobuf::int32 DB_CallBack::cell_update_day() const {
  // @@protoc_insertion_point(field_get:DB_CallBack.cell_update_day)
  return cell_update_day_;
}
inline void DB_CallBack::set_cell_update_day(::google::protobuf::int32 value) {
  set_has_cell_update_day();
  cell_update_day_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBack.cell_update_day)
}

// optional string callback_sender = 4 [default = ""];
inline bool DB_CallBack::has_callback_sender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_CallBack::set_has_callback_sender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_CallBack::clear_has_callback_sender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_CallBack::clear_callback_sender() {
  callback_sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callback_sender();
}
inline const ::std::string& DB_CallBack::callback_sender() const {
  // @@protoc_insertion_point(field_get:DB_CallBack.callback_sender)
  return callback_sender_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CallBack::set_callback_sender(const ::std::string& value) {
  set_has_callback_sender();
  callback_sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_CallBack.callback_sender)
}
inline void DB_CallBack::set_callback_sender(const char* value) {
  set_has_callback_sender();
  callback_sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_CallBack.callback_sender)
}
inline void DB_CallBack::set_callback_sender(const char* value, size_t size) {
  set_has_callback_sender();
  callback_sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_CallBack.callback_sender)
}
inline ::std::string* DB_CallBack::mutable_callback_sender() {
  set_has_callback_sender();
  // @@protoc_insertion_point(field_mutable:DB_CallBack.callback_sender)
  return callback_sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_CallBack::release_callback_sender() {
  clear_has_callback_sender();
  return callback_sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_CallBack::set_allocated_callback_sender(::std::string* callback_sender) {
  if (callback_sender != NULL) {
    set_has_callback_sender();
  } else {
    clear_has_callback_sender();
  }
  callback_sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback_sender);
  // @@protoc_insertion_point(field_set_allocated:DB_CallBack.callback_sender)
}

// optional int32 reward_cnt_as_taker = 5 [default = 0];
inline bool DB_CallBack::has_reward_cnt_as_taker() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_CallBack::set_has_reward_cnt_as_taker() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_CallBack::clear_has_reward_cnt_as_taker() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_CallBack::clear_reward_cnt_as_taker() {
  reward_cnt_as_taker_ = 0;
  clear_has_reward_cnt_as_taker();
}
inline ::google::protobuf::int32 DB_CallBack::reward_cnt_as_taker() const {
  // @@protoc_insertion_point(field_get:DB_CallBack.reward_cnt_as_taker)
  return reward_cnt_as_taker_;
}
inline void DB_CallBack::set_reward_cnt_as_taker(::google::protobuf::int32 value) {
  set_has_reward_cnt_as_taker();
  reward_cnt_as_taker_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBack.reward_cnt_as_taker)
}

// repeated string cache_list = 7;
inline int DB_CallBack::cache_list_size() const {
  return cache_list_.size();
}
inline void DB_CallBack::clear_cache_list() {
  cache_list_.Clear();
}
inline const ::std::string& DB_CallBack::cache_list(int index) const {
  // @@protoc_insertion_point(field_get:DB_CallBack.cache_list)
  return cache_list_.Get(index);
}
inline ::std::string* DB_CallBack::mutable_cache_list(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CallBack.cache_list)
  return cache_list_.Mutable(index);
}
inline void DB_CallBack::set_cache_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_CallBack.cache_list)
  cache_list_.Mutable(index)->assign(value);
}
inline void DB_CallBack::set_cache_list(int index, const char* value) {
  cache_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_CallBack.cache_list)
}
inline void DB_CallBack::set_cache_list(int index, const char* value, size_t size) {
  cache_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_CallBack.cache_list)
}
inline ::std::string* DB_CallBack::add_cache_list() {
  return cache_list_.Add();
}
inline void DB_CallBack::add_cache_list(const ::std::string& value) {
  cache_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_CallBack.cache_list)
}
inline void DB_CallBack::add_cache_list(const char* value) {
  cache_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_CallBack.cache_list)
}
inline void DB_CallBack::add_cache_list(const char* value, size_t size) {
  cache_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_CallBack.cache_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_CallBack::cache_list() const {
  // @@protoc_insertion_point(field_list:DB_CallBack.cache_list)
  return cache_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_CallBack::mutable_cache_list() {
  // @@protoc_insertion_point(field_mutable_list:DB_CallBack.cache_list)
  return &cache_list_;
}

// repeated string send_list = 8;
inline int DB_CallBack::send_list_size() const {
  return send_list_.size();
}
inline void DB_CallBack::clear_send_list() {
  send_list_.Clear();
}
inline const ::std::string& DB_CallBack::send_list(int index) const {
  // @@protoc_insertion_point(field_get:DB_CallBack.send_list)
  return send_list_.Get(index);
}
inline ::std::string* DB_CallBack::mutable_send_list(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CallBack.send_list)
  return send_list_.Mutable(index);
}
inline void DB_CallBack::set_send_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_CallBack.send_list)
  send_list_.Mutable(index)->assign(value);
}
inline void DB_CallBack::set_send_list(int index, const char* value) {
  send_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_CallBack.send_list)
}
inline void DB_CallBack::set_send_list(int index, const char* value, size_t size) {
  send_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_CallBack.send_list)
}
inline ::std::string* DB_CallBack::add_send_list() {
  return send_list_.Add();
}
inline void DB_CallBack::add_send_list(const ::std::string& value) {
  send_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_CallBack.send_list)
}
inline void DB_CallBack::add_send_list(const char* value) {
  send_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_CallBack.send_list)
}
inline void DB_CallBack::add_send_list(const char* value, size_t size) {
  send_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_CallBack.send_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_CallBack::send_list() const {
  // @@protoc_insertion_point(field_list:DB_CallBack.send_list)
  return send_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_CallBack::mutable_send_list() {
  // @@protoc_insertion_point(field_mutable_list:DB_CallBack.send_list)
  return &send_list_;
}

// optional int32 cell_build_day = 9 [default = 0];
inline bool DB_CallBack::has_cell_build_day() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DB_CallBack::set_has_cell_build_day() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DB_CallBack::clear_has_cell_build_day() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DB_CallBack::clear_cell_build_day() {
  cell_build_day_ = 0;
  clear_has_cell_build_day();
}
inline ::google::protobuf::int32 DB_CallBack::cell_build_day() const {
  // @@protoc_insertion_point(field_get:DB_CallBack.cell_build_day)
  return cell_build_day_;
}
inline void DB_CallBack::set_cell_build_day(::google::protobuf::int32 value) {
  set_has_cell_build_day();
  cell_build_day_ = value;
  // @@protoc_insertion_point(field_set:DB_CallBack.cell_build_day)
}

// -------------------------------------------------------------------

// DB_FuncSwitch

// optional int64 time_day = 1 [default = 0];
inline bool DB_FuncSwitch::has_time_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_FuncSwitch::set_has_time_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_FuncSwitch::clear_has_time_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_FuncSwitch::clear_time_day() {
  time_day_ = GOOGLE_LONGLONG(0);
  clear_has_time_day();
}
inline ::google::protobuf::int64 DB_FuncSwitch::time_day() const {
  // @@protoc_insertion_point(field_get:DB_FuncSwitch.time_day)
  return time_day_;
}
inline void DB_FuncSwitch::set_time_day(::google::protobuf::int64 value) {
  set_has_time_day();
  time_day_ = value;
  // @@protoc_insertion_point(field_set:DB_FuncSwitch.time_day)
}

// optional int64 time_second = 3 [default = 0];
inline bool DB_FuncSwitch::has_time_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_FuncSwitch::set_has_time_second() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_FuncSwitch::clear_has_time_second() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_FuncSwitch::clear_time_second() {
  time_second_ = GOOGLE_LONGLONG(0);
  clear_has_time_second();
}
inline ::google::protobuf::int64 DB_FuncSwitch::time_second() const {
  // @@protoc_insertion_point(field_get:DB_FuncSwitch.time_second)
  return time_second_;
}
inline void DB_FuncSwitch::set_time_second(::google::protobuf::int64 value) {
  set_has_time_second();
  time_second_ = value;
  // @@protoc_insertion_point(field_set:DB_FuncSwitch.time_second)
}

// optional int32 daytimes = 2 [default = 0];
inline bool DB_FuncSwitch::has_daytimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_FuncSwitch::set_has_daytimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_FuncSwitch::clear_has_daytimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_FuncSwitch::clear_daytimes() {
  daytimes_ = 0;
  clear_has_daytimes();
}
inline ::google::protobuf::int32 DB_FuncSwitch::daytimes() const {
  // @@protoc_insertion_point(field_get:DB_FuncSwitch.daytimes)
  return daytimes_;
}
inline void DB_FuncSwitch::set_daytimes(::google::protobuf::int32 value) {
  set_has_daytimes();
  daytimes_ = value;
  // @@protoc_insertion_point(field_set:DB_FuncSwitch.daytimes)
}

// -------------------------------------------------------------------

// DB_FriendGift

// optional int32 friend_action_pos = 4 [default = 0];
inline bool DB_FriendGift::has_friend_action_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_FriendGift::set_has_friend_action_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_FriendGift::clear_has_friend_action_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_FriendGift::clear_friend_action_pos() {
  friend_action_pos_ = 0;
  clear_has_friend_action_pos();
}
inline ::google::protobuf::int32 DB_FriendGift::friend_action_pos() const {
  // @@protoc_insertion_point(field_get:DB_FriendGift.friend_action_pos)
  return friend_action_pos_;
}
inline void DB_FriendGift::set_friend_action_pos(::google::protobuf::int32 value) {
  set_has_friend_action_pos();
  friend_action_pos_ = value;
  // @@protoc_insertion_point(field_set:DB_FriendGift.friend_action_pos)
}

// optional bool friend_actions_allread = 1 [default = false];
inline bool DB_FriendGift::has_friend_actions_allread() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_FriendGift::set_has_friend_actions_allread() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_FriendGift::clear_has_friend_actions_allread() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_FriendGift::clear_friend_actions_allread() {
  friend_actions_allread_ = false;
  clear_has_friend_actions_allread();
}
inline bool DB_FriendGift::friend_actions_allread() const {
  // @@protoc_insertion_point(field_get:DB_FriendGift.friend_actions_allread)
  return friend_actions_allread_;
}
inline void DB_FriendGift::set_friend_actions_allread(bool value) {
  set_has_friend_actions_allread();
  friend_actions_allread_ = value;
  // @@protoc_insertion_point(field_set:DB_FriendGift.friend_actions_allread)
}

// optional int32 friend_action_unread_cnt = 2 [default = 0];
inline bool DB_FriendGift::has_friend_action_unread_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_FriendGift::set_has_friend_action_unread_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_FriendGift::clear_has_friend_action_unread_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_FriendGift::clear_friend_action_unread_cnt() {
  friend_action_unread_cnt_ = 0;
  clear_has_friend_action_unread_cnt();
}
inline ::google::protobuf::int32 DB_FriendGift::friend_action_unread_cnt() const {
  // @@protoc_insertion_point(field_get:DB_FriendGift.friend_action_unread_cnt)
  return friend_action_unread_cnt_;
}
inline void DB_FriendGift::set_friend_action_unread_cnt(::google::protobuf::int32 value) {
  set_has_friend_action_unread_cnt();
  friend_action_unread_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_FriendGift.friend_action_unread_cnt)
}

// repeated .DB_ActionRecord friend_actions = 3;
inline int DB_FriendGift::friend_actions_size() const {
  return friend_actions_.size();
}
inline void DB_FriendGift::clear_friend_actions() {
  friend_actions_.Clear();
}
inline const ::DB_ActionRecord& DB_FriendGift::friend_actions(int index) const {
  // @@protoc_insertion_point(field_get:DB_FriendGift.friend_actions)
  return friend_actions_.Get(index);
}
inline ::DB_ActionRecord* DB_FriendGift::mutable_friend_actions(int index) {
  // @@protoc_insertion_point(field_mutable:DB_FriendGift.friend_actions)
  return friend_actions_.Mutable(index);
}
inline ::DB_ActionRecord* DB_FriendGift::add_friend_actions() {
  // @@protoc_insertion_point(field_add:DB_FriendGift.friend_actions)
  return friend_actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord >&
DB_FriendGift::friend_actions() const {
  // @@protoc_insertion_point(field_list:DB_FriendGift.friend_actions)
  return friend_actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord >*
DB_FriendGift::mutable_friend_actions() {
  // @@protoc_insertion_point(field_mutable_list:DB_FriendGift.friend_actions)
  return &friend_actions_;
}

// -------------------------------------------------------------------

// DB_Universe

// optional int32 id = 1;
inline bool DB_Universe::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_Universe::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_Universe::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_Universe::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DB_Universe::id() const {
  // @@protoc_insertion_point(field_get:DB_Universe.id)
  return id_;
}
inline void DB_Universe::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.id)
}

// optional int32 value = 2;
inline bool DB_Universe::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_Universe::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_Universe::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_Universe::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 DB_Universe::value() const {
  // @@protoc_insertion_point(field_get:DB_Universe.value)
  return value_;
}
inline void DB_Universe::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.value)
}

// optional int32 stars = 3;
inline bool DB_Universe::has_stars() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_Universe::set_has_stars() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_Universe::clear_has_stars() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_Universe::clear_stars() {
  stars_ = 0;
  clear_has_stars();
}
inline ::google::protobuf::int32 DB_Universe::stars() const {
  // @@protoc_insertion_point(field_get:DB_Universe.stars)
  return stars_;
}
inline void DB_Universe::set_stars(::google::protobuf::int32 value) {
  set_has_stars();
  stars_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.stars)
}

// optional bool unlocked = 4;
inline bool DB_Universe::has_unlocked() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_Universe::set_has_unlocked() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_Universe::clear_has_unlocked() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_Universe::clear_unlocked() {
  unlocked_ = false;
  clear_has_unlocked();
}
inline bool DB_Universe::unlocked() const {
  // @@protoc_insertion_point(field_get:DB_Universe.unlocked)
  return unlocked_;
}
inline void DB_Universe::set_unlocked(bool value) {
  set_has_unlocked();
  unlocked_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.unlocked)
}

// optional string json_unlockConditionDataList = 5;
inline bool DB_Universe::has_json_unlockconditiondatalist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_Universe::set_has_json_unlockconditiondatalist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_Universe::clear_has_json_unlockconditiondatalist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_Universe::clear_json_unlockconditiondatalist() {
  json_unlockconditiondatalist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_unlockconditiondatalist();
}
inline const ::std::string& DB_Universe::json_unlockconditiondatalist() const {
  // @@protoc_insertion_point(field_get:DB_Universe.json_unlockConditionDataList)
  return json_unlockconditiondatalist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_Universe::set_json_unlockconditiondatalist(const ::std::string& value) {
  set_has_json_unlockconditiondatalist();
  json_unlockconditiondatalist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_Universe.json_unlockConditionDataList)
}
inline void DB_Universe::set_json_unlockconditiondatalist(const char* value) {
  set_has_json_unlockconditiondatalist();
  json_unlockconditiondatalist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_Universe.json_unlockConditionDataList)
}
inline void DB_Universe::set_json_unlockconditiondatalist(const char* value, size_t size) {
  set_has_json_unlockconditiondatalist();
  json_unlockconditiondatalist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_Universe.json_unlockConditionDataList)
}
inline ::std::string* DB_Universe::mutable_json_unlockconditiondatalist() {
  set_has_json_unlockconditiondatalist();
  // @@protoc_insertion_point(field_mutable:DB_Universe.json_unlockConditionDataList)
  return json_unlockconditiondatalist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_Universe::release_json_unlockconditiondatalist() {
  clear_has_json_unlockconditiondatalist();
  return json_unlockconditiondatalist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_Universe::set_allocated_json_unlockconditiondatalist(::std::string* json_unlockconditiondatalist) {
  if (json_unlockconditiondatalist != NULL) {
    set_has_json_unlockconditiondatalist();
  } else {
    clear_has_json_unlockconditiondatalist();
  }
  json_unlockconditiondatalist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_unlockconditiondatalist);
  // @@protoc_insertion_point(field_set_allocated:DB_Universe.json_unlockConditionDataList)
}

// optional int32 failed_cnt = 7 [default = 0];
inline bool DB_Universe::has_failed_cnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_Universe::set_has_failed_cnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_Universe::clear_has_failed_cnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_Universe::clear_failed_cnt() {
  failed_cnt_ = 0;
  clear_has_failed_cnt();
}
inline ::google::protobuf::int32 DB_Universe::failed_cnt() const {
  // @@protoc_insertion_point(field_get:DB_Universe.failed_cnt)
  return failed_cnt_;
}
inline void DB_Universe::set_failed_cnt(::google::protobuf::int32 value) {
  set_has_failed_cnt();
  failed_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.failed_cnt)
}

// optional int64 first_unlock_second = 8 [default = 0];
inline bool DB_Universe::has_first_unlock_second() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DB_Universe::set_has_first_unlock_second() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DB_Universe::clear_has_first_unlock_second() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DB_Universe::clear_first_unlock_second() {
  first_unlock_second_ = GOOGLE_LONGLONG(0);
  clear_has_first_unlock_second();
}
inline ::google::protobuf::int64 DB_Universe::first_unlock_second() const {
  // @@protoc_insertion_point(field_get:DB_Universe.first_unlock_second)
  return first_unlock_second_;
}
inline void DB_Universe::set_first_unlock_second(::google::protobuf::int64 value) {
  set_has_first_unlock_second();
  first_unlock_second_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.first_unlock_second)
}

// optional int64 top_player = 9 [default = 0];
inline bool DB_Universe::has_top_player() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DB_Universe::set_has_top_player() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DB_Universe::clear_has_top_player() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DB_Universe::clear_top_player() {
  top_player_ = GOOGLE_LONGLONG(0);
  clear_has_top_player();
}
inline ::google::protobuf::int64 DB_Universe::top_player() const {
  // @@protoc_insertion_point(field_get:DB_Universe.top_player)
  return top_player_;
}
inline void DB_Universe::set_top_player(::google::protobuf::int64 value) {
  set_has_top_player();
  top_player_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.top_player)
}

// optional int32 first_pass_from = 10 [default = 0];
inline bool DB_Universe::has_first_pass_from() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DB_Universe::set_has_first_pass_from() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DB_Universe::clear_has_first_pass_from() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DB_Universe::clear_first_pass_from() {
  first_pass_from_ = 0;
  clear_has_first_pass_from();
}
inline ::google::protobuf::int32 DB_Universe::first_pass_from() const {
  // @@protoc_insertion_point(field_get:DB_Universe.first_pass_from)
  return first_pass_from_;
}
inline void DB_Universe::set_first_pass_from(::google::protobuf::int32 value) {
  set_has_first_pass_from();
  first_pass_from_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.first_pass_from)
}

// optional int32 value_kos = 11 [default = 0];
inline bool DB_Universe::has_value_kos() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DB_Universe::set_has_value_kos() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DB_Universe::clear_has_value_kos() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DB_Universe::clear_value_kos() {
  value_kos_ = 0;
  clear_has_value_kos();
}
inline ::google::protobuf::int32 DB_Universe::value_kos() const {
  // @@protoc_insertion_point(field_get:DB_Universe.value_kos)
  return value_kos_;
}
inline void DB_Universe::set_value_kos(::google::protobuf::int32 value) {
  set_has_value_kos();
  value_kos_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.value_kos)
}

// optional int32 stars_kos = 12 [default = 0];
inline bool DB_Universe::has_stars_kos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DB_Universe::set_has_stars_kos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DB_Universe::clear_has_stars_kos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DB_Universe::clear_stars_kos() {
  stars_kos_ = 0;
  clear_has_stars_kos();
}
inline ::google::protobuf::int32 DB_Universe::stars_kos() const {
  // @@protoc_insertion_point(field_get:DB_Universe.stars_kos)
  return stars_kos_;
}
inline void DB_Universe::set_stars_kos(::google::protobuf::int32 value) {
  set_has_stars_kos();
  stars_kos_ = value;
  // @@protoc_insertion_point(field_set:DB_Universe.stars_kos)
}

// -------------------------------------------------------------------

// DB_DallyUniverse

// optional .DB_Universe uni = 1;
inline bool DB_DallyUniverse::has_uni() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_DallyUniverse::set_has_uni() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_DallyUniverse::clear_has_uni() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_DallyUniverse::clear_uni() {
  if (uni_ != NULL) uni_->::DB_Universe::Clear();
  clear_has_uni();
}
inline const ::DB_Universe& DB_DallyUniverse::uni() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.uni)
  return uni_ != NULL ? *uni_ : *default_instance_->uni_;
}
inline ::DB_Universe* DB_DallyUniverse::mutable_uni() {
  set_has_uni();
  if (uni_ == NULL) {
    uni_ = new ::DB_Universe;
  }
  // @@protoc_insertion_point(field_mutable:DB_DallyUniverse.uni)
  return uni_;
}
inline ::DB_Universe* DB_DallyUniverse::release_uni() {
  clear_has_uni();
  ::DB_Universe* temp = uni_;
  uni_ = NULL;
  return temp;
}
inline void DB_DallyUniverse::set_allocated_uni(::DB_Universe* uni) {
  delete uni_;
  uni_ = uni;
  if (uni) {
    set_has_uni();
  } else {
    clear_has_uni();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_DallyUniverse.uni)
}

// optional int32 played_cnt = 2;
inline bool DB_DallyUniverse::has_played_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_DallyUniverse::set_has_played_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_DallyUniverse::clear_has_played_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_DallyUniverse::clear_played_cnt() {
  played_cnt_ = 0;
  clear_has_played_cnt();
}
inline ::google::protobuf::int32 DB_DallyUniverse::played_cnt() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.played_cnt)
  return played_cnt_;
}
inline void DB_DallyUniverse::set_played_cnt(::google::protobuf::int32 value) {
  set_has_played_cnt();
  played_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverse.played_cnt)
}

// optional int32 succ_cnt = 3;
inline bool DB_DallyUniverse::has_succ_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_DallyUniverse::set_has_succ_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_DallyUniverse::clear_has_succ_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_DallyUniverse::clear_succ_cnt() {
  succ_cnt_ = 0;
  clear_has_succ_cnt();
}
inline ::google::protobuf::int32 DB_DallyUniverse::succ_cnt() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.succ_cnt)
  return succ_cnt_;
}
inline void DB_DallyUniverse::set_succ_cnt(::google::protobuf::int32 value) {
  set_has_succ_cnt();
  succ_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverse.succ_cnt)
}

// optional bool unlocked = 4;
inline bool DB_DallyUniverse::has_unlocked() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_DallyUniverse::set_has_unlocked() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_DallyUniverse::clear_has_unlocked() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_DallyUniverse::clear_unlocked() {
  unlocked_ = false;
  clear_has_unlocked();
}
inline bool DB_DallyUniverse::unlocked() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.unlocked)
  return unlocked_;
}
inline void DB_DallyUniverse::set_unlocked(bool value) {
  set_has_unlocked();
  unlocked_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverse.unlocked)
}

// optional bool pay_open = 5;
inline bool DB_DallyUniverse::has_pay_open() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_DallyUniverse::set_has_pay_open() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_DallyUniverse::clear_has_pay_open() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_DallyUniverse::clear_pay_open() {
  pay_open_ = false;
  clear_has_pay_open();
}
inline bool DB_DallyUniverse::pay_open() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.pay_open)
  return pay_open_;
}
inline void DB_DallyUniverse::set_pay_open(bool value) {
  set_has_pay_open();
  pay_open_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverse.pay_open)
}

// optional int64 pay_open_day = 6 [default = 0];
inline bool DB_DallyUniverse::has_pay_open_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_DallyUniverse::set_has_pay_open_day() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_DallyUniverse::clear_has_pay_open_day() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_DallyUniverse::clear_pay_open_day() {
  pay_open_day_ = GOOGLE_LONGLONG(0);
  clear_has_pay_open_day();
}
inline ::google::protobuf::int64 DB_DallyUniverse::pay_open_day() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.pay_open_day)
  return pay_open_day_;
}
inline void DB_DallyUniverse::set_pay_open_day(::google::protobuf::int64 value) {
  set_has_pay_open_day();
  pay_open_day_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverse.pay_open_day)
}

// optional int32 pay_cash = 7;
inline bool DB_DallyUniverse::has_pay_cash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DB_DallyUniverse::set_has_pay_cash() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DB_DallyUniverse::clear_has_pay_cash() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DB_DallyUniverse::clear_pay_cash() {
  pay_cash_ = 0;
  clear_has_pay_cash();
}
inline ::google::protobuf::int32 DB_DallyUniverse::pay_cash() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverse.pay_cash)
  return pay_cash_;
}
inline void DB_DallyUniverse::set_pay_cash(::google::protobuf::int32 value) {
  set_has_pay_cash();
  pay_cash_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverse.pay_cash)
}

// -------------------------------------------------------------------

// DB_DallyLogInfo

// optional int32 week = 1 [default = 0];
inline bool DB_DallyLogInfo::has_week() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_DallyLogInfo::set_has_week() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_DallyLogInfo::clear_has_week() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_DallyLogInfo::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 DB_DallyLogInfo::week() const {
  // @@protoc_insertion_point(field_get:DB_DallyLogInfo.week)
  return week_;
}
inline void DB_DallyLogInfo::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyLogInfo.week)
}

// optional int32 totalscore = 2;
inline bool DB_DallyLogInfo::has_totalscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_DallyLogInfo::set_has_totalscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_DallyLogInfo::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_DallyLogInfo::clear_totalscore() {
  totalscore_ = 0;
  clear_has_totalscore();
}
inline ::google::protobuf::int32 DB_DallyLogInfo::totalscore() const {
  // @@protoc_insertion_point(field_get:DB_DallyLogInfo.totalscore)
  return totalscore_;
}
inline void DB_DallyLogInfo::set_totalscore(::google::protobuf::int32 value) {
  set_has_totalscore();
  totalscore_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyLogInfo.totalscore)
}

// optional int32 unlocked_cnt = 3;
inline bool DB_DallyLogInfo::has_unlocked_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_DallyLogInfo::set_has_unlocked_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_DallyLogInfo::clear_has_unlocked_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_DallyLogInfo::clear_unlocked_cnt() {
  unlocked_cnt_ = 0;
  clear_has_unlocked_cnt();
}
inline ::google::protobuf::int32 DB_DallyLogInfo::unlocked_cnt() const {
  // @@protoc_insertion_point(field_get:DB_DallyLogInfo.unlocked_cnt)
  return unlocked_cnt_;
}
inline void DB_DallyLogInfo::set_unlocked_cnt(::google::protobuf::int32 value) {
  set_has_unlocked_cnt();
  unlocked_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyLogInfo.unlocked_cnt)
}

// -------------------------------------------------------------------

// DB_DallyUniverseInfo

// optional int32 week = 1;
inline bool DB_DallyUniverseInfo::has_week() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_DallyUniverseInfo::set_has_week() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_DallyUniverseInfo::clear_has_week() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_DallyUniverseInfo::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 DB_DallyUniverseInfo::week() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverseInfo.week)
  return week_;
}
inline void DB_DallyUniverseInfo::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverseInfo.week)
}

// repeated .DB_DallyUniverse uniset = 2;
inline int DB_DallyUniverseInfo::uniset_size() const {
  return uniset_.size();
}
inline void DB_DallyUniverseInfo::clear_uniset() {
  uniset_.Clear();
}
inline const ::DB_DallyUniverse& DB_DallyUniverseInfo::uniset(int index) const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverseInfo.uniset)
  return uniset_.Get(index);
}
inline ::DB_DallyUniverse* DB_DallyUniverseInfo::mutable_uniset(int index) {
  // @@protoc_insertion_point(field_mutable:DB_DallyUniverseInfo.uniset)
  return uniset_.Mutable(index);
}
inline ::DB_DallyUniverse* DB_DallyUniverseInfo::add_uniset() {
  // @@protoc_insertion_point(field_add:DB_DallyUniverseInfo.uniset)
  return uniset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_DallyUniverse >&
DB_DallyUniverseInfo::uniset() const {
  // @@protoc_insertion_point(field_list:DB_DallyUniverseInfo.uniset)
  return uniset_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_DallyUniverse >*
DB_DallyUniverseInfo::mutable_uniset() {
  // @@protoc_insertion_point(field_mutable_list:DB_DallyUniverseInfo.uniset)
  return &uniset_;
}

// optional int32 totalsocre = 3;
inline bool DB_DallyUniverseInfo::has_totalsocre() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_DallyUniverseInfo::set_has_totalsocre() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_DallyUniverseInfo::clear_has_totalsocre() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_DallyUniverseInfo::clear_totalsocre() {
  totalsocre_ = 0;
  clear_has_totalsocre();
}
inline ::google::protobuf::int32 DB_DallyUniverseInfo::totalsocre() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverseInfo.totalsocre)
  return totalsocre_;
}
inline void DB_DallyUniverseInfo::set_totalsocre(::google::protobuf::int32 value) {
  set_has_totalsocre();
  totalsocre_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverseInfo.totalsocre)
}

// optional bool rewardpicked = 4 [default = false];
inline bool DB_DallyUniverseInfo::has_rewardpicked() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_DallyUniverseInfo::set_has_rewardpicked() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_DallyUniverseInfo::clear_has_rewardpicked() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_DallyUniverseInfo::clear_rewardpicked() {
  rewardpicked_ = false;
  clear_has_rewardpicked();
}
inline bool DB_DallyUniverseInfo::rewardpicked() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverseInfo.rewardpicked)
  return rewardpicked_;
}
inline void DB_DallyUniverseInfo::set_rewardpicked(bool value) {
  set_has_rewardpicked();
  rewardpicked_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverseInfo.rewardpicked)
}

// repeated .DB_DallyLogInfo historyLogs = 5;
inline int DB_DallyUniverseInfo::historylogs_size() const {
  return historylogs_.size();
}
inline void DB_DallyUniverseInfo::clear_historylogs() {
  historylogs_.Clear();
}
inline const ::DB_DallyLogInfo& DB_DallyUniverseInfo::historylogs(int index) const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverseInfo.historyLogs)
  return historylogs_.Get(index);
}
inline ::DB_DallyLogInfo* DB_DallyUniverseInfo::mutable_historylogs(int index) {
  // @@protoc_insertion_point(field_mutable:DB_DallyUniverseInfo.historyLogs)
  return historylogs_.Mutable(index);
}
inline ::DB_DallyLogInfo* DB_DallyUniverseInfo::add_historylogs() {
  // @@protoc_insertion_point(field_add:DB_DallyUniverseInfo.historyLogs)
  return historylogs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_DallyLogInfo >&
DB_DallyUniverseInfo::historylogs() const {
  // @@protoc_insertion_point(field_list:DB_DallyUniverseInfo.historyLogs)
  return historylogs_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_DallyLogInfo >*
DB_DallyUniverseInfo::mutable_historylogs() {
  // @@protoc_insertion_point(field_mutable_list:DB_DallyUniverseInfo.historyLogs)
  return &historylogs_;
}

// optional bool cheat_bit = 6 [default = false];
inline bool DB_DallyUniverseInfo::has_cheat_bit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_DallyUniverseInfo::set_has_cheat_bit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_DallyUniverseInfo::clear_has_cheat_bit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_DallyUniverseInfo::clear_cheat_bit() {
  cheat_bit_ = false;
  clear_has_cheat_bit();
}
inline bool DB_DallyUniverseInfo::cheat_bit() const {
  // @@protoc_insertion_point(field_get:DB_DallyUniverseInfo.cheat_bit)
  return cheat_bit_;
}
inline void DB_DallyUniverseInfo::set_cheat_bit(bool value) {
  set_has_cheat_bit();
  cheat_bit_ = value;
  // @@protoc_insertion_point(field_set:DB_DallyUniverseInfo.cheat_bit)
}

// -------------------------------------------------------------------

// DB_LivesInfo

// optional int32 lives = 1;
inline bool DB_LivesInfo::has_lives() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_LivesInfo::set_has_lives() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_LivesInfo::clear_has_lives() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_LivesInfo::clear_lives() {
  lives_ = 0;
  clear_has_lives();
}
inline ::google::protobuf::int32 DB_LivesInfo::lives() const {
  // @@protoc_insertion_point(field_get:DB_LivesInfo.lives)
  return lives_;
}
inline void DB_LivesInfo::set_lives(::google::protobuf::int32 value) {
  set_has_lives();
  lives_ = value;
  // @@protoc_insertion_point(field_set:DB_LivesInfo.lives)
}

// optional int64 last_cost_time_sec = 2;
inline bool DB_LivesInfo::has_last_cost_time_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_LivesInfo::set_has_last_cost_time_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_LivesInfo::clear_has_last_cost_time_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_LivesInfo::clear_last_cost_time_sec() {
  last_cost_time_sec_ = GOOGLE_LONGLONG(0);
  clear_has_last_cost_time_sec();
}
inline ::google::protobuf::int64 DB_LivesInfo::last_cost_time_sec() const {
  // @@protoc_insertion_point(field_get:DB_LivesInfo.last_cost_time_sec)
  return last_cost_time_sec_;
}
inline void DB_LivesInfo::set_last_cost_time_sec(::google::protobuf::int64 value) {
  set_has_last_cost_time_sec();
  last_cost_time_sec_ = value;
  // @@protoc_insertion_point(field_set:DB_LivesInfo.last_cost_time_sec)
}

// optional int32 lives_max = 3;
inline bool DB_LivesInfo::has_lives_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_LivesInfo::set_has_lives_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_LivesInfo::clear_has_lives_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_LivesInfo::clear_lives_max() {
  lives_max_ = 0;
  clear_has_lives_max();
}
inline ::google::protobuf::int32 DB_LivesInfo::lives_max() const {
  // @@protoc_insertion_point(field_get:DB_LivesInfo.lives_max)
  return lives_max_;
}
inline void DB_LivesInfo::set_lives_max(::google::protobuf::int32 value) {
  set_has_lives_max();
  lives_max_ = value;
  // @@protoc_insertion_point(field_set:DB_LivesInfo.lives_max)
}

// -------------------------------------------------------------------

// DB_UniverseInfo

// optional int32 total_level = 1;
inline bool DB_UniverseInfo::has_total_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_UniverseInfo::set_has_total_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_UniverseInfo::clear_has_total_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_UniverseInfo::clear_total_level() {
  total_level_ = 0;
  clear_has_total_level();
}
inline ::google::protobuf::int32 DB_UniverseInfo::total_level() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.total_level)
  return total_level_;
}
inline void DB_UniverseInfo::set_total_level(::google::protobuf::int32 value) {
  set_has_total_level();
  total_level_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.total_level)
}

// optional int32 top_level = 2;
inline bool DB_UniverseInfo::has_top_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_UniverseInfo::set_has_top_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_UniverseInfo::clear_has_top_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_UniverseInfo::clear_top_level() {
  top_level_ = 0;
  clear_has_top_level();
}
inline ::google::protobuf::int32 DB_UniverseInfo::top_level() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.top_level)
  return top_level_;
}
inline void DB_UniverseInfo::set_top_level(::google::protobuf::int32 value) {
  set_has_top_level();
  top_level_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.top_level)
}

// optional int32 seed = 3;
inline bool DB_UniverseInfo::has_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_UniverseInfo::set_has_seed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_UniverseInfo::clear_has_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_UniverseInfo::clear_seed() {
  seed_ = 0;
  clear_has_seed();
}
inline ::google::protobuf::int32 DB_UniverseInfo::seed() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.seed)
  return seed_;
}
inline void DB_UniverseInfo::set_seed(::google::protobuf::int32 value) {
  set_has_seed();
  seed_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.seed)
}

// optional int64 lvl_start_sec = 5 [default = 0];
inline bool DB_UniverseInfo::has_lvl_start_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_UniverseInfo::set_has_lvl_start_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_UniverseInfo::clear_has_lvl_start_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_UniverseInfo::clear_lvl_start_sec() {
  lvl_start_sec_ = GOOGLE_LONGLONG(0);
  clear_has_lvl_start_sec();
}
inline ::google::protobuf::int64 DB_UniverseInfo::lvl_start_sec() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.lvl_start_sec)
  return lvl_start_sec_;
}
inline void DB_UniverseInfo::set_lvl_start_sec(::google::protobuf::int64 value) {
  set_has_lvl_start_sec();
  lvl_start_sec_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.lvl_start_sec)
}

// repeated .DB_Universe universe_set = 4;
inline int DB_UniverseInfo::universe_set_size() const {
  return universe_set_.size();
}
inline void DB_UniverseInfo::clear_universe_set() {
  universe_set_.Clear();
}
inline const ::DB_Universe& DB_UniverseInfo::universe_set(int index) const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.universe_set)
  return universe_set_.Get(index);
}
inline ::DB_Universe* DB_UniverseInfo::mutable_universe_set(int index) {
  // @@protoc_insertion_point(field_mutable:DB_UniverseInfo.universe_set)
  return universe_set_.Mutable(index);
}
inline ::DB_Universe* DB_UniverseInfo::add_universe_set() {
  // @@protoc_insertion_point(field_add:DB_UniverseInfo.universe_set)
  return universe_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_Universe >&
DB_UniverseInfo::universe_set() const {
  // @@protoc_insertion_point(field_list:DB_UniverseInfo.universe_set)
  return universe_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_Universe >*
DB_UniverseInfo::mutable_universe_set() {
  // @@protoc_insertion_point(field_mutable_list:DB_UniverseInfo.universe_set)
  return &universe_set_;
}

// optional int32 now_total_levl = 6 [default = 0];
inline bool DB_UniverseInfo::has_now_total_levl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_UniverseInfo::set_has_now_total_levl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_UniverseInfo::clear_has_now_total_levl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_UniverseInfo::clear_now_total_levl() {
  now_total_levl_ = 0;
  clear_has_now_total_levl();
}
inline ::google::protobuf::int32 DB_UniverseInfo::now_total_levl() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.now_total_levl)
  return now_total_levl_;
}
inline void DB_UniverseInfo::set_now_total_levl(::google::protobuf::int32 value) {
  set_has_now_total_levl();
  now_total_levl_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.now_total_levl)
}

// optional int32 checkval_first = 7 [default = 0];
inline bool DB_UniverseInfo::has_checkval_first() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DB_UniverseInfo::set_has_checkval_first() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DB_UniverseInfo::clear_has_checkval_first() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DB_UniverseInfo::clear_checkval_first() {
  checkval_first_ = 0;
  clear_has_checkval_first();
}
inline ::google::protobuf::int32 DB_UniverseInfo::checkval_first() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.checkval_first)
  return checkval_first_;
}
inline void DB_UniverseInfo::set_checkval_first(::google::protobuf::int32 value) {
  set_has_checkval_first();
  checkval_first_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.checkval_first)
}

// optional int32 checkval_second = 8 [default = 0];
inline bool DB_UniverseInfo::has_checkval_second() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DB_UniverseInfo::set_has_checkval_second() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DB_UniverseInfo::clear_has_checkval_second() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DB_UniverseInfo::clear_checkval_second() {
  checkval_second_ = 0;
  clear_has_checkval_second();
}
inline ::google::protobuf::int32 DB_UniverseInfo::checkval_second() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.checkval_second)
  return checkval_second_;
}
inline void DB_UniverseInfo::set_checkval_second(::google::protobuf::int32 value) {
  set_has_checkval_second();
  checkval_second_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.checkval_second)
}

// optional int32 passval = 9 [default = 0];
inline bool DB_UniverseInfo::has_passval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DB_UniverseInfo::set_has_passval() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DB_UniverseInfo::clear_has_passval() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DB_UniverseInfo::clear_passval() {
  passval_ = 0;
  clear_has_passval();
}
inline ::google::protobuf::int32 DB_UniverseInfo::passval() const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.passval)
  return passval_;
}
inline void DB_UniverseInfo::set_passval(::google::protobuf::int32 value) {
  set_has_passval();
  passval_ = value;
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.passval)
}

// repeated int32 lvlStockedItem = 10;
inline int DB_UniverseInfo::lvlstockeditem_size() const {
  return lvlstockeditem_.size();
}
inline void DB_UniverseInfo::clear_lvlstockeditem() {
  lvlstockeditem_.Clear();
}
inline ::google::protobuf::int32 DB_UniverseInfo::lvlstockeditem(int index) const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.lvlStockedItem)
  return lvlstockeditem_.Get(index);
}
inline void DB_UniverseInfo::set_lvlstockeditem(int index, ::google::protobuf::int32 value) {
  lvlstockeditem_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.lvlStockedItem)
}
inline void DB_UniverseInfo::add_lvlstockeditem(::google::protobuf::int32 value) {
  lvlstockeditem_.Add(value);
  // @@protoc_insertion_point(field_add:DB_UniverseInfo.lvlStockedItem)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_UniverseInfo::lvlstockeditem() const {
  // @@protoc_insertion_point(field_list:DB_UniverseInfo.lvlStockedItem)
  return lvlstockeditem_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_UniverseInfo::mutable_lvlstockeditem() {
  // @@protoc_insertion_point(field_mutable_list:DB_UniverseInfo.lvlStockedItem)
  return &lvlstockeditem_;
}

// repeated int32 egg_logic = 11;
inline int DB_UniverseInfo::egg_logic_size() const {
  return egg_logic_.size();
}
inline void DB_UniverseInfo::clear_egg_logic() {
  egg_logic_.Clear();
}
inline ::google::protobuf::int32 DB_UniverseInfo::egg_logic(int index) const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.egg_logic)
  return egg_logic_.Get(index);
}
inline void DB_UniverseInfo::set_egg_logic(int index, ::google::protobuf::int32 value) {
  egg_logic_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.egg_logic)
}
inline void DB_UniverseInfo::add_egg_logic(::google::protobuf::int32 value) {
  egg_logic_.Add(value);
  // @@protoc_insertion_point(field_add:DB_UniverseInfo.egg_logic)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_UniverseInfo::egg_logic() const {
  // @@protoc_insertion_point(field_list:DB_UniverseInfo.egg_logic)
  return egg_logic_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_UniverseInfo::mutable_egg_logic() {
  // @@protoc_insertion_point(field_mutable_list:DB_UniverseInfo.egg_logic)
  return &egg_logic_;
}

// repeated int32 mobile_submit_socres = 12;
inline int DB_UniverseInfo::mobile_submit_socres_size() const {
  return mobile_submit_socres_.size();
}
inline void DB_UniverseInfo::clear_mobile_submit_socres() {
  mobile_submit_socres_.Clear();
}
inline ::google::protobuf::int32 DB_UniverseInfo::mobile_submit_socres(int index) const {
  // @@protoc_insertion_point(field_get:DB_UniverseInfo.mobile_submit_socres)
  return mobile_submit_socres_.Get(index);
}
inline void DB_UniverseInfo::set_mobile_submit_socres(int index, ::google::protobuf::int32 value) {
  mobile_submit_socres_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_UniverseInfo.mobile_submit_socres)
}
inline void DB_UniverseInfo::add_mobile_submit_socres(::google::protobuf::int32 value) {
  mobile_submit_socres_.Add(value);
  // @@protoc_insertion_point(field_add:DB_UniverseInfo.mobile_submit_socres)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_UniverseInfo::mobile_submit_socres() const {
  // @@protoc_insertion_point(field_list:DB_UniverseInfo.mobile_submit_socres)
  return mobile_submit_socres_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_UniverseInfo::mutable_mobile_submit_socres() {
  // @@protoc_insertion_point(field_mutable_list:DB_UniverseInfo.mobile_submit_socres)
  return &mobile_submit_socres_;
}

// -------------------------------------------------------------------

// DB_StrKeyProperties

// optional string key = 1;
inline bool DB_StrKeyProperties::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_StrKeyProperties::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_StrKeyProperties::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_StrKeyProperties::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& DB_StrKeyProperties::key() const {
  // @@protoc_insertion_point(field_get:DB_StrKeyProperties.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_StrKeyProperties::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_StrKeyProperties.key)
}
inline void DB_StrKeyProperties::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_StrKeyProperties.key)
}
inline void DB_StrKeyProperties::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_StrKeyProperties.key)
}
inline ::std::string* DB_StrKeyProperties::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:DB_StrKeyProperties.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_StrKeyProperties::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_StrKeyProperties::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:DB_StrKeyProperties.key)
}

// optional bool bool_value = 2;
inline bool DB_StrKeyProperties::has_bool_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_StrKeyProperties::set_has_bool_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_StrKeyProperties::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_StrKeyProperties::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
inline bool DB_StrKeyProperties::bool_value() const {
  // @@protoc_insertion_point(field_get:DB_StrKeyProperties.bool_value)
  return bool_value_;
}
inline void DB_StrKeyProperties::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:DB_StrKeyProperties.bool_value)
}

// optional int32 int_value = 3;
inline bool DB_StrKeyProperties::has_int_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_StrKeyProperties::set_has_int_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_StrKeyProperties::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_StrKeyProperties::clear_int_value() {
  int_value_ = 0;
  clear_has_int_value();
}
inline ::google::protobuf::int32 DB_StrKeyProperties::int_value() const {
  // @@protoc_insertion_point(field_get:DB_StrKeyProperties.int_value)
  return int_value_;
}
inline void DB_StrKeyProperties::set_int_value(::google::protobuf::int32 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:DB_StrKeyProperties.int_value)
}

// optional string str_value = 4;
inline bool DB_StrKeyProperties::has_str_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_StrKeyProperties::set_has_str_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_StrKeyProperties::clear_has_str_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_StrKeyProperties::clear_str_value() {
  str_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_value();
}
inline const ::std::string& DB_StrKeyProperties::str_value() const {
  // @@protoc_insertion_point(field_get:DB_StrKeyProperties.str_value)
  return str_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_StrKeyProperties::set_str_value(const ::std::string& value) {
  set_has_str_value();
  str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_StrKeyProperties.str_value)
}
inline void DB_StrKeyProperties::set_str_value(const char* value) {
  set_has_str_value();
  str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_StrKeyProperties.str_value)
}
inline void DB_StrKeyProperties::set_str_value(const char* value, size_t size) {
  set_has_str_value();
  str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_StrKeyProperties.str_value)
}
inline ::std::string* DB_StrKeyProperties::mutable_str_value() {
  set_has_str_value();
  // @@protoc_insertion_point(field_mutable:DB_StrKeyProperties.str_value)
  return str_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_StrKeyProperties::release_str_value() {
  clear_has_str_value();
  return str_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_StrKeyProperties::set_allocated_str_value(::std::string* str_value) {
  if (str_value != NULL) {
    set_has_str_value();
  } else {
    clear_has_str_value();
  }
  str_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_value);
  // @@protoc_insertion_point(field_set_allocated:DB_StrKeyProperties.str_value)
}

// -------------------------------------------------------------------

// DB_CandyProperties

// repeated .DB_StrKeyProperties atts = 1;
inline int DB_CandyProperties::atts_size() const {
  return atts_.size();
}
inline void DB_CandyProperties::clear_atts() {
  atts_.Clear();
}
inline const ::DB_StrKeyProperties& DB_CandyProperties::atts(int index) const {
  // @@protoc_insertion_point(field_get:DB_CandyProperties.atts)
  return atts_.Get(index);
}
inline ::DB_StrKeyProperties* DB_CandyProperties::mutable_atts(int index) {
  // @@protoc_insertion_point(field_mutable:DB_CandyProperties.atts)
  return atts_.Mutable(index);
}
inline ::DB_StrKeyProperties* DB_CandyProperties::add_atts() {
  // @@protoc_insertion_point(field_add:DB_CandyProperties.atts)
  return atts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties >&
DB_CandyProperties::atts() const {
  // @@protoc_insertion_point(field_list:DB_CandyProperties.atts)
  return atts_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties >*
DB_CandyProperties::mutable_atts() {
  // @@protoc_insertion_point(field_mutable_list:DB_CandyProperties.atts)
  return &atts_;
}

// -------------------------------------------------------------------

// DB_Events

// repeated .DB_StrKeyProperties atts = 1;
inline int DB_Events::atts_size() const {
  return atts_.size();
}
inline void DB_Events::clear_atts() {
  atts_.Clear();
}
inline const ::DB_StrKeyProperties& DB_Events::atts(int index) const {
  // @@protoc_insertion_point(field_get:DB_Events.atts)
  return atts_.Get(index);
}
inline ::DB_StrKeyProperties* DB_Events::mutable_atts(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Events.atts)
  return atts_.Mutable(index);
}
inline ::DB_StrKeyProperties* DB_Events::add_atts() {
  // @@protoc_insertion_point(field_add:DB_Events.atts)
  return atts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties >&
DB_Events::atts() const {
  // @@protoc_insertion_point(field_list:DB_Events.atts)
  return atts_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_StrKeyProperties >*
DB_Events::mutable_atts() {
  // @@protoc_insertion_point(field_mutable_list:DB_Events.atts)
  return &atts_;
}

// -------------------------------------------------------------------

// DB_Singed

// optional int32 pos = 1 [default = 0];
inline bool DB_Singed::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_Singed::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_Singed::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_Singed::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 DB_Singed::pos() const {
  // @@protoc_insertion_point(field_get:DB_Singed.pos)
  return pos_;
}
inline void DB_Singed::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:DB_Singed.pos)
}

// repeated int32 data = 2;
inline int DB_Singed::data_size() const {
  return data_.size();
}
inline void DB_Singed::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 DB_Singed::data(int index) const {
  // @@protoc_insertion_point(field_get:DB_Singed.data)
  return data_.Get(index);
}
inline void DB_Singed::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_Singed.data)
}
inline void DB_Singed::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:DB_Singed.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_Singed::data() const {
  // @@protoc_insertion_point(field_list:DB_Singed.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_Singed::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:DB_Singed.data)
  return &data_;
}

// -------------------------------------------------------------------

// DB_Yelldmd

// optional int64 last_reword_time_sec = 1 [default = 0];
inline bool DB_Yelldmd::has_last_reword_time_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_Yelldmd::set_has_last_reword_time_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_Yelldmd::clear_has_last_reword_time_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_Yelldmd::clear_last_reword_time_sec() {
  last_reword_time_sec_ = GOOGLE_LONGLONG(0);
  clear_has_last_reword_time_sec();
}
inline ::google::protobuf::int64 DB_Yelldmd::last_reword_time_sec() const {
  // @@protoc_insertion_point(field_get:DB_Yelldmd.last_reword_time_sec)
  return last_reword_time_sec_;
}
inline void DB_Yelldmd::set_last_reword_time_sec(::google::protobuf::int64 value) {
  set_has_last_reword_time_sec();
  last_reword_time_sec_ = value;
  // @@protoc_insertion_point(field_set:DB_Yelldmd.last_reword_time_sec)
}

// optional bool newer_gift = 2 [default = false];
inline bool DB_Yelldmd::has_newer_gift() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_Yelldmd::set_has_newer_gift() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_Yelldmd::clear_has_newer_gift() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_Yelldmd::clear_newer_gift() {
  newer_gift_ = false;
  clear_has_newer_gift();
}
inline bool DB_Yelldmd::newer_gift() const {
  // @@protoc_insertion_point(field_get:DB_Yelldmd.newer_gift)
  return newer_gift_;
}
inline void DB_Yelldmd::set_newer_gift(bool value) {
  set_has_newer_gift();
  newer_gift_ = value;
  // @@protoc_insertion_point(field_set:DB_Yelldmd.newer_gift)
}

// -------------------------------------------------------------------

// DB_SignHistory

// optional int32 month = 1 [default = 0];
inline bool DB_SignHistory::has_month() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_SignHistory::set_has_month() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_SignHistory::clear_has_month() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_SignHistory::clear_month() {
  month_ = 0;
  clear_has_month();
}
inline ::google::protobuf::int32 DB_SignHistory::month() const {
  // @@protoc_insertion_point(field_get:DB_SignHistory.month)
  return month_;
}
inline void DB_SignHistory::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:DB_SignHistory.month)
}

// repeated int32 days = 2;
inline int DB_SignHistory::days_size() const {
  return days_.size();
}
inline void DB_SignHistory::clear_days() {
  days_.Clear();
}
inline ::google::protobuf::int32 DB_SignHistory::days(int index) const {
  // @@protoc_insertion_point(field_get:DB_SignHistory.days)
  return days_.Get(index);
}
inline void DB_SignHistory::set_days(int index, ::google::protobuf::int32 value) {
  days_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_SignHistory.days)
}
inline void DB_SignHistory::add_days(::google::protobuf::int32 value) {
  days_.Add(value);
  // @@protoc_insertion_point(field_add:DB_SignHistory.days)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_SignHistory::days() const {
  // @@protoc_insertion_point(field_list:DB_SignHistory.days)
  return days_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_SignHistory::mutable_days() {
  // @@protoc_insertion_point(field_mutable_list:DB_SignHistory.days)
  return &days_;
}

// optional .DB_BitCache reward_cache = 3;
inline bool DB_SignHistory::has_reward_cache() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_SignHistory::set_has_reward_cache() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_SignHistory::clear_has_reward_cache() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_SignHistory::clear_reward_cache() {
  if (reward_cache_ != NULL) reward_cache_->::DB_BitCache::Clear();
  clear_has_reward_cache();
}
inline const ::DB_BitCache& DB_SignHistory::reward_cache() const {
  // @@protoc_insertion_point(field_get:DB_SignHistory.reward_cache)
  return reward_cache_ != NULL ? *reward_cache_ : *default_instance_->reward_cache_;
}
inline ::DB_BitCache* DB_SignHistory::mutable_reward_cache() {
  set_has_reward_cache();
  if (reward_cache_ == NULL) {
    reward_cache_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_SignHistory.reward_cache)
  return reward_cache_;
}
inline ::DB_BitCache* DB_SignHistory::release_reward_cache() {
  clear_has_reward_cache();
  ::DB_BitCache* temp = reward_cache_;
  reward_cache_ = NULL;
  return temp;
}
inline void DB_SignHistory::set_allocated_reward_cache(::DB_BitCache* reward_cache) {
  delete reward_cache_;
  reward_cache_ = reward_cache;
  if (reward_cache) {
    set_has_reward_cache();
  } else {
    clear_has_reward_cache();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_SignHistory.reward_cache)
}

// optional int64 last_reword_time_sec = 4 [default = 0];
inline bool DB_SignHistory::has_last_reword_time_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_SignHistory::set_has_last_reword_time_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_SignHistory::clear_has_last_reword_time_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_SignHistory::clear_last_reword_time_sec() {
  last_reword_time_sec_ = GOOGLE_LONGLONG(0);
  clear_has_last_reword_time_sec();
}
inline ::google::protobuf::int64 DB_SignHistory::last_reword_time_sec() const {
  // @@protoc_insertion_point(field_get:DB_SignHistory.last_reword_time_sec)
  return last_reword_time_sec_;
}
inline void DB_SignHistory::set_last_reword_time_sec(::google::protobuf::int64 value) {
  set_has_last_reword_time_sec();
  last_reword_time_sec_ = value;
  // @@protoc_insertion_point(field_set:DB_SignHistory.last_reword_time_sec)
}

// -------------------------------------------------------------------

// DB_EasyTimeSet

// repeated int64 seconds = 1;
inline int DB_EasyTimeSet::seconds_size() const {
  return seconds_.size();
}
inline void DB_EasyTimeSet::clear_seconds() {
  seconds_.Clear();
}
inline ::google::protobuf::int64 DB_EasyTimeSet::seconds(int index) const {
  // @@protoc_insertion_point(field_get:DB_EasyTimeSet.seconds)
  return seconds_.Get(index);
}
inline void DB_EasyTimeSet::set_seconds(int index, ::google::protobuf::int64 value) {
  seconds_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_EasyTimeSet.seconds)
}
inline void DB_EasyTimeSet::add_seconds(::google::protobuf::int64 value) {
  seconds_.Add(value);
  // @@protoc_insertion_point(field_add:DB_EasyTimeSet.seconds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DB_EasyTimeSet::seconds() const {
  // @@protoc_insertion_point(field_list:DB_EasyTimeSet.seconds)
  return seconds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DB_EasyTimeSet::mutable_seconds() {
  // @@protoc_insertion_point(field_mutable_list:DB_EasyTimeSet.seconds)
  return &seconds_;
}

// -------------------------------------------------------------------

// DB_ContinuousDays

// optional int32 ContinuousDays = 1 [default = 0];
inline bool DB_ContinuousDays::has_continuousdays() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_ContinuousDays::set_has_continuousdays() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_ContinuousDays::clear_has_continuousdays() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_ContinuousDays::clear_continuousdays() {
  continuousdays_ = 0;
  clear_has_continuousdays();
}
inline ::google::protobuf::int32 DB_ContinuousDays::continuousdays() const {
  // @@protoc_insertion_point(field_get:DB_ContinuousDays.ContinuousDays)
  return continuousdays_;
}
inline void DB_ContinuousDays::set_continuousdays(::google::protobuf::int32 value) {
  set_has_continuousdays();
  continuousdays_ = value;
  // @@protoc_insertion_point(field_set:DB_ContinuousDays.ContinuousDays)
}

// optional .DB_BitCache reward_history = 2;
inline bool DB_ContinuousDays::has_reward_history() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_ContinuousDays::set_has_reward_history() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_ContinuousDays::clear_has_reward_history() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_ContinuousDays::clear_reward_history() {
  if (reward_history_ != NULL) reward_history_->::DB_BitCache::Clear();
  clear_has_reward_history();
}
inline const ::DB_BitCache& DB_ContinuousDays::reward_history() const {
  // @@protoc_insertion_point(field_get:DB_ContinuousDays.reward_history)
  return reward_history_ != NULL ? *reward_history_ : *default_instance_->reward_history_;
}
inline ::DB_BitCache* DB_ContinuousDays::mutable_reward_history() {
  set_has_reward_history();
  if (reward_history_ == NULL) {
    reward_history_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_ContinuousDays.reward_history)
  return reward_history_;
}
inline ::DB_BitCache* DB_ContinuousDays::release_reward_history() {
  clear_has_reward_history();
  ::DB_BitCache* temp = reward_history_;
  reward_history_ = NULL;
  return temp;
}
inline void DB_ContinuousDays::set_allocated_reward_history(::DB_BitCache* reward_history) {
  delete reward_history_;
  reward_history_ = reward_history;
  if (reward_history) {
    set_has_reward_history();
  } else {
    clear_has_reward_history();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_ContinuousDays.reward_history)
}

// optional int32 start_pos = 3 [default = 0];
inline bool DB_ContinuousDays::has_start_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_ContinuousDays::set_has_start_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_ContinuousDays::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_ContinuousDays::clear_start_pos() {
  start_pos_ = 0;
  clear_has_start_pos();
}
inline ::google::protobuf::int32 DB_ContinuousDays::start_pos() const {
  // @@protoc_insertion_point(field_get:DB_ContinuousDays.start_pos)
  return start_pos_;
}
inline void DB_ContinuousDays::set_start_pos(::google::protobuf::int32 value) {
  set_has_start_pos();
  start_pos_ = value;
  // @@protoc_insertion_point(field_set:DB_ContinuousDays.start_pos)
}

// -------------------------------------------------------------------

// DB_DragboatFvl

// optional int32 lastricecount = 1 [default = 0];
inline bool DB_DragboatFvl::has_lastricecount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_DragboatFvl::set_has_lastricecount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_DragboatFvl::clear_has_lastricecount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_DragboatFvl::clear_lastricecount() {
  lastricecount_ = 0;
  clear_has_lastricecount();
}
inline ::google::protobuf::int32 DB_DragboatFvl::lastricecount() const {
  // @@protoc_insertion_point(field_get:DB_DragboatFvl.lastricecount)
  return lastricecount_;
}
inline void DB_DragboatFvl::set_lastricecount(::google::protobuf::int32 value) {
  set_has_lastricecount();
  lastricecount_ = value;
  // @@protoc_insertion_point(field_set:DB_DragboatFvl.lastricecount)
}

// optional bool isacquired = 2 [default = false];
inline bool DB_DragboatFvl::has_isacquired() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_DragboatFvl::set_has_isacquired() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_DragboatFvl::clear_has_isacquired() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_DragboatFvl::clear_isacquired() {
  isacquired_ = false;
  clear_has_isacquired();
}
inline bool DB_DragboatFvl::isacquired() const {
  // @@protoc_insertion_point(field_get:DB_DragboatFvl.isacquired)
  return isacquired_;
}
inline void DB_DragboatFvl::set_isacquired(bool value) {
  set_has_isacquired();
  isacquired_ = value;
  // @@protoc_insertion_point(field_set:DB_DragboatFvl.isacquired)
}

// optional int64 lasttime = 3 [default = 0];
inline bool DB_DragboatFvl::has_lasttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_DragboatFvl::set_has_lasttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_DragboatFvl::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_DragboatFvl::clear_lasttime() {
  lasttime_ = GOOGLE_LONGLONG(0);
  clear_has_lasttime();
}
inline ::google::protobuf::int64 DB_DragboatFvl::lasttime() const {
  // @@protoc_insertion_point(field_get:DB_DragboatFvl.lasttime)
  return lasttime_;
}
inline void DB_DragboatFvl::set_lasttime(::google::protobuf::int64 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:DB_DragboatFvl.lasttime)
}

// optional int32 totalricecount = 4 [default = 0];
inline bool DB_DragboatFvl::has_totalricecount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_DragboatFvl::set_has_totalricecount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_DragboatFvl::clear_has_totalricecount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_DragboatFvl::clear_totalricecount() {
  totalricecount_ = 0;
  clear_has_totalricecount();
}
inline ::google::protobuf::int32 DB_DragboatFvl::totalricecount() const {
  // @@protoc_insertion_point(field_get:DB_DragboatFvl.totalricecount)
  return totalricecount_;
}
inline void DB_DragboatFvl::set_totalricecount(::google::protobuf::int32 value) {
  set_has_totalricecount();
  totalricecount_ = value;
  // @@protoc_insertion_point(field_set:DB_DragboatFvl.totalricecount)
}

// -------------------------------------------------------------------

// DB_ActiveInvite

// optional int64 userid = 1;
inline bool DB_ActiveInvite::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_ActiveInvite::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_ActiveInvite::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_ActiveInvite::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 DB_ActiveInvite::userid() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.userid)
  return userid_;
}
inline void DB_ActiveInvite::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.userid)
}

// optional string url = 2;
inline bool DB_ActiveInvite::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_ActiveInvite::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_ActiveInvite::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_ActiveInvite::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& DB_ActiveInvite::url() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_ActiveInvite::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.url)
}
inline void DB_ActiveInvite::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_ActiveInvite.url)
}
inline void DB_ActiveInvite::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_ActiveInvite.url)
}
inline ::std::string* DB_ActiveInvite::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:DB_ActiveInvite.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_ActiveInvite::release_url() {
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_ActiveInvite::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:DB_ActiveInvite.url)
}

// optional int32 lastlvl = 3;
inline bool DB_ActiveInvite::has_lastlvl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_ActiveInvite::set_has_lastlvl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_ActiveInvite::clear_has_lastlvl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_ActiveInvite::clear_lastlvl() {
  lastlvl_ = 0;
  clear_has_lastlvl();
}
inline ::google::protobuf::int32 DB_ActiveInvite::lastlvl() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.lastlvl)
  return lastlvl_;
}
inline void DB_ActiveInvite::set_lastlvl(::google::protobuf::int32 value) {
  set_has_lastlvl();
  lastlvl_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.lastlvl)
}

// optional int32 lastloginday = 4;
inline bool DB_ActiveInvite::has_lastloginday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_ActiveInvite::set_has_lastloginday() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_ActiveInvite::clear_has_lastloginday() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_ActiveInvite::clear_lastloginday() {
  lastloginday_ = 0;
  clear_has_lastloginday();
}
inline ::google::protobuf::int32 DB_ActiveInvite::lastloginday() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.lastloginday)
  return lastloginday_;
}
inline void DB_ActiveInvite::set_lastloginday(::google::protobuf::int32 value) {
  set_has_lastloginday();
  lastloginday_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.lastloginday)
}

// optional int32 nowloginday = 5;
inline bool DB_ActiveInvite::has_nowloginday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_ActiveInvite::set_has_nowloginday() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_ActiveInvite::clear_has_nowloginday() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_ActiveInvite::clear_nowloginday() {
  nowloginday_ = 0;
  clear_has_nowloginday();
}
inline ::google::protobuf::int32 DB_ActiveInvite::nowloginday() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.nowloginday)
  return nowloginday_;
}
inline void DB_ActiveInvite::set_nowloginday(::google::protobuf::int32 value) {
  set_has_nowloginday();
  nowloginday_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.nowloginday)
}

// repeated int32 isReceive1 = 6;
inline int DB_ActiveInvite::isreceive1_size() const {
  return isreceive1_.size();
}
inline void DB_ActiveInvite::clear_isreceive1() {
  isreceive1_.Clear();
}
inline ::google::protobuf::int32 DB_ActiveInvite::isreceive1(int index) const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.isReceive1)
  return isreceive1_.Get(index);
}
inline void DB_ActiveInvite::set_isreceive1(int index, ::google::protobuf::int32 value) {
  isreceive1_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.isReceive1)
}
inline void DB_ActiveInvite::add_isreceive1(::google::protobuf::int32 value) {
  isreceive1_.Add(value);
  // @@protoc_insertion_point(field_add:DB_ActiveInvite.isReceive1)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_ActiveInvite::isreceive1() const {
  // @@protoc_insertion_point(field_list:DB_ActiveInvite.isReceive1)
  return isreceive1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_ActiveInvite::mutable_isreceive1() {
  // @@protoc_insertion_point(field_mutable_list:DB_ActiveInvite.isReceive1)
  return &isreceive1_;
}

// optional bool isReceive2 = 7 [default = false];
inline bool DB_ActiveInvite::has_isreceive2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DB_ActiveInvite::set_has_isreceive2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DB_ActiveInvite::clear_has_isreceive2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DB_ActiveInvite::clear_isreceive2() {
  isreceive2_ = false;
  clear_has_isreceive2();
}
inline bool DB_ActiveInvite::isreceive2() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInvite.isReceive2)
  return isreceive2_;
}
inline void DB_ActiveInvite::set_isreceive2(bool value) {
  set_has_isreceive2();
  isreceive2_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveInvite.isReceive2)
}

// -------------------------------------------------------------------

// DB_ActiveInviteself

// repeated int32 isReceive3 = 1;
inline int DB_ActiveInviteself::isreceive3_size() const {
  return isreceive3_.size();
}
inline void DB_ActiveInviteself::clear_isreceive3() {
  isreceive3_.Clear();
}
inline ::google::protobuf::int32 DB_ActiveInviteself::isreceive3(int index) const {
  // @@protoc_insertion_point(field_get:DB_ActiveInviteself.isReceive3)
  return isreceive3_.Get(index);
}
inline void DB_ActiveInviteself::set_isreceive3(int index, ::google::protobuf::int32 value) {
  isreceive3_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_ActiveInviteself.isReceive3)
}
inline void DB_ActiveInviteself::add_isreceive3(::google::protobuf::int32 value) {
  isreceive3_.Add(value);
  // @@protoc_insertion_point(field_add:DB_ActiveInviteself.isReceive3)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_ActiveInviteself::isreceive3() const {
  // @@protoc_insertion_point(field_list:DB_ActiveInviteself.isReceive3)
  return isreceive3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_ActiveInviteself::mutable_isreceive3() {
  // @@protoc_insertion_point(field_mutable_list:DB_ActiveInviteself.isReceive3)
  return &isreceive3_;
}

// repeated int32 completed = 2;
inline int DB_ActiveInviteself::completed_size() const {
  return completed_.size();
}
inline void DB_ActiveInviteself::clear_completed() {
  completed_.Clear();
}
inline ::google::protobuf::int32 DB_ActiveInviteself::completed(int index) const {
  // @@protoc_insertion_point(field_get:DB_ActiveInviteself.completed)
  return completed_.Get(index);
}
inline void DB_ActiveInviteself::set_completed(int index, ::google::protobuf::int32 value) {
  completed_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_ActiveInviteself.completed)
}
inline void DB_ActiveInviteself::add_completed(::google::protobuf::int32 value) {
  completed_.Add(value);
  // @@protoc_insertion_point(field_add:DB_ActiveInviteself.completed)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_ActiveInviteself::completed() const {
  // @@protoc_insertion_point(field_list:DB_ActiveInviteself.completed)
  return completed_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_ActiveInviteself::mutable_completed() {
  // @@protoc_insertion_point(field_mutable_list:DB_ActiveInviteself.completed)
  return &completed_;
}

// optional int32 idCnt = 3 [default = 0];
inline bool DB_ActiveInviteself::has_idcnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_ActiveInviteself::set_has_idcnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_ActiveInviteself::clear_has_idcnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_ActiveInviteself::clear_idcnt() {
  idcnt_ = 0;
  clear_has_idcnt();
}
inline ::google::protobuf::int32 DB_ActiveInviteself::idcnt() const {
  // @@protoc_insertion_point(field_get:DB_ActiveInviteself.idCnt)
  return idcnt_;
}
inline void DB_ActiveInviteself::set_idcnt(::google::protobuf::int32 value) {
  set_has_idcnt();
  idcnt_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveInviteself.idCnt)
}

// repeated .DB_ActiveInvite other = 4;
inline int DB_ActiveInviteself::other_size() const {
  return other_.size();
}
inline void DB_ActiveInviteself::clear_other() {
  other_.Clear();
}
inline const ::DB_ActiveInvite& DB_ActiveInviteself::other(int index) const {
  // @@protoc_insertion_point(field_get:DB_ActiveInviteself.other)
  return other_.Get(index);
}
inline ::DB_ActiveInvite* DB_ActiveInviteself::mutable_other(int index) {
  // @@protoc_insertion_point(field_mutable:DB_ActiveInviteself.other)
  return other_.Mutable(index);
}
inline ::DB_ActiveInvite* DB_ActiveInviteself::add_other() {
  // @@protoc_insertion_point(field_add:DB_ActiveInviteself.other)
  return other_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_ActiveInvite >&
DB_ActiveInviteself::other() const {
  // @@protoc_insertion_point(field_list:DB_ActiveInviteself.other)
  return other_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_ActiveInvite >*
DB_ActiveInviteself::mutable_other() {
  // @@protoc_insertion_point(field_mutable_list:DB_ActiveInviteself.other)
  return &other_;
}

// -------------------------------------------------------------------

// DB_ActiveCallBack

// optional int32 totaldays = 1 [default = 0];
inline bool DB_ActiveCallBack::has_totaldays() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_ActiveCallBack::set_has_totaldays() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_ActiveCallBack::clear_has_totaldays() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_ActiveCallBack::clear_totaldays() {
  totaldays_ = 0;
  clear_has_totaldays();
}
inline ::google::protobuf::int32 DB_ActiveCallBack::totaldays() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.totaldays)
  return totaldays_;
}
inline void DB_ActiveCallBack::set_totaldays(::google::protobuf::int32 value) {
  set_has_totaldays();
  totaldays_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.totaldays)
}

// optional bool hasTKbgnum1 = 2 [default = false];
inline bool DB_ActiveCallBack::has_hastkbgnum1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_ActiveCallBack::set_has_hastkbgnum1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_ActiveCallBack::clear_has_hastkbgnum1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_ActiveCallBack::clear_hastkbgnum1() {
  hastkbgnum1_ = false;
  clear_has_hastkbgnum1();
}
inline bool DB_ActiveCallBack::hastkbgnum1() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.hasTKbgnum1)
  return hastkbgnum1_;
}
inline void DB_ActiveCallBack::set_hastkbgnum1(bool value) {
  set_has_hastkbgnum1();
  hastkbgnum1_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.hasTKbgnum1)
}

// optional bool hasTKbgnum2 = 3 [default = false];
inline bool DB_ActiveCallBack::has_hastkbgnum2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_ActiveCallBack::set_has_hastkbgnum2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_ActiveCallBack::clear_has_hastkbgnum2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_ActiveCallBack::clear_hastkbgnum2() {
  hastkbgnum2_ = false;
  clear_has_hastkbgnum2();
}
inline bool DB_ActiveCallBack::hastkbgnum2() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.hasTKbgnum2)
  return hastkbgnum2_;
}
inline void DB_ActiveCallBack::set_hastkbgnum2(bool value) {
  set_has_hastkbgnum2();
  hastkbgnum2_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.hasTKbgnum2)
}

// optional bool hasTKbgnum3 = 4 [default = false];
inline bool DB_ActiveCallBack::has_hastkbgnum3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_ActiveCallBack::set_has_hastkbgnum3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_ActiveCallBack::clear_has_hastkbgnum3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_ActiveCallBack::clear_hastkbgnum3() {
  hastkbgnum3_ = false;
  clear_has_hastkbgnum3();
}
inline bool DB_ActiveCallBack::hastkbgnum3() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.hasTKbgnum3)
  return hastkbgnum3_;
}
inline void DB_ActiveCallBack::set_hastkbgnum3(bool value) {
  set_has_hastkbgnum3();
  hastkbgnum3_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.hasTKbgnum3)
}

// optional bool hasTKbgnum4 = 5 [default = false];
inline bool DB_ActiveCallBack::has_hastkbgnum4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_ActiveCallBack::set_has_hastkbgnum4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_ActiveCallBack::clear_has_hastkbgnum4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_ActiveCallBack::clear_hastkbgnum4() {
  hastkbgnum4_ = false;
  clear_has_hastkbgnum4();
}
inline bool DB_ActiveCallBack::hastkbgnum4() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.hasTKbgnum4)
  return hastkbgnum4_;
}
inline void DB_ActiveCallBack::set_hastkbgnum4(bool value) {
  set_has_hastkbgnum4();
  hastkbgnum4_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.hasTKbgnum4)
}

// optional int64 lasttime = 6;
inline bool DB_ActiveCallBack::has_lasttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_ActiveCallBack::set_has_lasttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_ActiveCallBack::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_ActiveCallBack::clear_lasttime() {
  lasttime_ = GOOGLE_LONGLONG(0);
  clear_has_lasttime();
}
inline ::google::protobuf::int64 DB_ActiveCallBack::lasttime() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.lasttime)
  return lasttime_;
}
inline void DB_ActiveCallBack::set_lasttime(::google::protobuf::int64 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.lasttime)
}

// optional int32 user_type = 7 [default = 0];
inline bool DB_ActiveCallBack::has_user_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DB_ActiveCallBack::set_has_user_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DB_ActiveCallBack::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DB_ActiveCallBack::clear_user_type() {
  user_type_ = 0;
  clear_has_user_type();
}
inline ::google::protobuf::int32 DB_ActiveCallBack::user_type() const {
  // @@protoc_insertion_point(field_get:DB_ActiveCallBack.user_type)
  return user_type_;
}
inline void DB_ActiveCallBack::set_user_type(::google::protobuf::int32 value) {
  set_has_user_type();
  user_type_ = value;
  // @@protoc_insertion_point(field_set:DB_ActiveCallBack.user_type)
}

// -------------------------------------------------------------------

// DB_Player

// optional string nickname = 1 [default = ""];
inline bool DB_Player::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_Player::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_Player::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_Player::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& DB_Player::nickname() const {
  // @@protoc_insertion_point(field_get:DB_Player.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_Player::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_Player.nickname)
}
inline void DB_Player::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_Player.nickname)
}
inline void DB_Player::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_Player.nickname)
}
inline ::std::string* DB_Player::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:DB_Player.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_Player::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_Player::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:DB_Player.nickname)
}

// optional .DB_Bag bag = 2;
inline bool DB_Player::has_bag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_Player::set_has_bag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_Player::clear_has_bag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_Player::clear_bag() {
  if (bag_ != NULL) bag_->::DB_Bag::Clear();
  clear_has_bag();
}
inline const ::DB_Bag& DB_Player::bag() const {
  // @@protoc_insertion_point(field_get:DB_Player.bag)
  return bag_ != NULL ? *bag_ : *default_instance_->bag_;
}
inline ::DB_Bag* DB_Player::mutable_bag() {
  set_has_bag();
  if (bag_ == NULL) {
    bag_ = new ::DB_Bag;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.bag)
  return bag_;
}
inline ::DB_Bag* DB_Player::release_bag() {
  clear_has_bag();
  ::DB_Bag* temp = bag_;
  bag_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_bag(::DB_Bag* bag) {
  delete bag_;
  bag_ = bag;
  if (bag) {
    set_has_bag();
  } else {
    clear_has_bag();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.bag)
}

// optional .DB_LivesInfo lives = 3;
inline bool DB_Player::has_lives() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_Player::set_has_lives() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_Player::clear_has_lives() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_Player::clear_lives() {
  if (lives_ != NULL) lives_->::DB_LivesInfo::Clear();
  clear_has_lives();
}
inline const ::DB_LivesInfo& DB_Player::lives() const {
  // @@protoc_insertion_point(field_get:DB_Player.lives)
  return lives_ != NULL ? *lives_ : *default_instance_->lives_;
}
inline ::DB_LivesInfo* DB_Player::mutable_lives() {
  set_has_lives();
  if (lives_ == NULL) {
    lives_ = new ::DB_LivesInfo;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.lives)
  return lives_;
}
inline ::DB_LivesInfo* DB_Player::release_lives() {
  clear_has_lives();
  ::DB_LivesInfo* temp = lives_;
  lives_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_lives(::DB_LivesInfo* lives) {
  delete lives_;
  lives_ = lives;
  if (lives) {
    set_has_lives();
  } else {
    clear_has_lives();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.lives)
}

// optional .DB_UniverseInfo universeinfo = 4;
inline bool DB_Player::has_universeinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_Player::set_has_universeinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_Player::clear_has_universeinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_Player::clear_universeinfo() {
  if (universeinfo_ != NULL) universeinfo_->::DB_UniverseInfo::Clear();
  clear_has_universeinfo();
}
inline const ::DB_UniverseInfo& DB_Player::universeinfo() const {
  // @@protoc_insertion_point(field_get:DB_Player.universeinfo)
  return universeinfo_ != NULL ? *universeinfo_ : *default_instance_->universeinfo_;
}
inline ::DB_UniverseInfo* DB_Player::mutable_universeinfo() {
  set_has_universeinfo();
  if (universeinfo_ == NULL) {
    universeinfo_ = new ::DB_UniverseInfo;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.universeinfo)
  return universeinfo_;
}
inline ::DB_UniverseInfo* DB_Player::release_universeinfo() {
  clear_has_universeinfo();
  ::DB_UniverseInfo* temp = universeinfo_;
  universeinfo_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_universeinfo(::DB_UniverseInfo* universeinfo) {
  delete universeinfo_;
  universeinfo_ = universeinfo;
  if (universeinfo) {
    set_has_universeinfo();
  } else {
    clear_has_universeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.universeinfo)
}

// optional bool inited = 5 [default = false];
inline bool DB_Player::has_inited() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_Player::set_has_inited() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_Player::clear_has_inited() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_Player::clear_inited() {
  inited_ = false;
  clear_has_inited();
}
inline bool DB_Player::inited() const {
  // @@protoc_insertion_point(field_get:DB_Player.inited)
  return inited_;
}
inline void DB_Player::set_inited(bool value) {
  set_has_inited();
  inited_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.inited)
}

// optional .DB_CandyProperties candy_properties = 6;
inline bool DB_Player::has_candy_properties() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_Player::set_has_candy_properties() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_Player::clear_has_candy_properties() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_Player::clear_candy_properties() {
  if (candy_properties_ != NULL) candy_properties_->::DB_CandyProperties::Clear();
  clear_has_candy_properties();
}
inline const ::DB_CandyProperties& DB_Player::candy_properties() const {
  // @@protoc_insertion_point(field_get:DB_Player.candy_properties)
  return candy_properties_ != NULL ? *candy_properties_ : *default_instance_->candy_properties_;
}
inline ::DB_CandyProperties* DB_Player::mutable_candy_properties() {
  set_has_candy_properties();
  if (candy_properties_ == NULL) {
    candy_properties_ = new ::DB_CandyProperties;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.candy_properties)
  return candy_properties_;
}
inline ::DB_CandyProperties* DB_Player::release_candy_properties() {
  clear_has_candy_properties();
  ::DB_CandyProperties* temp = candy_properties_;
  candy_properties_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_candy_properties(::DB_CandyProperties* candy_properties) {
  delete candy_properties_;
  candy_properties_ = candy_properties;
  if (candy_properties) {
    set_has_candy_properties();
  } else {
    clear_has_candy_properties();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.candy_properties)
}

// optional .DB_Events message_events = 7;
inline bool DB_Player::has_message_events() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DB_Player::set_has_message_events() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DB_Player::clear_has_message_events() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DB_Player::clear_message_events() {
  if (message_events_ != NULL) message_events_->::DB_Events::Clear();
  clear_has_message_events();
}
inline const ::DB_Events& DB_Player::message_events() const {
  // @@protoc_insertion_point(field_get:DB_Player.message_events)
  return message_events_ != NULL ? *message_events_ : *default_instance_->message_events_;
}
inline ::DB_Events* DB_Player::mutable_message_events() {
  set_has_message_events();
  if (message_events_ == NULL) {
    message_events_ = new ::DB_Events;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.message_events)
  return message_events_;
}
inline ::DB_Events* DB_Player::release_message_events() {
  clear_has_message_events();
  ::DB_Events* temp = message_events_;
  message_events_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_message_events(::DB_Events* message_events) {
  delete message_events_;
  message_events_ = message_events;
  if (message_events) {
    set_has_message_events();
  } else {
    clear_has_message_events();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.message_events)
}

// optional int32 friend_action_pos = 8 [default = 0];
inline bool DB_Player::has_friend_action_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DB_Player::set_has_friend_action_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DB_Player::clear_has_friend_action_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DB_Player::clear_friend_action_pos() {
  friend_action_pos_ = 0;
  clear_has_friend_action_pos();
}
inline ::google::protobuf::int32 DB_Player::friend_action_pos() const {
  // @@protoc_insertion_point(field_get:DB_Player.friend_action_pos)
  return friend_action_pos_;
}
inline void DB_Player::set_friend_action_pos(::google::protobuf::int32 value) {
  set_has_friend_action_pos();
  friend_action_pos_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.friend_action_pos)
}

// optional bool friend_actions_allread = 9 [default = false];
inline bool DB_Player::has_friend_actions_allread() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DB_Player::set_has_friend_actions_allread() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DB_Player::clear_has_friend_actions_allread() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DB_Player::clear_friend_actions_allread() {
  friend_actions_allread_ = false;
  clear_has_friend_actions_allread();
}
inline bool DB_Player::friend_actions_allread() const {
  // @@protoc_insertion_point(field_get:DB_Player.friend_actions_allread)
  return friend_actions_allread_;
}
inline void DB_Player::set_friend_actions_allread(bool value) {
  set_has_friend_actions_allread();
  friend_actions_allread_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.friend_actions_allread)
}

// optional int32 friend_action_unread_cnt = 10 [default = 0];
inline bool DB_Player::has_friend_action_unread_cnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DB_Player::set_has_friend_action_unread_cnt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DB_Player::clear_has_friend_action_unread_cnt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DB_Player::clear_friend_action_unread_cnt() {
  friend_action_unread_cnt_ = 0;
  clear_has_friend_action_unread_cnt();
}
inline ::google::protobuf::int32 DB_Player::friend_action_unread_cnt() const {
  // @@protoc_insertion_point(field_get:DB_Player.friend_action_unread_cnt)
  return friend_action_unread_cnt_;
}
inline void DB_Player::set_friend_action_unread_cnt(::google::protobuf::int32 value) {
  set_has_friend_action_unread_cnt();
  friend_action_unread_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.friend_action_unread_cnt)
}

// repeated .DB_ActionRecord friend_actions = 11;
inline int DB_Player::friend_actions_size() const {
  return friend_actions_.size();
}
inline void DB_Player::clear_friend_actions() {
  friend_actions_.Clear();
}
inline const ::DB_ActionRecord& DB_Player::friend_actions(int index) const {
  // @@protoc_insertion_point(field_get:DB_Player.friend_actions)
  return friend_actions_.Get(index);
}
inline ::DB_ActionRecord* DB_Player::mutable_friend_actions(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Player.friend_actions)
  return friend_actions_.Mutable(index);
}
inline ::DB_ActionRecord* DB_Player::add_friend_actions() {
  // @@protoc_insertion_point(field_add:DB_Player.friend_actions)
  return friend_actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord >&
DB_Player::friend_actions() const {
  // @@protoc_insertion_point(field_list:DB_Player.friend_actions)
  return friend_actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_ActionRecord >*
DB_Player::mutable_friend_actions() {
  // @@protoc_insertion_point(field_mutable_list:DB_Player.friend_actions)
  return &friend_actions_;
}

// optional .DB_Option option = 12;
inline bool DB_Player::has_option() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DB_Player::set_has_option() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DB_Player::clear_has_option() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DB_Player::clear_option() {
  if (option_ != NULL) option_->::DB_Option::Clear();
  clear_has_option();
}
inline const ::DB_Option& DB_Player::option() const {
  // @@protoc_insertion_point(field_get:DB_Player.option)
  return option_ != NULL ? *option_ : *default_instance_->option_;
}
inline ::DB_Option* DB_Player::mutable_option() {
  set_has_option();
  if (option_ == NULL) {
    option_ = new ::DB_Option;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.option)
  return option_;
}
inline ::DB_Option* DB_Player::release_option() {
  clear_has_option();
  ::DB_Option* temp = option_;
  option_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_option(::DB_Option* option) {
  delete option_;
  option_ = option;
  if (option) {
    set_has_option();
  } else {
    clear_has_option();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.option)
}

// optional .DB_BitCache OnceOperating = 13;
inline bool DB_Player::has_onceoperating() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DB_Player::set_has_onceoperating() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DB_Player::clear_has_onceoperating() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DB_Player::clear_onceoperating() {
  if (onceoperating_ != NULL) onceoperating_->::DB_BitCache::Clear();
  clear_has_onceoperating();
}
inline const ::DB_BitCache& DB_Player::onceoperating() const {
  // @@protoc_insertion_point(field_get:DB_Player.OnceOperating)
  return onceoperating_ != NULL ? *onceoperating_ : *default_instance_->onceoperating_;
}
inline ::DB_BitCache* DB_Player::mutable_onceoperating() {
  set_has_onceoperating();
  if (onceoperating_ == NULL) {
    onceoperating_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.OnceOperating)
  return onceoperating_;
}
inline ::DB_BitCache* DB_Player::release_onceoperating() {
  clear_has_onceoperating();
  ::DB_BitCache* temp = onceoperating_;
  onceoperating_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_onceoperating(::DB_BitCache* onceoperating) {
  delete onceoperating_;
  onceoperating_ = onceoperating;
  if (onceoperating) {
    set_has_onceoperating();
  } else {
    clear_has_onceoperating();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.OnceOperating)
}

// optional int64 last_login_reward_time = 14 [default = 0];
inline bool DB_Player::has_last_login_reward_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DB_Player::set_has_last_login_reward_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DB_Player::clear_has_last_login_reward_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DB_Player::clear_last_login_reward_time() {
  last_login_reward_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_login_reward_time();
}
inline ::google::protobuf::int64 DB_Player::last_login_reward_time() const {
  // @@protoc_insertion_point(field_get:DB_Player.last_login_reward_time)
  return last_login_reward_time_;
}
inline void DB_Player::set_last_login_reward_time(::google::protobuf::int64 value) {
  set_has_last_login_reward_time();
  last_login_reward_time_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.last_login_reward_time)
}

// optional .DB_Limit limit = 15;
inline bool DB_Player::has_limit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DB_Player::set_has_limit() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DB_Player::clear_has_limit() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DB_Player::clear_limit() {
  if (limit_ != NULL) limit_->::DB_Limit::Clear();
  clear_has_limit();
}
inline const ::DB_Limit& DB_Player::limit() const {
  // @@protoc_insertion_point(field_get:DB_Player.limit)
  return limit_ != NULL ? *limit_ : *default_instance_->limit_;
}
inline ::DB_Limit* DB_Player::mutable_limit() {
  set_has_limit();
  if (limit_ == NULL) {
    limit_ = new ::DB_Limit;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.limit)
  return limit_;
}
inline ::DB_Limit* DB_Player::release_limit() {
  clear_has_limit();
  ::DB_Limit* temp = limit_;
  limit_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_limit(::DB_Limit* limit) {
  delete limit_;
  limit_ = limit;
  if (limit) {
    set_has_limit();
  } else {
    clear_has_limit();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.limit)
}

// repeated .DB_WebBuyRecord web_buy_record = 16;
inline int DB_Player::web_buy_record_size() const {
  return web_buy_record_.size();
}
inline void DB_Player::clear_web_buy_record() {
  web_buy_record_.Clear();
}
inline const ::DB_WebBuyRecord& DB_Player::web_buy_record(int index) const {
  // @@protoc_insertion_point(field_get:DB_Player.web_buy_record)
  return web_buy_record_.Get(index);
}
inline ::DB_WebBuyRecord* DB_Player::mutable_web_buy_record(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Player.web_buy_record)
  return web_buy_record_.Mutable(index);
}
inline ::DB_WebBuyRecord* DB_Player::add_web_buy_record() {
  // @@protoc_insertion_point(field_add:DB_Player.web_buy_record)
  return web_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_WebBuyRecord >&
DB_Player::web_buy_record() const {
  // @@protoc_insertion_point(field_list:DB_Player.web_buy_record)
  return web_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_WebBuyRecord >*
DB_Player::mutable_web_buy_record() {
  // @@protoc_insertion_point(field_mutable_list:DB_Player.web_buy_record)
  return &web_buy_record_;
}

// repeated .DB_CDKey cdkey_counter = 18;
inline int DB_Player::cdkey_counter_size() const {
  return cdkey_counter_.size();
}
inline void DB_Player::clear_cdkey_counter() {
  cdkey_counter_.Clear();
}
inline const ::DB_CDKey& DB_Player::cdkey_counter(int index) const {
  // @@protoc_insertion_point(field_get:DB_Player.cdkey_counter)
  return cdkey_counter_.Get(index);
}
inline ::DB_CDKey* DB_Player::mutable_cdkey_counter(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Player.cdkey_counter)
  return cdkey_counter_.Mutable(index);
}
inline ::DB_CDKey* DB_Player::add_cdkey_counter() {
  // @@protoc_insertion_point(field_add:DB_Player.cdkey_counter)
  return cdkey_counter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_CDKey >&
DB_Player::cdkey_counter() const {
  // @@protoc_insertion_point(field_list:DB_Player.cdkey_counter)
  return cdkey_counter_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_CDKey >*
DB_Player::mutable_cdkey_counter() {
  // @@protoc_insertion_point(field_mutable_list:DB_Player.cdkey_counter)
  return &cdkey_counter_;
}

// optional .DB_Weibo weibo = 19;
inline bool DB_Player::has_weibo() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DB_Player::set_has_weibo() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DB_Player::clear_has_weibo() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DB_Player::clear_weibo() {
  if (weibo_ != NULL) weibo_->::DB_Weibo::Clear();
  clear_has_weibo();
}
inline const ::DB_Weibo& DB_Player::weibo() const {
  // @@protoc_insertion_point(field_get:DB_Player.weibo)
  return weibo_ != NULL ? *weibo_ : *default_instance_->weibo_;
}
inline ::DB_Weibo* DB_Player::mutable_weibo() {
  set_has_weibo();
  if (weibo_ == NULL) {
    weibo_ = new ::DB_Weibo;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.weibo)
  return weibo_;
}
inline ::DB_Weibo* DB_Player::release_weibo() {
  clear_has_weibo();
  ::DB_Weibo* temp = weibo_;
  weibo_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_weibo(::DB_Weibo* weibo) {
  delete weibo_;
  weibo_ = weibo;
  if (weibo) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.weibo)
}

// repeated string qqunion_key = 20;
inline int DB_Player::qqunion_key_size() const {
  return qqunion_key_.size();
}
inline void DB_Player::clear_qqunion_key() {
  qqunion_key_.Clear();
}
inline const ::std::string& DB_Player::qqunion_key(int index) const {
  // @@protoc_insertion_point(field_get:DB_Player.qqunion_key)
  return qqunion_key_.Get(index);
}
inline ::std::string* DB_Player::mutable_qqunion_key(int index) {
  // @@protoc_insertion_point(field_mutable:DB_Player.qqunion_key)
  return qqunion_key_.Mutable(index);
}
inline void DB_Player::set_qqunion_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_Player.qqunion_key)
  qqunion_key_.Mutable(index)->assign(value);
}
inline void DB_Player::set_qqunion_key(int index, const char* value) {
  qqunion_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_Player.qqunion_key)
}
inline void DB_Player::set_qqunion_key(int index, const char* value, size_t size) {
  qqunion_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_Player.qqunion_key)
}
inline ::std::string* DB_Player::add_qqunion_key() {
  return qqunion_key_.Add();
}
inline void DB_Player::add_qqunion_key(const ::std::string& value) {
  qqunion_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_Player.qqunion_key)
}
inline void DB_Player::add_qqunion_key(const char* value) {
  qqunion_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_Player.qqunion_key)
}
inline void DB_Player::add_qqunion_key(const char* value, size_t size) {
  qqunion_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_Player.qqunion_key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_Player::qqunion_key() const {
  // @@protoc_insertion_point(field_list:DB_Player.qqunion_key)
  return qqunion_key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_Player::mutable_qqunion_key() {
  // @@protoc_insertion_point(field_mutable_list:DB_Player.qqunion_key)
  return &qqunion_key_;
}

// optional .DB_NewFunc new_func_record = 21;
inline bool DB_Player::has_new_func_record() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DB_Player::set_has_new_func_record() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DB_Player::clear_has_new_func_record() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DB_Player::clear_new_func_record() {
  if (new_func_record_ != NULL) new_func_record_->::DB_NewFunc::Clear();
  clear_has_new_func_record();
}
inline const ::DB_NewFunc& DB_Player::new_func_record() const {
  // @@protoc_insertion_point(field_get:DB_Player.new_func_record)
  return new_func_record_ != NULL ? *new_func_record_ : *default_instance_->new_func_record_;
}
inline ::DB_NewFunc* DB_Player::mutable_new_func_record() {
  set_has_new_func_record();
  if (new_func_record_ == NULL) {
    new_func_record_ = new ::DB_NewFunc;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.new_func_record)
  return new_func_record_;
}
inline ::DB_NewFunc* DB_Player::release_new_func_record() {
  clear_has_new_func_record();
  ::DB_NewFunc* temp = new_func_record_;
  new_func_record_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_new_func_record(::DB_NewFunc* new_func_record) {
  delete new_func_record_;
  new_func_record_ = new_func_record;
  if (new_func_record) {
    set_has_new_func_record();
  } else {
    clear_has_new_func_record();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.new_func_record)
}

// optional int32 dallygiftday = 22 [default = 0];
inline bool DB_Player::has_dallygiftday() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DB_Player::set_has_dallygiftday() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DB_Player::clear_has_dallygiftday() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DB_Player::clear_dallygiftday() {
  dallygiftday_ = 0;
  clear_has_dallygiftday();
}
inline ::google::protobuf::int32 DB_Player::dallygiftday() const {
  // @@protoc_insertion_point(field_get:DB_Player.dallygiftday)
  return dallygiftday_;
}
inline void DB_Player::set_dallygiftday(::google::protobuf::int32 value) {
  set_has_dallygiftday();
  dallygiftday_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.dallygiftday)
}

// optional .DB_FuncSwitch func = 23;
inline bool DB_Player::has_func() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DB_Player::set_has_func() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DB_Player::clear_has_func() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DB_Player::clear_func() {
  if (func_ != NULL) func_->::DB_FuncSwitch::Clear();
  clear_has_func();
}
inline const ::DB_FuncSwitch& DB_Player::func() const {
  // @@protoc_insertion_point(field_get:DB_Player.func)
  return func_ != NULL ? *func_ : *default_instance_->func_;
}
inline ::DB_FuncSwitch* DB_Player::mutable_func() {
  set_has_func();
  if (func_ == NULL) {
    func_ = new ::DB_FuncSwitch;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.func)
  return func_;
}
inline ::DB_FuncSwitch* DB_Player::release_func() {
  clear_has_func();
  ::DB_FuncSwitch* temp = func_;
  func_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_func(::DB_FuncSwitch* func) {
  delete func_;
  func_ = func;
  if (func) {
    set_has_func();
  } else {
    clear_has_func();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.func)
}

// optional .DB_Limit share = 24;
inline bool DB_Player::has_share() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DB_Player::set_has_share() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DB_Player::clear_has_share() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DB_Player::clear_share() {
  if (share_ != NULL) share_->::DB_Limit::Clear();
  clear_has_share();
}
inline const ::DB_Limit& DB_Player::share() const {
  // @@protoc_insertion_point(field_get:DB_Player.share)
  return share_ != NULL ? *share_ : *default_instance_->share_;
}
inline ::DB_Limit* DB_Player::mutable_share() {
  set_has_share();
  if (share_ == NULL) {
    share_ = new ::DB_Limit;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.share)
  return share_;
}
inline ::DB_Limit* DB_Player::release_share() {
  clear_has_share();
  ::DB_Limit* temp = share_;
  share_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_share(::DB_Limit* share) {
  delete share_;
  share_ = share;
  if (share) {
    set_has_share();
  } else {
    clear_has_share();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.share)
}

// optional .DB_FriendGift friend_gift = 25;
inline bool DB_Player::has_friend_gift() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DB_Player::set_has_friend_gift() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DB_Player::clear_has_friend_gift() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DB_Player::clear_friend_gift() {
  if (friend_gift_ != NULL) friend_gift_->::DB_FriendGift::Clear();
  clear_has_friend_gift();
}
inline const ::DB_FriendGift& DB_Player::friend_gift() const {
  // @@protoc_insertion_point(field_get:DB_Player.friend_gift)
  return friend_gift_ != NULL ? *friend_gift_ : *default_instance_->friend_gift_;
}
inline ::DB_FriendGift* DB_Player::mutable_friend_gift() {
  set_has_friend_gift();
  if (friend_gift_ == NULL) {
    friend_gift_ = new ::DB_FriendGift;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.friend_gift)
  return friend_gift_;
}
inline ::DB_FriendGift* DB_Player::release_friend_gift() {
  clear_has_friend_gift();
  ::DB_FriendGift* temp = friend_gift_;
  friend_gift_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_friend_gift(::DB_FriendGift* friend_gift) {
  delete friend_gift_;
  friend_gift_ = friend_gift;
  if (friend_gift) {
    set_has_friend_gift();
  } else {
    clear_has_friend_gift();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.friend_gift)
}

// optional .DB_BanLogin banlogin = 26;
inline bool DB_Player::has_banlogin() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DB_Player::set_has_banlogin() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DB_Player::clear_has_banlogin() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DB_Player::clear_banlogin() {
  if (banlogin_ != NULL) banlogin_->::DB_BanLogin::Clear();
  clear_has_banlogin();
}
inline const ::DB_BanLogin& DB_Player::banlogin() const {
  // @@protoc_insertion_point(field_get:DB_Player.banlogin)
  return banlogin_ != NULL ? *banlogin_ : *default_instance_->banlogin_;
}
inline ::DB_BanLogin* DB_Player::mutable_banlogin() {
  set_has_banlogin();
  if (banlogin_ == NULL) {
    banlogin_ = new ::DB_BanLogin;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.banlogin)
  return banlogin_;
}
inline ::DB_BanLogin* DB_Player::release_banlogin() {
  clear_has_banlogin();
  ::DB_BanLogin* temp = banlogin_;
  banlogin_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_banlogin(::DB_BanLogin* banlogin) {
  delete banlogin_;
  banlogin_ = banlogin;
  if (banlogin) {
    set_has_banlogin();
  } else {
    clear_has_banlogin();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.banlogin)
}

// optional int32 broadcast_unread_cnt = 32 [default = 0];
inline bool DB_Player::has_broadcast_unread_cnt() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DB_Player::set_has_broadcast_unread_cnt() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DB_Player::clear_has_broadcast_unread_cnt() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DB_Player::clear_broadcast_unread_cnt() {
  broadcast_unread_cnt_ = 0;
  clear_has_broadcast_unread_cnt();
}
inline ::google::protobuf::int32 DB_Player::broadcast_unread_cnt() const {
  // @@protoc_insertion_point(field_get:DB_Player.broadcast_unread_cnt)
  return broadcast_unread_cnt_;
}
inline void DB_Player::set_broadcast_unread_cnt(::google::protobuf::int32 value) {
  set_has_broadcast_unread_cnt();
  broadcast_unread_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.broadcast_unread_cnt)
}

// optional int32 messages_unread_cnt = 34 [default = 0];
inline bool DB_Player::has_messages_unread_cnt() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DB_Player::set_has_messages_unread_cnt() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DB_Player::clear_has_messages_unread_cnt() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DB_Player::clear_messages_unread_cnt() {
  messages_unread_cnt_ = 0;
  clear_has_messages_unread_cnt();
}
inline ::google::protobuf::int32 DB_Player::messages_unread_cnt() const {
  // @@protoc_insertion_point(field_get:DB_Player.messages_unread_cnt)
  return messages_unread_cnt_;
}
inline void DB_Player::set_messages_unread_cnt(::google::protobuf::int32 value) {
  set_has_messages_unread_cnt();
  messages_unread_cnt_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.messages_unread_cnt)
}

// optional .TimeLimitedUidSet FriendGiftLiveHistory = 35;
inline bool DB_Player::has_friendgiftlivehistory() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void DB_Player::set_has_friendgiftlivehistory() {
  _has_bits_[0] |= 0x08000000u;
}
inline void DB_Player::clear_has_friendgiftlivehistory() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void DB_Player::clear_friendgiftlivehistory() {
  if (friendgiftlivehistory_ != NULL) friendgiftlivehistory_->::TimeLimitedUidSet::Clear();
  clear_has_friendgiftlivehistory();
}
inline const ::TimeLimitedUidSet& DB_Player::friendgiftlivehistory() const {
  // @@protoc_insertion_point(field_get:DB_Player.FriendGiftLiveHistory)
  return friendgiftlivehistory_ != NULL ? *friendgiftlivehistory_ : *default_instance_->friendgiftlivehistory_;
}
inline ::TimeLimitedUidSet* DB_Player::mutable_friendgiftlivehistory() {
  set_has_friendgiftlivehistory();
  if (friendgiftlivehistory_ == NULL) {
    friendgiftlivehistory_ = new ::TimeLimitedUidSet;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.FriendGiftLiveHistory)
  return friendgiftlivehistory_;
}
inline ::TimeLimitedUidSet* DB_Player::release_friendgiftlivehistory() {
  clear_has_friendgiftlivehistory();
  ::TimeLimitedUidSet* temp = friendgiftlivehistory_;
  friendgiftlivehistory_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_friendgiftlivehistory(::TimeLimitedUidSet* friendgiftlivehistory) {
  delete friendgiftlivehistory_;
  friendgiftlivehistory_ = friendgiftlivehistory;
  if (friendgiftlivehistory) {
    set_has_friendgiftlivehistory();
  } else {
    clear_has_friendgiftlivehistory();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.FriendGiftLiveHistory)
}

// optional .DB_Singed SingedHistory = 36;
inline bool DB_Player::has_singedhistory() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void DB_Player::set_has_singedhistory() {
  _has_bits_[0] |= 0x10000000u;
}
inline void DB_Player::clear_has_singedhistory() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void DB_Player::clear_singedhistory() {
  if (singedhistory_ != NULL) singedhistory_->::DB_Singed::Clear();
  clear_has_singedhistory();
}
inline const ::DB_Singed& DB_Player::singedhistory() const {
  // @@protoc_insertion_point(field_get:DB_Player.SingedHistory)
  return singedhistory_ != NULL ? *singedhistory_ : *default_instance_->singedhistory_;
}
inline ::DB_Singed* DB_Player::mutable_singedhistory() {
  set_has_singedhistory();
  if (singedhistory_ == NULL) {
    singedhistory_ = new ::DB_Singed;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.SingedHistory)
  return singedhistory_;
}
inline ::DB_Singed* DB_Player::release_singedhistory() {
  clear_has_singedhistory();
  ::DB_Singed* temp = singedhistory_;
  singedhistory_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_singedhistory(::DB_Singed* singedhistory) {
  delete singedhistory_;
  singedhistory_ = singedhistory;
  if (singedhistory) {
    set_has_singedhistory();
  } else {
    clear_has_singedhistory();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.SingedHistory)
}

// optional int32 invite_version = 17 [default = 0];
inline bool DB_Player::has_invite_version() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void DB_Player::set_has_invite_version() {
  _has_bits_[0] |= 0x20000000u;
}
inline void DB_Player::clear_has_invite_version() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void DB_Player::clear_invite_version() {
  invite_version_ = 0;
  clear_has_invite_version();
}
inline ::google::protobuf::int32 DB_Player::invite_version() const {
  // @@protoc_insertion_point(field_get:DB_Player.invite_version)
  return invite_version_;
}
inline void DB_Player::set_invite_version(::google::protobuf::int32 value) {
  set_has_invite_version();
  invite_version_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.invite_version)
}

// optional int32 invite_count_o1 = 50 [default = 0];
inline bool DB_Player::has_invite_count_o1() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void DB_Player::set_has_invite_count_o1() {
  _has_bits_[0] |= 0x40000000u;
}
inline void DB_Player::clear_has_invite_count_o1() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void DB_Player::clear_invite_count_o1() {
  invite_count_o1_ = 0;
  clear_has_invite_count_o1();
}
inline ::google::protobuf::int32 DB_Player::invite_count_o1() const {
  // @@protoc_insertion_point(field_get:DB_Player.invite_count_o1)
  return invite_count_o1_;
}
inline void DB_Player::set_invite_count_o1(::google::protobuf::int32 value) {
  set_has_invite_count_o1();
  invite_count_o1_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.invite_count_o1)
}

// optional string inviter_openid = 38 [default = ""];
inline bool DB_Player::has_inviter_openid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void DB_Player::set_has_inviter_openid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void DB_Player::clear_has_inviter_openid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void DB_Player::clear_inviter_openid() {
  inviter_openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inviter_openid();
}
inline const ::std::string& DB_Player::inviter_openid() const {
  // @@protoc_insertion_point(field_get:DB_Player.inviter_openid)
  return inviter_openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_Player::set_inviter_openid(const ::std::string& value) {
  set_has_inviter_openid();
  inviter_openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_Player.inviter_openid)
}
inline void DB_Player::set_inviter_openid(const char* value) {
  set_has_inviter_openid();
  inviter_openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_Player.inviter_openid)
}
inline void DB_Player::set_inviter_openid(const char* value, size_t size) {
  set_has_inviter_openid();
  inviter_openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_Player.inviter_openid)
}
inline ::std::string* DB_Player::mutable_inviter_openid() {
  set_has_inviter_openid();
  // @@protoc_insertion_point(field_mutable:DB_Player.inviter_openid)
  return inviter_openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_Player::release_inviter_openid() {
  clear_has_inviter_openid();
  return inviter_openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_Player::set_allocated_inviter_openid(::std::string* inviter_openid) {
  if (inviter_openid != NULL) {
    set_has_inviter_openid();
  } else {
    clear_has_inviter_openid();
  }
  inviter_openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviter_openid);
  // @@protoc_insertion_point(field_set_allocated:DB_Player.inviter_openid)
}

// optional .DB_Yelldmd yelldmd = 39;
inline bool DB_Player::has_yelldmd() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void DB_Player::set_has_yelldmd() {
  _has_bits_[1] |= 0x00000001u;
}
inline void DB_Player::clear_has_yelldmd() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void DB_Player::clear_yelldmd() {
  if (yelldmd_ != NULL) yelldmd_->::DB_Yelldmd::Clear();
  clear_has_yelldmd();
}
inline const ::DB_Yelldmd& DB_Player::yelldmd() const {
  // @@protoc_insertion_point(field_get:DB_Player.yelldmd)
  return yelldmd_ != NULL ? *yelldmd_ : *default_instance_->yelldmd_;
}
inline ::DB_Yelldmd* DB_Player::mutable_yelldmd() {
  set_has_yelldmd();
  if (yelldmd_ == NULL) {
    yelldmd_ = new ::DB_Yelldmd;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.yelldmd)
  return yelldmd_;
}
inline ::DB_Yelldmd* DB_Player::release_yelldmd() {
  clear_has_yelldmd();
  ::DB_Yelldmd* temp = yelldmd_;
  yelldmd_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_yelldmd(::DB_Yelldmd* yelldmd) {
  delete yelldmd_;
  yelldmd_ = yelldmd;
  if (yelldmd) {
    set_has_yelldmd();
  } else {
    clear_has_yelldmd();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.yelldmd)
}

// optional .DB_SignHistory sign_history = 40;
inline bool DB_Player::has_sign_history() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void DB_Player::set_has_sign_history() {
  _has_bits_[1] |= 0x00000002u;
}
inline void DB_Player::clear_has_sign_history() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void DB_Player::clear_sign_history() {
  if (sign_history_ != NULL) sign_history_->::DB_SignHistory::Clear();
  clear_has_sign_history();
}
inline const ::DB_SignHistory& DB_Player::sign_history() const {
  // @@protoc_insertion_point(field_get:DB_Player.sign_history)
  return sign_history_ != NULL ? *sign_history_ : *default_instance_->sign_history_;
}
inline ::DB_SignHistory* DB_Player::mutable_sign_history() {
  set_has_sign_history();
  if (sign_history_ == NULL) {
    sign_history_ = new ::DB_SignHistory;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.sign_history)
  return sign_history_;
}
inline ::DB_SignHistory* DB_Player::release_sign_history() {
  clear_has_sign_history();
  ::DB_SignHistory* temp = sign_history_;
  sign_history_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_sign_history(::DB_SignHistory* sign_history) {
  delete sign_history_;
  sign_history_ = sign_history;
  if (sign_history) {
    set_has_sign_history();
  } else {
    clear_has_sign_history();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.sign_history)
}

// optional .DB_BitCache cdkey_pickhistory = 41;
inline bool DB_Player::has_cdkey_pickhistory() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void DB_Player::set_has_cdkey_pickhistory() {
  _has_bits_[1] |= 0x00000004u;
}
inline void DB_Player::clear_has_cdkey_pickhistory() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void DB_Player::clear_cdkey_pickhistory() {
  if (cdkey_pickhistory_ != NULL) cdkey_pickhistory_->::DB_BitCache::Clear();
  clear_has_cdkey_pickhistory();
}
inline const ::DB_BitCache& DB_Player::cdkey_pickhistory() const {
  // @@protoc_insertion_point(field_get:DB_Player.cdkey_pickhistory)
  return cdkey_pickhistory_ != NULL ? *cdkey_pickhistory_ : *default_instance_->cdkey_pickhistory_;
}
inline ::DB_BitCache* DB_Player::mutable_cdkey_pickhistory() {
  set_has_cdkey_pickhistory();
  if (cdkey_pickhistory_ == NULL) {
    cdkey_pickhistory_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.cdkey_pickhistory)
  return cdkey_pickhistory_;
}
inline ::DB_BitCache* DB_Player::release_cdkey_pickhistory() {
  clear_has_cdkey_pickhistory();
  ::DB_BitCache* temp = cdkey_pickhistory_;
  cdkey_pickhistory_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_cdkey_pickhistory(::DB_BitCache* cdkey_pickhistory) {
  delete cdkey_pickhistory_;
  cdkey_pickhistory_ = cdkey_pickhistory;
  if (cdkey_pickhistory) {
    set_has_cdkey_pickhistory();
  } else {
    clear_has_cdkey_pickhistory();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.cdkey_pickhistory)
}

// optional .DB_BitCache new_user_save_gift = 42;
inline bool DB_Player::has_new_user_save_gift() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void DB_Player::set_has_new_user_save_gift() {
  _has_bits_[1] |= 0x00000008u;
}
inline void DB_Player::clear_has_new_user_save_gift() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void DB_Player::clear_new_user_save_gift() {
  if (new_user_save_gift_ != NULL) new_user_save_gift_->::DB_BitCache::Clear();
  clear_has_new_user_save_gift();
}
inline const ::DB_BitCache& DB_Player::new_user_save_gift() const {
  // @@protoc_insertion_point(field_get:DB_Player.new_user_save_gift)
  return new_user_save_gift_ != NULL ? *new_user_save_gift_ : *default_instance_->new_user_save_gift_;
}
inline ::DB_BitCache* DB_Player::mutable_new_user_save_gift() {
  set_has_new_user_save_gift();
  if (new_user_save_gift_ == NULL) {
    new_user_save_gift_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.new_user_save_gift)
  return new_user_save_gift_;
}
inline ::DB_BitCache* DB_Player::release_new_user_save_gift() {
  clear_has_new_user_save_gift();
  ::DB_BitCache* temp = new_user_save_gift_;
  new_user_save_gift_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_new_user_save_gift(::DB_BitCache* new_user_save_gift) {
  delete new_user_save_gift_;
  new_user_save_gift_ = new_user_save_gift;
  if (new_user_save_gift) {
    set_has_new_user_save_gift();
  } else {
    clear_has_new_user_save_gift();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.new_user_save_gift)
}

// optional .DB_EasyTimeSet easytimeset = 43;
inline bool DB_Player::has_easytimeset() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void DB_Player::set_has_easytimeset() {
  _has_bits_[1] |= 0x00000010u;
}
inline void DB_Player::clear_has_easytimeset() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void DB_Player::clear_easytimeset() {
  if (easytimeset_ != NULL) easytimeset_->::DB_EasyTimeSet::Clear();
  clear_has_easytimeset();
}
inline const ::DB_EasyTimeSet& DB_Player::easytimeset() const {
  // @@protoc_insertion_point(field_get:DB_Player.easytimeset)
  return easytimeset_ != NULL ? *easytimeset_ : *default_instance_->easytimeset_;
}
inline ::DB_EasyTimeSet* DB_Player::mutable_easytimeset() {
  set_has_easytimeset();
  if (easytimeset_ == NULL) {
    easytimeset_ = new ::DB_EasyTimeSet;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.easytimeset)
  return easytimeset_;
}
inline ::DB_EasyTimeSet* DB_Player::release_easytimeset() {
  clear_has_easytimeset();
  ::DB_EasyTimeSet* temp = easytimeset_;
  easytimeset_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_easytimeset(::DB_EasyTimeSet* easytimeset) {
  delete easytimeset_;
  easytimeset_ = easytimeset;
  if (easytimeset) {
    set_has_easytimeset();
  } else {
    clear_has_easytimeset();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.easytimeset)
}

// optional bool SkipLog = 44 [default = false];
inline bool DB_Player::has_skiplog() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void DB_Player::set_has_skiplog() {
  _has_bits_[1] |= 0x00000020u;
}
inline void DB_Player::clear_has_skiplog() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void DB_Player::clear_skiplog() {
  skiplog_ = false;
  clear_has_skiplog();
}
inline bool DB_Player::skiplog() const {
  // @@protoc_insertion_point(field_get:DB_Player.SkipLog)
  return skiplog_;
}
inline void DB_Player::set_skiplog(bool value) {
  set_has_skiplog();
  skiplog_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.SkipLog)
}

// optional int32 invite_send_count = 45 [default = 0];
inline bool DB_Player::has_invite_send_count() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void DB_Player::set_has_invite_send_count() {
  _has_bits_[1] |= 0x00000040u;
}
inline void DB_Player::clear_has_invite_send_count() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void DB_Player::clear_invite_send_count() {
  invite_send_count_ = 0;
  clear_has_invite_send_count();
}
inline ::google::protobuf::int32 DB_Player::invite_send_count() const {
  // @@protoc_insertion_point(field_get:DB_Player.invite_send_count)
  return invite_send_count_;
}
inline void DB_Player::set_invite_send_count(::google::protobuf::int32 value) {
  set_has_invite_send_count();
  invite_send_count_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.invite_send_count)
}

// optional .DB_DallyUniverseInfo dally_universe = 46;
inline bool DB_Player::has_dally_universe() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void DB_Player::set_has_dally_universe() {
  _has_bits_[1] |= 0x00000080u;
}
inline void DB_Player::clear_has_dally_universe() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void DB_Player::clear_dally_universe() {
  if (dally_universe_ != NULL) dally_universe_->::DB_DallyUniverseInfo::Clear();
  clear_has_dally_universe();
}
inline const ::DB_DallyUniverseInfo& DB_Player::dally_universe() const {
  // @@protoc_insertion_point(field_get:DB_Player.dally_universe)
  return dally_universe_ != NULL ? *dally_universe_ : *default_instance_->dally_universe_;
}
inline ::DB_DallyUniverseInfo* DB_Player::mutable_dally_universe() {
  set_has_dally_universe();
  if (dally_universe_ == NULL) {
    dally_universe_ = new ::DB_DallyUniverseInfo;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.dally_universe)
  return dally_universe_;
}
inline ::DB_DallyUniverseInfo* DB_Player::release_dally_universe() {
  clear_has_dally_universe();
  ::DB_DallyUniverseInfo* temp = dally_universe_;
  dally_universe_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_dally_universe(::DB_DallyUniverseInfo* dally_universe) {
  delete dally_universe_;
  dally_universe_ = dally_universe;
  if (dally_universe) {
    set_has_dally_universe();
  } else {
    clear_has_dally_universe();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.dally_universe)
}

// optional int32 now_playing_level = 47;
inline bool DB_Player::has_now_playing_level() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void DB_Player::set_has_now_playing_level() {
  _has_bits_[1] |= 0x00000100u;
}
inline void DB_Player::clear_has_now_playing_level() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void DB_Player::clear_now_playing_level() {
  now_playing_level_ = 0;
  clear_has_now_playing_level();
}
inline ::google::protobuf::int32 DB_Player::now_playing_level() const {
  // @@protoc_insertion_point(field_get:DB_Player.now_playing_level)
  return now_playing_level_;
}
inline void DB_Player::set_now_playing_level(::google::protobuf::int32 value) {
  set_has_now_playing_level();
  now_playing_level_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.now_playing_level)
}

// optional .DB_DailyCounter dailycounter = 48;
inline bool DB_Player::has_dailycounter() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void DB_Player::set_has_dailycounter() {
  _has_bits_[1] |= 0x00000200u;
}
inline void DB_Player::clear_has_dailycounter() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void DB_Player::clear_dailycounter() {
  if (dailycounter_ != NULL) dailycounter_->::DB_DailyCounter::Clear();
  clear_has_dailycounter();
}
inline const ::DB_DailyCounter& DB_Player::dailycounter() const {
  // @@protoc_insertion_point(field_get:DB_Player.dailycounter)
  return dailycounter_ != NULL ? *dailycounter_ : *default_instance_->dailycounter_;
}
inline ::DB_DailyCounter* DB_Player::mutable_dailycounter() {
  set_has_dailycounter();
  if (dailycounter_ == NULL) {
    dailycounter_ = new ::DB_DailyCounter;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.dailycounter)
  return dailycounter_;
}
inline ::DB_DailyCounter* DB_Player::release_dailycounter() {
  clear_has_dailycounter();
  ::DB_DailyCounter* temp = dailycounter_;
  dailycounter_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_dailycounter(::DB_DailyCounter* dailycounter) {
  delete dailycounter_;
  dailycounter_ = dailycounter;
  if (dailycounter) {
    set_has_dailycounter();
  } else {
    clear_has_dailycounter();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.dailycounter)
}

// optional .DB_BitCache rewared_bit_cache = 49;
inline bool DB_Player::has_rewared_bit_cache() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void DB_Player::set_has_rewared_bit_cache() {
  _has_bits_[1] |= 0x00000400u;
}
inline void DB_Player::clear_has_rewared_bit_cache() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void DB_Player::clear_rewared_bit_cache() {
  if (rewared_bit_cache_ != NULL) rewared_bit_cache_->::DB_BitCache::Clear();
  clear_has_rewared_bit_cache();
}
inline const ::DB_BitCache& DB_Player::rewared_bit_cache() const {
  // @@protoc_insertion_point(field_get:DB_Player.rewared_bit_cache)
  return rewared_bit_cache_ != NULL ? *rewared_bit_cache_ : *default_instance_->rewared_bit_cache_;
}
inline ::DB_BitCache* DB_Player::mutable_rewared_bit_cache() {
  set_has_rewared_bit_cache();
  if (rewared_bit_cache_ == NULL) {
    rewared_bit_cache_ = new ::DB_BitCache;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.rewared_bit_cache)
  return rewared_bit_cache_;
}
inline ::DB_BitCache* DB_Player::release_rewared_bit_cache() {
  clear_has_rewared_bit_cache();
  ::DB_BitCache* temp = rewared_bit_cache_;
  rewared_bit_cache_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_rewared_bit_cache(::DB_BitCache* rewared_bit_cache) {
  delete rewared_bit_cache_;
  rewared_bit_cache_ = rewared_bit_cache;
  if (rewared_bit_cache) {
    set_has_rewared_bit_cache();
  } else {
    clear_has_rewared_bit_cache();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.rewared_bit_cache)
}

// optional .DB_CallBack callback = 51;
inline bool DB_Player::has_callback() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void DB_Player::set_has_callback() {
  _has_bits_[1] |= 0x00000800u;
}
inline void DB_Player::clear_has_callback() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void DB_Player::clear_callback() {
  if (callback_ != NULL) callback_->::DB_CallBack::Clear();
  clear_has_callback();
}
inline const ::DB_CallBack& DB_Player::callback() const {
  // @@protoc_insertion_point(field_get:DB_Player.callback)
  return callback_ != NULL ? *callback_ : *default_instance_->callback_;
}
inline ::DB_CallBack* DB_Player::mutable_callback() {
  set_has_callback();
  if (callback_ == NULL) {
    callback_ = new ::DB_CallBack;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.callback)
  return callback_;
}
inline ::DB_CallBack* DB_Player::release_callback() {
  clear_has_callback();
  ::DB_CallBack* temp = callback_;
  callback_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_callback(::DB_CallBack* callback) {
  delete callback_;
  callback_ = callback;
  if (callback) {
    set_has_callback();
  } else {
    clear_has_callback();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.callback)
}

// optional bool from_zynga_city = 52 [default = false];
inline bool DB_Player::has_from_zynga_city() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void DB_Player::set_has_from_zynga_city() {
  _has_bits_[1] |= 0x00001000u;
}
inline void DB_Player::clear_has_from_zynga_city() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void DB_Player::clear_from_zynga_city() {
  from_zynga_city_ = false;
  clear_has_from_zynga_city();
}
inline bool DB_Player::from_zynga_city() const {
  // @@protoc_insertion_point(field_get:DB_Player.from_zynga_city)
  return from_zynga_city_;
}
inline void DB_Player::set_from_zynga_city(bool value) {
  set_has_from_zynga_city();
  from_zynga_city_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.from_zynga_city)
}

// optional .TimeLimitedUidSet FriendGiftLiveSendHistory = 53;
inline bool DB_Player::has_friendgiftlivesendhistory() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void DB_Player::set_has_friendgiftlivesendhistory() {
  _has_bits_[1] |= 0x00002000u;
}
inline void DB_Player::clear_has_friendgiftlivesendhistory() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void DB_Player::clear_friendgiftlivesendhistory() {
  if (friendgiftlivesendhistory_ != NULL) friendgiftlivesendhistory_->::TimeLimitedUidSet::Clear();
  clear_has_friendgiftlivesendhistory();
}
inline const ::TimeLimitedUidSet& DB_Player::friendgiftlivesendhistory() const {
  // @@protoc_insertion_point(field_get:DB_Player.FriendGiftLiveSendHistory)
  return friendgiftlivesendhistory_ != NULL ? *friendgiftlivesendhistory_ : *default_instance_->friendgiftlivesendhistory_;
}
inline ::TimeLimitedUidSet* DB_Player::mutable_friendgiftlivesendhistory() {
  set_has_friendgiftlivesendhistory();
  if (friendgiftlivesendhistory_ == NULL) {
    friendgiftlivesendhistory_ = new ::TimeLimitedUidSet;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.FriendGiftLiveSendHistory)
  return friendgiftlivesendhistory_;
}
inline ::TimeLimitedUidSet* DB_Player::release_friendgiftlivesendhistory() {
  clear_has_friendgiftlivesendhistory();
  ::TimeLimitedUidSet* temp = friendgiftlivesendhistory_;
  friendgiftlivesendhistory_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_friendgiftlivesendhistory(::TimeLimitedUidSet* friendgiftlivesendhistory) {
  delete friendgiftlivesendhistory_;
  friendgiftlivesendhistory_ = friendgiftlivesendhistory;
  if (friendgiftlivesendhistory) {
    set_has_friendgiftlivesendhistory();
  } else {
    clear_has_friendgiftlivesendhistory();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.FriendGiftLiveSendHistory)
}

// optional .DB_ContinuousDays ContinousLoginDays = 54;
inline bool DB_Player::has_continouslogindays() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void DB_Player::set_has_continouslogindays() {
  _has_bits_[1] |= 0x00004000u;
}
inline void DB_Player::clear_has_continouslogindays() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void DB_Player::clear_continouslogindays() {
  if (continouslogindays_ != NULL) continouslogindays_->::DB_ContinuousDays::Clear();
  clear_has_continouslogindays();
}
inline const ::DB_ContinuousDays& DB_Player::continouslogindays() const {
  // @@protoc_insertion_point(field_get:DB_Player.ContinousLoginDays)
  return continouslogindays_ != NULL ? *continouslogindays_ : *default_instance_->continouslogindays_;
}
inline ::DB_ContinuousDays* DB_Player::mutable_continouslogindays() {
  set_has_continouslogindays();
  if (continouslogindays_ == NULL) {
    continouslogindays_ = new ::DB_ContinuousDays;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.ContinousLoginDays)
  return continouslogindays_;
}
inline ::DB_ContinuousDays* DB_Player::release_continouslogindays() {
  clear_has_continouslogindays();
  ::DB_ContinuousDays* temp = continouslogindays_;
  continouslogindays_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_continouslogindays(::DB_ContinuousDays* continouslogindays) {
  delete continouslogindays_;
  continouslogindays_ = continouslogindays;
  if (continouslogindays) {
    set_has_continouslogindays();
  } else {
    clear_has_continouslogindays();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.ContinousLoginDays)
}

// optional .DB_Map Room = 55;
inline bool DB_Player::has_room() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void DB_Player::set_has_room() {
  _has_bits_[1] |= 0x00008000u;
}
inline void DB_Player::clear_has_room() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void DB_Player::clear_room() {
  if (room_ != NULL) room_->::DB_Map::Clear();
  clear_has_room();
}
inline const ::DB_Map& DB_Player::room() const {
  // @@protoc_insertion_point(field_get:DB_Player.Room)
  return room_ != NULL ? *room_ : *default_instance_->room_;
}
inline ::DB_Map* DB_Player::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::DB_Map;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.Room)
  return room_;
}
inline ::DB_Map* DB_Player::release_room() {
  clear_has_room();
  ::DB_Map* temp = room_;
  room_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_room(::DB_Map* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.Room)
}

// optional int32 invite_count = 56 [default = 0];
inline bool DB_Player::has_invite_count() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void DB_Player::set_has_invite_count() {
  _has_bits_[1] |= 0x00010000u;
}
inline void DB_Player::clear_has_invite_count() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void DB_Player::clear_invite_count() {
  invite_count_ = 0;
  clear_has_invite_count();
}
inline ::google::protobuf::int32 DB_Player::invite_count() const {
  // @@protoc_insertion_point(field_get:DB_Player.invite_count)
  return invite_count_;
}
inline void DB_Player::set_invite_count(::google::protobuf::int32 value) {
  set_has_invite_count();
  invite_count_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.invite_count)
}

// optional .DB_DragboatFvl Dragboatfestivl = 57;
inline bool DB_Player::has_dragboatfestivl() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void DB_Player::set_has_dragboatfestivl() {
  _has_bits_[1] |= 0x00020000u;
}
inline void DB_Player::clear_has_dragboatfestivl() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void DB_Player::clear_dragboatfestivl() {
  if (dragboatfestivl_ != NULL) dragboatfestivl_->::DB_DragboatFvl::Clear();
  clear_has_dragboatfestivl();
}
inline const ::DB_DragboatFvl& DB_Player::dragboatfestivl() const {
  // @@protoc_insertion_point(field_get:DB_Player.Dragboatfestivl)
  return dragboatfestivl_ != NULL ? *dragboatfestivl_ : *default_instance_->dragboatfestivl_;
}
inline ::DB_DragboatFvl* DB_Player::mutable_dragboatfestivl() {
  set_has_dragboatfestivl();
  if (dragboatfestivl_ == NULL) {
    dragboatfestivl_ = new ::DB_DragboatFvl;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.Dragboatfestivl)
  return dragboatfestivl_;
}
inline ::DB_DragboatFvl* DB_Player::release_dragboatfestivl() {
  clear_has_dragboatfestivl();
  ::DB_DragboatFvl* temp = dragboatfestivl_;
  dragboatfestivl_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_dragboatfestivl(::DB_DragboatFvl* dragboatfestivl) {
  delete dragboatfestivl_;
  dragboatfestivl_ = dragboatfestivl;
  if (dragboatfestivl) {
    set_has_dragboatfestivl();
  } else {
    clear_has_dragboatfestivl();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.Dragboatfestivl)
}

// optional .DB_ActiveInviteself ActiveInviteself = 58;
inline bool DB_Player::has_activeinviteself() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void DB_Player::set_has_activeinviteself() {
  _has_bits_[1] |= 0x00040000u;
}
inline void DB_Player::clear_has_activeinviteself() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void DB_Player::clear_activeinviteself() {
  if (activeinviteself_ != NULL) activeinviteself_->::DB_ActiveInviteself::Clear();
  clear_has_activeinviteself();
}
inline const ::DB_ActiveInviteself& DB_Player::activeinviteself() const {
  // @@protoc_insertion_point(field_get:DB_Player.ActiveInviteself)
  return activeinviteself_ != NULL ? *activeinviteself_ : *default_instance_->activeinviteself_;
}
inline ::DB_ActiveInviteself* DB_Player::mutable_activeinviteself() {
  set_has_activeinviteself();
  if (activeinviteself_ == NULL) {
    activeinviteself_ = new ::DB_ActiveInviteself;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.ActiveInviteself)
  return activeinviteself_;
}
inline ::DB_ActiveInviteself* DB_Player::release_activeinviteself() {
  clear_has_activeinviteself();
  ::DB_ActiveInviteself* temp = activeinviteself_;
  activeinviteself_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_activeinviteself(::DB_ActiveInviteself* activeinviteself) {
  delete activeinviteself_;
  activeinviteself_ = activeinviteself;
  if (activeinviteself) {
    set_has_activeinviteself();
  } else {
    clear_has_activeinviteself();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.ActiveInviteself)
}

// optional int32 qpoint_usage_feedback = 59 [default = 0];
inline bool DB_Player::has_qpoint_usage_feedback() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void DB_Player::set_has_qpoint_usage_feedback() {
  _has_bits_[1] |= 0x00080000u;
}
inline void DB_Player::clear_has_qpoint_usage_feedback() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void DB_Player::clear_qpoint_usage_feedback() {
  qpoint_usage_feedback_ = 0;
  clear_has_qpoint_usage_feedback();
}
inline ::google::protobuf::int32 DB_Player::qpoint_usage_feedback() const {
  // @@protoc_insertion_point(field_get:DB_Player.qpoint_usage_feedback)
  return qpoint_usage_feedback_;
}
inline void DB_Player::set_qpoint_usage_feedback(::google::protobuf::int32 value) {
  set_has_qpoint_usage_feedback();
  qpoint_usage_feedback_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.qpoint_usage_feedback)
}

// optional int32 MobileDeviceSyncCnt = 60 [default = 0];
inline bool DB_Player::has_mobiledevicesynccnt() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void DB_Player::set_has_mobiledevicesynccnt() {
  _has_bits_[1] |= 0x00100000u;
}
inline void DB_Player::clear_has_mobiledevicesynccnt() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void DB_Player::clear_mobiledevicesynccnt() {
  mobiledevicesynccnt_ = 0;
  clear_has_mobiledevicesynccnt();
}
inline ::google::protobuf::int32 DB_Player::mobiledevicesynccnt() const {
  // @@protoc_insertion_point(field_get:DB_Player.MobileDeviceSyncCnt)
  return mobiledevicesynccnt_;
}
inline void DB_Player::set_mobiledevicesynccnt(::google::protobuf::int32 value) {
  set_has_mobiledevicesynccnt();
  mobiledevicesynccnt_ = value;
  // @@protoc_insertion_point(field_set:DB_Player.MobileDeviceSyncCnt)
}

// optional .DB_ActiveCallBack ActiveCallBack = 61;
inline bool DB_Player::has_activecallback() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void DB_Player::set_has_activecallback() {
  _has_bits_[1] |= 0x00200000u;
}
inline void DB_Player::clear_has_activecallback() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void DB_Player::clear_activecallback() {
  if (activecallback_ != NULL) activecallback_->::DB_ActiveCallBack::Clear();
  clear_has_activecallback();
}
inline const ::DB_ActiveCallBack& DB_Player::activecallback() const {
  // @@protoc_insertion_point(field_get:DB_Player.ActiveCallBack)
  return activecallback_ != NULL ? *activecallback_ : *default_instance_->activecallback_;
}
inline ::DB_ActiveCallBack* DB_Player::mutable_activecallback() {
  set_has_activecallback();
  if (activecallback_ == NULL) {
    activecallback_ = new ::DB_ActiveCallBack;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.ActiveCallBack)
  return activecallback_;
}
inline ::DB_ActiveCallBack* DB_Player::release_activecallback() {
  clear_has_activecallback();
  ::DB_ActiveCallBack* temp = activecallback_;
  activecallback_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_activecallback(::DB_ActiveCallBack* activecallback) {
  delete activecallback_;
  activecallback_ = activecallback;
  if (activecallback) {
    set_has_activecallback();
  } else {
    clear_has_activecallback();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.ActiveCallBack)
}

// optional .DB_KingOfStar KingOfStar = 62;
inline bool DB_Player::has_kingofstar() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void DB_Player::set_has_kingofstar() {
  _has_bits_[1] |= 0x00400000u;
}
inline void DB_Player::clear_has_kingofstar() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void DB_Player::clear_kingofstar() {
  if (kingofstar_ != NULL) kingofstar_->::DB_KingOfStar::Clear();
  clear_has_kingofstar();
}
inline const ::DB_KingOfStar& DB_Player::kingofstar() const {
  // @@protoc_insertion_point(field_get:DB_Player.KingOfStar)
  return kingofstar_ != NULL ? *kingofstar_ : *default_instance_->kingofstar_;
}
inline ::DB_KingOfStar* DB_Player::mutable_kingofstar() {
  set_has_kingofstar();
  if (kingofstar_ == NULL) {
    kingofstar_ = new ::DB_KingOfStar;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.KingOfStar)
  return kingofstar_;
}
inline ::DB_KingOfStar* DB_Player::release_kingofstar() {
  clear_has_kingofstar();
  ::DB_KingOfStar* temp = kingofstar_;
  kingofstar_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_kingofstar(::DB_KingOfStar* kingofstar) {
  delete kingofstar_;
  kingofstar_ = kingofstar;
  if (kingofstar) {
    set_has_kingofstar();
  } else {
    clear_has_kingofstar();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.KingOfStar)
}

// optional .DB_ExpLevel exp_level = 63;
inline bool DB_Player::has_exp_level() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void DB_Player::set_has_exp_level() {
  _has_bits_[1] |= 0x00800000u;
}
inline void DB_Player::clear_has_exp_level() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void DB_Player::clear_exp_level() {
  if (exp_level_ != NULL) exp_level_->::DB_ExpLevel::Clear();
  clear_has_exp_level();
}
inline const ::DB_ExpLevel& DB_Player::exp_level() const {
  // @@protoc_insertion_point(field_get:DB_Player.exp_level)
  return exp_level_ != NULL ? *exp_level_ : *default_instance_->exp_level_;
}
inline ::DB_ExpLevel* DB_Player::mutable_exp_level() {
  set_has_exp_level();
  if (exp_level_ == NULL) {
    exp_level_ = new ::DB_ExpLevel;
  }
  // @@protoc_insertion_point(field_mutable:DB_Player.exp_level)
  return exp_level_;
}
inline ::DB_ExpLevel* DB_Player::release_exp_level() {
  clear_has_exp_level();
  ::DB_ExpLevel* temp = exp_level_;
  exp_level_ = NULL;
  return temp;
}
inline void DB_Player::set_allocated_exp_level(::DB_ExpLevel* exp_level) {
  delete exp_level_;
  exp_level_ = exp_level;
  if (exp_level) {
    set_has_exp_level();
  } else {
    clear_has_exp_level();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_Player.exp_level)
}

// -------------------------------------------------------------------

// DB_User

// required int64 id = 1 [default = 0];
inline bool DB_User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_User::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 DB_User::id() const {
  // @@protoc_insertion_point(field_get:DB_User.id)
  return id_;
}
inline void DB_User::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DB_User.id)
}

// required string platform_id = 2 [default = ""];
inline bool DB_User::has_platform_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_User::set_has_platform_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_User::clear_has_platform_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_User::clear_platform_id() {
  platform_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform_id();
}
inline const ::std::string& DB_User::platform_id() const {
  // @@protoc_insertion_point(field_get:DB_User.platform_id)
  return platform_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_User::set_platform_id(const ::std::string& value) {
  set_has_platform_id();
  platform_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_User.platform_id)
}
inline void DB_User::set_platform_id(const char* value) {
  set_has_platform_id();
  platform_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_User.platform_id)
}
inline void DB_User::set_platform_id(const char* value, size_t size) {
  set_has_platform_id();
  platform_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_User.platform_id)
}
inline ::std::string* DB_User::mutable_platform_id() {
  set_has_platform_id();
  // @@protoc_insertion_point(field_mutable:DB_User.platform_id)
  return platform_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_User::release_platform_id() {
  clear_has_platform_id();
  return platform_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_User::set_allocated_platform_id(::std::string* platform_id) {
  if (platform_id != NULL) {
    set_has_platform_id();
  } else {
    clear_has_platform_id();
  }
  platform_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform_id);
  // @@protoc_insertion_point(field_set_allocated:DB_User.platform_id)
}

// repeated string name = 3;
inline int DB_User::name_size() const {
  return name_.size();
}
inline void DB_User::clear_name() {
  name_.Clear();
}
inline const ::std::string& DB_User::name(int index) const {
  // @@protoc_insertion_point(field_get:DB_User.name)
  return name_.Get(index);
}
inline ::std::string* DB_User::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:DB_User.name)
  return name_.Mutable(index);
}
inline void DB_User::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_User.name)
  name_.Mutable(index)->assign(value);
}
inline void DB_User::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_User.name)
}
inline void DB_User::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_User.name)
}
inline ::std::string* DB_User::add_name() {
  return name_.Add();
}
inline void DB_User::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_User.name)
}
inline void DB_User::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_User.name)
}
inline void DB_User::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_User.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_User::name() const {
  // @@protoc_insertion_point(field_list:DB_User.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_User::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:DB_User.name)
  return &name_;
}

// repeated string profile_link = 4;
inline int DB_User::profile_link_size() const {
  return profile_link_.size();
}
inline void DB_User::clear_profile_link() {
  profile_link_.Clear();
}
inline const ::std::string& DB_User::profile_link(int index) const {
  // @@protoc_insertion_point(field_get:DB_User.profile_link)
  return profile_link_.Get(index);
}
inline ::std::string* DB_User::mutable_profile_link(int index) {
  // @@protoc_insertion_point(field_mutable:DB_User.profile_link)
  return profile_link_.Mutable(index);
}
inline void DB_User::set_profile_link(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DB_User.profile_link)
  profile_link_.Mutable(index)->assign(value);
}
inline void DB_User::set_profile_link(int index, const char* value) {
  profile_link_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_User.profile_link)
}
inline void DB_User::set_profile_link(int index, const char* value, size_t size) {
  profile_link_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_User.profile_link)
}
inline ::std::string* DB_User::add_profile_link() {
  return profile_link_.Add();
}
inline void DB_User::add_profile_link(const ::std::string& value) {
  profile_link_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_User.profile_link)
}
inline void DB_User::add_profile_link(const char* value) {
  profile_link_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_User.profile_link)
}
inline void DB_User::add_profile_link(const char* value, size_t size) {
  profile_link_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_User.profile_link)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DB_User::profile_link() const {
  // @@protoc_insertion_point(field_list:DB_User.profile_link)
  return profile_link_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DB_User::mutable_profile_link() {
  // @@protoc_insertion_point(field_mutable_list:DB_User.profile_link)
  return &profile_link_;
}

// repeated int32 gender = 5;
inline int DB_User::gender_size() const {
  return gender_.size();
}
inline void DB_User::clear_gender() {
  gender_.Clear();
}
inline ::google::protobuf::int32 DB_User::gender(int index) const {
  // @@protoc_insertion_point(field_get:DB_User.gender)
  return gender_.Get(index);
}
inline void DB_User::set_gender(int index, ::google::protobuf::int32 value) {
  gender_.Set(index, value);
  // @@protoc_insertion_point(field_set:DB_User.gender)
}
inline void DB_User::add_gender(::google::protobuf::int32 value) {
  gender_.Add(value);
  // @@protoc_insertion_point(field_add:DB_User.gender)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DB_User::gender() const {
  // @@protoc_insertion_point(field_list:DB_User.gender)
  return gender_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DB_User::mutable_gender() {
  // @@protoc_insertion_point(field_mutable_list:DB_User.gender)
  return &gender_;
}

// required int64 last_login_time = 8 [default = 0];
inline bool DB_User::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_User::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_User::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_User::clear_last_login_time() {
  last_login_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_login_time();
}
inline ::google::protobuf::int64 DB_User::last_login_time() const {
  // @@protoc_insertion_point(field_get:DB_User.last_login_time)
  return last_login_time_;
}
inline void DB_User::set_last_login_time(::google::protobuf::int64 value) {
  set_has_last_login_time();
  last_login_time_ = value;
  // @@protoc_insertion_point(field_set:DB_User.last_login_time)
}

// required string last_login_ip = 9 [default = ""];
inline bool DB_User::has_last_login_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DB_User::set_has_last_login_ip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DB_User::clear_has_last_login_ip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DB_User::clear_last_login_ip() {
  last_login_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_login_ip();
}
inline const ::std::string& DB_User::last_login_ip() const {
  // @@protoc_insertion_point(field_get:DB_User.last_login_ip)
  return last_login_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_User::set_last_login_ip(const ::std::string& value) {
  set_has_last_login_ip();
  last_login_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_User.last_login_ip)
}
inline void DB_User::set_last_login_ip(const char* value) {
  set_has_last_login_ip();
  last_login_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_User.last_login_ip)
}
inline void DB_User::set_last_login_ip(const char* value, size_t size) {
  set_has_last_login_ip();
  last_login_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_User.last_login_ip)
}
inline ::std::string* DB_User::mutable_last_login_ip() {
  set_has_last_login_ip();
  // @@protoc_insertion_point(field_mutable:DB_User.last_login_ip)
  return last_login_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_User::release_last_login_ip() {
  clear_has_last_login_ip();
  return last_login_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_User::set_allocated_last_login_ip(::std::string* last_login_ip) {
  if (last_login_ip != NULL) {
    set_has_last_login_ip();
  } else {
    clear_has_last_login_ip();
  }
  last_login_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_login_ip);
  // @@protoc_insertion_point(field_set_allocated:DB_User.last_login_ip)
}

// required int64 regist_time = 10 [default = 0];
inline bool DB_User::has_regist_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DB_User::set_has_regist_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DB_User::clear_has_regist_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DB_User::clear_regist_time() {
  regist_time_ = GOOGLE_LONGLONG(0);
  clear_has_regist_time();
}
inline ::google::protobuf::int64 DB_User::regist_time() const {
  // @@protoc_insertion_point(field_get:DB_User.regist_time)
  return regist_time_;
}
inline void DB_User::set_regist_time(::google::protobuf::int64 value) {
  set_has_regist_time();
  regist_time_ = value;
  // @@protoc_insertion_point(field_set:DB_User.regist_time)
}

// optional int32 yellowDmdLvl = 13 [default = 0];
inline bool DB_User::has_yellowdmdlvl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DB_User::set_has_yellowdmdlvl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DB_User::clear_has_yellowdmdlvl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DB_User::clear_yellowdmdlvl() {
  yellowdmdlvl_ = 0;
  clear_has_yellowdmdlvl();
}
inline ::google::protobuf::int32 DB_User::yellowdmdlvl() const {
  // @@protoc_insertion_point(field_get:DB_User.yellowDmdLvl)
  return yellowdmdlvl_;
}
inline void DB_User::set_yellowdmdlvl(::google::protobuf::int32 value) {
  set_has_yellowdmdlvl();
  yellowdmdlvl_ = value;
  // @@protoc_insertion_point(field_set:DB_User.yellowDmdLvl)
}

// optional bool isYellowDmd = 14 [default = false];
inline bool DB_User::has_isyellowdmd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DB_User::set_has_isyellowdmd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DB_User::clear_has_isyellowdmd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DB_User::clear_isyellowdmd() {
  isyellowdmd_ = false;
  clear_has_isyellowdmd();
}
inline bool DB_User::isyellowdmd() const {
  // @@protoc_insertion_point(field_get:DB_User.isYellowDmd)
  return isyellowdmd_;
}
inline void DB_User::set_isyellowdmd(bool value) {
  set_has_isyellowdmd();
  isyellowdmd_ = value;
  // @@protoc_insertion_point(field_set:DB_User.isYellowDmd)
}

// optional bool isYellowDmdYear = 15 [default = false];
inline bool DB_User::has_isyellowdmdyear() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DB_User::set_has_isyellowdmdyear() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DB_User::clear_has_isyellowdmdyear() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DB_User::clear_isyellowdmdyear() {
  isyellowdmdyear_ = false;
  clear_has_isyellowdmdyear();
}
inline bool DB_User::isyellowdmdyear() const {
  // @@protoc_insertion_point(field_get:DB_User.isYellowDmdYear)
  return isyellowdmdyear_;
}
inline void DB_User::set_isyellowdmdyear(bool value) {
  set_has_isyellowdmdyear();
  isyellowdmdyear_ = value;
  // @@protoc_insertion_point(field_set:DB_User.isYellowDmdYear)
}

// optional .DB_Player player = 19;
inline bool DB_User::has_player() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DB_User::set_has_player() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DB_User::clear_has_player() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DB_User::clear_player() {
  if (player_ != NULL) player_->::DB_Player::Clear();
  clear_has_player();
}
inline const ::DB_Player& DB_User::player() const {
  // @@protoc_insertion_point(field_get:DB_User.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::DB_Player* DB_User::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    player_ = new ::DB_Player;
  }
  // @@protoc_insertion_point(field_mutable:DB_User.player)
  return player_;
}
inline ::DB_Player* DB_User::release_player() {
  clear_has_player();
  ::DB_Player* temp = player_;
  player_ = NULL;
  return temp;
}
inline void DB_User::set_allocated_player(::DB_Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_set_allocated:DB_User.player)
}

// optional int32 QPoint = 20 [default = 0];
inline bool DB_User::has_qpoint() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DB_User::set_has_qpoint() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DB_User::clear_has_qpoint() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DB_User::clear_qpoint() {
  qpoint_ = 0;
  clear_has_qpoint();
}
inline ::google::protobuf::int32 DB_User::qpoint() const {
  // @@protoc_insertion_point(field_get:DB_User.QPoint)
  return qpoint_;
}
inline void DB_User::set_qpoint(::google::protobuf::int32 value) {
  set_has_qpoint();
  qpoint_ = value;
  // @@protoc_insertion_point(field_set:DB_User.QPoint)
}

// optional int32 version = 21;
inline bool DB_User::has_version() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DB_User::set_has_version() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DB_User::clear_has_version() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DB_User::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 DB_User::version() const {
  // @@protoc_insertion_point(field_get:DB_User.version)
  return version_;
}
inline void DB_User::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:DB_User.version)
}

// optional int64 secret = 22 [default = 0];
inline bool DB_User::has_secret() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DB_User::set_has_secret() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DB_User::clear_has_secret() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DB_User::clear_secret() {
  secret_ = GOOGLE_LONGLONG(0);
  clear_has_secret();
}
inline ::google::protobuf::int64 DB_User::secret() const {
  // @@protoc_insertion_point(field_get:DB_User.secret)
  return secret_;
}
inline void DB_User::set_secret(::google::protobuf::int64 value) {
  set_has_secret();
  secret_ = value;
  // @@protoc_insertion_point(field_set:DB_User.secret)
}

// optional int64 secret_gentime = 23 [default = 0];
inline bool DB_User::has_secret_gentime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DB_User::set_has_secret_gentime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DB_User::clear_has_secret_gentime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DB_User::clear_secret_gentime() {
  secret_gentime_ = GOOGLE_LONGLONG(0);
  clear_has_secret_gentime();
}
inline ::google::protobuf::int64 DB_User::secret_gentime() const {
  // @@protoc_insertion_point(field_get:DB_User.secret_gentime)
  return secret_gentime_;
}
inline void DB_User::set_secret_gentime(::google::protobuf::int64 value) {
  set_has_secret_gentime();
  secret_gentime_ = value;
  // @@protoc_insertion_point(field_set:DB_User.secret_gentime)
}

// optional int32 platformtype = 26 [default = 1];
inline bool DB_User::has_platformtype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DB_User::set_has_platformtype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DB_User::clear_has_platformtype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DB_User::clear_platformtype() {
  platformtype_ = 1;
  clear_has_platformtype();
}
inline ::google::protobuf::int32 DB_User::platformtype() const {
  // @@protoc_insertion_point(field_get:DB_User.platformtype)
  return platformtype_;
}
inline void DB_User::set_platformtype(::google::protobuf::int32 value) {
  set_has_platformtype();
  platformtype_ = value;
  // @@protoc_insertion_point(field_set:DB_User.platformtype)
}

// optional int32 checkval_first = 27 [default = 0];
inline bool DB_User::has_checkval_first() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DB_User::set_has_checkval_first() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DB_User::clear_has_checkval_first() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DB_User::clear_checkval_first() {
  checkval_first_ = 0;
  clear_has_checkval_first();
}
inline ::google::protobuf::int32 DB_User::checkval_first() const {
  // @@protoc_insertion_point(field_get:DB_User.checkval_first)
  return checkval_first_;
}
inline void DB_User::set_checkval_first(::google::protobuf::int32 value) {
  set_has_checkval_first();
  checkval_first_ = value;
  // @@protoc_insertion_point(field_set:DB_User.checkval_first)
}

// optional int32 checkval_second = 28 [default = 0];
inline bool DB_User::has_checkval_second() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DB_User::set_has_checkval_second() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DB_User::clear_has_checkval_second() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DB_User::clear_checkval_second() {
  checkval_second_ = 0;
  clear_has_checkval_second();
}
inline ::google::protobuf::int32 DB_User::checkval_second() const {
  // @@protoc_insertion_point(field_get:DB_User.checkval_second)
  return checkval_second_;
}
inline void DB_User::set_checkval_second(::google::protobuf::int32 value) {
  set_has_checkval_second();
  checkval_second_ = value;
  // @@protoc_insertion_point(field_set:DB_User.checkval_second)
}

// optional int32 passval = 29 [default = 0];
inline bool DB_User::has_passval() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DB_User::set_has_passval() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DB_User::clear_has_passval() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DB_User::clear_passval() {
  passval_ = 0;
  clear_has_passval();
}
inline ::google::protobuf::int32 DB_User::passval() const {
  // @@protoc_insertion_point(field_get:DB_User.passval)
  return passval_;
}
inline void DB_User::set_passval(::google::protobuf::int32 value) {
  set_has_passval();
  passval_ = value;
  // @@protoc_insertion_point(field_set:DB_User.passval)
}

// optional string openkey = 30 [default = ""];
inline bool DB_User::has_openkey() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DB_User::set_has_openkey() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DB_User::clear_has_openkey() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DB_User::clear_openkey() {
  openkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openkey();
}
inline const ::std::string& DB_User::openkey() const {
  // @@protoc_insertion_point(field_get:DB_User.openkey)
  return openkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_User::set_openkey(const ::std::string& value) {
  set_has_openkey();
  openkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB_User.openkey)
}
inline void DB_User::set_openkey(const char* value) {
  set_has_openkey();
  openkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB_User.openkey)
}
inline void DB_User::set_openkey(const char* value, size_t size) {
  set_has_openkey();
  openkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB_User.openkey)
}
inline ::std::string* DB_User::mutable_openkey() {
  set_has_openkey();
  // @@protoc_insertion_point(field_mutable:DB_User.openkey)
  return openkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB_User::release_openkey() {
  clear_has_openkey();
  return openkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB_User::set_allocated_openkey(::std::string* openkey) {
  if (openkey != NULL) {
    set_has_openkey();
  } else {
    clear_has_openkey();
  }
  openkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openkey);
  // @@protoc_insertion_point(field_set_allocated:DB_User.openkey)
}

// optional int32 logincnt = 31 [default = 0];
inline bool DB_User::has_logincnt() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DB_User::set_has_logincnt() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DB_User::clear_has_logincnt() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DB_User::clear_logincnt() {
  logincnt_ = 0;
  clear_has_logincnt();
}
inline ::google::protobuf::int32 DB_User::logincnt() const {
  // @@protoc_insertion_point(field_get:DB_User.logincnt)
  return logincnt_;
}
inline void DB_User::set_logincnt(::google::protobuf::int32 value) {
  set_has_logincnt();
  logincnt_ = value;
  // @@protoc_insertion_point(field_set:DB_User.logincnt)
}

// optional int32 active_days = 32 [default = 0];
inline bool DB_User::has_active_days() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DB_User::set_has_active_days() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DB_User::clear_has_active_days() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DB_User::clear_active_days() {
  active_days_ = 0;
  clear_has_active_days();
}
inline ::google::protobuf::int32 DB_User::active_days() const {
  // @@protoc_insertion_point(field_get:DB_User.active_days)
  return active_days_;
}
inline void DB_User::set_active_days(::google::protobuf::int32 value) {
  set_has_active_days();
  active_days_ = value;
  // @@protoc_insertion_point(field_set:DB_User.active_days)
}

// optional int32 total_login_days = 33 [default = 0];
inline bool DB_User::has_total_login_days() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DB_User::set_has_total_login_days() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DB_User::clear_has_total_login_days() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DB_User::clear_total_login_days() {
  total_login_days_ = 0;
  clear_has_total_login_days();
}
inline ::google::protobuf::int32 DB_User::total_login_days() const {
  // @@protoc_insertion_point(field_get:DB_User.total_login_days)
  return total_login_days_;
}
inline void DB_User::set_total_login_days(::google::protobuf::int32 value) {
  set_has_total_login_days();
  total_login_days_ = value;
  // @@protoc_insertion_point(field_set:DB_User.total_login_days)
}

// optional int32 user_from = 34 [default = 0];
inline bool DB_User::has_user_from() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DB_User::set_has_user_from() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DB_User::clear_has_user_from() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DB_User::clear_user_from() {
  user_from_ = 0;
  clear_has_user_from();
}
inline ::google::protobuf::int32 DB_User::user_from() const {
  // @@protoc_insertion_point(field_get:DB_User.user_from)
  return user_from_;
}
inline void DB_User::set_user_from(::google::protobuf::int32 value) {
  set_has_user_from();
  user_from_ = value;
  // @@protoc_insertion_point(field_set:DB_User.user_from)
}

// optional int32 user_cmem_v = 35 [default = 0];
inline bool DB_User::has_user_cmem_v() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DB_User::set_has_user_cmem_v() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DB_User::clear_has_user_cmem_v() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DB_User::clear_user_cmem_v() {
  user_cmem_v_ = 0;
  clear_has_user_cmem_v();
}
inline ::google::protobuf::int32 DB_User::user_cmem_v() const {
  // @@protoc_insertion_point(field_get:DB_User.user_cmem_v)
  return user_cmem_v_;
}
inline void DB_User::set_user_cmem_v(::google::protobuf::int32 value) {
  set_has_user_cmem_v();
  user_cmem_v_ = value;
  // @@protoc_insertion_point(field_set:DB_User.user_cmem_v)
}

// optional int64 last_active_day = 36 [default = 0];
inline bool DB_User::has_last_active_day() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DB_User::set_has_last_active_day() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DB_User::clear_has_last_active_day() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DB_User::clear_last_active_day() {
  last_active_day_ = GOOGLE_LONGLONG(0);
  clear_has_last_active_day();
}
inline ::google::protobuf::int64 DB_User::last_active_day() const {
  // @@protoc_insertion_point(field_get:DB_User.last_active_day)
  return last_active_day_;
}
inline void DB_User::set_last_active_day(::google::protobuf::int64 value) {
  set_has_last_active_day();
  last_active_day_ = value;
  // @@protoc_insertion_point(field_set:DB_User.last_active_day)
}

// optional int32 ingame_cash = 37 [default = 0];
inline bool DB_User::has_ingame_cash() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void DB_User::set_has_ingame_cash() {
  _has_bits_[0] |= 0x08000000u;
}
inline void DB_User::clear_has_ingame_cash() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void DB_User::clear_ingame_cash() {
  ingame_cash_ = 0;
  clear_has_ingame_cash();
}
inline ::google::protobuf::int32 DB_User::ingame_cash() const {
  // @@protoc_insertion_point(field_get:DB_User.ingame_cash)
  return ingame_cash_;
}
inline void DB_User::set_ingame_cash(::google::protobuf::int32 value) {
  set_has_ingame_cash();
  ingame_cash_ = value;
  // @@protoc_insertion_point(field_set:DB_User.ingame_cash)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dbinterface_2eproto__INCLUDED
