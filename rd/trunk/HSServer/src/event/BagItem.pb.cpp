// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BagItem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BagItem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BagItem_2eproto() {
  protobuf_AddDesc_BagItem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BagItem.proto");
  GOOGLE_CHECK(file != NULL);
  BagItem_descriptor_ = file->message_type(0);
  static const int BagItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItem, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItem, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItem, level_),
  };
  BagItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BagItem_descriptor_,
      BagItem::default_instance_,
      BagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(BagItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItem, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BagItem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BagItem_descriptor_, &BagItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BagItem_2eproto() {
  delete BagItem::default_instance_;
  delete BagItem_reflection_;
}

void protobuf_AddDesc_BagItem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rBagItem.proto\"@\n\007BagItem\022\021\n\006typeid\030\001 \001"
    "(\005:\0010\022\020\n\005count\030\002 \001(\005:\0010\022\020\n\005level\030\003 \001(\005:\001"
    "0", 81);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BagItem.proto", &protobuf_RegisterTypes);
  BagItem::default_instance_ = new BagItem();
  BagItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BagItem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BagItem_2eproto {
  StaticDescriptorInitializer_BagItem_2eproto() {
    protobuf_AddDesc_BagItem_2eproto();
  }
} static_descriptor_initializer_BagItem_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int BagItem::kTypeidFieldNumber;
const int BagItem::kCountFieldNumber;
const int BagItem::kLevelFieldNumber;
#endif  // !_MSC_VER

BagItem::BagItem()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BagItem)
}

void BagItem::InitAsDefaultInstance() {
}

BagItem::BagItem(const BagItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BagItem)
}

void BagItem::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  count_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagItem::~BagItem() {
  // @@protoc_insertion_point(destructor:BagItem)
  SharedDtor();
}

void BagItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagItem_descriptor_;
}

const BagItem& BagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagItem_2eproto();
  return *default_instance_;
}

BagItem* BagItem::default_instance_ = NULL;

BagItem* BagItem::New(::google::protobuf::Arena* arena) const {
  BagItem* n = new BagItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BagItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BagItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(typeid__, level_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BagItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 typeid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BagItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BagItem)
  return false;
#undef DO_
}

void BagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BagItem)
  // optional int32 typeid = 1 [default = 0];
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // optional int32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int32 level = 3 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BagItem)
}

::google::protobuf::uint8* BagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BagItem)
  // optional int32 typeid = 1 [default = 0];
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // optional int32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int32 level = 3 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BagItem)
  return target;
}

int BagItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int32 typeid = 1 [default = 0];
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional int32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 level = 3 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagItem::MergeFrom(const BagItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagItem::CopyFrom(const BagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagItem::IsInitialized() const {

  return true;
}

void BagItem::Swap(BagItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BagItem::InternalSwap(BagItem* other) {
  std::swap(typeid__, other->typeid__);
  std::swap(count_, other->count_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagItem_descriptor_;
  metadata.reflection = BagItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BagItem

// optional int32 typeid = 1 [default = 0];
 bool BagItem::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void BagItem::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
 void BagItem::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
 void BagItem::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
 ::google::protobuf::int32 BagItem::typeid_() const {
  // @@protoc_insertion_point(field_get:BagItem.typeid)
  return typeid__;
}
 void BagItem::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:BagItem.typeid)
}

// optional int32 count = 2 [default = 0];
 bool BagItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void BagItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
 void BagItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
 void BagItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 BagItem::count() const {
  // @@protoc_insertion_point(field_get:BagItem.count)
  return count_;
}
 void BagItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:BagItem.count)
}

// optional int32 level = 3 [default = 0];
 bool BagItem::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void BagItem::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
 void BagItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
 void BagItem::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 BagItem::level() const {
  // @@protoc_insertion_point(field_get:BagItem.level)
  return level_;
}
 void BagItem::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:BagItem.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
