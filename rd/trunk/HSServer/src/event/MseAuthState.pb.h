// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MseAuthState.proto

#ifndef PROTOBUF_MseAuthState_2eproto__INCLUDED
#define PROTOBUF_MseAuthState_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MseAuthState_2eproto();
void protobuf_AssignDesc_MseAuthState_2eproto();
void protobuf_ShutdownFile_MseAuthState_2eproto();

class MseAuthState;

// ===================================================================

class MseAuthState : public ::google::protobuf::Message {
 public:
  MseAuthState();
  virtual ~MseAuthState();

  MseAuthState(const MseAuthState& from);

  inline MseAuthState& operator=(const MseAuthState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MseAuthState& default_instance();

  void Swap(MseAuthState* other);

  // implements Message ----------------------------------------------

  inline MseAuthState* New() const { return New(NULL); }

  MseAuthState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MseAuthState& from);
  void MergeFrom(const MseAuthState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MseAuthState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool pass = 1;
  bool has_pass() const;
  void clear_pass();
  static const int kPassFieldNumber = 1;
  bool pass() const;
  void set_pass(bool value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 leftMin = 3;
  bool has_leftmin() const;
  void clear_leftmin();
  static const int kLeftMinFieldNumber = 3;
  ::google::protobuf::int32 leftmin() const;
  void set_leftmin(::google::protobuf::int32 value);

  // optional int32 banMin = 4;
  bool has_banmin() const;
  void clear_banmin();
  static const int kBanMinFieldNumber = 4;
  ::google::protobuf::int32 banmin() const;
  void set_banmin(::google::protobuf::int32 value);

  // optional string adpath = 5;
  bool has_adpath() const;
  void clear_adpath();
  static const int kAdpathFieldNumber = 5;
  const ::std::string& adpath() const;
  void set_adpath(const ::std::string& value);
  void set_adpath(const char* value);
  void set_adpath(const char* value, size_t size);
  ::std::string* mutable_adpath();
  ::std::string* release_adpath();
  void set_allocated_adpath(::std::string* adpath);

  // optional string openid = 6;
  bool has_openid() const;
  void clear_openid();
  static const int kOpenidFieldNumber = 6;
  const ::std::string& openid() const;
  void set_openid(const ::std::string& value);
  void set_openid(const char* value);
  void set_openid(const char* value, size_t size);
  ::std::string* mutable_openid();
  ::std::string* release_openid();
  void set_allocated_openid(::std::string* openid);

  // optional string uid = 7;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 7;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional int32 adval = 8;
  bool has_adval() const;
  void clear_adval();
  static const int kAdvalFieldNumber = 8;
  ::google::protobuf::int32 adval() const;
  void set_adval(::google::protobuf::int32 value);

  // optional int32 sw = 9;
  bool has_sw() const;
  void clear_sw();
  static const int kSwFieldNumber = 9;
  ::google::protobuf::int32 sw() const;
  void set_sw(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MseAuthState)
 private:
  inline void set_has_pass();
  inline void clear_has_pass();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_leftmin();
  inline void clear_has_leftmin();
  inline void set_has_banmin();
  inline void clear_has_banmin();
  inline void set_has_adpath();
  inline void clear_has_adpath();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_adval();
  inline void clear_has_adval();
  inline void set_has_sw();
  inline void clear_has_sw();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool pass_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 leftmin_;
  ::google::protobuf::int32 banmin_;
  ::google::protobuf::internal::ArenaStringPtr adpath_;
  ::google::protobuf::internal::ArenaStringPtr openid_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::int32 adval_;
  ::google::protobuf::int32 sw_;
  friend void  protobuf_AddDesc_MseAuthState_2eproto();
  friend void protobuf_AssignDesc_MseAuthState_2eproto();
  friend void protobuf_ShutdownFile_MseAuthState_2eproto();

  void InitAsDefaultInstance();
  static MseAuthState* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MseAuthState

// required bool pass = 1;
inline bool MseAuthState::has_pass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MseAuthState::set_has_pass() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MseAuthState::clear_has_pass() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MseAuthState::clear_pass() {
  pass_ = false;
  clear_has_pass();
}
inline bool MseAuthState::pass() const {
  // @@protoc_insertion_point(field_get:MseAuthState.pass)
  return pass_;
}
inline void MseAuthState::set_pass(bool value) {
  set_has_pass();
  pass_ = value;
  // @@protoc_insertion_point(field_set:MseAuthState.pass)
}

// required int32 type = 2;
inline bool MseAuthState::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MseAuthState::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MseAuthState::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MseAuthState::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MseAuthState::type() const {
  // @@protoc_insertion_point(field_get:MseAuthState.type)
  return type_;
}
inline void MseAuthState::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:MseAuthState.type)
}

// required int32 leftMin = 3;
inline bool MseAuthState::has_leftmin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MseAuthState::set_has_leftmin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MseAuthState::clear_has_leftmin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MseAuthState::clear_leftmin() {
  leftmin_ = 0;
  clear_has_leftmin();
}
inline ::google::protobuf::int32 MseAuthState::leftmin() const {
  // @@protoc_insertion_point(field_get:MseAuthState.leftMin)
  return leftmin_;
}
inline void MseAuthState::set_leftmin(::google::protobuf::int32 value) {
  set_has_leftmin();
  leftmin_ = value;
  // @@protoc_insertion_point(field_set:MseAuthState.leftMin)
}

// optional int32 banMin = 4;
inline bool MseAuthState::has_banmin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MseAuthState::set_has_banmin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MseAuthState::clear_has_banmin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MseAuthState::clear_banmin() {
  banmin_ = 0;
  clear_has_banmin();
}
inline ::google::protobuf::int32 MseAuthState::banmin() const {
  // @@protoc_insertion_point(field_get:MseAuthState.banMin)
  return banmin_;
}
inline void MseAuthState::set_banmin(::google::protobuf::int32 value) {
  set_has_banmin();
  banmin_ = value;
  // @@protoc_insertion_point(field_set:MseAuthState.banMin)
}

// optional string adpath = 5;
inline bool MseAuthState::has_adpath() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MseAuthState::set_has_adpath() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MseAuthState::clear_has_adpath() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MseAuthState::clear_adpath() {
  adpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adpath();
}
inline const ::std::string& MseAuthState::adpath() const {
  // @@protoc_insertion_point(field_get:MseAuthState.adpath)
  return adpath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MseAuthState::set_adpath(const ::std::string& value) {
  set_has_adpath();
  adpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MseAuthState.adpath)
}
inline void MseAuthState::set_adpath(const char* value) {
  set_has_adpath();
  adpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MseAuthState.adpath)
}
inline void MseAuthState::set_adpath(const char* value, size_t size) {
  set_has_adpath();
  adpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MseAuthState.adpath)
}
inline ::std::string* MseAuthState::mutable_adpath() {
  set_has_adpath();
  // @@protoc_insertion_point(field_mutable:MseAuthState.adpath)
  return adpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MseAuthState::release_adpath() {
  clear_has_adpath();
  return adpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MseAuthState::set_allocated_adpath(::std::string* adpath) {
  if (adpath != NULL) {
    set_has_adpath();
  } else {
    clear_has_adpath();
  }
  adpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adpath);
  // @@protoc_insertion_point(field_set_allocated:MseAuthState.adpath)
}

// optional string openid = 6;
inline bool MseAuthState::has_openid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MseAuthState::set_has_openid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MseAuthState::clear_has_openid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MseAuthState::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
inline const ::std::string& MseAuthState::openid() const {
  // @@protoc_insertion_point(field_get:MseAuthState.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MseAuthState::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MseAuthState.openid)
}
inline void MseAuthState::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MseAuthState.openid)
}
inline void MseAuthState::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MseAuthState.openid)
}
inline ::std::string* MseAuthState::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:MseAuthState.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MseAuthState::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MseAuthState::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:MseAuthState.openid)
}

// optional string uid = 7;
inline bool MseAuthState::has_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MseAuthState::set_has_uid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MseAuthState::clear_has_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MseAuthState::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& MseAuthState::uid() const {
  // @@protoc_insertion_point(field_get:MseAuthState.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MseAuthState::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MseAuthState.uid)
}
inline void MseAuthState::set_uid(const char* value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MseAuthState.uid)
}
inline void MseAuthState::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MseAuthState.uid)
}
inline ::std::string* MseAuthState::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:MseAuthState.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MseAuthState::release_uid() {
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MseAuthState::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:MseAuthState.uid)
}

// optional int32 adval = 8;
inline bool MseAuthState::has_adval() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MseAuthState::set_has_adval() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MseAuthState::clear_has_adval() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MseAuthState::clear_adval() {
  adval_ = 0;
  clear_has_adval();
}
inline ::google::protobuf::int32 MseAuthState::adval() const {
  // @@protoc_insertion_point(field_get:MseAuthState.adval)
  return adval_;
}
inline void MseAuthState::set_adval(::google::protobuf::int32 value) {
  set_has_adval();
  adval_ = value;
  // @@protoc_insertion_point(field_set:MseAuthState.adval)
}

// optional int32 sw = 9;
inline bool MseAuthState::has_sw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MseAuthState::set_has_sw() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MseAuthState::clear_has_sw() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MseAuthState::clear_sw() {
  sw_ = 0;
  clear_has_sw();
}
inline ::google::protobuf::int32 MseAuthState::sw() const {
  // @@protoc_insertion_point(field_get:MseAuthState.sw)
  return sw_;
}
inline void MseAuthState::set_sw(::google::protobuf::int32 value) {
  set_has_sw();
  sw_ = value;
  // @@protoc_insertion_point(field_set:MseAuthState.sw)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MseAuthState_2eproto__INCLUDED
