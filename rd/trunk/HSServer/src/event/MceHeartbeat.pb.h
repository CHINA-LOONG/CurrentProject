// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MceHeartbeat.proto

#ifndef PROTOBUF_MceHeartbeat_2eproto__INCLUDED
#define PROTOBUF_MceHeartbeat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MceHeartbeat_2eproto();
void protobuf_AssignDesc_MceHeartbeat_2eproto();
void protobuf_ShutdownFile_MceHeartbeat_2eproto();

class MceHeartbeat;

// ===================================================================

class MceHeartbeat : public ::google::protobuf::Message {
 public:
  MceHeartbeat();
  virtual ~MceHeartbeat();

  MceHeartbeat(const MceHeartbeat& from);

  inline MceHeartbeat& operator=(const MceHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MceHeartbeat& default_instance();

  void Swap(MceHeartbeat* other);

  // implements Message ----------------------------------------------

  inline MceHeartbeat* New() const { return New(NULL); }

  MceHeartbeat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MceHeartbeat& from);
  void MergeFrom(const MceHeartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MceHeartbeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool update = 1 [default = false];
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 1;
  bool update() const;
  void set_update(bool value);

  // @@protoc_insertion_point(class_scope:MceHeartbeat)
 private:
  inline void set_has_update();
  inline void clear_has_update();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool update_;
  friend void  protobuf_AddDesc_MceHeartbeat_2eproto();
  friend void protobuf_AssignDesc_MceHeartbeat_2eproto();
  friend void protobuf_ShutdownFile_MceHeartbeat_2eproto();

  void InitAsDefaultInstance();
  static MceHeartbeat* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MceHeartbeat

// optional bool update = 1 [default = false];
inline bool MceHeartbeat::has_update() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MceHeartbeat::set_has_update() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MceHeartbeat::clear_has_update() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MceHeartbeat::clear_update() {
  update_ = false;
  clear_has_update();
}
inline bool MceHeartbeat::update() const {
  // @@protoc_insertion_point(field_get:MceHeartbeat.update)
  return update_;
}
inline void MceHeartbeat::set_update(bool value) {
  set_has_update();
  update_ = value;
  // @@protoc_insertion_point(field_set:MceHeartbeat.update)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MceHeartbeat_2eproto__INCLUDED
