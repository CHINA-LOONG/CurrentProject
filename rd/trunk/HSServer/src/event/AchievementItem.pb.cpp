// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AchievementItem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AchievementItem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AchievementItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchievementItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AchievementItem_2eproto() {
  protobuf_AddDesc_AchievementItem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AchievementItem.proto");
  GOOGLE_CHECK(file != NULL);
  AchievementItem_descriptor_ = file->message_type(0);
  static const int AchievementItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementItem, now_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementItem, max_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementItem, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementItem, id_),
  };
  AchievementItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AchievementItem_descriptor_,
      AchievementItem::default_instance_,
      AchievementItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(AchievementItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementItem, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AchievementItem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AchievementItem_descriptor_, &AchievementItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AchievementItem_2eproto() {
  delete AchievementItem::default_instance_;
  delete AchievementItem_reflection_;
}

void protobuf_AddDesc_AchievementItem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025AchievementItem.proto\"o\n\017AchievementIt"
    "em\022\024\n\tnow_value\030\001 \001(\005:\0010\022\024\n\tmax_value\030\002 "
    "\001(\005:\0010\022\020\n\005state\030\003 \001(\005:\0010\022\017\n\004type\030\004 \001(\005:\001"
    "0\022\r\n\002id\030\005 \001(\005:\0010", 136);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AchievementItem.proto", &protobuf_RegisterTypes);
  AchievementItem::default_instance_ = new AchievementItem();
  AchievementItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AchievementItem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AchievementItem_2eproto {
  StaticDescriptorInitializer_AchievementItem_2eproto() {
    protobuf_AddDesc_AchievementItem_2eproto();
  }
} static_descriptor_initializer_AchievementItem_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int AchievementItem::kNowValueFieldNumber;
const int AchievementItem::kMaxValueFieldNumber;
const int AchievementItem::kStateFieldNumber;
const int AchievementItem::kTypeFieldNumber;
const int AchievementItem::kIdFieldNumber;
#endif  // !_MSC_VER

AchievementItem::AchievementItem()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AchievementItem)
}

void AchievementItem::InitAsDefaultInstance() {
}

AchievementItem::AchievementItem(const AchievementItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AchievementItem)
}

void AchievementItem::SharedCtor() {
  _cached_size_ = 0;
  now_value_ = 0;
  max_value_ = 0;
  state_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementItem::~AchievementItem() {
  // @@protoc_insertion_point(destructor:AchievementItem)
  SharedDtor();
}

void AchievementItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchievementItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchievementItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchievementItem_descriptor_;
}

const AchievementItem& AchievementItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchievementItem_2eproto();
  return *default_instance_;
}

AchievementItem* AchievementItem::default_instance_ = NULL;

AchievementItem* AchievementItem::New(::google::protobuf::Arena* arena) const {
  AchievementItem* n = new AchievementItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AchievementItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AchievementItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(now_value_, id_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AchievementItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AchievementItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 now_value = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_value_)));
          set_has_now_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_value;
        break;
      }

      // optional int32 max_value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_value_)));
          set_has_max_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional int32 id = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AchievementItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AchievementItem)
  return false;
#undef DO_
}

void AchievementItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AchievementItem)
  // optional int32 now_value = 1 [default = 0];
  if (has_now_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->now_value(), output);
  }

  // optional int32 max_value = 2 [default = 0];
  if (has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_value(), output);
  }

  // optional int32 state = 3 [default = 0];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 type = 4 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 id = 5 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AchievementItem)
}

::google::protobuf::uint8* AchievementItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AchievementItem)
  // optional int32 now_value = 1 [default = 0];
  if (has_now_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->now_value(), target);
  }

  // optional int32 max_value = 2 [default = 0];
  if (has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_value(), target);
  }

  // optional int32 state = 3 [default = 0];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 type = 4 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 id = 5 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AchievementItem)
  return target;
}

int AchievementItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional int32 now_value = 1 [default = 0];
    if (has_now_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_value());
    }

    // optional int32 max_value = 2 [default = 0];
    if (has_max_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_value());
    }

    // optional int32 state = 3 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 type = 4 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 5 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AchievementItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchievementItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchievementItem::MergeFrom(const AchievementItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_now_value()) {
      set_now_value(from.now_value());
    }
    if (from.has_max_value()) {
      set_max_value(from.max_value());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AchievementItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchievementItem::CopyFrom(const AchievementItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementItem::IsInitialized() const {

  return true;
}

void AchievementItem::Swap(AchievementItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AchievementItem::InternalSwap(AchievementItem* other) {
  std::swap(now_value_, other->now_value_);
  std::swap(max_value_, other->max_value_);
  std::swap(state_, other->state_);
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AchievementItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchievementItem_descriptor_;
  metadata.reflection = AchievementItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AchievementItem

// optional int32 now_value = 1 [default = 0];
 bool AchievementItem::has_now_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void AchievementItem::set_has_now_value() {
  _has_bits_[0] |= 0x00000001u;
}
 void AchievementItem::clear_has_now_value() {
  _has_bits_[0] &= ~0x00000001u;
}
 void AchievementItem::clear_now_value() {
  now_value_ = 0;
  clear_has_now_value();
}
 ::google::protobuf::int32 AchievementItem::now_value() const {
  // @@protoc_insertion_point(field_get:AchievementItem.now_value)
  return now_value_;
}
 void AchievementItem::set_now_value(::google::protobuf::int32 value) {
  set_has_now_value();
  now_value_ = value;
  // @@protoc_insertion_point(field_set:AchievementItem.now_value)
}

// optional int32 max_value = 2 [default = 0];
 bool AchievementItem::has_max_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void AchievementItem::set_has_max_value() {
  _has_bits_[0] |= 0x00000002u;
}
 void AchievementItem::clear_has_max_value() {
  _has_bits_[0] &= ~0x00000002u;
}
 void AchievementItem::clear_max_value() {
  max_value_ = 0;
  clear_has_max_value();
}
 ::google::protobuf::int32 AchievementItem::max_value() const {
  // @@protoc_insertion_point(field_get:AchievementItem.max_value)
  return max_value_;
}
 void AchievementItem::set_max_value(::google::protobuf::int32 value) {
  set_has_max_value();
  max_value_ = value;
  // @@protoc_insertion_point(field_set:AchievementItem.max_value)
}

// optional int32 state = 3 [default = 0];
 bool AchievementItem::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void AchievementItem::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
 void AchievementItem::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
 void AchievementItem::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::google::protobuf::int32 AchievementItem::state() const {
  // @@protoc_insertion_point(field_get:AchievementItem.state)
  return state_;
}
 void AchievementItem::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:AchievementItem.state)
}

// optional int32 type = 4 [default = 0];
 bool AchievementItem::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void AchievementItem::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
 void AchievementItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
 void AchievementItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 AchievementItem::type() const {
  // @@protoc_insertion_point(field_get:AchievementItem.type)
  return type_;
}
 void AchievementItem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AchievementItem.type)
}

// optional int32 id = 5 [default = 0];
 bool AchievementItem::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void AchievementItem::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
 void AchievementItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
 void AchievementItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 AchievementItem::id() const {
  // @@protoc_insertion_point(field_get:AchievementItem.id)
  return id_;
}
 void AchievementItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:AchievementItem.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
