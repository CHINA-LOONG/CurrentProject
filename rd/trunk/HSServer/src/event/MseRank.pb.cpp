// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MseRank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MseRank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SingleRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MseRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MseRank_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MseRank_2eproto() {
  protobuf_AddDesc_MseRank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MseRank.proto");
  GOOGLE_CHECK(file != NULL);
  SingleRankItem_descriptor_ = file->message_type(0);
  static const int SingleRankItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRankItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRankItem, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRankItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRankItem, uid_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRankItem, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRankItem, wave_),
  };
  SingleRankItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SingleRankItem_descriptor_,
      SingleRankItem::default_instance_,
      SingleRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRankItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(SingleRankItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRankItem, _internal_metadata_),
      -1);
  MseRank_descriptor_ = file->message_type(1);
  static const int MseRank_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseRank, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseRank, rank_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseRank, rank_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseRank, rankname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseRank, opernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseRank, rank_num_),
  };
  MseRank_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MseRank_descriptor_,
      MseRank::default_instance_,
      MseRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseRank, _has_bits_[0]),
      -1,
      -1,
      sizeof(MseRank),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseRank, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MseRank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SingleRankItem_descriptor_, &SingleRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MseRank_descriptor_, &MseRank::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MseRank_2eproto() {
  delete SingleRankItem::default_instance_;
  delete SingleRankItem_reflection_;
  delete MseRank::default_instance_;
  delete MseRank_reflection_;
}

void protobuf_AddDesc_MseRank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMseRank.proto\"g\n\016SingleRankItem\022\014\n\004nam"
    "e\030\001 \001(\t\022\013\n\003uid\030\002 \001(\003\022\013\n\003num\030\003 \001(\005\022\017\n\007uid"
    "_str\030\004 \001(\t\022\013\n\003url\030\005 \001(\t\022\017\n\004wave\030\006 \001(\005:\0010"
    "\"\220\001\n\007MseRank\022\021\n\trank_type\030\001 \001(\005\022\"\n\trank_"
    "item\030\002 \001(\0132\017.SingleRankItem\022\024\n\014rank_vers"
    "ion\030\003 \001(\003\022\022\n\010rankname\030\004 \001(\t:\000\022\022\n\007opernum"
    "\030\005 \001(\005:\0010\022\020\n\010rank_num\030\006 \001(\005", 267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MseRank.proto", &protobuf_RegisterTypes);
  SingleRankItem::default_instance_ = new SingleRankItem();
  MseRank::default_instance_ = new MseRank();
  SingleRankItem::default_instance_->InitAsDefaultInstance();
  MseRank::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MseRank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MseRank_2eproto {
  StaticDescriptorInitializer_MseRank_2eproto() {
    protobuf_AddDesc_MseRank_2eproto();
  }
} static_descriptor_initializer_MseRank_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int SingleRankItem::kNameFieldNumber;
const int SingleRankItem::kUidFieldNumber;
const int SingleRankItem::kNumFieldNumber;
const int SingleRankItem::kUidStrFieldNumber;
const int SingleRankItem::kUrlFieldNumber;
const int SingleRankItem::kWaveFieldNumber;
#endif  // !_MSC_VER

SingleRankItem::SingleRankItem()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleRankItem)
}

void SingleRankItem::InitAsDefaultInstance() {
}

SingleRankItem::SingleRankItem(const SingleRankItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleRankItem)
}

void SingleRankItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  uid_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wave_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleRankItem::~SingleRankItem() {
  // @@protoc_insertion_point(destructor:SingleRankItem)
  SharedDtor();
}

void SingleRankItem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SingleRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleRankItem_descriptor_;
}

const SingleRankItem& SingleRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MseRank_2eproto();
  return *default_instance_;
}

SingleRankItem* SingleRankItem::default_instance_ = NULL;

SingleRankItem* SingleRankItem::New(::google::protobuf::Arena* arena) const {
  SingleRankItem* n = new SingleRankItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleRankItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SingleRankItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(num_, wave_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    uid_ = GOOGLE_LONGLONG(0);
    if (has_uid_str()) {
      uid_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SingleRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SingleRankItem.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uid_str;
        break;
      }

      // optional string uid_str = 4;
      case 4: {
        if (tag == 34) {
         parse_uid_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid_str().data(), this->uid_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SingleRankItem.uid_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }

      // optional string url = 5;
      case 5: {
        if (tag == 42) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SingleRankItem.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_wave;
        break;
      }

      // optional int32 wave = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleRankItem)
  return false;
#undef DO_
}

void SingleRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleRankItem)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SingleRankItem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional string uid_str = 4;
  if (has_uid_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid_str().data(), this->uid_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SingleRankItem.uid_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uid_str(), output);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SingleRankItem.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  // optional int32 wave = 6 [default = 0];
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wave(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleRankItem)
}

::google::protobuf::uint8* SingleRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleRankItem)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SingleRankItem.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional string uid_str = 4;
  if (has_uid_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid_str().data(), this->uid_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SingleRankItem.uid_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid_str(), target);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SingleRankItem.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }

  // optional int32 wave = 6 [default = 0];
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wave(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleRankItem)
  return target;
}

int SingleRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional string uid_str = 4;
    if (has_uid_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid_str());
    }

    // optional string url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 wave = 6 [default = 0];
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SingleRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleRankItem::MergeFrom(const SingleRankItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_uid_str()) {
      set_has_uid_str();
      uid_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_str_);
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SingleRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleRankItem::CopyFrom(const SingleRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleRankItem::IsInitialized() const {

  return true;
}

void SingleRankItem::Swap(SingleRankItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleRankItem::InternalSwap(SingleRankItem* other) {
  name_.Swap(&other->name_);
  std::swap(uid_, other->uid_);
  std::swap(num_, other->num_);
  uid_str_.Swap(&other->uid_str_);
  url_.Swap(&other->url_);
  std::swap(wave_, other->wave_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleRankItem_descriptor_;
  metadata.reflection = SingleRankItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleRankItem

// optional string name = 1;
 bool SingleRankItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void SingleRankItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void SingleRankItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void SingleRankItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& SingleRankItem::name() const {
  // @@protoc_insertion_point(field_get:SingleRankItem.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleRankItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SingleRankItem.name)
}
 void SingleRankItem::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SingleRankItem.name)
}
 void SingleRankItem::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SingleRankItem.name)
}
 ::std::string* SingleRankItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SingleRankItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SingleRankItem::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleRankItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SingleRankItem.name)
}

// optional int64 uid = 2;
 bool SingleRankItem::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void SingleRankItem::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
 void SingleRankItem::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void SingleRankItem::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 SingleRankItem::uid() const {
  // @@protoc_insertion_point(field_get:SingleRankItem.uid)
  return uid_;
}
 void SingleRankItem::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:SingleRankItem.uid)
}

// optional int32 num = 3;
 bool SingleRankItem::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void SingleRankItem::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
 void SingleRankItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
 void SingleRankItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
 ::google::protobuf::int32 SingleRankItem::num() const {
  // @@protoc_insertion_point(field_get:SingleRankItem.num)
  return num_;
}
 void SingleRankItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:SingleRankItem.num)
}

// optional string uid_str = 4;
 bool SingleRankItem::has_uid_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void SingleRankItem::set_has_uid_str() {
  _has_bits_[0] |= 0x00000008u;
}
 void SingleRankItem::clear_has_uid_str() {
  _has_bits_[0] &= ~0x00000008u;
}
 void SingleRankItem::clear_uid_str() {
  uid_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid_str();
}
 const ::std::string& SingleRankItem::uid_str() const {
  // @@protoc_insertion_point(field_get:SingleRankItem.uid_str)
  return uid_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleRankItem::set_uid_str(const ::std::string& value) {
  set_has_uid_str();
  uid_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SingleRankItem.uid_str)
}
 void SingleRankItem::set_uid_str(const char* value) {
  set_has_uid_str();
  uid_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SingleRankItem.uid_str)
}
 void SingleRankItem::set_uid_str(const char* value, size_t size) {
  set_has_uid_str();
  uid_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SingleRankItem.uid_str)
}
 ::std::string* SingleRankItem::mutable_uid_str() {
  set_has_uid_str();
  // @@protoc_insertion_point(field_mutable:SingleRankItem.uid_str)
  return uid_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SingleRankItem::release_uid_str() {
  clear_has_uid_str();
  return uid_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleRankItem::set_allocated_uid_str(::std::string* uid_str) {
  if (uid_str != NULL) {
    set_has_uid_str();
  } else {
    clear_has_uid_str();
  }
  uid_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid_str);
  // @@protoc_insertion_point(field_set_allocated:SingleRankItem.uid_str)
}

// optional string url = 5;
 bool SingleRankItem::has_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void SingleRankItem::set_has_url() {
  _has_bits_[0] |= 0x00000010u;
}
 void SingleRankItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000010u;
}
 void SingleRankItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& SingleRankItem::url() const {
  // @@protoc_insertion_point(field_get:SingleRankItem.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleRankItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SingleRankItem.url)
}
 void SingleRankItem::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SingleRankItem.url)
}
 void SingleRankItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SingleRankItem.url)
}
 ::std::string* SingleRankItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:SingleRankItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SingleRankItem::release_url() {
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleRankItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:SingleRankItem.url)
}

// optional int32 wave = 6 [default = 0];
 bool SingleRankItem::has_wave() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void SingleRankItem::set_has_wave() {
  _has_bits_[0] |= 0x00000020u;
}
 void SingleRankItem::clear_has_wave() {
  _has_bits_[0] &= ~0x00000020u;
}
 void SingleRankItem::clear_wave() {
  wave_ = 0;
  clear_has_wave();
}
 ::google::protobuf::int32 SingleRankItem::wave() const {
  // @@protoc_insertion_point(field_get:SingleRankItem.wave)
  return wave_;
}
 void SingleRankItem::set_wave(::google::protobuf::int32 value) {
  set_has_wave();
  wave_ = value;
  // @@protoc_insertion_point(field_set:SingleRankItem.wave)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MseRank::kRankTypeFieldNumber;
const int MseRank::kRankItemFieldNumber;
const int MseRank::kRankVersionFieldNumber;
const int MseRank::kRanknameFieldNumber;
const int MseRank::kOpernumFieldNumber;
const int MseRank::kRankNumFieldNumber;
#endif  // !_MSC_VER

MseRank::MseRank()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MseRank)
}

void MseRank::InitAsDefaultInstance() {
  rank_item_ = const_cast< ::SingleRankItem*>(&::SingleRankItem::default_instance());
}

MseRank::MseRank(const MseRank& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MseRank)
}

void MseRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rank_type_ = 0;
  rank_item_ = NULL;
  rank_version_ = GOOGLE_LONGLONG(0);
  rankname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opernum_ = 0;
  rank_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MseRank::~MseRank() {
  // @@protoc_insertion_point(destructor:MseRank)
  SharedDtor();
}

void MseRank::SharedDtor() {
  rankname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete rank_item_;
  }
}

void MseRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MseRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MseRank_descriptor_;
}

const MseRank& MseRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MseRank_2eproto();
  return *default_instance_;
}

MseRank* MseRank::default_instance_ = NULL;

MseRank* MseRank::New(::google::protobuf::Arena* arena) const {
  MseRank* n = new MseRank;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MseRank::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MseRank*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(rank_version_, opernum_);
    if (has_rank_item()) {
      if (rank_item_ != NULL) rank_item_->::SingleRankItem::Clear();
    }
    if (has_rankname()) {
      rankname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    rank_num_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MseRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MseRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rank_item;
        break;
      }

      // optional .SingleRankItem rank_item = 2;
      case 2: {
        if (tag == 18) {
         parse_rank_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rank_version;
        break;
      }

      // optional int64 rank_version = 3;
      case 3: {
        if (tag == 24) {
         parse_rank_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rank_version_)));
          set_has_rank_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rankname;
        break;
      }

      // optional string rankname = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_rankname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rankname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rankname().data(), this->rankname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MseRank.rankname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_opernum;
        break;
      }

      // optional int32 opernum = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_opernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opernum_)));
          set_has_opernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rank_num;
        break;
      }

      // optional int32 rank_num = 6;
      case 6: {
        if (tag == 48) {
         parse_rank_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_num_)));
          set_has_rank_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MseRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MseRank)
  return false;
#undef DO_
}

void MseRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MseRank)
  // optional int32 rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank_type(), output);
  }

  // optional .SingleRankItem rank_item = 2;
  if (has_rank_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rank_item_, output);
  }

  // optional int64 rank_version = 3;
  if (has_rank_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rank_version(), output);
  }

  // optional string rankname = 4 [default = ""];
  if (has_rankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rankname().data(), this->rankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MseRank.rankname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rankname(), output);
  }

  // optional int32 opernum = 5 [default = 0];
  if (has_opernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->opernum(), output);
  }

  // optional int32 rank_num = 6;
  if (has_rank_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rank_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MseRank)
}

::google::protobuf::uint8* MseRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MseRank)
  // optional int32 rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank_type(), target);
  }

  // optional .SingleRankItem rank_item = 2;
  if (has_rank_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->rank_item_, target);
  }

  // optional int64 rank_version = 3;
  if (has_rank_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rank_version(), target);
  }

  // optional string rankname = 4 [default = ""];
  if (has_rankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rankname().data(), this->rankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MseRank.rankname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rankname(), target);
  }

  // optional int32 opernum = 5 [default = 0];
  if (has_opernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->opernum(), target);
  }

  // optional int32 rank_num = 6;
  if (has_rank_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rank_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MseRank)
  return target;
}

int MseRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63) {
    // optional int32 rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_type());
    }

    // optional .SingleRankItem rank_item = 2;
    if (has_rank_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rank_item_);
    }

    // optional int64 rank_version = 3;
    if (has_rank_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rank_version());
    }

    // optional string rankname = 4 [default = ""];
    if (has_rankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rankname());
    }

    // optional int32 opernum = 5 [default = 0];
    if (has_opernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opernum());
    }

    // optional int32 rank_num = 6;
    if (has_rank_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_num());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MseRank::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MseRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MseRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MseRank::MergeFrom(const MseRank& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_rank_item()) {
      mutable_rank_item()->::SingleRankItem::MergeFrom(from.rank_item());
    }
    if (from.has_rank_version()) {
      set_rank_version(from.rank_version());
    }
    if (from.has_rankname()) {
      set_has_rankname();
      rankname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rankname_);
    }
    if (from.has_opernum()) {
      set_opernum(from.opernum());
    }
    if (from.has_rank_num()) {
      set_rank_num(from.rank_num());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MseRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MseRank::CopyFrom(const MseRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MseRank::IsInitialized() const {

  return true;
}

void MseRank::Swap(MseRank* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MseRank::InternalSwap(MseRank* other) {
  std::swap(rank_type_, other->rank_type_);
  std::swap(rank_item_, other->rank_item_);
  std::swap(rank_version_, other->rank_version_);
  rankname_.Swap(&other->rankname_);
  std::swap(opernum_, other->opernum_);
  std::swap(rank_num_, other->rank_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MseRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MseRank_descriptor_;
  metadata.reflection = MseRank_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MseRank

// optional int32 rank_type = 1;
 bool MseRank::has_rank_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MseRank::set_has_rank_type() {
  _has_bits_[0] |= 0x00000001u;
}
 void MseRank::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MseRank::clear_rank_type() {
  rank_type_ = 0;
  clear_has_rank_type();
}
 ::google::protobuf::int32 MseRank::rank_type() const {
  // @@protoc_insertion_point(field_get:MseRank.rank_type)
  return rank_type_;
}
 void MseRank::set_rank_type(::google::protobuf::int32 value) {
  set_has_rank_type();
  rank_type_ = value;
  // @@protoc_insertion_point(field_set:MseRank.rank_type)
}

// optional .SingleRankItem rank_item = 2;
 bool MseRank::has_rank_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MseRank::set_has_rank_item() {
  _has_bits_[0] |= 0x00000002u;
}
 void MseRank::clear_has_rank_item() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MseRank::clear_rank_item() {
  if (rank_item_ != NULL) rank_item_->::SingleRankItem::Clear();
  clear_has_rank_item();
}
 const ::SingleRankItem& MseRank::rank_item() const {
  // @@protoc_insertion_point(field_get:MseRank.rank_item)
  return rank_item_ != NULL ? *rank_item_ : *default_instance_->rank_item_;
}
 ::SingleRankItem* MseRank::mutable_rank_item() {
  set_has_rank_item();
  if (rank_item_ == NULL) {
    rank_item_ = new ::SingleRankItem;
  }
  // @@protoc_insertion_point(field_mutable:MseRank.rank_item)
  return rank_item_;
}
 ::SingleRankItem* MseRank::release_rank_item() {
  clear_has_rank_item();
  ::SingleRankItem* temp = rank_item_;
  rank_item_ = NULL;
  return temp;
}
 void MseRank::set_allocated_rank_item(::SingleRankItem* rank_item) {
  delete rank_item_;
  rank_item_ = rank_item;
  if (rank_item) {
    set_has_rank_item();
  } else {
    clear_has_rank_item();
  }
  // @@protoc_insertion_point(field_set_allocated:MseRank.rank_item)
}

// optional int64 rank_version = 3;
 bool MseRank::has_rank_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void MseRank::set_has_rank_version() {
  _has_bits_[0] |= 0x00000004u;
}
 void MseRank::clear_has_rank_version() {
  _has_bits_[0] &= ~0x00000004u;
}
 void MseRank::clear_rank_version() {
  rank_version_ = GOOGLE_LONGLONG(0);
  clear_has_rank_version();
}
 ::google::protobuf::int64 MseRank::rank_version() const {
  // @@protoc_insertion_point(field_get:MseRank.rank_version)
  return rank_version_;
}
 void MseRank::set_rank_version(::google::protobuf::int64 value) {
  set_has_rank_version();
  rank_version_ = value;
  // @@protoc_insertion_point(field_set:MseRank.rank_version)
}

// optional string rankname = 4 [default = ""];
 bool MseRank::has_rankname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void MseRank::set_has_rankname() {
  _has_bits_[0] |= 0x00000008u;
}
 void MseRank::clear_has_rankname() {
  _has_bits_[0] &= ~0x00000008u;
}
 void MseRank::clear_rankname() {
  rankname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rankname();
}
 const ::std::string& MseRank::rankname() const {
  // @@protoc_insertion_point(field_get:MseRank.rankname)
  return rankname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MseRank::set_rankname(const ::std::string& value) {
  set_has_rankname();
  rankname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MseRank.rankname)
}
 void MseRank::set_rankname(const char* value) {
  set_has_rankname();
  rankname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MseRank.rankname)
}
 void MseRank::set_rankname(const char* value, size_t size) {
  set_has_rankname();
  rankname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MseRank.rankname)
}
 ::std::string* MseRank::mutable_rankname() {
  set_has_rankname();
  // @@protoc_insertion_point(field_mutable:MseRank.rankname)
  return rankname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MseRank::release_rankname() {
  clear_has_rankname();
  return rankname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MseRank::set_allocated_rankname(::std::string* rankname) {
  if (rankname != NULL) {
    set_has_rankname();
  } else {
    clear_has_rankname();
  }
  rankname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rankname);
  // @@protoc_insertion_point(field_set_allocated:MseRank.rankname)
}

// optional int32 opernum = 5 [default = 0];
 bool MseRank::has_opernum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void MseRank::set_has_opernum() {
  _has_bits_[0] |= 0x00000010u;
}
 void MseRank::clear_has_opernum() {
  _has_bits_[0] &= ~0x00000010u;
}
 void MseRank::clear_opernum() {
  opernum_ = 0;
  clear_has_opernum();
}
 ::google::protobuf::int32 MseRank::opernum() const {
  // @@protoc_insertion_point(field_get:MseRank.opernum)
  return opernum_;
}
 void MseRank::set_opernum(::google::protobuf::int32 value) {
  set_has_opernum();
  opernum_ = value;
  // @@protoc_insertion_point(field_set:MseRank.opernum)
}

// optional int32 rank_num = 6;
 bool MseRank::has_rank_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void MseRank::set_has_rank_num() {
  _has_bits_[0] |= 0x00000020u;
}
 void MseRank::clear_has_rank_num() {
  _has_bits_[0] &= ~0x00000020u;
}
 void MseRank::clear_rank_num() {
  rank_num_ = 0;
  clear_has_rank_num();
}
 ::google::protobuf::int32 MseRank::rank_num() const {
  // @@protoc_insertion_point(field_get:MseRank.rank_num)
  return rank_num_;
}
 void MseRank::set_rank_num(::google::protobuf::int32 value) {
  set_has_rank_num();
  rank_num_ = value;
  // @@protoc_insertion_point(field_set:MseRank.rank_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
