// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MseFriendList.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MseFriendList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MseFriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MseFriendList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MseFriendList_2eproto() {
  protobuf_AddDesc_MseFriendList_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MseFriendList.proto");
  GOOGLE_CHECK(file != NULL);
  MseFriendList_descriptor_ = file->message_type(0);
  static const int MseFriendList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseFriendList, jsonresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseFriendList, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseFriendList, dbm_),
  };
  MseFriendList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MseFriendList_descriptor_,
      MseFriendList::default_instance_,
      MseFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseFriendList, _has_bits_[0]),
      -1,
      -1,
      sizeof(MseFriendList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseFriendList, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MseFriendList_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MseFriendList_descriptor_, &MseFriendList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MseFriendList_2eproto() {
  delete MseFriendList::default_instance_;
  delete MseFriendList_reflection_;
}

void protobuf_AddDesc_MseFriendList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MseFriendList.proto\"=\n\rMseFriendList\022\022"
    "\n\nJsonResult\030\004 \001(\t\022\013\n\003err\030\005 \001(\005\022\013\n\003dbm\030\006"
    " \001(\t", 84);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MseFriendList.proto", &protobuf_RegisterTypes);
  MseFriendList::default_instance_ = new MseFriendList();
  MseFriendList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MseFriendList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MseFriendList_2eproto {
  StaticDescriptorInitializer_MseFriendList_2eproto() {
    protobuf_AddDesc_MseFriendList_2eproto();
  }
} static_descriptor_initializer_MseFriendList_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int MseFriendList::kJsonResultFieldNumber;
const int MseFriendList::kErrFieldNumber;
const int MseFriendList::kDbmFieldNumber;
#endif  // !_MSC_VER

MseFriendList::MseFriendList()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MseFriendList)
}

void MseFriendList::InitAsDefaultInstance() {
}

MseFriendList::MseFriendList(const MseFriendList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MseFriendList)
}

void MseFriendList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  jsonresult_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_ = 0;
  dbm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MseFriendList::~MseFriendList() {
  // @@protoc_insertion_point(destructor:MseFriendList)
  SharedDtor();
}

void MseFriendList::SharedDtor() {
  jsonresult_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MseFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MseFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MseFriendList_descriptor_;
}

const MseFriendList& MseFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MseFriendList_2eproto();
  return *default_instance_;
}

MseFriendList* MseFriendList::default_instance_ = NULL;

MseFriendList* MseFriendList::New(::google::protobuf::Arena* arena) const {
  MseFriendList* n = new MseFriendList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MseFriendList::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_jsonresult()) {
      jsonresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    err_ = 0;
    if (has_dbm()) {
      dbm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MseFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MseFriendList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string JsonResult = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonresult()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jsonresult().data(), this->jsonresult().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MseFriendList.JsonResult");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_err;
        break;
      }

      // optional int32 err = 5;
      case 5: {
        if (tag == 40) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dbm;
        break;
      }

      // optional string dbm = 6;
      case 6: {
        if (tag == 50) {
         parse_dbm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbm().data(), this->dbm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MseFriendList.dbm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MseFriendList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MseFriendList)
  return false;
#undef DO_
}

void MseFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MseFriendList)
  // optional string JsonResult = 4;
  if (has_jsonresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsonresult().data(), this->jsonresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MseFriendList.JsonResult");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->jsonresult(), output);
  }

  // optional int32 err = 5;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->err(), output);
  }

  // optional string dbm = 6;
  if (has_dbm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbm().data(), this->dbm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MseFriendList.dbm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dbm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MseFriendList)
}

::google::protobuf::uint8* MseFriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MseFriendList)
  // optional string JsonResult = 4;
  if (has_jsonresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsonresult().data(), this->jsonresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MseFriendList.JsonResult");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jsonresult(), target);
  }

  // optional int32 err = 5;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->err(), target);
  }

  // optional string dbm = 6;
  if (has_dbm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbm().data(), this->dbm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MseFriendList.dbm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dbm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MseFriendList)
  return target;
}

int MseFriendList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional string JsonResult = 4;
    if (has_jsonresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonresult());
    }

    // optional int32 err = 5;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional string dbm = 6;
    if (has_dbm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbm());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MseFriendList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MseFriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MseFriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MseFriendList::MergeFrom(const MseFriendList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jsonresult()) {
      set_has_jsonresult();
      jsonresult_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jsonresult_);
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_dbm()) {
      set_has_dbm();
      dbm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbm_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MseFriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MseFriendList::CopyFrom(const MseFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MseFriendList::IsInitialized() const {

  return true;
}

void MseFriendList::Swap(MseFriendList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MseFriendList::InternalSwap(MseFriendList* other) {
  jsonresult_.Swap(&other->jsonresult_);
  std::swap(err_, other->err_);
  dbm_.Swap(&other->dbm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MseFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MseFriendList_descriptor_;
  metadata.reflection = MseFriendList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MseFriendList

// optional string JsonResult = 4;
 bool MseFriendList::has_jsonresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MseFriendList::set_has_jsonresult() {
  _has_bits_[0] |= 0x00000001u;
}
 void MseFriendList::clear_has_jsonresult() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MseFriendList::clear_jsonresult() {
  jsonresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_jsonresult();
}
 const ::std::string& MseFriendList::jsonresult() const {
  // @@protoc_insertion_point(field_get:MseFriendList.JsonResult)
  return jsonresult_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MseFriendList::set_jsonresult(const ::std::string& value) {
  set_has_jsonresult();
  jsonresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MseFriendList.JsonResult)
}
 void MseFriendList::set_jsonresult(const char* value) {
  set_has_jsonresult();
  jsonresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MseFriendList.JsonResult)
}
 void MseFriendList::set_jsonresult(const char* value, size_t size) {
  set_has_jsonresult();
  jsonresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MseFriendList.JsonResult)
}
 ::std::string* MseFriendList::mutable_jsonresult() {
  set_has_jsonresult();
  // @@protoc_insertion_point(field_mutable:MseFriendList.JsonResult)
  return jsonresult_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MseFriendList::release_jsonresult() {
  clear_has_jsonresult();
  return jsonresult_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MseFriendList::set_allocated_jsonresult(::std::string* jsonresult) {
  if (jsonresult != NULL) {
    set_has_jsonresult();
  } else {
    clear_has_jsonresult();
  }
  jsonresult_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jsonresult);
  // @@protoc_insertion_point(field_set_allocated:MseFriendList.JsonResult)
}

// optional int32 err = 5;
 bool MseFriendList::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MseFriendList::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
 void MseFriendList::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MseFriendList::clear_err() {
  err_ = 0;
  clear_has_err();
}
 ::google::protobuf::int32 MseFriendList::err() const {
  // @@protoc_insertion_point(field_get:MseFriendList.err)
  return err_;
}
 void MseFriendList::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:MseFriendList.err)
}

// optional string dbm = 6;
 bool MseFriendList::has_dbm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void MseFriendList::set_has_dbm() {
  _has_bits_[0] |= 0x00000004u;
}
 void MseFriendList::clear_has_dbm() {
  _has_bits_[0] &= ~0x00000004u;
}
 void MseFriendList::clear_dbm() {
  dbm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dbm();
}
 const ::std::string& MseFriendList::dbm() const {
  // @@protoc_insertion_point(field_get:MseFriendList.dbm)
  return dbm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MseFriendList::set_dbm(const ::std::string& value) {
  set_has_dbm();
  dbm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MseFriendList.dbm)
}
 void MseFriendList::set_dbm(const char* value) {
  set_has_dbm();
  dbm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MseFriendList.dbm)
}
 void MseFriendList::set_dbm(const char* value, size_t size) {
  set_has_dbm();
  dbm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MseFriendList.dbm)
}
 ::std::string* MseFriendList::mutable_dbm() {
  set_has_dbm();
  // @@protoc_insertion_point(field_mutable:MseFriendList.dbm)
  return dbm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MseFriendList::release_dbm() {
  clear_has_dbm();
  return dbm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MseFriendList::set_allocated_dbm(::std::string* dbm) {
  if (dbm != NULL) {
    set_has_dbm();
  } else {
    clear_has_dbm();
  }
  dbm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbm);
  // @@protoc_insertion_point(field_set_allocated:MseFriendList.dbm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
