// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendInfoLite.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FriendInfoLite.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FriendInfoLite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfoLite_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FriendInfoLite_2eproto() {
  protobuf_AddDesc_FriendInfoLite_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FriendInfoLite.proto");
  GOOGLE_CHECK(file != NULL);
  FriendInfoLite_descriptor_ = file->message_type(0);
  static const int FriendInfoLite_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, friendtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, isyellowdmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, isyellowdmdyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, yellowdmdlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, lastlogtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, lastlogtimestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, qpcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, lvlscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, jsonstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, dallytotalsocre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, update_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, dallylvlscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, total_stars_),
  };
  FriendInfoLite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FriendInfoLite_descriptor_,
      FriendInfoLite::default_instance_,
      FriendInfoLite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, _has_bits_[0]),
      -1,
      -1,
      sizeof(FriendInfoLite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoLite, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FriendInfoLite_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FriendInfoLite_descriptor_, &FriendInfoLite::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FriendInfoLite_2eproto() {
  delete FriendInfoLite::default_instance_;
  delete FriendInfoLite_reflection_;
}

void protobuf_AddDesc_FriendInfoLite_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024FriendInfoLite.proto\"\225\003\n\016FriendInfoLit"
    "e\022\013\n\003uid\030\001 \002(\t\022\020\n\010nickName\030\002 \002(\t\022\r\n\005leve"
    "l\030\003 \002(\r\022\016\n\006openid\030\007 \002(\t\022\017\n\007headurl\030\010 \002(\t"
    "\022\025\n\nfriendtype\030\t \001(\005:\0010\022\032\n\013isYellowDmd\030\013"
    " \001(\010:\005false\022\036\n\017isYellowDmdYear\030\014 \001(\010:\005fa"
    "lse\022\027\n\014YellowDmdLvl\030\r \001(\005:\0010\022\027\n\013lastLogT"
    "ime\030\027 \001(\003:\002-1\022\030\n\016lastLogTimeStr\030\030 \001(\t:\000\022"
    "\017\n\007QPCount\030\031 \001(\005\022\021\n\tlvlscores\030\032 \003(\005\022\021\n\007j"
    "sonstr\030\016 \001(\t:\000\022\032\n\017dallytotalsocre\030\017 \001(\005:"
    "\0010\022\025\n\nupdate_day\030\020 \001(\005:\0010\022\026\n\016dallylvlsco"
    "res\030\021 \003(\005\022\023\n\013total_stars\030\022 \001(\005", 430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FriendInfoLite.proto", &protobuf_RegisterTypes);
  FriendInfoLite::default_instance_ = new FriendInfoLite();
  FriendInfoLite::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FriendInfoLite_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FriendInfoLite_2eproto {
  StaticDescriptorInitializer_FriendInfoLite_2eproto() {
    protobuf_AddDesc_FriendInfoLite_2eproto();
  }
} static_descriptor_initializer_FriendInfoLite_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int FriendInfoLite::kUidFieldNumber;
const int FriendInfoLite::kNickNameFieldNumber;
const int FriendInfoLite::kLevelFieldNumber;
const int FriendInfoLite::kOpenidFieldNumber;
const int FriendInfoLite::kHeadurlFieldNumber;
const int FriendInfoLite::kFriendtypeFieldNumber;
const int FriendInfoLite::kIsYellowDmdFieldNumber;
const int FriendInfoLite::kIsYellowDmdYearFieldNumber;
const int FriendInfoLite::kYellowDmdLvlFieldNumber;
const int FriendInfoLite::kLastLogTimeFieldNumber;
const int FriendInfoLite::kLastLogTimeStrFieldNumber;
const int FriendInfoLite::kQPCountFieldNumber;
const int FriendInfoLite::kLvlscoresFieldNumber;
const int FriendInfoLite::kJsonstrFieldNumber;
const int FriendInfoLite::kDallytotalsocreFieldNumber;
const int FriendInfoLite::kUpdateDayFieldNumber;
const int FriendInfoLite::kDallylvlscoresFieldNumber;
const int FriendInfoLite::kTotalStarsFieldNumber;
#endif  // !_MSC_VER

FriendInfoLite::FriendInfoLite()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendInfoLite)
}

void FriendInfoLite::InitAsDefaultInstance() {
}

FriendInfoLite::FriendInfoLite(const FriendInfoLite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FriendInfoLite)
}

void FriendInfoLite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendtype_ = 0;
  isyellowdmd_ = false;
  isyellowdmdyear_ = false;
  yellowdmdlvl_ = 0;
  lastlogtime_ = GOOGLE_LONGLONG(-1);
  lastlogtimestr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qpcount_ = 0;
  jsonstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dallytotalsocre_ = 0;
  update_day_ = 0;
  total_stars_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfoLite::~FriendInfoLite() {
  // @@protoc_insertion_point(destructor:FriendInfoLite)
  SharedDtor();
}

void FriendInfoLite::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastlogtimestr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jsonstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FriendInfoLite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfoLite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfoLite_descriptor_;
}

const FriendInfoLite& FriendInfoLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendInfoLite_2eproto();
  return *default_instance_;
}

FriendInfoLite* FriendInfoLite::default_instance_ = NULL;

FriendInfoLite* FriendInfoLite::New(::google::protobuf::Arena* arena) const {
  FriendInfoLite* n = new FriendInfoLite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendInfoLite::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FriendInfoLite*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(level_, friendtype_);
    ZR_(isyellowdmd_, isyellowdmdyear_);
    if (has_uid()) {
      uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_headurl()) {
      headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 61184) {
    ZR_(qpcount_, dallytotalsocre_);
    yellowdmdlvl_ = 0;
    lastlogtime_ = GOOGLE_LONGLONG(-1);
    if (has_lastlogtimestr()) {
      lastlogtimestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_jsonstr()) {
      jsonstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    update_day_ = 0;
  }
  total_stars_ = 0;

#undef ZR_HELPER_
#undef ZR_

  lvlscores_.Clear();
  dallylvlscores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FriendInfoLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendInfoLite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendInfoLite.uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // required string nickName = 2;
      case 2: {
        if (tag == 18) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendInfoLite.nickName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_openid;
        break;
      }

      // required string openid = 7;
      case 7: {
        if (tag == 58) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendInfoLite.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_headurl;
        break;
      }

      // required string headurl = 8;
      case 8: {
        if (tag == 66) {
         parse_headurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendInfoLite.headurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_friendtype;
        break;
      }

      // optional int32 friendtype = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_friendtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendtype_)));
          set_has_friendtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_isYellowDmd;
        break;
      }

      // optional bool isYellowDmd = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_isYellowDmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isyellowdmd_)));
          set_has_isyellowdmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_isYellowDmdYear;
        break;
      }

      // optional bool isYellowDmdYear = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_isYellowDmdYear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isyellowdmdyear_)));
          set_has_isyellowdmdyear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_YellowDmdLvl;
        break;
      }

      // optional int32 YellowDmdLvl = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_YellowDmdLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yellowdmdlvl_)));
          set_has_yellowdmdlvl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_jsonstr;
        break;
      }

      // optional string jsonstr = 14 [default = ""];
      case 14: {
        if (tag == 114) {
         parse_jsonstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jsonstr().data(), this->jsonstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendInfoLite.jsonstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_dallytotalsocre;
        break;
      }

      // optional int32 dallytotalsocre = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_dallytotalsocre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dallytotalsocre_)));
          set_has_dallytotalsocre();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_update_day;
        break;
      }

      // optional int32 update_day = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_update_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_day_)));
          set_has_update_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_dallylvlscores;
        break;
      }

      // repeated int32 dallylvlscores = 17;
      case 17: {
        if (tag == 136) {
         parse_dallylvlscores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_dallylvlscores())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dallylvlscores())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_dallylvlscores;
        if (input->ExpectTag(144)) goto parse_total_stars;
        break;
      }

      // optional int32 total_stars = 18;
      case 18: {
        if (tag == 144) {
         parse_total_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_stars_)));
          set_has_total_stars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_lastLogTime;
        break;
      }

      // optional int64 lastLogTime = 23 [default = -1];
      case 23: {
        if (tag == 184) {
         parse_lastLogTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastlogtime_)));
          set_has_lastlogtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_lastLogTimeStr;
        break;
      }

      // optional string lastLogTimeStr = 24 [default = ""];
      case 24: {
        if (tag == 194) {
         parse_lastLogTimeStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastlogtimestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastlogtimestr().data(), this->lastlogtimestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendInfoLite.lastLogTimeStr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_QPCount;
        break;
      }

      // optional int32 QPCount = 25;
      case 25: {
        if (tag == 200) {
         parse_QPCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qpcount_)));
          set_has_qpcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_lvlscores;
        break;
      }

      // repeated int32 lvlscores = 26;
      case 26: {
        if (tag == 208) {
         parse_lvlscores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 208, input, this->mutable_lvlscores())));
        } else if (tag == 210) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lvlscores())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_lvlscores;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendInfoLite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendInfoLite)
  return false;
#undef DO_
}

void FriendInfoLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendInfoLite)
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendInfoLite.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // required string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendInfoLite.nickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required string openid = 7;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendInfoLite.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->openid(), output);
  }

  // required string headurl = 8;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendInfoLite.headurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->headurl(), output);
  }

  // optional int32 friendtype = 9 [default = 0];
  if (has_friendtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->friendtype(), output);
  }

  // optional bool isYellowDmd = 11 [default = false];
  if (has_isyellowdmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isyellowdmd(), output);
  }

  // optional bool isYellowDmdYear = 12 [default = false];
  if (has_isyellowdmdyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isyellowdmdyear(), output);
  }

  // optional int32 YellowDmdLvl = 13 [default = 0];
  if (has_yellowdmdlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->yellowdmdlvl(), output);
  }

  // optional string jsonstr = 14 [default = ""];
  if (has_jsonstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsonstr().data(), this->jsonstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendInfoLite.jsonstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->jsonstr(), output);
  }

  // optional int32 dallytotalsocre = 15 [default = 0];
  if (has_dallytotalsocre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->dallytotalsocre(), output);
  }

  // optional int32 update_day = 16 [default = 0];
  if (has_update_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->update_day(), output);
  }

  // repeated int32 dallylvlscores = 17;
  for (int i = 0; i < this->dallylvlscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->dallylvlscores(i), output);
  }

  // optional int32 total_stars = 18;
  if (has_total_stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->total_stars(), output);
  }

  // optional int64 lastLogTime = 23 [default = -1];
  if (has_lastlogtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->lastlogtime(), output);
  }

  // optional string lastLogTimeStr = 24 [default = ""];
  if (has_lastlogtimestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastlogtimestr().data(), this->lastlogtimestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendInfoLite.lastLogTimeStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->lastlogtimestr(), output);
  }

  // optional int32 QPCount = 25;
  if (has_qpcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->qpcount(), output);
  }

  // repeated int32 lvlscores = 26;
  for (int i = 0; i < this->lvlscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      26, this->lvlscores(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendInfoLite)
}

::google::protobuf::uint8* FriendInfoLite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FriendInfoLite)
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendInfoLite.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // required string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendInfoLite.nickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required string openid = 7;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendInfoLite.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->openid(), target);
  }

  // required string headurl = 8;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendInfoLite.headurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->headurl(), target);
  }

  // optional int32 friendtype = 9 [default = 0];
  if (has_friendtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->friendtype(), target);
  }

  // optional bool isYellowDmd = 11 [default = false];
  if (has_isyellowdmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isyellowdmd(), target);
  }

  // optional bool isYellowDmdYear = 12 [default = false];
  if (has_isyellowdmdyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isyellowdmdyear(), target);
  }

  // optional int32 YellowDmdLvl = 13 [default = 0];
  if (has_yellowdmdlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->yellowdmdlvl(), target);
  }

  // optional string jsonstr = 14 [default = ""];
  if (has_jsonstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsonstr().data(), this->jsonstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendInfoLite.jsonstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->jsonstr(), target);
  }

  // optional int32 dallytotalsocre = 15 [default = 0];
  if (has_dallytotalsocre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->dallytotalsocre(), target);
  }

  // optional int32 update_day = 16 [default = 0];
  if (has_update_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->update_day(), target);
  }

  // repeated int32 dallylvlscores = 17;
  for (int i = 0; i < this->dallylvlscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->dallylvlscores(i), target);
  }

  // optional int32 total_stars = 18;
  if (has_total_stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->total_stars(), target);
  }

  // optional int64 lastLogTime = 23 [default = -1];
  if (has_lastlogtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->lastlogtime(), target);
  }

  // optional string lastLogTimeStr = 24 [default = ""];
  if (has_lastlogtimestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastlogtimestr().data(), this->lastlogtimestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendInfoLite.lastLogTimeStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->lastlogtimestr(), target);
  }

  // optional int32 QPCount = 25;
  if (has_qpcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->qpcount(), target);
  }

  // repeated int32 lvlscores = 26;
  for (int i = 0; i < this->lvlscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(26, this->lvlscores(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendInfoLite)
  return target;
}

int FriendInfoLite::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required string uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  if (has_nickname()) {
    // required string nickName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  if (has_level()) {
    // required uint32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  if (has_openid()) {
    // required string openid = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openid());
  }

  if (has_headurl()) {
    // required string headurl = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headurl());
  }

  return total_size;
}
int FriendInfoLite::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());

    // required string nickName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());

    // required uint32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());

    // required string openid = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openid());

    // required string headurl = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headurl());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 224) {
    // optional int32 friendtype = 9 [default = 0];
    if (has_friendtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendtype());
    }

    // optional bool isYellowDmd = 11 [default = false];
    if (has_isyellowdmd()) {
      total_size += 1 + 1;
    }

    // optional bool isYellowDmdYear = 12 [default = false];
    if (has_isyellowdmdyear()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 61184) {
    // optional int32 YellowDmdLvl = 13 [default = 0];
    if (has_yellowdmdlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yellowdmdlvl());
    }

    // optional int64 lastLogTime = 23 [default = -1];
    if (has_lastlogtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastlogtime());
    }

    // optional string lastLogTimeStr = 24 [default = ""];
    if (has_lastlogtimestr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastlogtimestr());
    }

    // optional int32 QPCount = 25;
    if (has_qpcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qpcount());
    }

    // optional string jsonstr = 14 [default = ""];
    if (has_jsonstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonstr());
    }

    // optional int32 dallytotalsocre = 15 [default = 0];
    if (has_dallytotalsocre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dallytotalsocre());
    }

    // optional int32 update_day = 16 [default = 0];
    if (has_update_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_day());
    }

  }
  // optional int32 total_stars = 18;
  if (has_total_stars()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_stars());
  }

  // repeated int32 lvlscores = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->lvlscores_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lvlscores(i));
    }
    total_size += 2 * this->lvlscores_size() + data_size;
  }

  // repeated int32 dallylvlscores = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->dallylvlscores_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dallylvlscores(i));
    }
    total_size += 2 * this->dallylvlscores_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfoLite::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FriendInfoLite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfoLite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendInfoLite::MergeFrom(const FriendInfoLite& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  lvlscores_.MergeFrom(from.lvlscores_);
  dallylvlscores_.MergeFrom(from.dallylvlscores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_headurl()) {
      set_has_headurl();
      headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
    }
    if (from.has_friendtype()) {
      set_friendtype(from.friendtype());
    }
    if (from.has_isyellowdmd()) {
      set_isyellowdmd(from.isyellowdmd());
    }
    if (from.has_isyellowdmdyear()) {
      set_isyellowdmdyear(from.isyellowdmdyear());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yellowdmdlvl()) {
      set_yellowdmdlvl(from.yellowdmdlvl());
    }
    if (from.has_lastlogtime()) {
      set_lastlogtime(from.lastlogtime());
    }
    if (from.has_lastlogtimestr()) {
      set_has_lastlogtimestr();
      lastlogtimestr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastlogtimestr_);
    }
    if (from.has_qpcount()) {
      set_qpcount(from.qpcount());
    }
    if (from.has_jsonstr()) {
      set_has_jsonstr();
      jsonstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jsonstr_);
    }
    if (from.has_dallytotalsocre()) {
      set_dallytotalsocre(from.dallytotalsocre());
    }
    if (from.has_update_day()) {
      set_update_day(from.update_day());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_total_stars()) {
      set_total_stars(from.total_stars());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FriendInfoLite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfoLite::CopyFrom(const FriendInfoLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfoLite::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FriendInfoLite::Swap(FriendInfoLite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendInfoLite::InternalSwap(FriendInfoLite* other) {
  uid_.Swap(&other->uid_);
  nickname_.Swap(&other->nickname_);
  std::swap(level_, other->level_);
  openid_.Swap(&other->openid_);
  headurl_.Swap(&other->headurl_);
  std::swap(friendtype_, other->friendtype_);
  std::swap(isyellowdmd_, other->isyellowdmd_);
  std::swap(isyellowdmdyear_, other->isyellowdmdyear_);
  std::swap(yellowdmdlvl_, other->yellowdmdlvl_);
  std::swap(lastlogtime_, other->lastlogtime_);
  lastlogtimestr_.Swap(&other->lastlogtimestr_);
  std::swap(qpcount_, other->qpcount_);
  lvlscores_.UnsafeArenaSwap(&other->lvlscores_);
  jsonstr_.Swap(&other->jsonstr_);
  std::swap(dallytotalsocre_, other->dallytotalsocre_);
  std::swap(update_day_, other->update_day_);
  dallylvlscores_.UnsafeArenaSwap(&other->dallylvlscores_);
  std::swap(total_stars_, other->total_stars_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendInfoLite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfoLite_descriptor_;
  metadata.reflection = FriendInfoLite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendInfoLite

// required string uid = 1;
 bool FriendInfoLite::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void FriendInfoLite::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void FriendInfoLite::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void FriendInfoLite::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
 const ::std::string& FriendInfoLite::uid() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfoLite::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.uid)
}
 void FriendInfoLite::set_uid(const char* value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendInfoLite.uid)
}
 void FriendInfoLite::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendInfoLite.uid)
}
 ::std::string* FriendInfoLite::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:FriendInfoLite.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FriendInfoLite::release_uid() {
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfoLite::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:FriendInfoLite.uid)
}

// required string nickName = 2;
 bool FriendInfoLite::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void FriendInfoLite::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
 void FriendInfoLite::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
 void FriendInfoLite::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& FriendInfoLite::nickname() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.nickName)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfoLite::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.nickName)
}
 void FriendInfoLite::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendInfoLite.nickName)
}
 void FriendInfoLite::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendInfoLite.nickName)
}
 ::std::string* FriendInfoLite::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:FriendInfoLite.nickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FriendInfoLite::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfoLite::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:FriendInfoLite.nickName)
}

// required uint32 level = 3;
 bool FriendInfoLite::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void FriendInfoLite::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
 void FriendInfoLite::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
 void FriendInfoLite::clear_level() {
  level_ = 0u;
  clear_has_level();
}
 ::google::protobuf::uint32 FriendInfoLite::level() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.level)
  return level_;
}
 void FriendInfoLite::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.level)
}

// required string openid = 7;
 bool FriendInfoLite::has_openid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void FriendInfoLite::set_has_openid() {
  _has_bits_[0] |= 0x00000008u;
}
 void FriendInfoLite::clear_has_openid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void FriendInfoLite::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& FriendInfoLite::openid() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfoLite::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.openid)
}
 void FriendInfoLite::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendInfoLite.openid)
}
 void FriendInfoLite::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendInfoLite.openid)
}
 ::std::string* FriendInfoLite::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:FriendInfoLite.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FriendInfoLite::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfoLite::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:FriendInfoLite.openid)
}

// required string headurl = 8;
 bool FriendInfoLite::has_headurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void FriendInfoLite::set_has_headurl() {
  _has_bits_[0] |= 0x00000010u;
}
 void FriendInfoLite::clear_has_headurl() {
  _has_bits_[0] &= ~0x00000010u;
}
 void FriendInfoLite::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headurl();
}
 const ::std::string& FriendInfoLite::headurl() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfoLite::set_headurl(const ::std::string& value) {
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.headurl)
}
 void FriendInfoLite::set_headurl(const char* value) {
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendInfoLite.headurl)
}
 void FriendInfoLite::set_headurl(const char* value, size_t size) {
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendInfoLite.headurl)
}
 ::std::string* FriendInfoLite::mutable_headurl() {
  set_has_headurl();
  // @@protoc_insertion_point(field_mutable:FriendInfoLite.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FriendInfoLite::release_headurl() {
  clear_has_headurl();
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfoLite::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    set_has_headurl();
  } else {
    clear_has_headurl();
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:FriendInfoLite.headurl)
}

// optional int32 friendtype = 9 [default = 0];
 bool FriendInfoLite::has_friendtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void FriendInfoLite::set_has_friendtype() {
  _has_bits_[0] |= 0x00000020u;
}
 void FriendInfoLite::clear_has_friendtype() {
  _has_bits_[0] &= ~0x00000020u;
}
 void FriendInfoLite::clear_friendtype() {
  friendtype_ = 0;
  clear_has_friendtype();
}
 ::google::protobuf::int32 FriendInfoLite::friendtype() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.friendtype)
  return friendtype_;
}
 void FriendInfoLite::set_friendtype(::google::protobuf::int32 value) {
  set_has_friendtype();
  friendtype_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.friendtype)
}

// optional bool isYellowDmd = 11 [default = false];
 bool FriendInfoLite::has_isyellowdmd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void FriendInfoLite::set_has_isyellowdmd() {
  _has_bits_[0] |= 0x00000040u;
}
 void FriendInfoLite::clear_has_isyellowdmd() {
  _has_bits_[0] &= ~0x00000040u;
}
 void FriendInfoLite::clear_isyellowdmd() {
  isyellowdmd_ = false;
  clear_has_isyellowdmd();
}
 bool FriendInfoLite::isyellowdmd() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.isYellowDmd)
  return isyellowdmd_;
}
 void FriendInfoLite::set_isyellowdmd(bool value) {
  set_has_isyellowdmd();
  isyellowdmd_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.isYellowDmd)
}

// optional bool isYellowDmdYear = 12 [default = false];
 bool FriendInfoLite::has_isyellowdmdyear() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void FriendInfoLite::set_has_isyellowdmdyear() {
  _has_bits_[0] |= 0x00000080u;
}
 void FriendInfoLite::clear_has_isyellowdmdyear() {
  _has_bits_[0] &= ~0x00000080u;
}
 void FriendInfoLite::clear_isyellowdmdyear() {
  isyellowdmdyear_ = false;
  clear_has_isyellowdmdyear();
}
 bool FriendInfoLite::isyellowdmdyear() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.isYellowDmdYear)
  return isyellowdmdyear_;
}
 void FriendInfoLite::set_isyellowdmdyear(bool value) {
  set_has_isyellowdmdyear();
  isyellowdmdyear_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.isYellowDmdYear)
}

// optional int32 YellowDmdLvl = 13 [default = 0];
 bool FriendInfoLite::has_yellowdmdlvl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void FriendInfoLite::set_has_yellowdmdlvl() {
  _has_bits_[0] |= 0x00000100u;
}
 void FriendInfoLite::clear_has_yellowdmdlvl() {
  _has_bits_[0] &= ~0x00000100u;
}
 void FriendInfoLite::clear_yellowdmdlvl() {
  yellowdmdlvl_ = 0;
  clear_has_yellowdmdlvl();
}
 ::google::protobuf::int32 FriendInfoLite::yellowdmdlvl() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.YellowDmdLvl)
  return yellowdmdlvl_;
}
 void FriendInfoLite::set_yellowdmdlvl(::google::protobuf::int32 value) {
  set_has_yellowdmdlvl();
  yellowdmdlvl_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.YellowDmdLvl)
}

// optional int64 lastLogTime = 23 [default = -1];
 bool FriendInfoLite::has_lastlogtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void FriendInfoLite::set_has_lastlogtime() {
  _has_bits_[0] |= 0x00000200u;
}
 void FriendInfoLite::clear_has_lastlogtime() {
  _has_bits_[0] &= ~0x00000200u;
}
 void FriendInfoLite::clear_lastlogtime() {
  lastlogtime_ = GOOGLE_LONGLONG(-1);
  clear_has_lastlogtime();
}
 ::google::protobuf::int64 FriendInfoLite::lastlogtime() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.lastLogTime)
  return lastlogtime_;
}
 void FriendInfoLite::set_lastlogtime(::google::protobuf::int64 value) {
  set_has_lastlogtime();
  lastlogtime_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.lastLogTime)
}

// optional string lastLogTimeStr = 24 [default = ""];
 bool FriendInfoLite::has_lastlogtimestr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void FriendInfoLite::set_has_lastlogtimestr() {
  _has_bits_[0] |= 0x00000400u;
}
 void FriendInfoLite::clear_has_lastlogtimestr() {
  _has_bits_[0] &= ~0x00000400u;
}
 void FriendInfoLite::clear_lastlogtimestr() {
  lastlogtimestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lastlogtimestr();
}
 const ::std::string& FriendInfoLite::lastlogtimestr() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.lastLogTimeStr)
  return lastlogtimestr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfoLite::set_lastlogtimestr(const ::std::string& value) {
  set_has_lastlogtimestr();
  lastlogtimestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.lastLogTimeStr)
}
 void FriendInfoLite::set_lastlogtimestr(const char* value) {
  set_has_lastlogtimestr();
  lastlogtimestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendInfoLite.lastLogTimeStr)
}
 void FriendInfoLite::set_lastlogtimestr(const char* value, size_t size) {
  set_has_lastlogtimestr();
  lastlogtimestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendInfoLite.lastLogTimeStr)
}
 ::std::string* FriendInfoLite::mutable_lastlogtimestr() {
  set_has_lastlogtimestr();
  // @@protoc_insertion_point(field_mutable:FriendInfoLite.lastLogTimeStr)
  return lastlogtimestr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FriendInfoLite::release_lastlogtimestr() {
  clear_has_lastlogtimestr();
  return lastlogtimestr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfoLite::set_allocated_lastlogtimestr(::std::string* lastlogtimestr) {
  if (lastlogtimestr != NULL) {
    set_has_lastlogtimestr();
  } else {
    clear_has_lastlogtimestr();
  }
  lastlogtimestr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastlogtimestr);
  // @@protoc_insertion_point(field_set_allocated:FriendInfoLite.lastLogTimeStr)
}

// optional int32 QPCount = 25;
 bool FriendInfoLite::has_qpcount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void FriendInfoLite::set_has_qpcount() {
  _has_bits_[0] |= 0x00000800u;
}
 void FriendInfoLite::clear_has_qpcount() {
  _has_bits_[0] &= ~0x00000800u;
}
 void FriendInfoLite::clear_qpcount() {
  qpcount_ = 0;
  clear_has_qpcount();
}
 ::google::protobuf::int32 FriendInfoLite::qpcount() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.QPCount)
  return qpcount_;
}
 void FriendInfoLite::set_qpcount(::google::protobuf::int32 value) {
  set_has_qpcount();
  qpcount_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.QPCount)
}

// repeated int32 lvlscores = 26;
 int FriendInfoLite::lvlscores_size() const {
  return lvlscores_.size();
}
 void FriendInfoLite::clear_lvlscores() {
  lvlscores_.Clear();
}
 ::google::protobuf::int32 FriendInfoLite::lvlscores(int index) const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.lvlscores)
  return lvlscores_.Get(index);
}
 void FriendInfoLite::set_lvlscores(int index, ::google::protobuf::int32 value) {
  lvlscores_.Set(index, value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.lvlscores)
}
 void FriendInfoLite::add_lvlscores(::google::protobuf::int32 value) {
  lvlscores_.Add(value);
  // @@protoc_insertion_point(field_add:FriendInfoLite.lvlscores)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FriendInfoLite::lvlscores() const {
  // @@protoc_insertion_point(field_list:FriendInfoLite.lvlscores)
  return lvlscores_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FriendInfoLite::mutable_lvlscores() {
  // @@protoc_insertion_point(field_mutable_list:FriendInfoLite.lvlscores)
  return &lvlscores_;
}

// optional string jsonstr = 14 [default = ""];
 bool FriendInfoLite::has_jsonstr() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
 void FriendInfoLite::set_has_jsonstr() {
  _has_bits_[0] |= 0x00002000u;
}
 void FriendInfoLite::clear_has_jsonstr() {
  _has_bits_[0] &= ~0x00002000u;
}
 void FriendInfoLite::clear_jsonstr() {
  jsonstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_jsonstr();
}
 const ::std::string& FriendInfoLite::jsonstr() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.jsonstr)
  return jsonstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfoLite::set_jsonstr(const ::std::string& value) {
  set_has_jsonstr();
  jsonstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.jsonstr)
}
 void FriendInfoLite::set_jsonstr(const char* value) {
  set_has_jsonstr();
  jsonstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendInfoLite.jsonstr)
}
 void FriendInfoLite::set_jsonstr(const char* value, size_t size) {
  set_has_jsonstr();
  jsonstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendInfoLite.jsonstr)
}
 ::std::string* FriendInfoLite::mutable_jsonstr() {
  set_has_jsonstr();
  // @@protoc_insertion_point(field_mutable:FriendInfoLite.jsonstr)
  return jsonstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FriendInfoLite::release_jsonstr() {
  clear_has_jsonstr();
  return jsonstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfoLite::set_allocated_jsonstr(::std::string* jsonstr) {
  if (jsonstr != NULL) {
    set_has_jsonstr();
  } else {
    clear_has_jsonstr();
  }
  jsonstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jsonstr);
  // @@protoc_insertion_point(field_set_allocated:FriendInfoLite.jsonstr)
}

// optional int32 dallytotalsocre = 15 [default = 0];
 bool FriendInfoLite::has_dallytotalsocre() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
 void FriendInfoLite::set_has_dallytotalsocre() {
  _has_bits_[0] |= 0x00004000u;
}
 void FriendInfoLite::clear_has_dallytotalsocre() {
  _has_bits_[0] &= ~0x00004000u;
}
 void FriendInfoLite::clear_dallytotalsocre() {
  dallytotalsocre_ = 0;
  clear_has_dallytotalsocre();
}
 ::google::protobuf::int32 FriendInfoLite::dallytotalsocre() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.dallytotalsocre)
  return dallytotalsocre_;
}
 void FriendInfoLite::set_dallytotalsocre(::google::protobuf::int32 value) {
  set_has_dallytotalsocre();
  dallytotalsocre_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.dallytotalsocre)
}

// optional int32 update_day = 16 [default = 0];
 bool FriendInfoLite::has_update_day() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
 void FriendInfoLite::set_has_update_day() {
  _has_bits_[0] |= 0x00008000u;
}
 void FriendInfoLite::clear_has_update_day() {
  _has_bits_[0] &= ~0x00008000u;
}
 void FriendInfoLite::clear_update_day() {
  update_day_ = 0;
  clear_has_update_day();
}
 ::google::protobuf::int32 FriendInfoLite::update_day() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.update_day)
  return update_day_;
}
 void FriendInfoLite::set_update_day(::google::protobuf::int32 value) {
  set_has_update_day();
  update_day_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.update_day)
}

// repeated int32 dallylvlscores = 17;
 int FriendInfoLite::dallylvlscores_size() const {
  return dallylvlscores_.size();
}
 void FriendInfoLite::clear_dallylvlscores() {
  dallylvlscores_.Clear();
}
 ::google::protobuf::int32 FriendInfoLite::dallylvlscores(int index) const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.dallylvlscores)
  return dallylvlscores_.Get(index);
}
 void FriendInfoLite::set_dallylvlscores(int index, ::google::protobuf::int32 value) {
  dallylvlscores_.Set(index, value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.dallylvlscores)
}
 void FriendInfoLite::add_dallylvlscores(::google::protobuf::int32 value) {
  dallylvlscores_.Add(value);
  // @@protoc_insertion_point(field_add:FriendInfoLite.dallylvlscores)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FriendInfoLite::dallylvlscores() const {
  // @@protoc_insertion_point(field_list:FriendInfoLite.dallylvlscores)
  return dallylvlscores_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FriendInfoLite::mutable_dallylvlscores() {
  // @@protoc_insertion_point(field_mutable_list:FriendInfoLite.dallylvlscores)
  return &dallylvlscores_;
}

// optional int32 total_stars = 18;
 bool FriendInfoLite::has_total_stars() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
 void FriendInfoLite::set_has_total_stars() {
  _has_bits_[0] |= 0x00020000u;
}
 void FriendInfoLite::clear_has_total_stars() {
  _has_bits_[0] &= ~0x00020000u;
}
 void FriendInfoLite::clear_total_stars() {
  total_stars_ = 0;
  clear_has_total_stars();
}
 ::google::protobuf::int32 FriendInfoLite::total_stars() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.total_stars)
  return total_stars_;
}
 void FriendInfoLite::set_total_stars(::google::protobuf::int32 value) {
  set_has_total_stars();
  total_stars_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.total_stars)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
