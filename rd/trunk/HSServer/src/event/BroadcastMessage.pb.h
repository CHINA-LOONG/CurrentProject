// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BroadcastMessage.proto

#ifndef PROTOBUF_BroadcastMessage_2eproto__INCLUDED
#define PROTOBUF_BroadcastMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_BroadcastMessage_2eproto();
void protobuf_AssignDesc_BroadcastMessage_2eproto();
void protobuf_ShutdownFile_BroadcastMessage_2eproto();

class BroadcastMessage;

enum BroadcastMessage_MessageType {
  BroadcastMessage_MessageType_NORMAL_STRING = 0,
  BroadcastMessage_MessageType_SYSTEM_ADMIN = 1
};
bool BroadcastMessage_MessageType_IsValid(int value);
const BroadcastMessage_MessageType BroadcastMessage_MessageType_MessageType_MIN = BroadcastMessage_MessageType_NORMAL_STRING;
const BroadcastMessage_MessageType BroadcastMessage_MessageType_MessageType_MAX = BroadcastMessage_MessageType_SYSTEM_ADMIN;
const int BroadcastMessage_MessageType_MessageType_ARRAYSIZE = BroadcastMessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BroadcastMessage_MessageType_descriptor();
inline const ::std::string& BroadcastMessage_MessageType_Name(BroadcastMessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BroadcastMessage_MessageType_descriptor(), value);
}
inline bool BroadcastMessage_MessageType_Parse(
    const ::std::string& name, BroadcastMessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BroadcastMessage_MessageType>(
    BroadcastMessage_MessageType_descriptor(), name, value);
}
enum BroadcastMessage_BroadcastType {
  BroadcastMessage_BroadcastType_SINGAL_ONE = 1,
  BroadcastMessage_BroadcastType_ALL = 2
};
bool BroadcastMessage_BroadcastType_IsValid(int value);
const BroadcastMessage_BroadcastType BroadcastMessage_BroadcastType_BroadcastType_MIN = BroadcastMessage_BroadcastType_SINGAL_ONE;
const BroadcastMessage_BroadcastType BroadcastMessage_BroadcastType_BroadcastType_MAX = BroadcastMessage_BroadcastType_ALL;
const int BroadcastMessage_BroadcastType_BroadcastType_ARRAYSIZE = BroadcastMessage_BroadcastType_BroadcastType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BroadcastMessage_BroadcastType_descriptor();
inline const ::std::string& BroadcastMessage_BroadcastType_Name(BroadcastMessage_BroadcastType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BroadcastMessage_BroadcastType_descriptor(), value);
}
inline bool BroadcastMessage_BroadcastType_Parse(
    const ::std::string& name, BroadcastMessage_BroadcastType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BroadcastMessage_BroadcastType>(
    BroadcastMessage_BroadcastType_descriptor(), name, value);
}
// ===================================================================

class BroadcastMessage : public ::google::protobuf::Message {
 public:
  BroadcastMessage();
  virtual ~BroadcastMessage();

  BroadcastMessage(const BroadcastMessage& from);

  inline BroadcastMessage& operator=(const BroadcastMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastMessage& default_instance();

  void Swap(BroadcastMessage* other);

  // implements Message ----------------------------------------------

  inline BroadcastMessage* New() const { return New(NULL); }

  BroadcastMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BroadcastMessage& from);
  void MergeFrom(const BroadcastMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BroadcastMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BroadcastMessage_MessageType MessageType;
  static const MessageType NORMAL_STRING = BroadcastMessage_MessageType_NORMAL_STRING;
  static const MessageType SYSTEM_ADMIN = BroadcastMessage_MessageType_SYSTEM_ADMIN;
  static inline bool MessageType_IsValid(int value) {
    return BroadcastMessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    BroadcastMessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    BroadcastMessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    BroadcastMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return BroadcastMessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return BroadcastMessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return BroadcastMessage_MessageType_Parse(name, value);
  }

  typedef BroadcastMessage_BroadcastType BroadcastType;
  static const BroadcastType SINGAL_ONE = BroadcastMessage_BroadcastType_SINGAL_ONE;
  static const BroadcastType ALL = BroadcastMessage_BroadcastType_ALL;
  static inline bool BroadcastType_IsValid(int value) {
    return BroadcastMessage_BroadcastType_IsValid(value);
  }
  static const BroadcastType BroadcastType_MIN =
    BroadcastMessage_BroadcastType_BroadcastType_MIN;
  static const BroadcastType BroadcastType_MAX =
    BroadcastMessage_BroadcastType_BroadcastType_MAX;
  static const int BroadcastType_ARRAYSIZE =
    BroadcastMessage_BroadcastType_BroadcastType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BroadcastType_descriptor() {
    return BroadcastMessage_BroadcastType_descriptor();
  }
  static inline const ::std::string& BroadcastType_Name(BroadcastType value) {
    return BroadcastMessage_BroadcastType_Name(value);
  }
  static inline bool BroadcastType_Parse(const ::std::string& name,
      BroadcastType* value) {
    return BroadcastMessage_BroadcastType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional string name = 5 [default = ""];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .BroadcastMessage.MessageType messagetype = 2 [default = NORMAL_STRING];
  bool has_messagetype() const;
  void clear_messagetype();
  static const int kMessagetypeFieldNumber = 2;
  ::BroadcastMessage_MessageType messagetype() const;
  void set_messagetype(::BroadcastMessage_MessageType value);

  // optional .BroadcastMessage.BroadcastType broadcasttype = 3 [default = ALL];
  bool has_broadcasttype() const;
  void clear_broadcasttype();
  static const int kBroadcasttypeFieldNumber = 3;
  ::BroadcastMessage_BroadcastType broadcasttype() const;
  void set_broadcasttype(::BroadcastMessage_BroadcastType value);

  // repeated int32 args = 4;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 4;
  ::google::protobuf::int32 args(int index) const;
  void set_args(int index, ::google::protobuf::int32 value);
  void add_args(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      args() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_args();

  // optional string message = 7 [default = ""];
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 7;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional string listener = 8 [default = ""];
  bool has_listener() const;
  void clear_listener();
  static const int kListenerFieldNumber = 8;
  const ::std::string& listener() const;
  void set_listener(const ::std::string& value);
  void set_listener(const char* value);
  void set_listener(const char* value, size_t size);
  ::std::string* mutable_listener();
  ::std::string* release_listener();
  void set_allocated_listener(::std::string* listener);

  // optional string listener_name = 6 [default = ""];
  bool has_listener_name() const;
  void clear_listener_name();
  static const int kListenerNameFieldNumber = 6;
  const ::std::string& listener_name() const;
  void set_listener_name(const ::std::string& value);
  void set_listener_name(const char* value);
  void set_listener_name(const char* value, size_t size);
  ::std::string* mutable_listener_name();
  ::std::string* release_listener_name();
  void set_allocated_listener_name(::std::string* listener_name);

  // optional string time = 9 [default = ""];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 9;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // optional bool read_flag = 10 [default = false];
  bool has_read_flag() const;
  void clear_read_flag();
  static const int kReadFlagFieldNumber = 10;
  bool read_flag() const;
  void set_read_flag(bool value);

  // @@protoc_insertion_point(class_scope:BroadcastMessage)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_broadcasttype();
  inline void clear_has_broadcasttype();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_listener();
  inline void clear_has_listener();
  inline void set_has_listener_name();
  inline void clear_has_listener_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_read_flag();
  inline void clear_has_read_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int messagetype_;
  int broadcasttype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > args_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr listener_;
  ::google::protobuf::internal::ArenaStringPtr listener_name_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  bool read_flag_;
  friend void  protobuf_AddDesc_BroadcastMessage_2eproto();
  friend void protobuf_AssignDesc_BroadcastMessage_2eproto();
  friend void protobuf_ShutdownFile_BroadcastMessage_2eproto();

  void InitAsDefaultInstance();
  static BroadcastMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BroadcastMessage

// required string uid = 1;
inline bool BroadcastMessage::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadcastMessage::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BroadcastMessage::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BroadcastMessage::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& BroadcastMessage::uid() const {
  // @@protoc_insertion_point(field_get:BroadcastMessage.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BroadcastMessage.uid)
}
inline void BroadcastMessage::set_uid(const char* value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BroadcastMessage.uid)
}
inline void BroadcastMessage::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BroadcastMessage.uid)
}
inline ::std::string* BroadcastMessage::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:BroadcastMessage.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BroadcastMessage::release_uid() {
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:BroadcastMessage.uid)
}

// optional string name = 5 [default = ""];
inline bool BroadcastMessage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BroadcastMessage::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BroadcastMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BroadcastMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& BroadcastMessage::name() const {
  // @@protoc_insertion_point(field_get:BroadcastMessage.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BroadcastMessage.name)
}
inline void BroadcastMessage::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BroadcastMessage.name)
}
inline void BroadcastMessage::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BroadcastMessage.name)
}
inline ::std::string* BroadcastMessage::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:BroadcastMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BroadcastMessage::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BroadcastMessage.name)
}

// optional .BroadcastMessage.MessageType messagetype = 2 [default = NORMAL_STRING];
inline bool BroadcastMessage::has_messagetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BroadcastMessage::set_has_messagetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BroadcastMessage::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BroadcastMessage::clear_messagetype() {
  messagetype_ = 0;
  clear_has_messagetype();
}
inline ::BroadcastMessage_MessageType BroadcastMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:BroadcastMessage.messagetype)
  return static_cast< ::BroadcastMessage_MessageType >(messagetype_);
}
inline void BroadcastMessage::set_messagetype(::BroadcastMessage_MessageType value) {
  assert(::BroadcastMessage_MessageType_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:BroadcastMessage.messagetype)
}

// optional .BroadcastMessage.BroadcastType broadcasttype = 3 [default = ALL];
inline bool BroadcastMessage::has_broadcasttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BroadcastMessage::set_has_broadcasttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BroadcastMessage::clear_has_broadcasttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BroadcastMessage::clear_broadcasttype() {
  broadcasttype_ = 2;
  clear_has_broadcasttype();
}
inline ::BroadcastMessage_BroadcastType BroadcastMessage::broadcasttype() const {
  // @@protoc_insertion_point(field_get:BroadcastMessage.broadcasttype)
  return static_cast< ::BroadcastMessage_BroadcastType >(broadcasttype_);
}
inline void BroadcastMessage::set_broadcasttype(::BroadcastMessage_BroadcastType value) {
  assert(::BroadcastMessage_BroadcastType_IsValid(value));
  set_has_broadcasttype();
  broadcasttype_ = value;
  // @@protoc_insertion_point(field_set:BroadcastMessage.broadcasttype)
}

// repeated int32 args = 4;
inline int BroadcastMessage::args_size() const {
  return args_.size();
}
inline void BroadcastMessage::clear_args() {
  args_.Clear();
}
inline ::google::protobuf::int32 BroadcastMessage::args(int index) const {
  // @@protoc_insertion_point(field_get:BroadcastMessage.args)
  return args_.Get(index);
}
inline void BroadcastMessage::set_args(int index, ::google::protobuf::int32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:BroadcastMessage.args)
}
inline void BroadcastMessage::add_args(::google::protobuf::int32 value) {
  args_.Add(value);
  // @@protoc_insertion_point(field_add:BroadcastMessage.args)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BroadcastMessage::args() const {
  // @@protoc_insertion_point(field_list:BroadcastMessage.args)
  return args_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BroadcastMessage::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:BroadcastMessage.args)
  return &args_;
}

// optional string message = 7 [default = ""];
inline bool BroadcastMessage::has_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BroadcastMessage::set_has_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BroadcastMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BroadcastMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& BroadcastMessage::message() const {
  // @@protoc_insertion_point(field_get:BroadcastMessage.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BroadcastMessage.message)
}
inline void BroadcastMessage::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BroadcastMessage.message)
}
inline void BroadcastMessage::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BroadcastMessage.message)
}
inline ::std::string* BroadcastMessage::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:BroadcastMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BroadcastMessage::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BroadcastMessage.message)
}

// optional string listener = 8 [default = ""];
inline bool BroadcastMessage::has_listener() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BroadcastMessage::set_has_listener() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BroadcastMessage::clear_has_listener() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BroadcastMessage::clear_listener() {
  listener_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listener();
}
inline const ::std::string& BroadcastMessage::listener() const {
  // @@protoc_insertion_point(field_get:BroadcastMessage.listener)
  return listener_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_listener(const ::std::string& value) {
  set_has_listener();
  listener_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BroadcastMessage.listener)
}
inline void BroadcastMessage::set_listener(const char* value) {
  set_has_listener();
  listener_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BroadcastMessage.listener)
}
inline void BroadcastMessage::set_listener(const char* value, size_t size) {
  set_has_listener();
  listener_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BroadcastMessage.listener)
}
inline ::std::string* BroadcastMessage::mutable_listener() {
  set_has_listener();
  // @@protoc_insertion_point(field_mutable:BroadcastMessage.listener)
  return listener_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BroadcastMessage::release_listener() {
  clear_has_listener();
  return listener_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_allocated_listener(::std::string* listener) {
  if (listener != NULL) {
    set_has_listener();
  } else {
    clear_has_listener();
  }
  listener_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listener);
  // @@protoc_insertion_point(field_set_allocated:BroadcastMessage.listener)
}

// optional string listener_name = 6 [default = ""];
inline bool BroadcastMessage::has_listener_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BroadcastMessage::set_has_listener_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BroadcastMessage::clear_has_listener_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BroadcastMessage::clear_listener_name() {
  listener_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listener_name();
}
inline const ::std::string& BroadcastMessage::listener_name() const {
  // @@protoc_insertion_point(field_get:BroadcastMessage.listener_name)
  return listener_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_listener_name(const ::std::string& value) {
  set_has_listener_name();
  listener_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BroadcastMessage.listener_name)
}
inline void BroadcastMessage::set_listener_name(const char* value) {
  set_has_listener_name();
  listener_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BroadcastMessage.listener_name)
}
inline void BroadcastMessage::set_listener_name(const char* value, size_t size) {
  set_has_listener_name();
  listener_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BroadcastMessage.listener_name)
}
inline ::std::string* BroadcastMessage::mutable_listener_name() {
  set_has_listener_name();
  // @@protoc_insertion_point(field_mutable:BroadcastMessage.listener_name)
  return listener_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BroadcastMessage::release_listener_name() {
  clear_has_listener_name();
  return listener_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_allocated_listener_name(::std::string* listener_name) {
  if (listener_name != NULL) {
    set_has_listener_name();
  } else {
    clear_has_listener_name();
  }
  listener_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listener_name);
  // @@protoc_insertion_point(field_set_allocated:BroadcastMessage.listener_name)
}

// optional string time = 9 [default = ""];
inline bool BroadcastMessage::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BroadcastMessage::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BroadcastMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BroadcastMessage::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
inline const ::std::string& BroadcastMessage::time() const {
  // @@protoc_insertion_point(field_get:BroadcastMessage.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BroadcastMessage.time)
}
inline void BroadcastMessage::set_time(const char* value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BroadcastMessage.time)
}
inline void BroadcastMessage::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BroadcastMessage.time)
}
inline ::std::string* BroadcastMessage::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:BroadcastMessage.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BroadcastMessage::release_time() {
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastMessage::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:BroadcastMessage.time)
}

// optional bool read_flag = 10 [default = false];
inline bool BroadcastMessage::has_read_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BroadcastMessage::set_has_read_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BroadcastMessage::clear_has_read_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BroadcastMessage::clear_read_flag() {
  read_flag_ = false;
  clear_has_read_flag();
}
inline bool BroadcastMessage::read_flag() const {
  // @@protoc_insertion_point(field_get:BroadcastMessage.read_flag)
  return read_flag_;
}
inline void BroadcastMessage::set_read_flag(bool value) {
  set_has_read_flag();
  read_flag_ = value;
  // @@protoc_insertion_point(field_set:BroadcastMessage.read_flag)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::BroadcastMessage_MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BroadcastMessage_MessageType>() {
  return ::BroadcastMessage_MessageType_descriptor();
}
template <> struct is_proto_enum< ::BroadcastMessage_BroadcastType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BroadcastMessage_BroadcastType>() {
  return ::BroadcastMessage_BroadcastType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BroadcastMessage_2eproto__INCLUDED
