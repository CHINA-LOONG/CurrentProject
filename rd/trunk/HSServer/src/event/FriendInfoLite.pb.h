// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendInfoLite.proto

#ifndef PROTOBUF_FriendInfoLite_2eproto__INCLUDED
#define PROTOBUF_FriendInfoLite_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_FriendInfoLite_2eproto();
void protobuf_AssignDesc_FriendInfoLite_2eproto();
void protobuf_ShutdownFile_FriendInfoLite_2eproto();

class FriendInfoLite;

// ===================================================================

class FriendInfoLite : public ::google::protobuf::Message {
 public:
  FriendInfoLite();
  virtual ~FriendInfoLite();

  FriendInfoLite(const FriendInfoLite& from);

  inline FriendInfoLite& operator=(const FriendInfoLite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendInfoLite& default_instance();

  void Swap(FriendInfoLite* other);

  // implements Message ----------------------------------------------

  inline FriendInfoLite* New() const { return New(NULL); }

  FriendInfoLite* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendInfoLite& from);
  void MergeFrom(const FriendInfoLite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FriendInfoLite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // required string nickName = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // required uint32 level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // required string openid = 7;
  bool has_openid() const;
  void clear_openid();
  static const int kOpenidFieldNumber = 7;
  const ::std::string& openid() const;
  void set_openid(const ::std::string& value);
  void set_openid(const char* value);
  void set_openid(const char* value, size_t size);
  ::std::string* mutable_openid();
  ::std::string* release_openid();
  void set_allocated_openid(::std::string* openid);

  // required string headurl = 8;
  bool has_headurl() const;
  void clear_headurl();
  static const int kHeadurlFieldNumber = 8;
  const ::std::string& headurl() const;
  void set_headurl(const ::std::string& value);
  void set_headurl(const char* value);
  void set_headurl(const char* value, size_t size);
  ::std::string* mutable_headurl();
  ::std::string* release_headurl();
  void set_allocated_headurl(::std::string* headurl);

  // optional int32 friendtype = 9 [default = 0];
  bool has_friendtype() const;
  void clear_friendtype();
  static const int kFriendtypeFieldNumber = 9;
  ::google::protobuf::int32 friendtype() const;
  void set_friendtype(::google::protobuf::int32 value);

  // optional bool isYellowDmd = 11 [default = false];
  bool has_isyellowdmd() const;
  void clear_isyellowdmd();
  static const int kIsYellowDmdFieldNumber = 11;
  bool isyellowdmd() const;
  void set_isyellowdmd(bool value);

  // optional bool isYellowDmdYear = 12 [default = false];
  bool has_isyellowdmdyear() const;
  void clear_isyellowdmdyear();
  static const int kIsYellowDmdYearFieldNumber = 12;
  bool isyellowdmdyear() const;
  void set_isyellowdmdyear(bool value);

  // optional int32 YellowDmdLvl = 13 [default = 0];
  bool has_yellowdmdlvl() const;
  void clear_yellowdmdlvl();
  static const int kYellowDmdLvlFieldNumber = 13;
  ::google::protobuf::int32 yellowdmdlvl() const;
  void set_yellowdmdlvl(::google::protobuf::int32 value);

  // optional int64 lastLogTime = 23 [default = -1];
  bool has_lastlogtime() const;
  void clear_lastlogtime();
  static const int kLastLogTimeFieldNumber = 23;
  ::google::protobuf::int64 lastlogtime() const;
  void set_lastlogtime(::google::protobuf::int64 value);

  // optional string lastLogTimeStr = 24 [default = ""];
  bool has_lastlogtimestr() const;
  void clear_lastlogtimestr();
  static const int kLastLogTimeStrFieldNumber = 24;
  const ::std::string& lastlogtimestr() const;
  void set_lastlogtimestr(const ::std::string& value);
  void set_lastlogtimestr(const char* value);
  void set_lastlogtimestr(const char* value, size_t size);
  ::std::string* mutable_lastlogtimestr();
  ::std::string* release_lastlogtimestr();
  void set_allocated_lastlogtimestr(::std::string* lastlogtimestr);

  // optional int32 QPCount = 25;
  bool has_qpcount() const;
  void clear_qpcount();
  static const int kQPCountFieldNumber = 25;
  ::google::protobuf::int32 qpcount() const;
  void set_qpcount(::google::protobuf::int32 value);

  // repeated int32 lvlscores = 26;
  int lvlscores_size() const;
  void clear_lvlscores();
  static const int kLvlscoresFieldNumber = 26;
  ::google::protobuf::int32 lvlscores(int index) const;
  void set_lvlscores(int index, ::google::protobuf::int32 value);
  void add_lvlscores(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lvlscores() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lvlscores();

  // optional string jsonstr = 14 [default = ""];
  bool has_jsonstr() const;
  void clear_jsonstr();
  static const int kJsonstrFieldNumber = 14;
  const ::std::string& jsonstr() const;
  void set_jsonstr(const ::std::string& value);
  void set_jsonstr(const char* value);
  void set_jsonstr(const char* value, size_t size);
  ::std::string* mutable_jsonstr();
  ::std::string* release_jsonstr();
  void set_allocated_jsonstr(::std::string* jsonstr);

  // optional int32 dallytotalsocre = 15 [default = 0];
  bool has_dallytotalsocre() const;
  void clear_dallytotalsocre();
  static const int kDallytotalsocreFieldNumber = 15;
  ::google::protobuf::int32 dallytotalsocre() const;
  void set_dallytotalsocre(::google::protobuf::int32 value);

  // optional int32 update_day = 16 [default = 0];
  bool has_update_day() const;
  void clear_update_day();
  static const int kUpdateDayFieldNumber = 16;
  ::google::protobuf::int32 update_day() const;
  void set_update_day(::google::protobuf::int32 value);

  // repeated int32 dallylvlscores = 17;
  int dallylvlscores_size() const;
  void clear_dallylvlscores();
  static const int kDallylvlscoresFieldNumber = 17;
  ::google::protobuf::int32 dallylvlscores(int index) const;
  void set_dallylvlscores(int index, ::google::protobuf::int32 value);
  void add_dallylvlscores(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dallylvlscores() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dallylvlscores();

  // optional int32 total_stars = 18;
  bool has_total_stars() const;
  void clear_total_stars();
  static const int kTotalStarsFieldNumber = 18;
  ::google::protobuf::int32 total_stars() const;
  void set_total_stars(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendInfoLite)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_headurl();
  inline void clear_has_headurl();
  inline void set_has_friendtype();
  inline void clear_has_friendtype();
  inline void set_has_isyellowdmd();
  inline void clear_has_isyellowdmd();
  inline void set_has_isyellowdmdyear();
  inline void clear_has_isyellowdmdyear();
  inline void set_has_yellowdmdlvl();
  inline void clear_has_yellowdmdlvl();
  inline void set_has_lastlogtime();
  inline void clear_has_lastlogtime();
  inline void set_has_lastlogtimestr();
  inline void clear_has_lastlogtimestr();
  inline void set_has_qpcount();
  inline void clear_has_qpcount();
  inline void set_has_jsonstr();
  inline void clear_has_jsonstr();
  inline void set_has_dallytotalsocre();
  inline void clear_has_dallytotalsocre();
  inline void set_has_update_day();
  inline void clear_has_update_day();
  inline void set_has_total_stars();
  inline void clear_has_total_stars();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr openid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::int32 friendtype_;
  ::google::protobuf::internal::ArenaStringPtr headurl_;
  bool isyellowdmd_;
  bool isyellowdmdyear_;
  ::google::protobuf::int32 yellowdmdlvl_;
  ::google::protobuf::int64 lastlogtime_;
  ::google::protobuf::internal::ArenaStringPtr lastlogtimestr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lvlscores_;
  ::google::protobuf::int32 qpcount_;
  ::google::protobuf::int32 dallytotalsocre_;
  ::google::protobuf::internal::ArenaStringPtr jsonstr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dallylvlscores_;
  ::google::protobuf::int32 update_day_;
  ::google::protobuf::int32 total_stars_;
  friend void  protobuf_AddDesc_FriendInfoLite_2eproto();
  friend void protobuf_AssignDesc_FriendInfoLite_2eproto();
  friend void protobuf_ShutdownFile_FriendInfoLite_2eproto();

  void InitAsDefaultInstance();
  static FriendInfoLite* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendInfoLite

// required string uid = 1;
inline bool FriendInfoLite::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendInfoLite::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendInfoLite::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendInfoLite::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& FriendInfoLite::uid() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfoLite::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.uid)
}
inline void FriendInfoLite::set_uid(const char* value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendInfoLite.uid)
}
inline void FriendInfoLite::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendInfoLite.uid)
}
inline ::std::string* FriendInfoLite::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:FriendInfoLite.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfoLite::release_uid() {
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfoLite::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:FriendInfoLite.uid)
}

// required string nickName = 2;
inline bool FriendInfoLite::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendInfoLite::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendInfoLite::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendInfoLite::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& FriendInfoLite::nickname() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.nickName)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfoLite::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.nickName)
}
inline void FriendInfoLite::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendInfoLite.nickName)
}
inline void FriendInfoLite::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendInfoLite.nickName)
}
inline ::std::string* FriendInfoLite::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:FriendInfoLite.nickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfoLite::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfoLite::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:FriendInfoLite.nickName)
}

// required uint32 level = 3;
inline bool FriendInfoLite::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendInfoLite::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendInfoLite::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendInfoLite::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 FriendInfoLite::level() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.level)
  return level_;
}
inline void FriendInfoLite::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.level)
}

// required string openid = 7;
inline bool FriendInfoLite::has_openid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendInfoLite::set_has_openid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendInfoLite::clear_has_openid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendInfoLite::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
inline const ::std::string& FriendInfoLite::openid() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfoLite::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.openid)
}
inline void FriendInfoLite::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendInfoLite.openid)
}
inline void FriendInfoLite::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendInfoLite.openid)
}
inline ::std::string* FriendInfoLite::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:FriendInfoLite.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfoLite::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfoLite::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:FriendInfoLite.openid)
}

// required string headurl = 8;
inline bool FriendInfoLite::has_headurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendInfoLite::set_has_headurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendInfoLite::clear_has_headurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendInfoLite::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headurl();
}
inline const ::std::string& FriendInfoLite::headurl() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfoLite::set_headurl(const ::std::string& value) {
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.headurl)
}
inline void FriendInfoLite::set_headurl(const char* value) {
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendInfoLite.headurl)
}
inline void FriendInfoLite::set_headurl(const char* value, size_t size) {
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendInfoLite.headurl)
}
inline ::std::string* FriendInfoLite::mutable_headurl() {
  set_has_headurl();
  // @@protoc_insertion_point(field_mutable:FriendInfoLite.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfoLite::release_headurl() {
  clear_has_headurl();
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfoLite::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    set_has_headurl();
  } else {
    clear_has_headurl();
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:FriendInfoLite.headurl)
}

// optional int32 friendtype = 9 [default = 0];
inline bool FriendInfoLite::has_friendtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendInfoLite::set_has_friendtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendInfoLite::clear_has_friendtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendInfoLite::clear_friendtype() {
  friendtype_ = 0;
  clear_has_friendtype();
}
inline ::google::protobuf::int32 FriendInfoLite::friendtype() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.friendtype)
  return friendtype_;
}
inline void FriendInfoLite::set_friendtype(::google::protobuf::int32 value) {
  set_has_friendtype();
  friendtype_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.friendtype)
}

// optional bool isYellowDmd = 11 [default = false];
inline bool FriendInfoLite::has_isyellowdmd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendInfoLite::set_has_isyellowdmd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendInfoLite::clear_has_isyellowdmd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendInfoLite::clear_isyellowdmd() {
  isyellowdmd_ = false;
  clear_has_isyellowdmd();
}
inline bool FriendInfoLite::isyellowdmd() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.isYellowDmd)
  return isyellowdmd_;
}
inline void FriendInfoLite::set_isyellowdmd(bool value) {
  set_has_isyellowdmd();
  isyellowdmd_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.isYellowDmd)
}

// optional bool isYellowDmdYear = 12 [default = false];
inline bool FriendInfoLite::has_isyellowdmdyear() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FriendInfoLite::set_has_isyellowdmdyear() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FriendInfoLite::clear_has_isyellowdmdyear() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FriendInfoLite::clear_isyellowdmdyear() {
  isyellowdmdyear_ = false;
  clear_has_isyellowdmdyear();
}
inline bool FriendInfoLite::isyellowdmdyear() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.isYellowDmdYear)
  return isyellowdmdyear_;
}
inline void FriendInfoLite::set_isyellowdmdyear(bool value) {
  set_has_isyellowdmdyear();
  isyellowdmdyear_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.isYellowDmdYear)
}

// optional int32 YellowDmdLvl = 13 [default = 0];
inline bool FriendInfoLite::has_yellowdmdlvl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FriendInfoLite::set_has_yellowdmdlvl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FriendInfoLite::clear_has_yellowdmdlvl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FriendInfoLite::clear_yellowdmdlvl() {
  yellowdmdlvl_ = 0;
  clear_has_yellowdmdlvl();
}
inline ::google::protobuf::int32 FriendInfoLite::yellowdmdlvl() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.YellowDmdLvl)
  return yellowdmdlvl_;
}
inline void FriendInfoLite::set_yellowdmdlvl(::google::protobuf::int32 value) {
  set_has_yellowdmdlvl();
  yellowdmdlvl_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.YellowDmdLvl)
}

// optional int64 lastLogTime = 23 [default = -1];
inline bool FriendInfoLite::has_lastlogtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FriendInfoLite::set_has_lastlogtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FriendInfoLite::clear_has_lastlogtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FriendInfoLite::clear_lastlogtime() {
  lastlogtime_ = GOOGLE_LONGLONG(-1);
  clear_has_lastlogtime();
}
inline ::google::protobuf::int64 FriendInfoLite::lastlogtime() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.lastLogTime)
  return lastlogtime_;
}
inline void FriendInfoLite::set_lastlogtime(::google::protobuf::int64 value) {
  set_has_lastlogtime();
  lastlogtime_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.lastLogTime)
}

// optional string lastLogTimeStr = 24 [default = ""];
inline bool FriendInfoLite::has_lastlogtimestr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FriendInfoLite::set_has_lastlogtimestr() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FriendInfoLite::clear_has_lastlogtimestr() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FriendInfoLite::clear_lastlogtimestr() {
  lastlogtimestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lastlogtimestr();
}
inline const ::std::string& FriendInfoLite::lastlogtimestr() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.lastLogTimeStr)
  return lastlogtimestr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfoLite::set_lastlogtimestr(const ::std::string& value) {
  set_has_lastlogtimestr();
  lastlogtimestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.lastLogTimeStr)
}
inline void FriendInfoLite::set_lastlogtimestr(const char* value) {
  set_has_lastlogtimestr();
  lastlogtimestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendInfoLite.lastLogTimeStr)
}
inline void FriendInfoLite::set_lastlogtimestr(const char* value, size_t size) {
  set_has_lastlogtimestr();
  lastlogtimestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendInfoLite.lastLogTimeStr)
}
inline ::std::string* FriendInfoLite::mutable_lastlogtimestr() {
  set_has_lastlogtimestr();
  // @@protoc_insertion_point(field_mutable:FriendInfoLite.lastLogTimeStr)
  return lastlogtimestr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfoLite::release_lastlogtimestr() {
  clear_has_lastlogtimestr();
  return lastlogtimestr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfoLite::set_allocated_lastlogtimestr(::std::string* lastlogtimestr) {
  if (lastlogtimestr != NULL) {
    set_has_lastlogtimestr();
  } else {
    clear_has_lastlogtimestr();
  }
  lastlogtimestr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastlogtimestr);
  // @@protoc_insertion_point(field_set_allocated:FriendInfoLite.lastLogTimeStr)
}

// optional int32 QPCount = 25;
inline bool FriendInfoLite::has_qpcount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FriendInfoLite::set_has_qpcount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FriendInfoLite::clear_has_qpcount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FriendInfoLite::clear_qpcount() {
  qpcount_ = 0;
  clear_has_qpcount();
}
inline ::google::protobuf::int32 FriendInfoLite::qpcount() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.QPCount)
  return qpcount_;
}
inline void FriendInfoLite::set_qpcount(::google::protobuf::int32 value) {
  set_has_qpcount();
  qpcount_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.QPCount)
}

// repeated int32 lvlscores = 26;
inline int FriendInfoLite::lvlscores_size() const {
  return lvlscores_.size();
}
inline void FriendInfoLite::clear_lvlscores() {
  lvlscores_.Clear();
}
inline ::google::protobuf::int32 FriendInfoLite::lvlscores(int index) const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.lvlscores)
  return lvlscores_.Get(index);
}
inline void FriendInfoLite::set_lvlscores(int index, ::google::protobuf::int32 value) {
  lvlscores_.Set(index, value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.lvlscores)
}
inline void FriendInfoLite::add_lvlscores(::google::protobuf::int32 value) {
  lvlscores_.Add(value);
  // @@protoc_insertion_point(field_add:FriendInfoLite.lvlscores)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FriendInfoLite::lvlscores() const {
  // @@protoc_insertion_point(field_list:FriendInfoLite.lvlscores)
  return lvlscores_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FriendInfoLite::mutable_lvlscores() {
  // @@protoc_insertion_point(field_mutable_list:FriendInfoLite.lvlscores)
  return &lvlscores_;
}

// optional string jsonstr = 14 [default = ""];
inline bool FriendInfoLite::has_jsonstr() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FriendInfoLite::set_has_jsonstr() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FriendInfoLite::clear_has_jsonstr() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FriendInfoLite::clear_jsonstr() {
  jsonstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_jsonstr();
}
inline const ::std::string& FriendInfoLite::jsonstr() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.jsonstr)
  return jsonstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfoLite::set_jsonstr(const ::std::string& value) {
  set_has_jsonstr();
  jsonstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.jsonstr)
}
inline void FriendInfoLite::set_jsonstr(const char* value) {
  set_has_jsonstr();
  jsonstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendInfoLite.jsonstr)
}
inline void FriendInfoLite::set_jsonstr(const char* value, size_t size) {
  set_has_jsonstr();
  jsonstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendInfoLite.jsonstr)
}
inline ::std::string* FriendInfoLite::mutable_jsonstr() {
  set_has_jsonstr();
  // @@protoc_insertion_point(field_mutable:FriendInfoLite.jsonstr)
  return jsonstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfoLite::release_jsonstr() {
  clear_has_jsonstr();
  return jsonstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfoLite::set_allocated_jsonstr(::std::string* jsonstr) {
  if (jsonstr != NULL) {
    set_has_jsonstr();
  } else {
    clear_has_jsonstr();
  }
  jsonstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jsonstr);
  // @@protoc_insertion_point(field_set_allocated:FriendInfoLite.jsonstr)
}

// optional int32 dallytotalsocre = 15 [default = 0];
inline bool FriendInfoLite::has_dallytotalsocre() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FriendInfoLite::set_has_dallytotalsocre() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FriendInfoLite::clear_has_dallytotalsocre() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FriendInfoLite::clear_dallytotalsocre() {
  dallytotalsocre_ = 0;
  clear_has_dallytotalsocre();
}
inline ::google::protobuf::int32 FriendInfoLite::dallytotalsocre() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.dallytotalsocre)
  return dallytotalsocre_;
}
inline void FriendInfoLite::set_dallytotalsocre(::google::protobuf::int32 value) {
  set_has_dallytotalsocre();
  dallytotalsocre_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.dallytotalsocre)
}

// optional int32 update_day = 16 [default = 0];
inline bool FriendInfoLite::has_update_day() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FriendInfoLite::set_has_update_day() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FriendInfoLite::clear_has_update_day() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FriendInfoLite::clear_update_day() {
  update_day_ = 0;
  clear_has_update_day();
}
inline ::google::protobuf::int32 FriendInfoLite::update_day() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.update_day)
  return update_day_;
}
inline void FriendInfoLite::set_update_day(::google::protobuf::int32 value) {
  set_has_update_day();
  update_day_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.update_day)
}

// repeated int32 dallylvlscores = 17;
inline int FriendInfoLite::dallylvlscores_size() const {
  return dallylvlscores_.size();
}
inline void FriendInfoLite::clear_dallylvlscores() {
  dallylvlscores_.Clear();
}
inline ::google::protobuf::int32 FriendInfoLite::dallylvlscores(int index) const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.dallylvlscores)
  return dallylvlscores_.Get(index);
}
inline void FriendInfoLite::set_dallylvlscores(int index, ::google::protobuf::int32 value) {
  dallylvlscores_.Set(index, value);
  // @@protoc_insertion_point(field_set:FriendInfoLite.dallylvlscores)
}
inline void FriendInfoLite::add_dallylvlscores(::google::protobuf::int32 value) {
  dallylvlscores_.Add(value);
  // @@protoc_insertion_point(field_add:FriendInfoLite.dallylvlscores)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FriendInfoLite::dallylvlscores() const {
  // @@protoc_insertion_point(field_list:FriendInfoLite.dallylvlscores)
  return dallylvlscores_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FriendInfoLite::mutable_dallylvlscores() {
  // @@protoc_insertion_point(field_mutable_list:FriendInfoLite.dallylvlscores)
  return &dallylvlscores_;
}

// optional int32 total_stars = 18;
inline bool FriendInfoLite::has_total_stars() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FriendInfoLite::set_has_total_stars() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FriendInfoLite::clear_has_total_stars() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FriendInfoLite::clear_total_stars() {
  total_stars_ = 0;
  clear_has_total_stars();
}
inline ::google::protobuf::int32 FriendInfoLite::total_stars() const {
  // @@protoc_insertion_point(field_get:FriendInfoLite.total_stars)
  return total_stars_;
}
inline void FriendInfoLite::set_total_stars(::google::protobuf::int32 value) {
  set_has_total_stars();
  total_stars_ = value;
  // @@protoc_insertion_point(field_set:FriendInfoLite.total_stars)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FriendInfoLite_2eproto__INCLUDED
