// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LeaveMessage.proto

#ifndef PROTOBUF_LeaveMessage_2eproto__INCLUDED
#define PROTOBUF_LeaveMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_LeaveMessage_2eproto();
void protobuf_AssignDesc_LeaveMessage_2eproto();
void protobuf_ShutdownFile_LeaveMessage_2eproto();

class LeaveMessage;

// ===================================================================

class LeaveMessage : public ::google::protobuf::Message {
 public:
  LeaveMessage();
  virtual ~LeaveMessage();

  LeaveMessage(const LeaveMessage& from);

  inline LeaveMessage& operator=(const LeaveMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveMessage& default_instance();

  void Swap(LeaveMessage* other);

  // implements Message ----------------------------------------------

  inline LeaveMessage* New() const { return New(NULL); }

  LeaveMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveMessage& from);
  void MergeFrom(const LeaveMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaveMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string context = 3;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 3;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // optional string time = 4;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // optional bool unread = 5 [default = false];
  bool has_unread() const;
  void clear_unread();
  static const int kUnreadFieldNumber = 5;
  bool unread() const;
  void set_unread(bool value);

  // optional string head_url = 6 [default = ""];
  bool has_head_url() const;
  void clear_head_url();
  static const int kHeadUrlFieldNumber = 6;
  const ::std::string& head_url() const;
  void set_head_url(const ::std::string& value);
  void set_head_url(const char* value);
  void set_head_url(const char* value, size_t size);
  ::std::string* mutable_head_url();
  ::std::string* release_head_url();
  void set_allocated_head_url(::std::string* head_url);

  // @@protoc_insertion_point(class_scope:LeaveMessage)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_unread();
  inline void clear_has_unread();
  inline void set_has_head_url();
  inline void clear_has_head_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr head_url_;
  bool unread_;
  friend void  protobuf_AddDesc_LeaveMessage_2eproto();
  friend void protobuf_AssignDesc_LeaveMessage_2eproto();
  friend void protobuf_ShutdownFile_LeaveMessage_2eproto();

  void InitAsDefaultInstance();
  static LeaveMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveMessage

// optional string uid = 1;
inline bool LeaveMessage::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveMessage::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveMessage::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveMessage::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& LeaveMessage::uid() const {
  // @@protoc_insertion_point(field_get:LeaveMessage.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveMessage::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LeaveMessage.uid)
}
inline void LeaveMessage::set_uid(const char* value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LeaveMessage.uid)
}
inline void LeaveMessage::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LeaveMessage.uid)
}
inline ::std::string* LeaveMessage::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:LeaveMessage.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaveMessage::release_uid() {
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveMessage::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:LeaveMessage.uid)
}

// optional string name = 2;
inline bool LeaveMessage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaveMessage::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaveMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaveMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LeaveMessage::name() const {
  // @@protoc_insertion_point(field_get:LeaveMessage.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveMessage::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LeaveMessage.name)
}
inline void LeaveMessage::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LeaveMessage.name)
}
inline void LeaveMessage::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LeaveMessage.name)
}
inline ::std::string* LeaveMessage::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:LeaveMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaveMessage::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:LeaveMessage.name)
}

// optional string context = 3;
inline bool LeaveMessage::has_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LeaveMessage::set_has_context() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LeaveMessage::clear_has_context() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LeaveMessage::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
inline const ::std::string& LeaveMessage::context() const {
  // @@protoc_insertion_point(field_get:LeaveMessage.context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveMessage::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LeaveMessage.context)
}
inline void LeaveMessage::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LeaveMessage.context)
}
inline void LeaveMessage::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LeaveMessage.context)
}
inline ::std::string* LeaveMessage::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:LeaveMessage.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaveMessage::release_context() {
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveMessage::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:LeaveMessage.context)
}

// optional string time = 4;
inline bool LeaveMessage::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LeaveMessage::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LeaveMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LeaveMessage::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
inline const ::std::string& LeaveMessage::time() const {
  // @@protoc_insertion_point(field_get:LeaveMessage.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveMessage::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LeaveMessage.time)
}
inline void LeaveMessage::set_time(const char* value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LeaveMessage.time)
}
inline void LeaveMessage::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LeaveMessage.time)
}
inline ::std::string* LeaveMessage::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:LeaveMessage.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaveMessage::release_time() {
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveMessage::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:LeaveMessage.time)
}

// optional bool unread = 5 [default = false];
inline bool LeaveMessage::has_unread() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LeaveMessage::set_has_unread() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LeaveMessage::clear_has_unread() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LeaveMessage::clear_unread() {
  unread_ = false;
  clear_has_unread();
}
inline bool LeaveMessage::unread() const {
  // @@protoc_insertion_point(field_get:LeaveMessage.unread)
  return unread_;
}
inline void LeaveMessage::set_unread(bool value) {
  set_has_unread();
  unread_ = value;
  // @@protoc_insertion_point(field_set:LeaveMessage.unread)
}

// optional string head_url = 6 [default = ""];
inline bool LeaveMessage::has_head_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LeaveMessage::set_has_head_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LeaveMessage::clear_has_head_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LeaveMessage::clear_head_url() {
  head_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_head_url();
}
inline const ::std::string& LeaveMessage::head_url() const {
  // @@protoc_insertion_point(field_get:LeaveMessage.head_url)
  return head_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveMessage::set_head_url(const ::std::string& value) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LeaveMessage.head_url)
}
inline void LeaveMessage::set_head_url(const char* value) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LeaveMessage.head_url)
}
inline void LeaveMessage::set_head_url(const char* value, size_t size) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LeaveMessage.head_url)
}
inline ::std::string* LeaveMessage::mutable_head_url() {
  set_has_head_url();
  // @@protoc_insertion_point(field_mutable:LeaveMessage.head_url)
  return head_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaveMessage::release_head_url() {
  clear_has_head_url();
  return head_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveMessage::set_allocated_head_url(::std::string* head_url) {
  if (head_url != NULL) {
    set_has_head_url();
  } else {
    clear_has_head_url();
  }
  head_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head_url);
  // @@protoc_insertion_point(field_set_allocated:LeaveMessage.head_url)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LeaveMessage_2eproto__INCLUDED
