// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CenterLogicValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterLogicValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLogin_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogin_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLogin_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogin_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WG_UserLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WG_UserLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkingStatus_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkingStatus_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAuth_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAuth_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAuth_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAuth_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendRemoteUser_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendRemoteUser_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* HallEnterRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HallEnterRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeLottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeLottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeUpdateWinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeUpdateWinInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeUpdateExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeUpdateExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeUpdateTool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeUpdateTool_reflection_ = NULL;
const ::google::protobuf::Descriptor* DpNormalResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DpNormalResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWG_FriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWG_FriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebFreeGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebFreeGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebAskFor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebAskFor_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebGiveFor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebGiveFor_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Invite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Invite_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendRecallMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendRecallMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiLevelFriendPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiLevelFriendPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalentShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalentShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalentShowList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalentShowList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendSendGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendSendGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* FortuneSteal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FortuneSteal_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChiefVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChiefVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryTimer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryTimer_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeUpdateBattleCnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeUpdateBattleCnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddExp_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddExp_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddExp_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddExp_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddGold_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddGold_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddGold_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddGold_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_Clear_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_Clear_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_Clear_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_Clear_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_SetVal_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_SetVal_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_SetVal_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_SetVal_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_SetLevel_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_SetLevel_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_SetLevel_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_SetLevel_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddProp_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddProp_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddProp_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddProp_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_SetEquip_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_SetEquip_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_SetEquip_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_SetEquip_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_UserInfo_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_UserInfo_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_UserInfo_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_UserInfo_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddGuest_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddGuest_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddGuest_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddGuest_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_SetPublicPraise_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_SetPublicPraise_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_SetPublicPraise_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_SetPublicPraise_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_DelGoods_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_DelGoods_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_DelGoods_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_DelGoods_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddGoods_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddGoods_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddGoods_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddGoods_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_Common_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_Common_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_Common_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_Common_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_DelProp_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_DelProp_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_DelProp_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_DelProp_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_RunTask_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_RunTask_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_RunTask_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_RunTask_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BroadCast_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BroadCast_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BroadCast_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BroadCast_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FluentPriceItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FluentPriceItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_FluentPrice_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_FluentPrice_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_FluentPrice_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_FluentPrice_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_StatisticsOnLinePeople_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_StatisticsOnLinePeople_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_StatisticsOnLinePeople_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_StatisticsOnLinePeople_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_KickPlayer_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_KickPlayer_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_KickPlayer_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_KickPlayer_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_STR_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_STR_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_STR_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_STR_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebUnlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebUnlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebAddEmployee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebAddEmployee_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebBuyDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebBuyDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebBuy3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebBuy3_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebLengthenIndateDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebLengthenIndateDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebLengthenIndate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebLengthenIndate_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebCheckBandCoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebCheckBandCoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebBuyCfm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebBuyCfm_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BanChat_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BanChat_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BanChat_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BanChat_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BanLogin_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BanLogin_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BanLogin_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BanLogin_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddPoint_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddPoint_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddPoint_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddPoint_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddIndate_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddIndate_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddIndate_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddIndate_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_FreshUser_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_FreshUser_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_FreshUser_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_FreshUser_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddMedal_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddMedal_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_AddMedal_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_AddMedal_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_Reload_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_Reload_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_Reload_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_Reload_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGuestNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGuestNumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* QQUnionCheckKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QQUnionCheckKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* QQUnionCheckOpenId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QQUnionCheckOpenId_reflection_ = NULL;
const ::google::protobuf::Descriptor* QQUnionAddItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QQUnionAddItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wap_Str_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wap_Str_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wap_Str_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wap_Str_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpRequestV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpRequestV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleMarkUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleMarkUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteFriendLvlSucc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteFriendLvlSucc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_event_2eproto() {
  protobuf_AddDesc_event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "event.proto");
  GOOGLE_CHECK(file != NULL);
  CenterLogicValue_descriptor_ = file->message_type(0);
  static const int CenterLogicValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLogicValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLogicValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLogicValue, oper_),
  };
  CenterLogicValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CenterLogicValue_descriptor_,
      CenterLogicValue::default_instance_,
      CenterLogicValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLogicValue, _has_bits_[0]),
      -1,
      -1,
      sizeof(CenterLogicValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLogicValue, _internal_metadata_),
      -1);
  UserLogin_Req_descriptor_ = file->message_type(1);
  static const int UserLogin_Req_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, siteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, profile_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, is_yellow_dmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, is_yellow_dmd_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, yellow_dmd_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, friends_platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, webfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, open_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, register_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, action_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, device_from_),
  };
  UserLogin_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserLogin_Req_descriptor_,
      UserLogin_Req::default_instance_,
      UserLogin_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserLogin_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Req, _internal_metadata_),
      -1);
  UserLogin_Rsp_descriptor_ = file->message_type(2);
  static const int UserLogin_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, secret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, webfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, argv_),
  };
  UserLogin_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserLogin_Rsp_descriptor_,
      UserLogin_Rsp::default_instance_,
      UserLogin_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserLogin_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Rsp, _internal_metadata_),
      -1);
  WG_UserLeave_descriptor_ = file->message_type(3);
  static const int WG_UserLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WG_UserLeave, fd_),
  };
  WG_UserLeave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WG_UserLeave_descriptor_,
      WG_UserLeave::default_instance_,
      WG_UserLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WG_UserLeave, _has_bits_[0]),
      -1,
      -1,
      sizeof(WG_UserLeave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WG_UserLeave, _internal_metadata_),
      -1);
  WorkingStatus_Req_descriptor_ = file->message_type(4);
  static const int WorkingStatus_Req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatus_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatus_Req, finish_),
  };
  WorkingStatus_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorkingStatus_Req_descriptor_,
      WorkingStatus_Req::default_instance_,
      WorkingStatus_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatus_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorkingStatus_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkingStatus_Req, _internal_metadata_),
      -1);
  UserAuth_Req_descriptor_ = file->message_type(5);
  static const int UserAuth_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, secret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, sockfd_),
  };
  UserAuth_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserAuth_Req_descriptor_,
      UserAuth_Req::default_instance_,
      UserAuth_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserAuth_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Req, _internal_metadata_),
      -1);
  UserAuth_Rsp_descriptor_ = file->message_type(6);
  static const int UserAuth_Rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Rsp, pass_),
  };
  UserAuth_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserAuth_Rsp_descriptor_,
      UserAuth_Rsp::default_instance_,
      UserAuth_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserAuth_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuth_Rsp, _internal_metadata_),
      -1);
  SendRemoteUser_Req_descriptor_ = file->message_type(7);
  static const int SendRemoteUser_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, text_),
  };
  SendRemoteUser_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendRemoteUser_Req_descriptor_,
      SendRemoteUser_Req::default_instance_,
      SendRemoteUser_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(SendRemoteUser_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRemoteUser_Req, _internal_metadata_),
      -1);
  HallEnterRoom_descriptor_ = file->message_type(8);
  static const int HallEnterRoom_offsets_[1] = {
  };
  HallEnterRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HallEnterRoom_descriptor_,
      HallEnterRoom::default_instance_,
      HallEnterRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallEnterRoom, _has_bits_[0]),
      -1,
      -1,
      sizeof(HallEnterRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallEnterRoom, _internal_metadata_),
      -1);
  BeLottery_descriptor_ = file->message_type(9);
  static const int BeLottery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeLottery, lottery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeLottery, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeLottery, lotterylevel_),
  };
  BeLottery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeLottery_descriptor_,
      BeLottery::default_instance_,
      BeLottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeLottery, _has_bits_[0]),
      -1,
      -1,
      sizeof(BeLottery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeLottery, _internal_metadata_),
      -1);
  BeUpdateWinInfo_descriptor_ = file->message_type(10);
  static const int BeUpdateWinInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateWinInfo, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateWinInfo, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateWinInfo, battlemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateWinInfo, roomtype_),
  };
  BeUpdateWinInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeUpdateWinInfo_descriptor_,
      BeUpdateWinInfo::default_instance_,
      BeUpdateWinInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateWinInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BeUpdateWinInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateWinInfo, _internal_metadata_),
      -1);
  BeUpdateExp_descriptor_ = file->message_type(11);
  static const int BeUpdateExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateExp, expdeta_),
  };
  BeUpdateExp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeUpdateExp_descriptor_,
      BeUpdateExp::default_instance_,
      BeUpdateExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateExp, _has_bits_[0]),
      -1,
      -1,
      sizeof(BeUpdateExp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateExp, _internal_metadata_),
      -1);
  BeUpdateTool_descriptor_ = file->message_type(12);
  static const int BeUpdateTool_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateTool, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateTool, tool_),
  };
  BeUpdateTool_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeUpdateTool_descriptor_,
      BeUpdateTool::default_instance_,
      BeUpdateTool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateTool, _has_bits_[0]),
      -1,
      -1,
      sizeof(BeUpdateTool),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateTool, _internal_metadata_),
      -1);
  DpNormalResult_descriptor_ = file->message_type(13);
  static const int DpNormalResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpNormalResult, result_),
  };
  DpNormalResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DpNormalResult_descriptor_,
      DpNormalResult::default_instance_,
      DpNormalResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpNormalResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(DpNormalResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpNormalResult, _internal_metadata_),
      -1);
  GWG_FriendRequest_descriptor_ = file->message_type(14);
  static const int GWG_FriendRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, tuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, plat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, is_plat_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, action_id_),
  };
  GWG_FriendRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GWG_FriendRequest_descriptor_,
      GWG_FriendRequest::default_instance_,
      GWG_FriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(GWG_FriendRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWG_FriendRequest, _internal_metadata_),
      -1);
  ForwardInfo_descriptor_ = file->message_type(15);
  static const int ForwardInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, actionsenderplattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, senderurl_),
  };
  ForwardInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ForwardInfo_descriptor_,
      ForwardInfo::default_instance_,
      ForwardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ForwardInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInfo, _internal_metadata_),
      -1);
  WebFreeGift_descriptor_ = file->message_type(16);
  static const int WebFreeGift_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebFreeGift, uid_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebFreeGift, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebFreeGift, item_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebFreeGift, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebFreeGift, ask_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebFreeGift, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebFreeGift, web_fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebFreeGift, openid_forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebFreeGift, openid_from_),
  };
  WebFreeGift_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebFreeGift_descriptor_,
      WebFreeGift::default_instance_,
      WebFreeGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebFreeGift, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebFreeGift),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebFreeGift, _internal_metadata_),
      -1);
  WebAskFor_descriptor_ = file->message_type(17);
  static const int WebAskFor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAskFor, uid_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAskFor, openid_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAskFor, item_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAskFor, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAskFor, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAskFor, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAskFor, openid_forward_),
  };
  WebAskFor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebAskFor_descriptor_,
      WebAskFor::default_instance_,
      WebAskFor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAskFor, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebAskFor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAskFor, _internal_metadata_),
      -1);
  WebGiveFor_descriptor_ = file->message_type(18);
  static const int WebGiveFor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGiveFor, uid_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGiveFor, openid_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGiveFor, item_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGiveFor, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGiveFor, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGiveFor, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGiveFor, openid_forward_),
  };
  WebGiveFor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebGiveFor_descriptor_,
      WebGiveFor::default_instance_,
      WebGiveFor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGiveFor, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebGiveFor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGiveFor, _internal_metadata_),
      -1);
  WebInvite_descriptor_ = file->message_type(19);
  static const int WebInvite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebInvite, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebInvite, inviterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebInvite, fd_),
  };
  WebInvite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebInvite_descriptor_,
      WebInvite::default_instance_,
      WebInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebInvite, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebInvite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebInvite, _internal_metadata_),
      -1);
  Invite_descriptor_ = file->message_type(20);
  static const int Invite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invite, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invite, inviterid_),
  };
  Invite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Invite_descriptor_,
      Invite::default_instance_,
      Invite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invite, _has_bits_[0]),
      -1,
      -1,
      sizeof(Invite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invite, _internal_metadata_),
      -1);
  FriendRecallMsg_descriptor_ = file->message_type(21);
  static const int FriendRecallMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecallMsg, uidme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecallMsg, uidother_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecallMsg, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecallMsg, name_),
  };
  FriendRecallMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FriendRecallMsg_descriptor_,
      FriendRecallMsg::default_instance_,
      FriendRecallMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecallMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(FriendRecallMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecallMsg, _internal_metadata_),
      -1);
  MultiLevelFriendPoint_descriptor_ = file->message_type(22);
  static const int MultiLevelFriendPoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLevelFriendPoint, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLevelFriendPoint, pointadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLevelFriendPoint, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLevelFriendPoint, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLevelFriendPoint, level_),
  };
  MultiLevelFriendPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiLevelFriendPoint_descriptor_,
      MultiLevelFriendPoint::default_instance_,
      MultiLevelFriendPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLevelFriendPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(MultiLevelFriendPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLevelFriendPoint, _internal_metadata_),
      -1);
  TalentShow_descriptor_ = file->message_type(23);
  static const int TalentShow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentShow, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentShow, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentShow, weight_),
  };
  TalentShow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TalentShow_descriptor_,
      TalentShow::default_instance_,
      TalentShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentShow, _has_bits_[0]),
      -1,
      -1,
      sizeof(TalentShow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentShow, _internal_metadata_),
      -1);
  TalentShowList_descriptor_ = file->message_type(24);
  static const int TalentShowList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentShowList, item_),
  };
  TalentShowList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TalentShowList_descriptor_,
      TalentShowList::default_instance_,
      TalentShowList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentShowList, _has_bits_[0]),
      -1,
      -1,
      sizeof(TalentShowList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentShowList, _internal_metadata_),
      -1);
  FriendSendGift_descriptor_ = file->message_type(25);
  static const int FriendSendGift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendSendGift, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendSendGift, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendSendGift, uid_),
  };
  FriendSendGift_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FriendSendGift_descriptor_,
      FriendSendGift::default_instance_,
      FriendSendGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendSendGift, _has_bits_[0]),
      -1,
      -1,
      sizeof(FriendSendGift),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendSendGift, _internal_metadata_),
      -1);
  FortuneSteal_descriptor_ = file->message_type(26);
  static const int FortuneSteal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortuneSteal, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortuneSteal, nameactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortuneSteal, uidactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortuneSteal, uidpassive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortuneSteal, point_),
  };
  FortuneSteal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FortuneSteal_descriptor_,
      FortuneSteal::default_instance_,
      FortuneSteal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortuneSteal, _has_bits_[0]),
      -1,
      -1,
      sizeof(FortuneSteal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortuneSteal, _internal_metadata_),
      -1);
  ChiefVote_descriptor_ = file->message_type(27);
  static const int ChiefVote_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiefVote, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiefVote, nameactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiefVote, uidactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiefVote, uidpassive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiefVote, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiefVote, succ_),
  };
  ChiefVote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChiefVote_descriptor_,
      ChiefVote::default_instance_,
      ChiefVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiefVote, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChiefVote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChiefVote, _internal_metadata_),
      -1);
  LotteryTimer_descriptor_ = file->message_type(28);
  static const int LotteryTimer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryTimer, roomid_),
  };
  LotteryTimer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LotteryTimer_descriptor_,
      LotteryTimer::default_instance_,
      LotteryTimer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryTimer, _has_bits_[0]),
      -1,
      -1,
      sizeof(LotteryTimer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryTimer, _internal_metadata_),
      -1);
  BeUpdateBattleCnt_descriptor_ = file->message_type(29);
  static const int BeUpdateBattleCnt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateBattleCnt, battlecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateBattleCnt, todaybattlecnt_),
  };
  BeUpdateBattleCnt_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeUpdateBattleCnt_descriptor_,
      BeUpdateBattleCnt::default_instance_,
      BeUpdateBattleCnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateBattleCnt, _has_bits_[0]),
      -1,
      -1,
      sizeof(BeUpdateBattleCnt),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeUpdateBattleCnt, _internal_metadata_),
      -1);
  Admin_AddExp_Req_descriptor_ = file->message_type(30);
  static const int Admin_AddExp_Req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, fromweb_),
  };
  Admin_AddExp_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddExp_Req_descriptor_,
      Admin_AddExp_Req::default_instance_,
      Admin_AddExp_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddExp_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Req, _internal_metadata_),
      -1);
  Admin_AddExp_Rsp_descriptor_ = file->message_type(31);
  static const int Admin_AddExp_Rsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, oldlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, oldexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, newlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, newexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, succ_),
  };
  Admin_AddExp_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddExp_Rsp_descriptor_,
      Admin_AddExp_Rsp::default_instance_,
      Admin_AddExp_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddExp_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddExp_Rsp, _internal_metadata_),
      -1);
  Admin_AddGold_Req_descriptor_ = file->message_type(32);
  static const int Admin_AddGold_Req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Req, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Req, fromweb_),
  };
  Admin_AddGold_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddGold_Req_descriptor_,
      Admin_AddGold_Req::default_instance_,
      Admin_AddGold_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddGold_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Req, _internal_metadata_),
      -1);
  Admin_AddGold_Rsp_descriptor_ = file->message_type(33);
  static const int Admin_AddGold_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Rsp, oldgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Rsp, newgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Rsp, succ_),
  };
  Admin_AddGold_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddGold_Rsp_descriptor_,
      Admin_AddGold_Rsp::default_instance_,
      Admin_AddGold_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddGold_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGold_Rsp, _internal_metadata_),
      -1);
  Admin_Clear_Req_descriptor_ = file->message_type(34);
  static const int Admin_Clear_Req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Req, fromweb_),
  };
  Admin_Clear_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_Clear_Req_descriptor_,
      Admin_Clear_Req::default_instance_,
      Admin_Clear_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_Clear_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Req, _internal_metadata_),
      -1);
  Admin_Clear_Rsp_descriptor_ = file->message_type(35);
  static const int Admin_Clear_Rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Rsp, succ_),
  };
  Admin_Clear_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_Clear_Rsp_descriptor_,
      Admin_Clear_Rsp::default_instance_,
      Admin_Clear_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_Clear_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Clear_Rsp, _internal_metadata_),
      -1);
  Admin_SetVal_Req_descriptor_ = file->message_type(36);
  static const int Admin_SetVal_Req_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Req, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Req, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Req, val_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Req, val_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Req, val_value2_),
  };
  Admin_SetVal_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_SetVal_Req_descriptor_,
      Admin_SetVal_Req::default_instance_,
      Admin_SetVal_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_SetVal_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Req, _internal_metadata_),
      -1);
  Admin_SetVal_Rsp_descriptor_ = file->message_type(37);
  static const int Admin_SetVal_Rsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Rsp, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Rsp, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Rsp, val_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Rsp, val_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Rsp, val_value2_),
  };
  Admin_SetVal_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_SetVal_Rsp_descriptor_,
      Admin_SetVal_Rsp::default_instance_,
      Admin_SetVal_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_SetVal_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetVal_Rsp, _internal_metadata_),
      -1);
  Admin_SetLevel_Req_descriptor_ = file->message_type(38);
  static const int Admin_SetLevel_Req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, fromweb_),
  };
  Admin_SetLevel_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_SetLevel_Req_descriptor_,
      Admin_SetLevel_Req::default_instance_,
      Admin_SetLevel_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_SetLevel_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Req, _internal_metadata_),
      -1);
  Admin_SetLevel_Rsp_descriptor_ = file->message_type(39);
  static const int Admin_SetLevel_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, oldlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, newlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, succ_),
  };
  Admin_SetLevel_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_SetLevel_Rsp_descriptor_,
      Admin_SetLevel_Rsp::default_instance_,
      Admin_SetLevel_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_SetLevel_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetLevel_Rsp, _internal_metadata_),
      -1);
  Admin_AddProp_Req_descriptor_ = file->message_type(40);
  static const int Admin_AddProp_Req_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Req, prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Req, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Req, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Req, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Req, sid_),
  };
  Admin_AddProp_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddProp_Req_descriptor_,
      Admin_AddProp_Req::default_instance_,
      Admin_AddProp_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddProp_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Req, _internal_metadata_),
      -1);
  Admin_AddProp_Rsp_descriptor_ = file->message_type(41);
  static const int Admin_AddProp_Rsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Rsp, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Rsp, infoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Rsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Rsp, oldamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Rsp, newamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Rsp, succ_),
  };
  Admin_AddProp_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddProp_Rsp_descriptor_,
      Admin_AddProp_Rsp::default_instance_,
      Admin_AddProp_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddProp_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddProp_Rsp, _internal_metadata_),
      -1);
  Admin_SetEquip_Req_descriptor_ = file->message_type(42);
  static const int Admin_SetEquip_Req_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, infoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, equiplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, atklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, deflevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, agilitylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, luckylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, fromweb_),
  };
  Admin_SetEquip_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_SetEquip_Req_descriptor_,
      Admin_SetEquip_Req::default_instance_,
      Admin_SetEquip_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_SetEquip_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Req, _internal_metadata_),
      -1);
  Admin_SetEquip_Rsp_descriptor_ = file->message_type(43);
  static const int Admin_SetEquip_Rsp_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, infoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, equiplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, atklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, deflevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, agilitylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, luckylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, succ_),
  };
  Admin_SetEquip_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_SetEquip_Rsp_descriptor_,
      Admin_SetEquip_Rsp::default_instance_,
      Admin_SetEquip_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_SetEquip_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetEquip_Rsp, _internal_metadata_),
      -1);
  Admin_UserInfo_Req_descriptor_ = file->message_type(44);
  static const int Admin_UserInfo_Req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Req, fromweb_),
  };
  Admin_UserInfo_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_UserInfo_Req_descriptor_,
      Admin_UserInfo_Req::default_instance_,
      Admin_UserInfo_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_UserInfo_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Req, _internal_metadata_),
      -1);
  Admin_UserInfo_Rsp_descriptor_ = file->message_type(45);
  static const int Admin_UserInfo_Rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Rsp, succ_),
  };
  Admin_UserInfo_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_UserInfo_Rsp_descriptor_,
      Admin_UserInfo_Rsp::default_instance_,
      Admin_UserInfo_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_UserInfo_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_UserInfo_Rsp, _internal_metadata_),
      -1);
  Admin_AddGuest_Req_descriptor_ = file->message_type(46);
  static const int Admin_AddGuest_Req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Req, group_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Req, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Req, map_id_),
  };
  Admin_AddGuest_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddGuest_Req_descriptor_,
      Admin_AddGuest_Req::default_instance_,
      Admin_AddGuest_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddGuest_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Req, _internal_metadata_),
      -1);
  Admin_AddGuest_Rsp_descriptor_ = file->message_type(47);
  static const int Admin_AddGuest_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Rsp, current_group_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Rsp, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Rsp, map_id_),
  };
  Admin_AddGuest_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddGuest_Rsp_descriptor_,
      Admin_AddGuest_Rsp::default_instance_,
      Admin_AddGuest_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddGuest_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGuest_Rsp, _internal_metadata_),
      -1);
  Admin_SetPublicPraise_Req_descriptor_ = file->message_type(48);
  static const int Admin_SetPublicPraise_Req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Req, public_praise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Req, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Req, map_id_),
  };
  Admin_SetPublicPraise_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_SetPublicPraise_Req_descriptor_,
      Admin_SetPublicPraise_Req::default_instance_,
      Admin_SetPublicPraise_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_SetPublicPraise_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Req, _internal_metadata_),
      -1);
  Admin_SetPublicPraise_Rsp_descriptor_ = file->message_type(49);
  static const int Admin_SetPublicPraise_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Rsp, public_praise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Rsp, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Rsp, map_id_),
  };
  Admin_SetPublicPraise_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_SetPublicPraise_Rsp_descriptor_,
      Admin_SetPublicPraise_Rsp::default_instance_,
      Admin_SetPublicPraise_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_SetPublicPraise_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_SetPublicPraise_Rsp, _internal_metadata_),
      -1);
  Admin_DelGoods_Req_descriptor_ = file->message_type(50);
  static const int Admin_DelGoods_Req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Req, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Req, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Req, goods_amount_),
  };
  Admin_DelGoods_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_DelGoods_Req_descriptor_,
      Admin_DelGoods_Req::default_instance_,
      Admin_DelGoods_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_DelGoods_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Req, _internal_metadata_),
      -1);
  Admin_DelGoods_Rsp_descriptor_ = file->message_type(51);
  static const int Admin_DelGoods_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Rsp, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Rsp, goods_current_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Rsp, succ_),
  };
  Admin_DelGoods_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_DelGoods_Rsp_descriptor_,
      Admin_DelGoods_Rsp::default_instance_,
      Admin_DelGoods_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_DelGoods_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelGoods_Rsp, _internal_metadata_),
      -1);
  Admin_AddGoods_Req_descriptor_ = file->message_type(52);
  static const int Admin_AddGoods_Req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Req, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Req, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Req, goods_amount_),
  };
  Admin_AddGoods_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddGoods_Req_descriptor_,
      Admin_AddGoods_Req::default_instance_,
      Admin_AddGoods_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddGoods_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Req, _internal_metadata_),
      -1);
  Admin_AddGoods_Rsp_descriptor_ = file->message_type(53);
  static const int Admin_AddGoods_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Rsp, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Rsp, goods_current_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Rsp, succ_),
  };
  Admin_AddGoods_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddGoods_Rsp_descriptor_,
      Admin_AddGoods_Rsp::default_instance_,
      Admin_AddGoods_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddGoods_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddGoods_Rsp, _internal_metadata_),
      -1);
  Admin_Common_Req_descriptor_ = file->message_type(54);
  static const int Admin_Common_Req_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Req, func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Req, arg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Req, arg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Req, arg3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Req, arg4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Req, gid_),
  };
  Admin_Common_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_Common_Req_descriptor_,
      Admin_Common_Req::default_instance_,
      Admin_Common_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_Common_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Req, _internal_metadata_),
      -1);
  Admin_Common_Rsp_descriptor_ = file->message_type(55);
  static const int Admin_Common_Rsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Rsp, func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Rsp, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Rsp, arg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Rsp, arg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Rsp, arg3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Rsp, arg4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Rsp, gid_),
  };
  Admin_Common_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_Common_Rsp_descriptor_,
      Admin_Common_Rsp::default_instance_,
      Admin_Common_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_Common_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Common_Rsp, _internal_metadata_),
      -1);
  Admin_DelProp_Req_descriptor_ = file->message_type(56);
  static const int Admin_DelProp_Req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Req, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Req, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Req, propid_),
  };
  Admin_DelProp_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_DelProp_Req_descriptor_,
      Admin_DelProp_Req::default_instance_,
      Admin_DelProp_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_DelProp_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Req, _internal_metadata_),
      -1);
  Admin_DelProp_Rsp_descriptor_ = file->message_type(57);
  static const int Admin_DelProp_Rsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Rsp, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Rsp, infoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Rsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Rsp, delamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Rsp, succ_),
  };
  Admin_DelProp_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_DelProp_Rsp_descriptor_,
      Admin_DelProp_Rsp::default_instance_,
      Admin_DelProp_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_DelProp_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DelProp_Rsp, _internal_metadata_),
      -1);
  Admin_RunTask_Req_descriptor_ = file->message_type(58);
  static const int Admin_RunTask_Req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Req, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Req, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Req, fromweb_),
  };
  Admin_RunTask_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_RunTask_Req_descriptor_,
      Admin_RunTask_Req::default_instance_,
      Admin_RunTask_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_RunTask_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Req, _internal_metadata_),
      -1);
  Admin_RunTask_Rsp_descriptor_ = file->message_type(59);
  static const int Admin_RunTask_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Rsp, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Rsp, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Rsp, succ_),
  };
  Admin_RunTask_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_RunTask_Rsp_descriptor_,
      Admin_RunTask_Rsp::default_instance_,
      Admin_RunTask_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_RunTask_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RunTask_Rsp, _internal_metadata_),
      -1);
  Admin_BroadCast_Req_descriptor_ = file->message_type(60);
  static const int Admin_BroadCast_Req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Req, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Req, fromweb_),
  };
  Admin_BroadCast_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_BroadCast_Req_descriptor_,
      Admin_BroadCast_Req::default_instance_,
      Admin_BroadCast_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_BroadCast_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Req, _internal_metadata_),
      -1);
  Admin_BroadCast_Rsp_descriptor_ = file->message_type(61);
  static const int Admin_BroadCast_Rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Rsp, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Rsp, succ_),
  };
  Admin_BroadCast_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_BroadCast_Rsp_descriptor_,
      Admin_BroadCast_Rsp::default_instance_,
      Admin_BroadCast_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_BroadCast_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BroadCast_Rsp, _internal_metadata_),
      -1);
  FluentPriceItem_descriptor_ = file->message_type(62);
  static const int FluentPriceItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluentPriceItem, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluentPriceItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluentPriceItem, rand_n1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluentPriceItem, rand_n2_),
  };
  FluentPriceItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FluentPriceItem_descriptor_,
      FluentPriceItem::default_instance_,
      FluentPriceItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluentPriceItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(FluentPriceItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluentPriceItem, _internal_metadata_),
      -1);
  Admin_FluentPrice_Req_descriptor_ = file->message_type(63);
  static const int Admin_FluentPrice_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FluentPrice_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FluentPrice_Req, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FluentPrice_Req, price_item_),
  };
  Admin_FluentPrice_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_FluentPrice_Req_descriptor_,
      Admin_FluentPrice_Req::default_instance_,
      Admin_FluentPrice_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FluentPrice_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_FluentPrice_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FluentPrice_Req, _internal_metadata_),
      -1);
  Admin_FluentPrice_Rsp_descriptor_ = file->message_type(64);
  static const int Admin_FluentPrice_Rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FluentPrice_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FluentPrice_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FluentPrice_Rsp, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FluentPrice_Rsp, price_item_),
  };
  Admin_FluentPrice_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_FluentPrice_Rsp_descriptor_,
      Admin_FluentPrice_Rsp::default_instance_,
      Admin_FluentPrice_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FluentPrice_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_FluentPrice_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FluentPrice_Rsp, _internal_metadata_),
      -1);
  Admin_StatisticsOnLinePeople_Req_descriptor_ = file->message_type(65);
  static const int Admin_StatisticsOnLinePeople_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_StatisticsOnLinePeople_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_StatisticsOnLinePeople_Req, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_StatisticsOnLinePeople_Req, gid_),
  };
  Admin_StatisticsOnLinePeople_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_StatisticsOnLinePeople_Req_descriptor_,
      Admin_StatisticsOnLinePeople_Req::default_instance_,
      Admin_StatisticsOnLinePeople_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_StatisticsOnLinePeople_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_StatisticsOnLinePeople_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_StatisticsOnLinePeople_Req, _internal_metadata_),
      -1);
  Admin_StatisticsOnLinePeople_Rsp_descriptor_ = file->message_type(66);
  static const int Admin_StatisticsOnLinePeople_Rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_StatisticsOnLinePeople_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_StatisticsOnLinePeople_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_StatisticsOnLinePeople_Rsp, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_StatisticsOnLinePeople_Rsp, online_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_StatisticsOnLinePeople_Rsp, gid_),
  };
  Admin_StatisticsOnLinePeople_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_StatisticsOnLinePeople_Rsp_descriptor_,
      Admin_StatisticsOnLinePeople_Rsp::default_instance_,
      Admin_StatisticsOnLinePeople_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_StatisticsOnLinePeople_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_StatisticsOnLinePeople_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_StatisticsOnLinePeople_Rsp, _internal_metadata_),
      -1);
  Admin_KickPlayer_Req_descriptor_ = file->message_type(67);
  static const int Admin_KickPlayer_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_KickPlayer_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_KickPlayer_Req, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_KickPlayer_Req, uid_),
  };
  Admin_KickPlayer_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_KickPlayer_Req_descriptor_,
      Admin_KickPlayer_Req::default_instance_,
      Admin_KickPlayer_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_KickPlayer_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_KickPlayer_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_KickPlayer_Req, _internal_metadata_),
      -1);
  Admin_KickPlayer_Rsp_descriptor_ = file->message_type(68);
  static const int Admin_KickPlayer_Rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_KickPlayer_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_KickPlayer_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_KickPlayer_Rsp, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_KickPlayer_Rsp, uid_),
  };
  Admin_KickPlayer_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_KickPlayer_Rsp_descriptor_,
      Admin_KickPlayer_Rsp::default_instance_,
      Admin_KickPlayer_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_KickPlayer_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_KickPlayer_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_KickPlayer_Rsp, _internal_metadata_),
      -1);
  Admin_STR_Req_descriptor_ = file->message_type(69);
  static const int Admin_STR_Req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Req, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Req, openid_),
  };
  Admin_STR_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_STR_Req_descriptor_,
      Admin_STR_Req::default_instance_,
      Admin_STR_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_STR_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Req, _internal_metadata_),
      -1);
  Admin_STR_Rsp_descriptor_ = file->message_type(70);
  static const int Admin_STR_Rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Rsp, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Rsp, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Rsp, openid_),
  };
  Admin_STR_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_STR_Rsp_descriptor_,
      Admin_STR_Rsp::default_instance_,
      Admin_STR_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_STR_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_STR_Rsp, _internal_metadata_),
      -1);
  WebUnlock_descriptor_ = file->message_type(71);
  static const int WebUnlock_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebUnlock, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebUnlock, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebUnlock, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebUnlock, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebUnlock, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebUnlock, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebUnlock, infodetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebUnlock, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebUnlock, key_),
  };
  WebUnlock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebUnlock_descriptor_,
      WebUnlock::default_instance_,
      WebUnlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebUnlock, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebUnlock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebUnlock, _internal_metadata_),
      -1);
  WebAddEmployee_descriptor_ = file->message_type(72);
  static const int WebAddEmployee_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAddEmployee, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAddEmployee, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAddEmployee, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAddEmployee, hiretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAddEmployee, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAddEmployee, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAddEmployee, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAddEmployee, infodetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAddEmployee, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAddEmployee, key_),
  };
  WebAddEmployee_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebAddEmployee_descriptor_,
      WebAddEmployee::default_instance_,
      WebAddEmployee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAddEmployee, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebAddEmployee),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebAddEmployee, _internal_metadata_),
      -1);
  WebBuyDetail_descriptor_ = file->message_type(73);
  static const int WebBuyDetail_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyDetail, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyDetail, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyDetail, indate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyDetail, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyDetail, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyDetail, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyDetail, direction_),
  };
  WebBuyDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebBuyDetail_descriptor_,
      WebBuyDetail::default_instance_,
      WebBuyDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyDetail, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebBuyDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyDetail, _internal_metadata_),
      -1);
  WebBuy_descriptor_ = file->message_type(74);
  static const int WebBuy_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, leftcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, bandcoincost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, infodetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, directgive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, limited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, use_openid_),
  };
  WebBuy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebBuy_descriptor_,
      WebBuy::default_instance_,
      WebBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebBuy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy, _internal_metadata_),
      -1);
  WebBuy3_descriptor_ = file->message_type(75);
  static const int WebBuy3_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy3, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy3, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy3, valuea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy3, valueb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy3, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy3, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy3, succ_),
  };
  WebBuy3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebBuy3_descriptor_,
      WebBuy3::default_instance_,
      WebBuy3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy3, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebBuy3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuy3, _internal_metadata_),
      -1);
  WebLengthenIndateDetail_descriptor_ = file->message_type(76);
  static const int WebLengthenIndateDetail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndateDetail, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndateDetail, bagpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndateDetail, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndateDetail, indate_),
  };
  WebLengthenIndateDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebLengthenIndateDetail_descriptor_,
      WebLengthenIndateDetail::default_instance_,
      WebLengthenIndateDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndateDetail, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebLengthenIndateDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndateDetail, _internal_metadata_),
      -1);
  WebLengthenIndate_descriptor_ = file->message_type(77);
  static const int WebLengthenIndate_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndate, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndate, leftcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndate, bandcoincost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndate, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndate, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndate, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndate, infodetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndate, fd_),
  };
  WebLengthenIndate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebLengthenIndate_descriptor_,
      WebLengthenIndate::default_instance_,
      WebLengthenIndate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndate, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebLengthenIndate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebLengthenIndate, _internal_metadata_),
      -1);
  WebCheckBandCoin_descriptor_ = file->message_type(78);
  static const int WebCheckBandCoin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebCheckBandCoin, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebCheckBandCoin, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebCheckBandCoin, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebCheckBandCoin, sid_),
  };
  WebCheckBandCoin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebCheckBandCoin_descriptor_,
      WebCheckBandCoin::default_instance_,
      WebCheckBandCoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebCheckBandCoin, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebCheckBandCoin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebCheckBandCoin, _internal_metadata_),
      -1);
  WebBuyCfm_descriptor_ = file->message_type(79);
  static const int WebBuyCfm_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyCfm, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyCfm, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyCfm, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyCfm, infodetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyCfm, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyCfm, key_),
  };
  WebBuyCfm_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WebBuyCfm_descriptor_,
      WebBuyCfm::default_instance_,
      WebBuyCfm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyCfm, _has_bits_[0]),
      -1,
      -1,
      sizeof(WebBuyCfm),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebBuyCfm, _internal_metadata_),
      -1);
  Admin_BanChat_Req_descriptor_ = file->message_type(80);
  static const int Admin_BanChat_Req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, isban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, fromweb_),
  };
  Admin_BanChat_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_BanChat_Req_descriptor_,
      Admin_BanChat_Req::default_instance_,
      Admin_BanChat_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_BanChat_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Req, _internal_metadata_),
      -1);
  Admin_BanChat_Rsp_descriptor_ = file->message_type(81);
  static const int Admin_BanChat_Rsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, isban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, succ_),
  };
  Admin_BanChat_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_BanChat_Rsp_descriptor_,
      Admin_BanChat_Rsp::default_instance_,
      Admin_BanChat_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_BanChat_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanChat_Rsp, _internal_metadata_),
      -1);
  Admin_BanLogin_Req_descriptor_ = file->message_type(82);
  static const int Admin_BanLogin_Req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, isban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, fromweb_),
  };
  Admin_BanLogin_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_BanLogin_Req_descriptor_,
      Admin_BanLogin_Req::default_instance_,
      Admin_BanLogin_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_BanLogin_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Req, _internal_metadata_),
      -1);
  Admin_BanLogin_Rsp_descriptor_ = file->message_type(83);
  static const int Admin_BanLogin_Rsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, isban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, succ_),
  };
  Admin_BanLogin_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_BanLogin_Rsp_descriptor_,
      Admin_BanLogin_Rsp::default_instance_,
      Admin_BanLogin_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_BanLogin_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BanLogin_Rsp, _internal_metadata_),
      -1);
  Admin_AddPoint_Req_descriptor_ = file->message_type(84);
  static const int Admin_AddPoint_Req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Req, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Req, fromweb_),
  };
  Admin_AddPoint_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddPoint_Req_descriptor_,
      Admin_AddPoint_Req::default_instance_,
      Admin_AddPoint_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddPoint_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Req, _internal_metadata_),
      -1);
  Admin_AddPoint_Rsp_descriptor_ = file->message_type(85);
  static const int Admin_AddPoint_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Rsp, oldpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Rsp, newpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Rsp, succ_),
  };
  Admin_AddPoint_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddPoint_Rsp_descriptor_,
      Admin_AddPoint_Rsp::default_instance_,
      Admin_AddPoint_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddPoint_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddPoint_Rsp, _internal_metadata_),
      -1);
  Admin_AddIndate_Req_descriptor_ = file->message_type(86);
  static const int Admin_AddIndate_Req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Req, infoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Req, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Req, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Req, fromweb_),
  };
  Admin_AddIndate_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddIndate_Req_descriptor_,
      Admin_AddIndate_Req::default_instance_,
      Admin_AddIndate_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddIndate_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Req, _internal_metadata_),
      -1);
  Admin_AddIndate_Rsp_descriptor_ = file->message_type(87);
  static const int Admin_AddIndate_Rsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Rsp, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Rsp, infoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Rsp, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Rsp, oldindate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Rsp, newindate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Rsp, succ_),
  };
  Admin_AddIndate_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddIndate_Rsp_descriptor_,
      Admin_AddIndate_Rsp::default_instance_,
      Admin_AddIndate_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddIndate_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddIndate_Rsp, _internal_metadata_),
      -1);
  Admin_FreshUser_Req_descriptor_ = file->message_type(88);
  static const int Admin_FreshUser_Req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Req, fromweb_),
  };
  Admin_FreshUser_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_FreshUser_Req_descriptor_,
      Admin_FreshUser_Req::default_instance_,
      Admin_FreshUser_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_FreshUser_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Req, _internal_metadata_),
      -1);
  Admin_FreshUser_Rsp_descriptor_ = file->message_type(89);
  static const int Admin_FreshUser_Rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Rsp, succ_),
  };
  Admin_FreshUser_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_FreshUser_Rsp_descriptor_,
      Admin_FreshUser_Rsp::default_instance_,
      Admin_FreshUser_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_FreshUser_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_FreshUser_Rsp, _internal_metadata_),
      -1);
  Admin_AddMedal_Req_descriptor_ = file->message_type(90);
  static const int Admin_AddMedal_Req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Req, medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Req, fromweb_),
  };
  Admin_AddMedal_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddMedal_Req_descriptor_,
      Admin_AddMedal_Req::default_instance_,
      Admin_AddMedal_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddMedal_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Req, _internal_metadata_),
      -1);
  Admin_AddMedal_Rsp_descriptor_ = file->message_type(91);
  static const int Admin_AddMedal_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Rsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Rsp, oldmedal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Rsp, newmedal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Rsp, fromweb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Rsp, succ_),
  };
  Admin_AddMedal_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_AddMedal_Rsp_descriptor_,
      Admin_AddMedal_Rsp::default_instance_,
      Admin_AddMedal_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_AddMedal_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_AddMedal_Rsp, _internal_metadata_),
      -1);
  Admin_Reload_Req_descriptor_ = file->message_type(92);
  static const int Admin_Reload_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Req, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Req, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Req, fromweb_),
  };
  Admin_Reload_Req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_Reload_Req_descriptor_,
      Admin_Reload_Req::default_instance_,
      Admin_Reload_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Req, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_Reload_Req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Req, _internal_metadata_),
      -1);
  Admin_Reload_Rsp_descriptor_ = file->message_type(93);
  static const int Admin_Reload_Rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Rsp, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Rsp, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Rsp, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Rsp, fromweb_),
  };
  Admin_Reload_Rsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Admin_Reload_Rsp_descriptor_,
      Admin_Reload_Rsp::default_instance_,
      Admin_Reload_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Rsp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Admin_Reload_Rsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_Reload_Rsp, _internal_metadata_),
      -1);
  UpdateGuestNumber_descriptor_ = file->message_type(94);
  static const int UpdateGuestNumber_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuestNumber, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuestNumber, guest_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuestNumber, time_),
  };
  UpdateGuestNumber_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateGuestNumber_descriptor_,
      UpdateGuestNumber::default_instance_,
      UpdateGuestNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuestNumber, _has_bits_[0]),
      -1,
      -1,
      sizeof(UpdateGuestNumber),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuestNumber, _internal_metadata_),
      -1);
  QQUnionCheckKey_descriptor_ = file->message_type(95);
  static const int QQUnionCheckKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionCheckKey, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionCheckKey, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionCheckKey, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionCheckKey, succ_),
  };
  QQUnionCheckKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QQUnionCheckKey_descriptor_,
      QQUnionCheckKey::default_instance_,
      QQUnionCheckKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionCheckKey, _has_bits_[0]),
      -1,
      -1,
      sizeof(QQUnionCheckKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionCheckKey, _internal_metadata_),
      -1);
  QQUnionCheckOpenId_descriptor_ = file->message_type(96);
  static const int QQUnionCheckOpenId_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionCheckOpenId, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionCheckOpenId, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionCheckOpenId, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionCheckOpenId, succ_),
  };
  QQUnionCheckOpenId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QQUnionCheckOpenId_descriptor_,
      QQUnionCheckOpenId::default_instance_,
      QQUnionCheckOpenId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionCheckOpenId, _has_bits_[0]),
      -1,
      -1,
      sizeof(QQUnionCheckOpenId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionCheckOpenId, _internal_metadata_),
      -1);
  QQUnionAddItem_descriptor_ = file->message_type(97);
  static const int QQUnionAddItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionAddItem, adminfd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionAddItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionAddItem, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionAddItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionAddItem, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionAddItem, succ_),
  };
  QQUnionAddItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QQUnionAddItem_descriptor_,
      QQUnionAddItem::default_instance_,
      QQUnionAddItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionAddItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(QQUnionAddItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQUnionAddItem, _internal_metadata_),
      -1);
  Wap_Str_Request_descriptor_ = file->message_type(98);
  static const int Wap_Str_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Request, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Request, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Request, secret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Request, cmd_),
  };
  Wap_Str_Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Wap_Str_Request_descriptor_,
      Wap_Str_Request::default_instance_,
      Wap_Str_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(Wap_Str_Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Request, _internal_metadata_),
      -1);
  Wap_Str_Response_descriptor_ = file->message_type(99);
  static const int Wap_Str_Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Response, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Response, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Response, secret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Response, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Response, succ_),
  };
  Wap_Str_Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Wap_Str_Response_descriptor_,
      Wap_Str_Response::default_instance_,
      Wap_Str_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Response, _has_bits_[0]),
      -1,
      -1,
      sizeof(Wap_Str_Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wap_Str_Response, _internal_metadata_),
      -1);
  HttpRequestV3_descriptor_ = file->message_type(100);
  static const int HttpRequestV3_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequestV3, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequestV3, postdata_),
  };
  HttpRequestV3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HttpRequestV3_descriptor_,
      HttpRequestV3::default_instance_,
      HttpRequestV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequestV3, _has_bits_[0]),
      -1,
      -1,
      sizeof(HttpRequestV3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequestV3, _internal_metadata_),
      -1);
  SimpleMarkUser_descriptor_ = file->message_type(101);
  static const int SimpleMarkUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarkUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarkUser, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarkUser, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarkUser, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarkUser, svalue_),
  };
  SimpleMarkUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleMarkUser_descriptor_,
      SimpleMarkUser::default_instance_,
      SimpleMarkUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarkUser, _has_bits_[0]),
      -1,
      -1,
      sizeof(SimpleMarkUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarkUser, _internal_metadata_),
      -1);
  InviteFriendLvlSucc_descriptor_ = file->message_type(102);
  static const int InviteFriendLvlSucc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendLvlSucc, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendLvlSucc, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendLvlSucc, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendLvlSucc, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendLvlSucc, nowloginday_),
  };
  InviteFriendLvlSucc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InviteFriendLvlSucc_descriptor_,
      InviteFriendLvlSucc::default_instance_,
      InviteFriendLvlSucc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendLvlSucc, _has_bits_[0]),
      -1,
      -1,
      sizeof(InviteFriendLvlSucc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendLvlSucc, _internal_metadata_),
      -1);
  Event_descriptor_ = file->message_type(103);
  static const int Event_offsets_[119] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, fromworld_fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, hallsrvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, workingstatus_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, userlogin_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, userlogin_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, userauth_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, userauth_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, sendremoteuser_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, http_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, be_belottery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, be_beupdatewininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, be_beupdateexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, be_beupdatetool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, dp_dpnormalresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, lotterytimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, be_beupdatebattlecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, wg_userleave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, friendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, forwardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddexp_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddexp_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddgold_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddgold_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminsetlevel_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminsetlevel_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddprop_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddprop_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminsetequip_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminsetequip_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminuserinfo_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminuserinfo_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, admindelprop_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, admindelprop_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, webbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminruntask_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminruntask_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminbanchat_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminbanchat_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminbanlogin_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminbanlogin_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddpoint_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddpoint_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddindate_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddindate_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminfreshuser_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminfreshuser_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddmedal_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddmedal_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, weblengthenindate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, webcheckbandcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminbroadcast_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminbroadcast_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminreload_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminreload_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, update_guest_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminfluentprice_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminfluentprice_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, webunlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, webaddemployee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddgoods_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddgoods_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminsetpublicpraise_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminsetpublicpraise_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddguest_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminaddguest_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, admindelgoods_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, admindelgoods_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminclear_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminclear_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminonlinenum_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminonlinenum_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminkickplayer_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminkickplayer_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, webinvite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, invite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminstr_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminstr_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, webbugcfm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminsetval_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, adminsetval_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, webask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, webgive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, pushbackcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, qqunion_additem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, qqunion_checkopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, qqunion_checkkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, multi_level_friend_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, admin_common_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, admin_common_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, talent_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, talent_show_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, rankkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, freegift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, friend_send_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, fortune_steal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, wap_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, wap_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, friend_recall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, simplemare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, webbuy3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, center_logic_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, invitefriddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, mse_mseauthstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, mse_msefuncswich_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, mce_mcegatewayfunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, mse_msegatewayfunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, mse_msefriendlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, mce_mceheartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, mce_mceactioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, mse_mseactioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, mse_mserank_),
  };
  Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      -1,
      -1,
      sizeof(Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CenterLogicValue_descriptor_, &CenterLogicValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserLogin_Req_descriptor_, &UserLogin_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserLogin_Rsp_descriptor_, &UserLogin_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WG_UserLeave_descriptor_, &WG_UserLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorkingStatus_Req_descriptor_, &WorkingStatus_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserAuth_Req_descriptor_, &UserAuth_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserAuth_Rsp_descriptor_, &UserAuth_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendRemoteUser_Req_descriptor_, &SendRemoteUser_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HallEnterRoom_descriptor_, &HallEnterRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeLottery_descriptor_, &BeLottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeUpdateWinInfo_descriptor_, &BeUpdateWinInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeUpdateExp_descriptor_, &BeUpdateExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeUpdateTool_descriptor_, &BeUpdateTool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DpNormalResult_descriptor_, &DpNormalResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GWG_FriendRequest_descriptor_, &GWG_FriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ForwardInfo_descriptor_, &ForwardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebFreeGift_descriptor_, &WebFreeGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebAskFor_descriptor_, &WebAskFor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebGiveFor_descriptor_, &WebGiveFor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebInvite_descriptor_, &WebInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Invite_descriptor_, &Invite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FriendRecallMsg_descriptor_, &FriendRecallMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiLevelFriendPoint_descriptor_, &MultiLevelFriendPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TalentShow_descriptor_, &TalentShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TalentShowList_descriptor_, &TalentShowList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FriendSendGift_descriptor_, &FriendSendGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FortuneSteal_descriptor_, &FortuneSteal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChiefVote_descriptor_, &ChiefVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LotteryTimer_descriptor_, &LotteryTimer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeUpdateBattleCnt_descriptor_, &BeUpdateBattleCnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddExp_Req_descriptor_, &Admin_AddExp_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddExp_Rsp_descriptor_, &Admin_AddExp_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddGold_Req_descriptor_, &Admin_AddGold_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddGold_Rsp_descriptor_, &Admin_AddGold_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_Clear_Req_descriptor_, &Admin_Clear_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_Clear_Rsp_descriptor_, &Admin_Clear_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_SetVal_Req_descriptor_, &Admin_SetVal_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_SetVal_Rsp_descriptor_, &Admin_SetVal_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_SetLevel_Req_descriptor_, &Admin_SetLevel_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_SetLevel_Rsp_descriptor_, &Admin_SetLevel_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddProp_Req_descriptor_, &Admin_AddProp_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddProp_Rsp_descriptor_, &Admin_AddProp_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_SetEquip_Req_descriptor_, &Admin_SetEquip_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_SetEquip_Rsp_descriptor_, &Admin_SetEquip_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_UserInfo_Req_descriptor_, &Admin_UserInfo_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_UserInfo_Rsp_descriptor_, &Admin_UserInfo_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddGuest_Req_descriptor_, &Admin_AddGuest_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddGuest_Rsp_descriptor_, &Admin_AddGuest_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_SetPublicPraise_Req_descriptor_, &Admin_SetPublicPraise_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_SetPublicPraise_Rsp_descriptor_, &Admin_SetPublicPraise_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_DelGoods_Req_descriptor_, &Admin_DelGoods_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_DelGoods_Rsp_descriptor_, &Admin_DelGoods_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddGoods_Req_descriptor_, &Admin_AddGoods_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddGoods_Rsp_descriptor_, &Admin_AddGoods_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_Common_Req_descriptor_, &Admin_Common_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_Common_Rsp_descriptor_, &Admin_Common_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_DelProp_Req_descriptor_, &Admin_DelProp_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_DelProp_Rsp_descriptor_, &Admin_DelProp_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_RunTask_Req_descriptor_, &Admin_RunTask_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_RunTask_Rsp_descriptor_, &Admin_RunTask_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_BroadCast_Req_descriptor_, &Admin_BroadCast_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_BroadCast_Rsp_descriptor_, &Admin_BroadCast_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FluentPriceItem_descriptor_, &FluentPriceItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_FluentPrice_Req_descriptor_, &Admin_FluentPrice_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_FluentPrice_Rsp_descriptor_, &Admin_FluentPrice_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_StatisticsOnLinePeople_Req_descriptor_, &Admin_StatisticsOnLinePeople_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_StatisticsOnLinePeople_Rsp_descriptor_, &Admin_StatisticsOnLinePeople_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_KickPlayer_Req_descriptor_, &Admin_KickPlayer_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_KickPlayer_Rsp_descriptor_, &Admin_KickPlayer_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_STR_Req_descriptor_, &Admin_STR_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_STR_Rsp_descriptor_, &Admin_STR_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebUnlock_descriptor_, &WebUnlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebAddEmployee_descriptor_, &WebAddEmployee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebBuyDetail_descriptor_, &WebBuyDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebBuy_descriptor_, &WebBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebBuy3_descriptor_, &WebBuy3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebLengthenIndateDetail_descriptor_, &WebLengthenIndateDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebLengthenIndate_descriptor_, &WebLengthenIndate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebCheckBandCoin_descriptor_, &WebCheckBandCoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WebBuyCfm_descriptor_, &WebBuyCfm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_BanChat_Req_descriptor_, &Admin_BanChat_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_BanChat_Rsp_descriptor_, &Admin_BanChat_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_BanLogin_Req_descriptor_, &Admin_BanLogin_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_BanLogin_Rsp_descriptor_, &Admin_BanLogin_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddPoint_Req_descriptor_, &Admin_AddPoint_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddPoint_Rsp_descriptor_, &Admin_AddPoint_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddIndate_Req_descriptor_, &Admin_AddIndate_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddIndate_Rsp_descriptor_, &Admin_AddIndate_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_FreshUser_Req_descriptor_, &Admin_FreshUser_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_FreshUser_Rsp_descriptor_, &Admin_FreshUser_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddMedal_Req_descriptor_, &Admin_AddMedal_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_AddMedal_Rsp_descriptor_, &Admin_AddMedal_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_Reload_Req_descriptor_, &Admin_Reload_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Admin_Reload_Rsp_descriptor_, &Admin_Reload_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateGuestNumber_descriptor_, &UpdateGuestNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QQUnionCheckKey_descriptor_, &QQUnionCheckKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QQUnionCheckOpenId_descriptor_, &QQUnionCheckOpenId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QQUnionAddItem_descriptor_, &QQUnionAddItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Wap_Str_Request_descriptor_, &Wap_Str_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Wap_Str_Response_descriptor_, &Wap_Str_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HttpRequestV3_descriptor_, &HttpRequestV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleMarkUser_descriptor_, &SimpleMarkUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InviteFriendLvlSucc_descriptor_, &InviteFriendLvlSucc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Event_descriptor_, &Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_event_2eproto() {
  delete CenterLogicValue::default_instance_;
  delete CenterLogicValue_reflection_;
  delete UserLogin_Req::default_instance_;
  delete UserLogin_Req_reflection_;
  delete UserLogin_Rsp::default_instance_;
  delete UserLogin_Rsp_reflection_;
  delete WG_UserLeave::default_instance_;
  delete WG_UserLeave_reflection_;
  delete WorkingStatus_Req::default_instance_;
  delete WorkingStatus_Req_reflection_;
  delete UserAuth_Req::default_instance_;
  delete UserAuth_Req_reflection_;
  delete UserAuth_Rsp::default_instance_;
  delete UserAuth_Rsp_reflection_;
  delete SendRemoteUser_Req::default_instance_;
  delete SendRemoteUser_Req_reflection_;
  delete HallEnterRoom::default_instance_;
  delete HallEnterRoom_reflection_;
  delete BeLottery::default_instance_;
  delete BeLottery_reflection_;
  delete BeUpdateWinInfo::default_instance_;
  delete BeUpdateWinInfo_reflection_;
  delete BeUpdateExp::default_instance_;
  delete BeUpdateExp_reflection_;
  delete BeUpdateTool::default_instance_;
  delete BeUpdateTool_reflection_;
  delete DpNormalResult::default_instance_;
  delete DpNormalResult_reflection_;
  delete GWG_FriendRequest::default_instance_;
  delete GWG_FriendRequest_reflection_;
  delete ForwardInfo::default_instance_;
  delete ForwardInfo_reflection_;
  delete ForwardInfo::_default_platid_;
  delete WebFreeGift::default_instance_;
  delete WebFreeGift_reflection_;
  delete WebAskFor::default_instance_;
  delete WebAskFor_reflection_;
  delete WebGiveFor::default_instance_;
  delete WebGiveFor_reflection_;
  delete WebInvite::default_instance_;
  delete WebInvite_reflection_;
  delete Invite::default_instance_;
  delete Invite_reflection_;
  delete FriendRecallMsg::default_instance_;
  delete FriendRecallMsg_reflection_;
  delete MultiLevelFriendPoint::default_instance_;
  delete MultiLevelFriendPoint_reflection_;
  delete TalentShow::default_instance_;
  delete TalentShow_reflection_;
  delete TalentShowList::default_instance_;
  delete TalentShowList_reflection_;
  delete FriendSendGift::default_instance_;
  delete FriendSendGift_reflection_;
  delete FortuneSteal::default_instance_;
  delete FortuneSteal_reflection_;
  delete ChiefVote::default_instance_;
  delete ChiefVote_reflection_;
  delete LotteryTimer::default_instance_;
  delete LotteryTimer_reflection_;
  delete BeUpdateBattleCnt::default_instance_;
  delete BeUpdateBattleCnt_reflection_;
  delete Admin_AddExp_Req::default_instance_;
  delete Admin_AddExp_Req_reflection_;
  delete Admin_AddExp_Rsp::default_instance_;
  delete Admin_AddExp_Rsp_reflection_;
  delete Admin_AddGold_Req::default_instance_;
  delete Admin_AddGold_Req_reflection_;
  delete Admin_AddGold_Rsp::default_instance_;
  delete Admin_AddGold_Rsp_reflection_;
  delete Admin_Clear_Req::default_instance_;
  delete Admin_Clear_Req_reflection_;
  delete Admin_Clear_Rsp::default_instance_;
  delete Admin_Clear_Rsp_reflection_;
  delete Admin_SetVal_Req::default_instance_;
  delete Admin_SetVal_Req_reflection_;
  delete Admin_SetVal_Rsp::default_instance_;
  delete Admin_SetVal_Rsp_reflection_;
  delete Admin_SetLevel_Req::default_instance_;
  delete Admin_SetLevel_Req_reflection_;
  delete Admin_SetLevel_Rsp::default_instance_;
  delete Admin_SetLevel_Rsp_reflection_;
  delete Admin_AddProp_Req::default_instance_;
  delete Admin_AddProp_Req_reflection_;
  delete Admin_AddProp_Rsp::default_instance_;
  delete Admin_AddProp_Rsp_reflection_;
  delete Admin_SetEquip_Req::default_instance_;
  delete Admin_SetEquip_Req_reflection_;
  delete Admin_SetEquip_Rsp::default_instance_;
  delete Admin_SetEquip_Rsp_reflection_;
  delete Admin_UserInfo_Req::default_instance_;
  delete Admin_UserInfo_Req_reflection_;
  delete Admin_UserInfo_Rsp::default_instance_;
  delete Admin_UserInfo_Rsp_reflection_;
  delete Admin_AddGuest_Req::default_instance_;
  delete Admin_AddGuest_Req_reflection_;
  delete Admin_AddGuest_Rsp::default_instance_;
  delete Admin_AddGuest_Rsp_reflection_;
  delete Admin_SetPublicPraise_Req::default_instance_;
  delete Admin_SetPublicPraise_Req_reflection_;
  delete Admin_SetPublicPraise_Rsp::default_instance_;
  delete Admin_SetPublicPraise_Rsp_reflection_;
  delete Admin_DelGoods_Req::default_instance_;
  delete Admin_DelGoods_Req_reflection_;
  delete Admin_DelGoods_Rsp::default_instance_;
  delete Admin_DelGoods_Rsp_reflection_;
  delete Admin_AddGoods_Req::default_instance_;
  delete Admin_AddGoods_Req_reflection_;
  delete Admin_AddGoods_Rsp::default_instance_;
  delete Admin_AddGoods_Rsp_reflection_;
  delete Admin_Common_Req::default_instance_;
  delete Admin_Common_Req_reflection_;
  delete Admin_Common_Rsp::default_instance_;
  delete Admin_Common_Rsp_reflection_;
  delete Admin_DelProp_Req::default_instance_;
  delete Admin_DelProp_Req_reflection_;
  delete Admin_DelProp_Rsp::default_instance_;
  delete Admin_DelProp_Rsp_reflection_;
  delete Admin_RunTask_Req::default_instance_;
  delete Admin_RunTask_Req_reflection_;
  delete Admin_RunTask_Rsp::default_instance_;
  delete Admin_RunTask_Rsp_reflection_;
  delete Admin_BroadCast_Req::default_instance_;
  delete Admin_BroadCast_Req_reflection_;
  delete Admin_BroadCast_Rsp::default_instance_;
  delete Admin_BroadCast_Rsp_reflection_;
  delete FluentPriceItem::default_instance_;
  delete FluentPriceItem_reflection_;
  delete Admin_FluentPrice_Req::default_instance_;
  delete Admin_FluentPrice_Req_reflection_;
  delete Admin_FluentPrice_Rsp::default_instance_;
  delete Admin_FluentPrice_Rsp_reflection_;
  delete Admin_StatisticsOnLinePeople_Req::default_instance_;
  delete Admin_StatisticsOnLinePeople_Req_reflection_;
  delete Admin_StatisticsOnLinePeople_Rsp::default_instance_;
  delete Admin_StatisticsOnLinePeople_Rsp_reflection_;
  delete Admin_KickPlayer_Req::default_instance_;
  delete Admin_KickPlayer_Req_reflection_;
  delete Admin_KickPlayer_Rsp::default_instance_;
  delete Admin_KickPlayer_Rsp_reflection_;
  delete Admin_STR_Req::default_instance_;
  delete Admin_STR_Req_reflection_;
  delete Admin_STR_Rsp::default_instance_;
  delete Admin_STR_Rsp_reflection_;
  delete WebUnlock::default_instance_;
  delete WebUnlock_reflection_;
  delete WebAddEmployee::default_instance_;
  delete WebAddEmployee_reflection_;
  delete WebBuyDetail::default_instance_;
  delete WebBuyDetail_reflection_;
  delete WebBuy::default_instance_;
  delete WebBuy_reflection_;
  delete WebBuy3::default_instance_;
  delete WebBuy3_reflection_;
  delete WebLengthenIndateDetail::default_instance_;
  delete WebLengthenIndateDetail_reflection_;
  delete WebLengthenIndate::default_instance_;
  delete WebLengthenIndate_reflection_;
  delete WebCheckBandCoin::default_instance_;
  delete WebCheckBandCoin_reflection_;
  delete WebBuyCfm::default_instance_;
  delete WebBuyCfm_reflection_;
  delete Admin_BanChat_Req::default_instance_;
  delete Admin_BanChat_Req_reflection_;
  delete Admin_BanChat_Rsp::default_instance_;
  delete Admin_BanChat_Rsp_reflection_;
  delete Admin_BanLogin_Req::default_instance_;
  delete Admin_BanLogin_Req_reflection_;
  delete Admin_BanLogin_Rsp::default_instance_;
  delete Admin_BanLogin_Rsp_reflection_;
  delete Admin_AddPoint_Req::default_instance_;
  delete Admin_AddPoint_Req_reflection_;
  delete Admin_AddPoint_Rsp::default_instance_;
  delete Admin_AddPoint_Rsp_reflection_;
  delete Admin_AddIndate_Req::default_instance_;
  delete Admin_AddIndate_Req_reflection_;
  delete Admin_AddIndate_Rsp::default_instance_;
  delete Admin_AddIndate_Rsp_reflection_;
  delete Admin_FreshUser_Req::default_instance_;
  delete Admin_FreshUser_Req_reflection_;
  delete Admin_FreshUser_Rsp::default_instance_;
  delete Admin_FreshUser_Rsp_reflection_;
  delete Admin_AddMedal_Req::default_instance_;
  delete Admin_AddMedal_Req_reflection_;
  delete Admin_AddMedal_Rsp::default_instance_;
  delete Admin_AddMedal_Rsp_reflection_;
  delete Admin_Reload_Req::default_instance_;
  delete Admin_Reload_Req_reflection_;
  delete Admin_Reload_Rsp::default_instance_;
  delete Admin_Reload_Rsp_reflection_;
  delete UpdateGuestNumber::default_instance_;
  delete UpdateGuestNumber_reflection_;
  delete QQUnionCheckKey::default_instance_;
  delete QQUnionCheckKey_reflection_;
  delete QQUnionCheckOpenId::default_instance_;
  delete QQUnionCheckOpenId_reflection_;
  delete QQUnionAddItem::default_instance_;
  delete QQUnionAddItem_reflection_;
  delete Wap_Str_Request::default_instance_;
  delete Wap_Str_Request_reflection_;
  delete Wap_Str_Response::default_instance_;
  delete Wap_Str_Response_reflection_;
  delete HttpRequestV3::default_instance_;
  delete HttpRequestV3_reflection_;
  delete SimpleMarkUser::default_instance_;
  delete SimpleMarkUser_reflection_;
  delete InviteFriendLvlSucc::default_instance_;
  delete InviteFriendLvlSucc_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
}

void protobuf_AddDesc_event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_MceActionInfo_2eproto();
  ::protobuf_AddDesc_MceGatewayFunction_2eproto();
  ::protobuf_AddDesc_MceHeartbeat_2eproto();
  ::protobuf_AddDesc_MseActionInfo_2eproto();
  ::protobuf_AddDesc_MseAuthState_2eproto();
  ::protobuf_AddDesc_MseFriendList_2eproto();
  ::protobuf_AddDesc_MseFuncSwich_2eproto();
  ::protobuf_AddDesc_MseGatewayFunction_2eproto();
  ::protobuf_AddDesc_MseRank_2eproto();
  ::protobuf_AddDesc_FriendInfoLite_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013event.proto\032\023MceActionInfo.proto\032\030MceG"
    "atewayFunction.proto\032\022MceHeartbeat.proto"
    "\032\023MseActionInfo.proto\032\022MseAuthState.prot"
    "o\032\023MseFriendList.proto\032\022MseFuncSwich.pro"
    "to\032\030MseGatewayFunction.proto\032\rMseRank.pr"
    "oto\032\024FriendInfoLite.proto\"<\n\020CenterLogic"
    "Value\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005\022\014\n\004ope"
    "r\030\003 \001(\005\"\271\002\n\rUserLogin_Req\022\016\n\006siteid\030\001 \002("
    "\005\022\023\n\013platform_id\030\002 \002(\t\022\014\n\004name\030\003 \002(\t\022\024\n\014"
    "profile_link\030\004 \002(\t\022\016\n\006gender\030\005 \002(\005\022\025\n\ris"
    "_yellow_dmd\030\006 \002(\010\022\032\n\022is_yellow_dmd_year\030"
    "\007 \002(\010\022\025\n\ryellow_dmd_lv\030\010 \002(\005\022\026\n\016friends_"
    "platid\030\t \003(\t\022\r\n\005webfd\030\n \002(\005\022\013\n\003sid\030\013 \002(\005"
    "\022\020\n\010open_key\030\014 \001(\t\022\025\n\rregister_type\030\r \001("
    "\005\022\023\n\013action_from\030\016 \001(\t\022\023\n\013device_from\030\017 "
    "\001(\t\"t\n\rUserLogin_Rsp\022\013\n\003uid\030\001 \002(\003\022\016\n\006sec"
    "ret\030\002 \002(\t\022\016\n\006server\030\003 \002(\t\022\014\n\004port\030\004 \002(\005\022"
    "\r\n\005webfd\030\005 \002(\005\022\013\n\003sid\030\006 \002(\005\022\014\n\004argv\030\007 \001("
    "\t\"\032\n\014WG_UserLeave\022\n\n\002fd\030\001 \002(\005\"0\n\021Working"
    "Status_Req\022\013\n\003gid\030\001 \002(\005\022\016\n\006finish\030\002 \002(\010\""
    ";\n\014UserAuth_Req\022\013\n\003uid\030\001 \002(\003\022\016\n\006secret\030\002"
    " \002(\003\022\016\n\006sockfd\030\003 \002(\005\"\034\n\014UserAuth_Rsp\022\014\n\004"
    "pass\030\001 \002(\010\"<\n\022SendRemoteUser_Req\022\013\n\003uid\030"
    "\001 \002(\003\022\013\n\003cmd\030\002 \002(\005\022\014\n\004text\030\003 \002(\t\"\017\n\rHall"
    "EnterRoom\"@\n\tBeLottery\022\017\n\007lottery\030\001 \002(\005\022"
    "\014\n\004sign\030\002 \002(\005\022\024\n\014lotteryLevel\030\003 \002(\005\"X\n\017B"
    "eUpdateWinInfo\022\014\n\004wins\030\001 \002(\010\022\021\n\tkillCoun"
    "t\030\002 \002(\005\022\022\n\nbattleMode\030\003 \001(\r\022\020\n\010roomType\030"
    "\004 \001(\r\"\036\n\013BeUpdateExp\022\017\n\007expDeta\030\001 \002(\005\")\n"
    "\014BeUpdateTool\022\013\n\003idx\030\001 \002(\005\022\014\n\004tool\030\002 \002(\005"
    "\" \n\016DpNormalResult\022\016\n\006result\030\001 \002(\005\"\263\001\n\021G"
    "WG_FriendRequest\022\020\n\004tuid\030\001 \001(\003:\002-1\022\022\n\003re"
    "t\030\002 \001(\010:\005false\022\035\n\004info\030\003 \001(\0132\017.FriendInf"
    "oLite\022\024\n\tplat_type\030\004 \001(\005:\0010\022\020\n\006platid\030\005 "
    "\001(\t:\000\022\034\n\016is_plat_friend\030\006 \001(\010:\004true\022\023\n\ta"
    "ction_id\030\007 \001(\t:\000\"}\n\013ForwardInfo\022\017\n\003uid\030\001"
    " \001(\003:\002-1\022\021\n\006platid\030\002 \001(\t:\0010\022\037\n\024ActionSen"
    "derPlatType\030\003 \001(\005:\0010\022\024\n\nsendername\030\004 \001(\t"
    ":\000\022\023\n\tsenderurl\030\005 \001(\t:\000\"\266\001\n\013WebFreeGift\022"
    "\020\n\010uid_from\030\001 \001(\003\022\016\n\006openid\030\002 \003(\t\022\024\n\014ite"
    "m_type_id\030\003 \003(\005\022\020\n\010item_num\030\004 \003(\005\022\020\n\010ask"
    "_type\030\005 \001(\005\022\016\n\006active\030\006 \001(\005\022\016\n\006web_fd\030\007 "
    "\001(\005\022\026\n\016openid_forward\030\010 \001(\t\022\023\n\013openid_fr"
    "om\030\t \001(\t\"\212\001\n\tWebAskFor\022\020\n\010uid_from\030\001 \001(\003"
    "\022\021\n\topenid_to\030\002 \003(\t\022\024\n\014item_type_id\030\003 \003("
    "\005\022\020\n\010item_num\030\004 \003(\005\022\014\n\004succ\030\005 \001(\005\022\n\n\002fd\030"
    "\006 \002(\005\022\026\n\016openid_forward\030\007 \001(\t\"\213\001\n\nWebGiv"
    "eFor\022\020\n\010uid_from\030\001 \001(\003\022\021\n\topenid_to\030\002 \003("
    "\t\022\024\n\014item_type_id\030\003 \003(\005\022\020\n\010item_num\030\004 \003("
    "\005\022\014\n\004succ\030\005 \001(\005\022\n\n\002fd\030\006 \002(\005\022\026\n\016openid_fo"
    "rward\030\007 \001(\t\":\n\tWebInvite\022\016\n\006platid\030\001 \002(\t"
    "\022\021\n\tinviterid\030\002 \002(\t\022\n\n\002fd\030\003 \002(\005\"+\n\006Invit"
    "e\022\016\n\006platid\030\001 \002(\t\022\021\n\tinviterid\030\002 \002(\t\"O\n\017"
    "FriendRecallMsg\022\r\n\005uidMe\030\001 \002(\003\022\020\n\010uidOth"
    "er\030\002 \002(\003\022\r\n\005level\030\003 \002(\005\022\014\n\004name\030\004 \002(\t\"e\n"
    "\025MultiLevelFriendPoint\022\014\n\004kind\030\001 \002(\005\022\020\n\010"
    "pointAdd\030\002 \002(\005\022\r\n\005point\030\003 \002(\005\022\016\n\006openid\030"
    "\004 \002(\t\022\r\n\005level\030\005 \002(\005\"7\n\nTalentShow\022\014\n\004na"
    "me\030\001 \002(\t\022\013\n\003uid\030\002 \002(\003\022\016\n\006weight\030\003 \002(\005\"+\n"
    "\016TalentShowList\022\031\n\004item\030\001 \003(\0132\013.TalentSh"
    "ow\";\n\016FriendSendGift\022\016\n\006itemId\030\001 \002(\005\022\014\n\004"
    "name\030\002 \002(\t\022\013\n\003uid\030\003 \002(\003\"f\n\014FortuneSteal\022"
    "\014\n\004kind\030\001 \002(\005\022\022\n\nnameActive\030\002 \002(\t\022\021\n\tuid"
    "Active\030\003 \002(\003\022\022\n\nuidPassive\030\004 \002(\003\022\r\n\005poin"
    "t\030\005 \002(\005\"o\n\tChiefVote\022\014\n\004kind\030\001 \002(\005\022\022\n\nna"
    "meActive\030\002 \002(\t\022\021\n\tuidActive\030\003 \002(\003\022\022\n\nuid"
    "Passive\030\004 \002(\003\022\013\n\003num\030\005 \002(\005\022\014\n\004succ\030\006 \002(\010"
    "\"\036\n\014LotteryTimer\022\016\n\006roomid\030\001 \002(\005\">\n\021BeUp"
    "dateBattleCnt\022\021\n\tbattleCnt\030\001 \002(\005\022\026\n\016toda"
    "yBattleCnt\030\002 \002(\005\"b\n\020Admin_AddExp_Req\022\013\n\003"
    "uid\030\001 \002(\003\022\013\n\003exp\030\002 \002(\005\022\013\n\003gid\030\003 \002(\005\022\017\n\007a"
    "dminfd\030\004 \002(\005\022\026\n\007fromweb\030\005 \001(\010:\005false\"\247\001\n"
    "\020Admin_AddExp_Rsp\022\013\n\003uid\030\001 \002(\003\022\020\n\010oldlev"
    "el\030\002 \002(\005\022\016\n\006oldexp\030\003 \002(\005\022\020\n\010newlevel\030\004 \002"
    "(\005\022\016\n\006newexp\030\005 \002(\005\022\013\n\003gid\030\006 \002(\005\022\017\n\007admin"
    "fd\030\007 \002(\005\022\026\n\007fromweb\030\010 \001(\010:\005false\022\014\n\004succ"
    "\030\t \002(\005\"d\n\021Admin_AddGold_Req\022\013\n\003uid\030\001 \002(\003"
    "\022\014\n\004gold\030\002 \002(\005\022\013\n\003gid\030\003 \002(\005\022\017\n\007adminfd\030\004"
    " \002(\005\022\026\n\007fromweb\030\005 \001(\010:\005false\"\206\001\n\021Admin_A"
    "ddGold_Rsp\022\013\n\003uid\030\001 \002(\003\022\017\n\007oldgold\030\002 \002(\005"
    "\022\017\n\007newgold\030\003 \002(\005\022\013\n\003gid\030\004 \002(\005\022\017\n\007adminf"
    "d\030\005 \002(\005\022\026\n\007fromweb\030\006 \001(\010:\005false\022\014\n\004succ\030"
    "\007 \002(\005\"T\n\017Admin_Clear_Req\022\013\n\003uid\030\001 \002(\003\022\013\n"
    "\003gid\030\002 \002(\005\022\017\n\007adminfd\030\003 \002(\005\022\026\n\007fromweb\030\004"
    " \001(\010:\005false\"b\n\017Admin_Clear_Rsp\022\013\n\003uid\030\001 "
    "\002(\003\022\013\n\003gid\030\002 \002(\005\022\017\n\007adminfd\030\003 \002(\005\022\026\n\007fro"
    "mweb\030\004 \001(\010:\005false\022\014\n\004succ\030\005 \002(\005\"\252\001\n\020Admi"
    "n_SetVal_Req\022\013\n\003uid\030\001 \002(\003\022\013\n\003gid\030\002 \002(\005\022\017"
    "\n\007adminfd\030\003 \002(\005\022\026\n\007fromweb\030\004 \001(\010:\005false\022"
    "\021\n\006map_id\030\005 \001(\005:\0010\022\023\n\010val_type\030\006 \001(\005:\0010\022"
    "\024\n\tval_value\030\007 \001(\003:\0010\022\025\n\nval_value2\030\010 \001("
    "\003:\0010\"\270\001\n\020Admin_SetVal_Rsp\022\013\n\003uid\030\001 \002(\003\022\013"
    "\n\003gid\030\002 \002(\005\022\017\n\007adminfd\030\003 \002(\005\022\026\n\007fromweb\030"
    "\004 \001(\010:\005false\022\014\n\004succ\030\005 \002(\005\022\021\n\006map_id\030\006 \001"
    "(\005:\0010\022\023\n\010val_type\030\007 \001(\005:\0010\022\024\n\tval_value\030"
    "\010 \001(\003:\0010\022\025\n\nval_value2\030\t \001(\003:\0010\"f\n\022Admin"
    "_SetLevel_Req\022\013\n\003uid\030\001 \002(\003\022\r\n\005level\030\002 \002("
    "\005\022\013\n\003gid\030\003 \002(\005\022\017\n\007adminfd\030\004 \002(\005\022\026\n\007fromw"
    "eb\030\005 \001(\010:\005false\"\211\001\n\022Admin_SetLevel_Rsp\022\013"
    "\n\003uid\030\001 \002(\003\022\020\n\010oldlevel\030\002 \002(\005\022\020\n\010newleve"
    "l\030\003 \002(\005\022\013\n\003gid\030\004 \002(\005\022\017\n\007adminfd\030\005 \002(\005\022\026\n"
    "\007fromweb\030\006 \001(\010:\005false\022\014\n\004succ\030\007 \002(\005\"\242\001\n\021"
    "Admin_AddProp_Req\022\013\n\003uid\030\001 \002(\003\022\014\n\004prop\030\002"
    " \002(\005\022\r\n\005level\030\003 \002(\005\022\016\n\006amount\030\004 \002(\005\022\013\n\003g"
    "id\030\005 \002(\005\022\017\n\007adminfd\030\006 \002(\005\022\026\n\007fromweb\030\007 \001"
    "(\010:\005false\022\020\n\010activeId\030\010 \001(\005\022\013\n\003sid\030\t \001(\005"
    "\"\271\001\n\021Admin_AddProp_Rsp\022\013\n\003uid\030\001 \002(\003\022\016\n\006p"
    "ropID\030\002 \002(\003\022\016\n\006infoID\030\003 \002(\005\022\r\n\005level\030\004 \002"
    "(\005\022\021\n\toldamount\030\005 \002(\005\022\021\n\tnewamount\030\006 \002(\005"
    "\022\013\n\003gid\030\007 \002(\005\022\017\n\007adminfd\030\010 \002(\005\022\026\n\007fromwe"
    "b\030\t \001(\010:\005false\022\014\n\004succ\030\n \002(\005\"\333\001\n\022Admin_S"
    "etEquip_Req\022\013\n\003uid\030\001 \002(\003\022\016\n\006infoID\030\002 \002(\005"
    "\022\020\n\010position\030\003 \002(\005\022\022\n\nequiplevel\030\004 \002(\005\022\020"
    "\n\010atklevel\030\005 \002(\005\022\020\n\010deflevel\030\006 \002(\005\022\024\n\014ag"
    "ilitylevel\030\007 \002(\005\022\022\n\nluckylevel\030\010 \002(\005\022\013\n\003"
    "gid\030\t \002(\005\022\017\n\007adminfd\030\n \002(\005\022\026\n\007fromweb\030\013 "
    "\001(\010:\005false\"\372\001\n\022Admin_SetEquip_Rsp\022\013\n\003uid"
    "\030\001 \002(\003\022\017\n\007equipID\030\002 \002(\003\022\016\n\006infoID\030\003 \002(\005\022"
    "\020\n\010position\030\004 \002(\005\022\022\n\nequiplevel\030\005 \002(\005\022\020\n"
    "\010atklevel\030\006 \002(\005\022\020\n\010deflevel\030\007 \002(\005\022\024\n\014agi"
    "litylevel\030\010 \002(\005\022\022\n\nluckylevel\030\t \002(\005\022\013\n\003g"
    "id\030\n \002(\005\022\017\n\007adminfd\030\013 \002(\005\022\026\n\007fromweb\030\014 \001"
    "(\010:\005false\022\014\n\004succ\030\r \002(\005\"W\n\022Admin_UserInf"
    "o_Req\022\013\n\003uid\030\001 \002(\003\022\013\n\003gid\030\002 \002(\005\022\017\n\007admin"
    "fd\030\003 \002(\005\022\026\n\007fromweb\030\004 \001(\010:\005false\"e\n\022Admi"
    "n_UserInfo_Rsp\022\013\n\003uid\030\001 \002(\003\022\013\n\003gid\030\006 \002(\005"
    "\022\017\n\007adminfd\030\007 \002(\005\022\026\n\007fromweb\030\010 \001(\010:\005fals"
    "e\022\014\n\004succ\030\t \002(\005\"z\n\022Admin_AddGuest_Req\022\013\n"
    "\003uid\030\001 \002(\003\022\021\n\tgroup_cnt\030\002 \002(\005\022\013\n\003gid\030\003 \002"
    "(\005\022\017\n\007adminfd\030\004 \002(\005\022\026\n\007fromweb\030\005 \001(\010:\005fa"
    "lse\022\016\n\006map_id\030\006 \001(\005\"\220\001\n\022Admin_AddGuest_R"
    "sp\022\013\n\003uid\030\001 \002(\003\022\031\n\021current_group_cnt\030\002 \002"
    "(\005\022\013\n\003gid\030\003 \002(\005\022\017\n\007adminfd\030\004 \002(\005\022\026\n\007from"
    "web\030\005 \001(\010:\005false\022\014\n\004succ\030\006 \002(\005\022\016\n\006map_id"
    "\030\007 \001(\005\"\205\001\n\031Admin_SetPublicPraise_Req\022\013\n\003"
    "uid\030\001 \002(\003\022\025\n\rpublic_praise\030\002 \002(\005\022\013\n\003gid\030"
    "\003 \002(\005\022\017\n\007adminfd\030\004 \002(\005\022\026\n\007fromweb\030\005 \001(\010:"
    "\005false\022\016\n\006map_id\030\006 \001(\005\"\223\001\n\031Admin_SetPubl"
    "icPraise_Rsp\022\013\n\003uid\030\001 \002(\003\022\025\n\rpublic_prai"
    "se\030\002 \002(\005\022\013\n\003gid\030\003 \002(\005\022\017\n\007adminfd\030\004 \002(\005\022\026"
    "\n\007fromweb\030\005 \001(\010:\005false\022\014\n\004succ\030\006 \002(\005\022\016\n\006"
    "map_id\030\007 \001(\005\"\177\n\022Admin_DelGoods_Req\022\013\n\003ui"
    "d\030\001 \002(\003\022\020\n\010goods_id\030\002 \002(\005\022\013\n\003gid\030\003 \002(\005\022\017"
    "\n\007adminfd\030\004 \002(\005\022\026\n\007fromweb\030\005 \001(\010:\005false\022"
    "\024\n\014goods_amount\030\006 \002(\005\"\225\001\n\022Admin_DelGoods"
    "_Rsp\022\013\n\003uid\030\001 \002(\003\022\020\n\010goods_id\030\002 \002(\005\022\034\n\024g"
    "oods_current_amount\030\003 \002(\005\022\017\n\007adminfd\030\004 \002"
    "(\005\022\013\n\003gid\030\005 \002(\005\022\026\n\007fromweb\030\006 \001(\010:\005false\022"
    "\014\n\004succ\030\007 \002(\005\"\177\n\022Admin_AddGoods_Req\022\013\n\003u"
    "id\030\001 \002(\003\022\020\n\010goods_id\030\002 \002(\005\022\013\n\003gid\030\003 \002(\005\022"
    "\017\n\007adminfd\030\004 \002(\005\022\026\n\007fromweb\030\005 \001(\010:\005false"
    "\022\024\n\014goods_amount\030\006 \002(\005\"\225\001\n\022Admin_AddGood"
    "s_Rsp\022\013\n\003uid\030\001 \002(\003\022\020\n\010goods_id\030\002 \002(\005\022\034\n\024"
    "goods_current_amount\030\003 \002(\005\022\017\n\007adminfd\030\004 "
    "\002(\005\022\013\n\003gid\030\005 \002(\005\022\026\n\007fromweb\030\006 \001(\010:\005false"
    "\022\014\n\004succ\030\007 \002(\005\"\203\001\n\020Admin_Common_Req\022\014\n\004f"
    "unc\030\001 \002(\t\022\013\n\003uid\030\002 \002(\003\022\014\n\004arg1\030\003 \002(\t\022\014\n\004"
    "arg2\030\004 \002(\t\022\014\n\004arg3\030\005 \002(\t\022\014\n\004arg4\030\006 \002(\t\022\017"
    "\n\007adminfd\030\007 \002(\005\022\013\n\003gid\030\010 \002(\005\"\221\001\n\020Admin_C"
    "ommon_Rsp\022\014\n\004func\030\001 \002(\t\022\013\n\003uid\030\002 \002(\003\022\014\n\004"
    "succ\030\003 \002(\005\022\014\n\004arg1\030\004 \002(\t\022\014\n\004arg2\030\005 \002(\t\022\014"
    "\n\004arg3\030\006 \002(\t\022\014\n\004arg4\030\007 \002(\t\022\017\n\007adminfd\030\010 "
    "\002(\005\022\013\n\003gid\030\t \002(\005\"x\n\021Admin_DelProp_Req\022\013\n"
    "\003uid\030\001 \002(\003\022\020\n\010position\030\002 \002(\005\022\013\n\003gid\030\003 \002("
    "\005\022\017\n\007adminfd\030\004 \002(\005\022\026\n\007fromweb\030\005 \001(\010:\005fal"
    "se\022\016\n\006propID\030\006 \002(\003\"\246\001\n\021Admin_DelProp_Rsp"
    "\022\013\n\003uid\030\001 \002(\003\022\016\n\006propID\030\002 \002(\003\022\016\n\006infoID\030"
    "\003 \002(\005\022\r\n\005level\030\004 \002(\005\022\021\n\tdelamount\030\005 \002(\005\022"
    "\013\n\003gid\030\006 \002(\005\022\017\n\007adminfd\030\007 \002(\005\022\026\n\007fromweb"
    "\030\010 \001(\010:\005false\022\014\n\004succ\030\t \002(\005\"t\n\021Admin_Run"
    "Task_Req\022\013\n\003uid\030\001 \002(\003\022\016\n\006taskid\030\002 \002(\005\022\014\n"
    "\004step\030\003 \002(\005\022\013\n\003gid\030\004 \002(\005\022\017\n\007adminfd\030\005 \002("
    "\005\022\026\n\007fromweb\030\006 \001(\010:\005false\"\202\001\n\021Admin_RunT"
    "ask_Rsp\022\013\n\003uid\030\001 \002(\003\022\016\n\006taskid\030\002 \002(\005\022\014\n\004"
    "step\030\003 \002(\005\022\013\n\003gid\030\004 \002(\005\022\017\n\007adminfd\030\005 \002(\005"
    "\022\026\n\007fromweb\030\006 \001(\010:\005false\022\014\n\004succ\030\007 \002(\005\"X"
    "\n\023Admin_BroadCast_Req\022\013\n\003msg\030\001 \002(\t\022\013\n\003gi"
    "d\030\002 \002(\005\022\017\n\007adminfd\030\003 \002(\005\022\026\n\007fromweb\030\004 \001("
    "\010:\005false\"f\n\023Admin_BroadCast_Rsp\022\013\n\003msg\030\001"
    " \002(\t\022\013\n\003gid\030\002 \002(\005\022\017\n\007adminfd\030\003 \002(\005\022\026\n\007fr"
    "omweb\030\004 \001(\010:\005false\022\014\n\004succ\030\005 \002(\005\"Y\n\017Flue"
    "ntPriceItem\022\017\n\007type_id\030\001 \001(\005\022\r\n\005price\030\002 "
    "\001(\005\022\022\n\007rand_n1\030\003 \001(\005:\0010\022\022\n\007rand_n2\030\004 \001(\005"
    ":\0010\"f\n\025Admin_FluentPrice_Req\022\017\n\007adminfd\030"
    "\001 \002(\005\022\026\n\007fromweb\030\002 \001(\010:\005false\022$\n\nprice_i"
    "tem\030\003 \003(\0132\020.FluentPriceItem\"t\n\025Admin_Flu"
    "entPrice_Rsp\022\017\n\007adminfd\030\001 \002(\005\022\026\n\007fromweb"
    "\030\002 \001(\010:\005false\022\014\n\004succ\030\003 \002(\005\022$\n\nprice_ite"
    "m\030\004 \003(\0132\020.FluentPriceItem\"[\n Admin_Stati"
    "sticsOnLinePeople_Req\022\017\n\007adminfd\030\001 \002(\005\022\026"
    "\n\007fromweb\030\002 \001(\010:\005false\022\016\n\003gid\030\003 \001(\005:\0010\"\200"
    "\001\n Admin_StatisticsOnLinePeople_Rsp\022\017\n\007a"
    "dminfd\030\001 \002(\005\022\026\n\007fromweb\030\002 \001(\010:\005false\022\014\n\004"
    "succ\030\003 \002(\005\022\025\n\nonline_num\030\004 \001(\005:\0010\022\016\n\003gid"
    "\030\005 \001(\005:\0010\"O\n\024Admin_KickPlayer_Req\022\017\n\007adm"
    "infd\030\001 \002(\005\022\026\n\007fromweb\030\002 \001(\010:\005false\022\016\n\003ui"
    "d\030\003 \001(\003:\0010\"]\n\024Admin_KickPlayer_Rsp\022\017\n\007ad"
    "minfd\030\001 \002(\005\022\026\n\007fromweb\030\002 \001(\010:\005false\022\014\n\004s"
    "ucc\030\003 \002(\005\022\016\n\003uid\030\004 \001(\003:\0010\"M\n\rAdmin_STR_R"
    "eq\022\017\n\007adminfd\030\001 \002(\005\022\016\n\003uid\030\003 \001(\003:\0010\022\013\n\003s"
    "tr\030\004 \001(\t\022\016\n\006openid\030\005 \001(\t\"[\n\rAdmin_STR_Rs"
    "p\022\017\n\007adminfd\030\001 \002(\005\022\016\n\003uid\030\002 \001(\003:\0010\022\014\n\004su"
    "cc\030\003 \002(\005\022\013\n\003str\030\004 \001(\t\022\016\n\006openid\030\005 \001(\t\"\225\001"
    "\n\tWebUnlock\022\013\n\003uid\030\001 \002(\003\022\014\n\004type\030\002 \002(\005\022\017"
    "\n\007balance\030\003 \002(\005\022\013\n\003pos\030\004 \002(\005\022\013\n\003sid\030\005 \002("
    "\t\022\023\n\004succ\030\007 \001(\010:\005false\022\024\n\ninfodetail\030\010 \001"
    "(\t:\000\022\n\n\002fd\030\t \002(\005\022\013\n\003key\030\n \002(\t\"\256\001\n\016WebAdd"
    "Employee\022\013\n\003uid\030\001 \002(\003\022\014\n\004type\030\002 \002(\005\022\017\n\007b"
    "alance\030\003 \002(\005\022\020\n\010hiretype\030\004 \002(\005\022\r\n\005index\030"
    "\005 \002(\005\022\013\n\003sid\030\006 \002(\t\022\023\n\004succ\030\007 \001(\010:\005false\022"
    "\024\n\ninfodetail\030\010 \001(\t:\000\022\n\n\002fd\030\t \002(\005\022\013\n\003key"
    "\030\n \002(\t\"{\n\014WebBuyDetail\022\016\n\006shopid\030\001 \002(\003\022\r"
    "\n\005count\030\002 \002(\005\022\016\n\006indate\030\003 \002(\005\022\r\n\005price\030\004"
    " \002(\005\022\014\n\004posx\030\005 \001(\005\022\014\n\004posy\030\006 \001(\005\022\021\n\tdire"
    "ction\030\007 \001(\005\"\214\002\n\006WebBuy\022\013\n\003uid\030\001 \002(\003\022\020\n\010l"
    "eftcoin\030\002 \002(\005\022\024\n\014bandcoincost\030\003 \002(\005\022\034\n\005i"
    "tems\030\004 \003(\0132\r.WebBuyDetail\022\013\n\003sid\030\005 \002(\t\022\023"
    "\n\004succ\030\006 \001(\010:\005false\022\024\n\ninfodetail\030\007 \001(\t:"
    "\000\022\n\n\002fd\030\010 \002(\005\022\013\n\003key\030\t \002(\t\022\031\n\ndirectgive"
    "\030\n \001(\010:\005false\022\026\n\007limited\030\013 \001(\010:\005false\022\020\n"
    "\006openid\030\014 \001(\t:\000\022\031\n\nuse_openid\030\r \001(\010:\005fal"
    "se\"k\n\007WebBuy3\022\013\n\003uid\030\001 \002(\003\022\014\n\004type\030\002 \002(\005"
    "\022\016\n\006valueA\030\003 \002(\t\022\016\n\006valueB\030\004 \002(\t\022\013\n\003sid\030"
    "\005 \002(\t\022\n\n\002fd\030\006 \002(\005\022\014\n\004succ\030\007 \001(\005\"U\n\027WebLe"
    "ngthenIndateDetail\022\016\n\006shopid\030\001 \002(\003\022\016\n\006ba"
    "gpos\030\002 \002(\005\022\n\n\002id\030\003 \002(\t\022\016\n\006indate\030\004 \002(\005\"\265"
    "\001\n\021WebLengthenIndate\022\013\n\003uid\030\001 \002(\003\022\020\n\010lef"
    "tcoin\030\002 \002(\005\022\024\n\014bandcoincost\030\003 \002(\005\022\'\n\005ite"
    "ms\030\004 \003(\0132\030.WebLengthenIndateDetail\022\013\n\003si"
    "d\030\005 \002(\t\022\023\n\004succ\030\006 \001(\010:\005false\022\024\n\ninfodeta"
    "il\030\007 \001(\t:\000\022\n\n\002fd\030\010 \002(\005\"M\n\020WebCheckBandCo"
    "in\022\016\n\006openid\030\001 \002(\t\022\020\n\005value\030\002 \001(\005:\0010\022\n\n\002"
    "fd\030\003 \002(\005\022\013\n\003sid\030\004 \002(\t\"i\n\tWebBuyCfm\022\013\n\003ui"
    "d\030\001 \002(\003\022\013\n\003sid\030\005 \002(\t\022\023\n\004succ\030\006 \001(\010:\005fals"
    "e\022\024\n\ninfodetail\030\007 \001(\t:\000\022\n\n\002fd\030\010 \002(\005\022\013\n\003k"
    "ey\030\t \002(\t\"\203\001\n\021Admin_BanChat_Req\022\013\n\003uid\030\001 "
    "\002(\003\022\r\n\005isban\030\002 \002(\010\022\014\n\004time\030\003 \002(\005\022\013\n\003gid\030"
    "\004 \002(\005\022\017\n\007adminfd\030\005 \002(\005\022\016\n\006openid\030\006 \001(\t\022\026"
    "\n\007fromweb\030\007 \001(\010:\005false\"\221\001\n\021Admin_BanChat"
    "_Rsp\022\013\n\003uid\030\001 \002(\003\022\r\n\005isban\030\002 \002(\010\022\014\n\004time"
    "\030\003 \002(\005\022\013\n\003gid\030\004 \002(\005\022\017\n\007adminfd\030\005 \002(\005\022\016\n\006"
    "openid\030\006 \001(\t\022\026\n\007fromweb\030\007 \001(\010:\005false\022\014\n\004"
    "succ\030\010 \002(\005\"\204\001\n\022Admin_BanLogin_Req\022\013\n\003uid"
    "\030\001 \002(\003\022\r\n\005isban\030\002 \002(\010\022\014\n\004time\030\003 \002(\005\022\013\n\003g"
    "id\030\004 \002(\005\022\017\n\007adminfd\030\005 \002(\005\022\016\n\006openid\030\006 \001("
    "\t\022\026\n\007fromweb\030\007 \001(\010:\005false\"\222\001\n\022Admin_BanL"
    "ogin_Rsp\022\013\n\003uid\030\001 \002(\003\022\r\n\005isban\030\002 \002(\010\022\014\n\004"
    "time\030\003 \002(\005\022\013\n\003gid\030\004 \002(\005\022\017\n\007adminfd\030\005 \002(\005"
    "\022\016\n\006openid\030\006 \001(\t\022\026\n\007fromweb\030\007 \001(\010:\005false"
    "\022\014\n\004succ\030\010 \002(\005\"f\n\022Admin_AddPoint_Req\022\013\n\003"
    "uid\030\001 \002(\003\022\r\n\005point\030\002 \002(\005\022\013\n\003gid\030\003 \002(\005\022\017\n"
    "\007adminfd\030\004 \002(\005\022\026\n\007fromweb\030\005 \001(\010:\005false\"\211"
    "\001\n\022Admin_AddPoint_Rsp\022\013\n\003uid\030\001 \002(\003\022\020\n\010ol"
    "dpoint\030\002 \002(\005\022\020\n\010newpoint\030\003 \002(\005\022\013\n\003gid\030\004 "
    "\002(\005\022\017\n\007adminfd\030\005 \002(\005\022\026\n\007fromweb\030\006 \001(\010:\005f"
    "alse\022\014\n\004succ\030\007 \002(\005\"\210\001\n\023Admin_AddIndate_R"
    "eq\022\013\n\003uid\030\001 \002(\003\022\016\n\006infoID\030\002 \002(\005\022\020\n\010posit"
    "ion\030\003 \002(\005\022\014\n\004hour\030\004 \002(\005\022\013\n\003gid\030\005 \002(\005\022\017\n\007"
    "adminfd\030\006 \002(\005\022\026\n\007fromweb\030\007 \001(\010:\005false\"\276\001"
    "\n\023Admin_AddIndate_Rsp\022\013\n\003uid\030\001 \002(\003\022\016\n\006it"
    "emID\030\002 \002(\003\022\016\n\006infoID\030\003 \002(\005\022\020\n\010position\030\004"
    " \002(\005\022\021\n\toldindate\030\005 \002(\005\022\021\n\tnewindate\030\006 \002"
    "(\005\022\013\n\003gid\030\007 \002(\005\022\017\n\007adminfd\030\010 \002(\005\022\026\n\007from"
    "web\030\t \001(\010:\005false\022\014\n\004succ\030\n \002(\005\"X\n\023Admin_"
    "FreshUser_Req\022\013\n\003uid\030\001 \002(\003\022\013\n\003gid\030\002 \002(\005\022"
    "\017\n\007adminfd\030\003 \002(\005\022\026\n\007fromweb\030\004 \001(\010:\005false"
    "\"f\n\023Admin_FreshUser_Rsp\022\013\n\003uid\030\001 \002(\003\022\013\n\003"
    "gid\030\002 \002(\005\022\017\n\007adminfd\030\003 \002(\005\022\026\n\007fromweb\030\004 "
    "\001(\010:\005false\022\014\n\004succ\030\005 \002(\005\"f\n\022Admin_AddMed"
    "al_Req\022\013\n\003uid\030\001 \002(\003\022\r\n\005medal\030\002 \002(\005\022\013\n\003gi"
    "d\030\003 \002(\005\022\017\n\007adminfd\030\004 \002(\005\022\026\n\007fromweb\030\005 \001("
    "\010:\005false\"\211\001\n\022Admin_AddMedal_Rsp\022\013\n\003uid\030\001"
    " \002(\003\022\020\n\010oldmedal\030\002 \002(\005\022\020\n\010newmedal\030\003 \002(\005"
    "\022\013\n\003gid\030\004 \002(\005\022\017\n\007adminfd\030\005 \002(\005\022\026\n\007fromwe"
    "b\030\006 \001(\010:\005false\022\014\n\004succ\030\007 \002(\005\"H\n\020Admin_Re"
    "load_Req\022\013\n\003gid\030\001 \002(\005\022\017\n\007adminfd\030\002 \002(\005\022\026"
    "\n\007fromweb\030\003 \001(\010:\005false\"V\n\020Admin_Reload_R"
    "sp\022\013\n\003gid\030\001 \002(\005\022\017\n\007adminfd\030\002 \002(\005\022\014\n\004succ"
    "\030\003 \002(\005\022\026\n\007fromweb\030\004 \001(\010:\005false\"A\n\021Update"
    "GuestNumber\022\013\n\003uid\030\001 \001(\003\022\021\n\tguest_num\030\002 "
    "\001(\005\022\014\n\004time\030\003 \001(\003\"I\n\017QQUnionCheckKey\022\017\n\007"
    "adminfd\030\002 \002(\005\022\n\n\002id\030\001 \002(\003\022\013\n\003key\030\003 \002(\t\022\014"
    "\n\004succ\030\004 \001(\010\"O\n\022QQUnionCheckOpenId\022\017\n\007ad"
    "minfd\030\002 \002(\005\022\n\n\002id\030\001 \002(\003\022\016\n\006openid\030\003 \002(\t\022"
    "\014\n\004succ\030\004 \001(\010\"e\n\016QQUnionAddItem\022\017\n\007admin"
    "fd\030\002 \002(\005\022\n\n\002id\030\001 \002(\003\022\016\n\006typeid\030\004 \002(\005\022\013\n\003"
    "num\030\005 \002(\005\022\013\n\003key\030\006 \002(\t\022\014\n\004succ\030\007 \001(\010\"G\n\017"
    "Wap_Str_Request\022\n\n\002fd\030\001 \001(\005\022\013\n\003uid\030\002 \001(\003"
    "\022\016\n\006secret\030\003 \001(\003\022\013\n\003cmd\030\004 \001(\t\"V\n\020Wap_Str"
    "_Response\022\n\n\002fd\030\001 \001(\005\022\013\n\003uid\030\002 \001(\003\022\016\n\006se"
    "cret\030\003 \001(\003\022\013\n\003cmd\030\004 \001(\t\022\014\n\004succ\030\005 \001(\005\"2\n"
    "\rHttpRequestV3\022\r\n\003url\030\001 \001(\t:\000\022\022\n\010postdat"
    "a\030\002 \001(\t:\000\"g\n\016SimpleMarkUser\022\016\n\003uid\030\001 \001(\003"
    ":\0010\022\020\n\006openid\030\002 \001(\t:\000\022\017\n\004type\030\003 \001(\005:\0010\022\020"
    "\n\005value\030\004 \001(\003:\0010\022\020\n\006svalue\030\005 \001(\t:\000\"n\n\023In"
    "viteFriendLvlSucc\022\016\n\003uid\030\001 \001(\003:\0010\022\020\n\006ope"
    "nid\030\002 \001(\t:\000\022\r\n\003url\030\003 \001(\t:\000\022\016\n\003lvl\030\004 \001(\005:"
    "\0010\022\026\n\013nowloginday\030\005 \001(\005:\0010\"\270&\n\005Event\022\013\n\003"
    "cmd\030\001 \002(\005\022\r\n\005state\030\002 \002(\005\022\014\n\004time\030\003 \002(\003\022\013"
    "\n\003uid\030\004 \001(\003\022\024\n\014fromworld_fd\030\005 \001(\005\022\021\n\thal"
    "lSrvID\030\006 \001(\005\022-\n\021workingStatus_req\030\007 \001(\0132"
    "\022.WorkingStatus_Req\022%\n\ruserLogin_req\030\010 \001"
    "(\0132\016.UserLogin_Req\022%\n\ruserLogin_rsp\030\t \001("
    "\0132\016.UserLogin_Rsp\022#\n\014userAuth_req\030\n \001(\0132"
    "\r.UserAuth_Req\022#\n\014userAuth_rsp\030\013 \001(\0132\r.U"
    "serAuth_Rsp\022/\n\022sendRemoteUser_req\030\014 \001(\0132"
    "\023.SendRemoteUser_Req\022\034\n\004http\030\r \001(\0132\016.Htt"
    "pRequestV3\022 \n\014be_BeLottery\030\016 \001(\0132\n.BeLot"
    "tery\022,\n\022be_BeUpdateWinInfo\030\017 \001(\0132\020.BeUpd"
    "ateWinInfo\022$\n\016be_BeUpdateExp\030\020 \001(\0132\014.BeU"
    "pdateExp\022&\n\017be_BeUpdateTool\030\021 \001(\0132\r.BeUp"
    "dateTool\022*\n\021dp_DpNormalResult\030\022 \001(\0132\017.Dp"
    "NormalResult\022#\n\014lotteryTimer\030\023 \001(\0132\r.Lot"
    "teryTimer\0220\n\024be_BeUpdateBattleCnt\030\024 \001(\0132"
    "\022.BeUpdateBattleCnt\022#\n\014wg_UserLeave\030\025 \001("
    "\0132\r.WG_UserLeave\022&\n\nfriendinfo\030\026 \001(\0132\022.G"
    "WG_FriendRequest\022!\n\013forwardinfo\030\027 \001(\0132\014."
    "ForwardInfo\022*\n\017adminAddExp_req\030! \001(\0132\021.A"
    "dmin_AddExp_Req\022*\n\017adminAddExp_rsp\030\" \001(\013"
    "2\021.Admin_AddExp_Rsp\022,\n\020adminAddGold_req\030"
    "# \001(\0132\022.Admin_AddGold_Req\022,\n\020adminAddGol"
    "d_rsp\030$ \001(\0132\022.Admin_AddGold_Rsp\022.\n\021admin"
    "SetLevel_req\030% \001(\0132\023.Admin_SetLevel_Req\022"
    ".\n\021adminSetLevel_rsp\030& \001(\0132\023.Admin_SetLe"
    "vel_Rsp\022,\n\020adminAddProp_req\030\' \001(\0132\022.Admi"
    "n_AddProp_Req\022,\n\020adminAddProp_rsp\030( \001(\0132"
    "\022.Admin_AddProp_Rsp\022.\n\021adminSetEquip_req"
    "\030) \001(\0132\023.Admin_SetEquip_Req\022.\n\021adminSetE"
    "quip_rsp\030* \001(\0132\023.Admin_SetEquip_Rsp\022.\n\021a"
    "dminUserInfo_req\030+ \001(\0132\023.Admin_UserInfo_"
    "Req\022.\n\021adminUserInfo_rsp\030, \001(\0132\023.Admin_U"
    "serInfo_Rsp\022,\n\020adminDelProp_req\030- \001(\0132\022."
    "Admin_DelProp_Req\022,\n\020adminDelProp_rsp\030. "
    "\001(\0132\022.Admin_DelProp_Rsp\022\027\n\006webbuy\030/ \001(\0132"
    "\007.WebBuy\022,\n\020adminRunTask_req\0300 \001(\0132\022.Adm"
    "in_RunTask_Req\022,\n\020adminRunTask_rsp\0301 \001(\013"
    "2\022.Admin_RunTask_Rsp\022,\n\020adminBanChat_req"
    "\0302 \001(\0132\022.Admin_BanChat_Req\022,\n\020adminBanCh"
    "at_rsp\0303 \001(\0132\022.Admin_BanChat_Rsp\022.\n\021admi"
    "nBanLogin_req\0304 \001(\0132\023.Admin_BanLogin_Req"
    "\022.\n\021adminBanLogin_rsp\0305 \001(\0132\023.Admin_BanL"
    "ogin_Rsp\022.\n\021adminAddPoint_req\0306 \001(\0132\023.Ad"
    "min_AddPoint_Req\022.\n\021adminAddPoint_rsp\0307 "
    "\001(\0132\023.Admin_AddPoint_Rsp\0220\n\022adminAddInda"
    "te_req\0308 \001(\0132\024.Admin_AddIndate_Req\0220\n\022ad"
    "minAddIndate_rsp\0309 \001(\0132\024.Admin_AddIndate"
    "_Rsp\0220\n\022adminFreshUser_req\030: \001(\0132\024.Admin"
    "_FreshUser_Req\0220\n\022adminFreshUser_rsp\030; \001"
    "(\0132\024.Admin_FreshUser_Rsp\022.\n\021adminAddMeda"
    "l_req\030< \001(\0132\023.Admin_AddMedal_Req\022.\n\021admi"
    "nAddMedal_rsp\030= \001(\0132\023.Admin_AddMedal_Rsp"
    "\022-\n\021weblengthenindate\030> \001(\0132\022.WebLengthe"
    "nIndate\022+\n\020webcheckbandcoin\030\? \001(\0132\021.WebC"
    "heckBandCoin\0220\n\022adminBroadCast_req\030@ \001(\013"
    "2\024.Admin_BroadCast_Req\0220\n\022adminBroadCast"
    "_rsp\030A \001(\0132\024.Admin_BroadCast_Rsp\022*\n\017admi"
    "nReload_req\030B \001(\0132\021.Admin_Reload_Req\022*\n\017"
    "adminReload_rsp\030C \001(\0132\021.Admin_Reload_Rsp"
    "\022/\n\023update_guest_number\030D \001(\0132\022.UpdateGu"
    "estNumber\0224\n\024adminFluentPrice_req\030E \001(\0132"
    "\026.Admin_FluentPrice_Req\0224\n\024adminFluentPr"
    "ice_rsp\030F \001(\0132\026.Admin_FluentPrice_Rsp\022\035\n"
    "\twebunlock\030G \001(\0132\n.WebUnlock\022\'\n\016webaddem"
    "ployee\030H \001(\0132\017.WebAddEmployee\022.\n\021adminAd"
    "dGoods_req\030I \001(\0132\023.Admin_AddGoods_Req\022.\n"
    "\021adminAddGoods_rsp\030J \001(\0132\023.Admin_AddGood"
    "s_Rsp\022<\n\030adminSetPublicPraise_req\030K \001(\0132"
    "\032.Admin_SetPublicPraise_Req\022<\n\030adminSetP"
    "ublicPraise_rsp\030L \001(\0132\032.Admin_SetPublicP"
    "raise_Rsp\022.\n\021adminAddGuest_req\030M \001(\0132\023.A"
    "dmin_AddGuest_Req\022.\n\021adminAddGuest_rsp\030N"
    " \001(\0132\023.Admin_AddGuest_Rsp\022.\n\021adminDelGoo"
    "ds_req\030O \001(\0132\023.Admin_DelGoods_Req\022.\n\021adm"
    "inDelGoods_rsp\030P \001(\0132\023.Admin_DelGoods_Rs"
    "p\022(\n\016adminClear_req\030Q \001(\0132\020.Admin_Clear_"
    "Req\022(\n\016adminClear_rsp\030R \001(\0132\020.Admin_Clea"
    "r_Rsp\022=\n\022adminOnLineNum_req\030S \001(\0132!.Admi"
    "n_StatisticsOnLinePeople_Req\022=\n\022adminOnL"
    "ineNum_rsp\030T \001(\0132!.Admin_StatisticsOnLin"
    "ePeople_Rsp\0222\n\023adminKickPlayer_req\030U \001(\013"
    "2\025.Admin_KickPlayer_Req\0222\n\023adminKickPlay"
    "er_rsp\030V \001(\0132\025.Admin_KickPlayer_Rsp\022\035\n\tw"
    "ebinvite\030W \001(\0132\n.WebInvite\022\027\n\006invite\030X \001"
    "(\0132\007.Invite\022$\n\014adminstr_req\030Y \001(\0132\016.Admi"
    "n_STR_Req\022$\n\014adminstr_rsp\030Z \001(\0132\016.Admin_"
    "STR_Rsp\022\035\n\twebbugcfm\030[ \001(\0132\n.WebBuyCfm\022*"
    "\n\017adminSetVal_req\030\\ \001(\0132\021.Admin_SetVal_R"
    "eq\022*\n\017adminSetVal_rsp\030] \001(\0132\021.Admin_SetV"
    "al_Rsp\022\013\n\003sid\030^ \001(\t\022\032\n\006webAsk\030_ \001(\0132\n.We"
    "bAskFor\022\034\n\007webGive\030` \001(\0132\013.WebGiveFor\022\026\n"
    "\013pushbackcnt\030a \001(\005:\0010\022(\n\017qqunion_additem"
    "\030b \001(\0132\017.QQUnionAddItem\0220\n\023qqunion_check"
    "openid\030c \001(\0132\023.QQUnionCheckOpenId\022*\n\020qqu"
    "nion_checkkey\030d \001(\0132\020.QQUnionCheckKey\0228\n"
    "\030multi_level_friend_point\030e \001(\0132\026.MultiL"
    "evelFriendPoint\022+\n\020admin_common_req\030f \001("
    "\0132\021.Admin_Common_Req\022+\n\020admin_common_rsp"
    "\030g \001(\0132\021.Admin_Common_Rsp\022 \n\013talent_show"
    "\030h \001(\0132\013.TalentShow\022)\n\020talent_show_list\030"
    "i \001(\0132\017.TalentShowList\022\016\n\006gameid\030j \001(\005\022\017"
    "\n\007worldid\030k \001(\005\022\020\n\010rankKind\030l \001(\005\022\036\n\010fre"
    "egift\030m \001(\0132\014.WebFreeGift\022)\n\020friend_send"
    "_gift\030n \001(\0132\017.FriendSendGift\022$\n\rfortune_"
    "steal\030o \001(\0132\r.FortuneSteal\022!\n\007wap_req\030p "
    "\001(\0132\020.Wap_Str_Request\022\"\n\007wap_rsp\030q \001(\0132\021"
    ".Wap_Str_Response\022\'\n\rfriend_recall\030r \001(\013"
    "2\020.FriendRecallMsg\022\016\n\006openid\030s \001(\t\022#\n\nSi"
    "mpleMare\030t \003(\0132\017.SimpleMarkUser\022\031\n\007webbu"
    "y3\030u \001(\0132\010.WebBuy3\022-\n\022center_logic_value"
    "\030v \001(\0132\021.CenterLogicValue\022,\n\016inviteFridD"
    "ata\030w \001(\0132\024.InviteFriendLvlSucc\022(\n\020Mse_M"
    "seAuthState\030\201\001 \001(\0132\r.MseAuthState\022(\n\020Mse"
    "_MseFuncSwich\030\202\001 \001(\0132\r.MseFuncSwich\0224\n\026M"
    "ce_MceGatewayFunction\030\203\001 \001(\0132\023.MceGatewa"
    "yFunction\0224\n\026Mse_MseGatewayFunction\030\204\001 \001"
    "(\0132\023.MseGatewayFunction\022*\n\021Mse_MseFriend"
    "List\030\205\001 \001(\0132\016.MseFriendList\022(\n\020Mce_MceHe"
    "artbeat\030\206\001 \001(\0132\r.MceHeartbeat\022*\n\021Mce_Mce"
    "ActionInfo\030\207\001 \001(\0132\016.MceActionInfo\022*\n\021Mse"
    "_MseActionInfo\030\210\001 \001(\0132\016.MseActionInfo\022\036\n"
    "\013Mse_MseRank\030\211\001 \001(\0132\010.MseRank", 16829);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "event.proto", &protobuf_RegisterTypes);
  CenterLogicValue::default_instance_ = new CenterLogicValue();
  UserLogin_Req::default_instance_ = new UserLogin_Req();
  UserLogin_Rsp::default_instance_ = new UserLogin_Rsp();
  WG_UserLeave::default_instance_ = new WG_UserLeave();
  WorkingStatus_Req::default_instance_ = new WorkingStatus_Req();
  UserAuth_Req::default_instance_ = new UserAuth_Req();
  UserAuth_Rsp::default_instance_ = new UserAuth_Rsp();
  SendRemoteUser_Req::default_instance_ = new SendRemoteUser_Req();
  HallEnterRoom::default_instance_ = new HallEnterRoom();
  BeLottery::default_instance_ = new BeLottery();
  BeUpdateWinInfo::default_instance_ = new BeUpdateWinInfo();
  BeUpdateExp::default_instance_ = new BeUpdateExp();
  BeUpdateTool::default_instance_ = new BeUpdateTool();
  DpNormalResult::default_instance_ = new DpNormalResult();
  GWG_FriendRequest::default_instance_ = new GWG_FriendRequest();
  ForwardInfo::_default_platid_ =
      new ::std::string("0", 1);
  ForwardInfo::default_instance_ = new ForwardInfo();
  WebFreeGift::default_instance_ = new WebFreeGift();
  WebAskFor::default_instance_ = new WebAskFor();
  WebGiveFor::default_instance_ = new WebGiveFor();
  WebInvite::default_instance_ = new WebInvite();
  Invite::default_instance_ = new Invite();
  FriendRecallMsg::default_instance_ = new FriendRecallMsg();
  MultiLevelFriendPoint::default_instance_ = new MultiLevelFriendPoint();
  TalentShow::default_instance_ = new TalentShow();
  TalentShowList::default_instance_ = new TalentShowList();
  FriendSendGift::default_instance_ = new FriendSendGift();
  FortuneSteal::default_instance_ = new FortuneSteal();
  ChiefVote::default_instance_ = new ChiefVote();
  LotteryTimer::default_instance_ = new LotteryTimer();
  BeUpdateBattleCnt::default_instance_ = new BeUpdateBattleCnt();
  Admin_AddExp_Req::default_instance_ = new Admin_AddExp_Req();
  Admin_AddExp_Rsp::default_instance_ = new Admin_AddExp_Rsp();
  Admin_AddGold_Req::default_instance_ = new Admin_AddGold_Req();
  Admin_AddGold_Rsp::default_instance_ = new Admin_AddGold_Rsp();
  Admin_Clear_Req::default_instance_ = new Admin_Clear_Req();
  Admin_Clear_Rsp::default_instance_ = new Admin_Clear_Rsp();
  Admin_SetVal_Req::default_instance_ = new Admin_SetVal_Req();
  Admin_SetVal_Rsp::default_instance_ = new Admin_SetVal_Rsp();
  Admin_SetLevel_Req::default_instance_ = new Admin_SetLevel_Req();
  Admin_SetLevel_Rsp::default_instance_ = new Admin_SetLevel_Rsp();
  Admin_AddProp_Req::default_instance_ = new Admin_AddProp_Req();
  Admin_AddProp_Rsp::default_instance_ = new Admin_AddProp_Rsp();
  Admin_SetEquip_Req::default_instance_ = new Admin_SetEquip_Req();
  Admin_SetEquip_Rsp::default_instance_ = new Admin_SetEquip_Rsp();
  Admin_UserInfo_Req::default_instance_ = new Admin_UserInfo_Req();
  Admin_UserInfo_Rsp::default_instance_ = new Admin_UserInfo_Rsp();
  Admin_AddGuest_Req::default_instance_ = new Admin_AddGuest_Req();
  Admin_AddGuest_Rsp::default_instance_ = new Admin_AddGuest_Rsp();
  Admin_SetPublicPraise_Req::default_instance_ = new Admin_SetPublicPraise_Req();
  Admin_SetPublicPraise_Rsp::default_instance_ = new Admin_SetPublicPraise_Rsp();
  Admin_DelGoods_Req::default_instance_ = new Admin_DelGoods_Req();
  Admin_DelGoods_Rsp::default_instance_ = new Admin_DelGoods_Rsp();
  Admin_AddGoods_Req::default_instance_ = new Admin_AddGoods_Req();
  Admin_AddGoods_Rsp::default_instance_ = new Admin_AddGoods_Rsp();
  Admin_Common_Req::default_instance_ = new Admin_Common_Req();
  Admin_Common_Rsp::default_instance_ = new Admin_Common_Rsp();
  Admin_DelProp_Req::default_instance_ = new Admin_DelProp_Req();
  Admin_DelProp_Rsp::default_instance_ = new Admin_DelProp_Rsp();
  Admin_RunTask_Req::default_instance_ = new Admin_RunTask_Req();
  Admin_RunTask_Rsp::default_instance_ = new Admin_RunTask_Rsp();
  Admin_BroadCast_Req::default_instance_ = new Admin_BroadCast_Req();
  Admin_BroadCast_Rsp::default_instance_ = new Admin_BroadCast_Rsp();
  FluentPriceItem::default_instance_ = new FluentPriceItem();
  Admin_FluentPrice_Req::default_instance_ = new Admin_FluentPrice_Req();
  Admin_FluentPrice_Rsp::default_instance_ = new Admin_FluentPrice_Rsp();
  Admin_StatisticsOnLinePeople_Req::default_instance_ = new Admin_StatisticsOnLinePeople_Req();
  Admin_StatisticsOnLinePeople_Rsp::default_instance_ = new Admin_StatisticsOnLinePeople_Rsp();
  Admin_KickPlayer_Req::default_instance_ = new Admin_KickPlayer_Req();
  Admin_KickPlayer_Rsp::default_instance_ = new Admin_KickPlayer_Rsp();
  Admin_STR_Req::default_instance_ = new Admin_STR_Req();
  Admin_STR_Rsp::default_instance_ = new Admin_STR_Rsp();
  WebUnlock::default_instance_ = new WebUnlock();
  WebAddEmployee::default_instance_ = new WebAddEmployee();
  WebBuyDetail::default_instance_ = new WebBuyDetail();
  WebBuy::default_instance_ = new WebBuy();
  WebBuy3::default_instance_ = new WebBuy3();
  WebLengthenIndateDetail::default_instance_ = new WebLengthenIndateDetail();
  WebLengthenIndate::default_instance_ = new WebLengthenIndate();
  WebCheckBandCoin::default_instance_ = new WebCheckBandCoin();
  WebBuyCfm::default_instance_ = new WebBuyCfm();
  Admin_BanChat_Req::default_instance_ = new Admin_BanChat_Req();
  Admin_BanChat_Rsp::default_instance_ = new Admin_BanChat_Rsp();
  Admin_BanLogin_Req::default_instance_ = new Admin_BanLogin_Req();
  Admin_BanLogin_Rsp::default_instance_ = new Admin_BanLogin_Rsp();
  Admin_AddPoint_Req::default_instance_ = new Admin_AddPoint_Req();
  Admin_AddPoint_Rsp::default_instance_ = new Admin_AddPoint_Rsp();
  Admin_AddIndate_Req::default_instance_ = new Admin_AddIndate_Req();
  Admin_AddIndate_Rsp::default_instance_ = new Admin_AddIndate_Rsp();
  Admin_FreshUser_Req::default_instance_ = new Admin_FreshUser_Req();
  Admin_FreshUser_Rsp::default_instance_ = new Admin_FreshUser_Rsp();
  Admin_AddMedal_Req::default_instance_ = new Admin_AddMedal_Req();
  Admin_AddMedal_Rsp::default_instance_ = new Admin_AddMedal_Rsp();
  Admin_Reload_Req::default_instance_ = new Admin_Reload_Req();
  Admin_Reload_Rsp::default_instance_ = new Admin_Reload_Rsp();
  UpdateGuestNumber::default_instance_ = new UpdateGuestNumber();
  QQUnionCheckKey::default_instance_ = new QQUnionCheckKey();
  QQUnionCheckOpenId::default_instance_ = new QQUnionCheckOpenId();
  QQUnionAddItem::default_instance_ = new QQUnionAddItem();
  Wap_Str_Request::default_instance_ = new Wap_Str_Request();
  Wap_Str_Response::default_instance_ = new Wap_Str_Response();
  HttpRequestV3::default_instance_ = new HttpRequestV3();
  SimpleMarkUser::default_instance_ = new SimpleMarkUser();
  InviteFriendLvlSucc::default_instance_ = new InviteFriendLvlSucc();
  Event::default_instance_ = new Event();
  CenterLogicValue::default_instance_->InitAsDefaultInstance();
  UserLogin_Req::default_instance_->InitAsDefaultInstance();
  UserLogin_Rsp::default_instance_->InitAsDefaultInstance();
  WG_UserLeave::default_instance_->InitAsDefaultInstance();
  WorkingStatus_Req::default_instance_->InitAsDefaultInstance();
  UserAuth_Req::default_instance_->InitAsDefaultInstance();
  UserAuth_Rsp::default_instance_->InitAsDefaultInstance();
  SendRemoteUser_Req::default_instance_->InitAsDefaultInstance();
  HallEnterRoom::default_instance_->InitAsDefaultInstance();
  BeLottery::default_instance_->InitAsDefaultInstance();
  BeUpdateWinInfo::default_instance_->InitAsDefaultInstance();
  BeUpdateExp::default_instance_->InitAsDefaultInstance();
  BeUpdateTool::default_instance_->InitAsDefaultInstance();
  DpNormalResult::default_instance_->InitAsDefaultInstance();
  GWG_FriendRequest::default_instance_->InitAsDefaultInstance();
  ForwardInfo::default_instance_->InitAsDefaultInstance();
  WebFreeGift::default_instance_->InitAsDefaultInstance();
  WebAskFor::default_instance_->InitAsDefaultInstance();
  WebGiveFor::default_instance_->InitAsDefaultInstance();
  WebInvite::default_instance_->InitAsDefaultInstance();
  Invite::default_instance_->InitAsDefaultInstance();
  FriendRecallMsg::default_instance_->InitAsDefaultInstance();
  MultiLevelFriendPoint::default_instance_->InitAsDefaultInstance();
  TalentShow::default_instance_->InitAsDefaultInstance();
  TalentShowList::default_instance_->InitAsDefaultInstance();
  FriendSendGift::default_instance_->InitAsDefaultInstance();
  FortuneSteal::default_instance_->InitAsDefaultInstance();
  ChiefVote::default_instance_->InitAsDefaultInstance();
  LotteryTimer::default_instance_->InitAsDefaultInstance();
  BeUpdateBattleCnt::default_instance_->InitAsDefaultInstance();
  Admin_AddExp_Req::default_instance_->InitAsDefaultInstance();
  Admin_AddExp_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_AddGold_Req::default_instance_->InitAsDefaultInstance();
  Admin_AddGold_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_Clear_Req::default_instance_->InitAsDefaultInstance();
  Admin_Clear_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_SetVal_Req::default_instance_->InitAsDefaultInstance();
  Admin_SetVal_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_SetLevel_Req::default_instance_->InitAsDefaultInstance();
  Admin_SetLevel_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_AddProp_Req::default_instance_->InitAsDefaultInstance();
  Admin_AddProp_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_SetEquip_Req::default_instance_->InitAsDefaultInstance();
  Admin_SetEquip_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_UserInfo_Req::default_instance_->InitAsDefaultInstance();
  Admin_UserInfo_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_AddGuest_Req::default_instance_->InitAsDefaultInstance();
  Admin_AddGuest_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_SetPublicPraise_Req::default_instance_->InitAsDefaultInstance();
  Admin_SetPublicPraise_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_DelGoods_Req::default_instance_->InitAsDefaultInstance();
  Admin_DelGoods_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_AddGoods_Req::default_instance_->InitAsDefaultInstance();
  Admin_AddGoods_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_Common_Req::default_instance_->InitAsDefaultInstance();
  Admin_Common_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_DelProp_Req::default_instance_->InitAsDefaultInstance();
  Admin_DelProp_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_RunTask_Req::default_instance_->InitAsDefaultInstance();
  Admin_RunTask_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_BroadCast_Req::default_instance_->InitAsDefaultInstance();
  Admin_BroadCast_Rsp::default_instance_->InitAsDefaultInstance();
  FluentPriceItem::default_instance_->InitAsDefaultInstance();
  Admin_FluentPrice_Req::default_instance_->InitAsDefaultInstance();
  Admin_FluentPrice_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_StatisticsOnLinePeople_Req::default_instance_->InitAsDefaultInstance();
  Admin_StatisticsOnLinePeople_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_KickPlayer_Req::default_instance_->InitAsDefaultInstance();
  Admin_KickPlayer_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_STR_Req::default_instance_->InitAsDefaultInstance();
  Admin_STR_Rsp::default_instance_->InitAsDefaultInstance();
  WebUnlock::default_instance_->InitAsDefaultInstance();
  WebAddEmployee::default_instance_->InitAsDefaultInstance();
  WebBuyDetail::default_instance_->InitAsDefaultInstance();
  WebBuy::default_instance_->InitAsDefaultInstance();
  WebBuy3::default_instance_->InitAsDefaultInstance();
  WebLengthenIndateDetail::default_instance_->InitAsDefaultInstance();
  WebLengthenIndate::default_instance_->InitAsDefaultInstance();
  WebCheckBandCoin::default_instance_->InitAsDefaultInstance();
  WebBuyCfm::default_instance_->InitAsDefaultInstance();
  Admin_BanChat_Req::default_instance_->InitAsDefaultInstance();
  Admin_BanChat_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_BanLogin_Req::default_instance_->InitAsDefaultInstance();
  Admin_BanLogin_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_AddPoint_Req::default_instance_->InitAsDefaultInstance();
  Admin_AddPoint_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_AddIndate_Req::default_instance_->InitAsDefaultInstance();
  Admin_AddIndate_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_FreshUser_Req::default_instance_->InitAsDefaultInstance();
  Admin_FreshUser_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_AddMedal_Req::default_instance_->InitAsDefaultInstance();
  Admin_AddMedal_Rsp::default_instance_->InitAsDefaultInstance();
  Admin_Reload_Req::default_instance_->InitAsDefaultInstance();
  Admin_Reload_Rsp::default_instance_->InitAsDefaultInstance();
  UpdateGuestNumber::default_instance_->InitAsDefaultInstance();
  QQUnionCheckKey::default_instance_->InitAsDefaultInstance();
  QQUnionCheckOpenId::default_instance_->InitAsDefaultInstance();
  QQUnionAddItem::default_instance_->InitAsDefaultInstance();
  Wap_Str_Request::default_instance_->InitAsDefaultInstance();
  Wap_Str_Response::default_instance_->InitAsDefaultInstance();
  HttpRequestV3::default_instance_->InitAsDefaultInstance();
  SimpleMarkUser::default_instance_->InitAsDefaultInstance();
  InviteFriendLvlSucc::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_event_2eproto {
  StaticDescriptorInitializer_event_2eproto() {
    protobuf_AddDesc_event_2eproto();
  }
} static_descriptor_initializer_event_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CenterLogicValue::kKeyFieldNumber;
const int CenterLogicValue::kValueFieldNumber;
const int CenterLogicValue::kOperFieldNumber;
#endif  // !_MSC_VER

CenterLogicValue::CenterLogicValue()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CenterLogicValue)
}

void CenterLogicValue::InitAsDefaultInstance() {
}

CenterLogicValue::CenterLogicValue(const CenterLogicValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CenterLogicValue)
}

void CenterLogicValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  oper_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterLogicValue::~CenterLogicValue() {
  // @@protoc_insertion_point(destructor:CenterLogicValue)
  SharedDtor();
}

void CenterLogicValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CenterLogicValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterLogicValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterLogicValue_descriptor_;
}

const CenterLogicValue& CenterLogicValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

CenterLogicValue* CenterLogicValue::default_instance_ = NULL;

CenterLogicValue* CenterLogicValue::New(::google::protobuf::Arena* arena) const {
  CenterLogicValue* n = new CenterLogicValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CenterLogicValue::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CenterLogicValue*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(value_, oper_);
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CenterLogicValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CenterLogicValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CenterLogicValue.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_oper;
        break;
      }

      // optional int32 oper = 3;
      case 3: {
        if (tag == 24) {
         parse_oper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oper_)));
          set_has_oper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CenterLogicValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CenterLogicValue)
  return false;
#undef DO_
}

void CenterLogicValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CenterLogicValue)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CenterLogicValue.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional int32 oper = 3;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oper(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CenterLogicValue)
}

::google::protobuf::uint8* CenterLogicValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CenterLogicValue)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CenterLogicValue.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional int32 oper = 3;
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oper(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CenterLogicValue)
  return target;
}

int CenterLogicValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 oper = 3;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oper());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterLogicValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CenterLogicValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterLogicValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterLogicValue::MergeFrom(const CenterLogicValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CenterLogicValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterLogicValue::CopyFrom(const CenterLogicValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterLogicValue::IsInitialized() const {

  return true;
}

void CenterLogicValue::Swap(CenterLogicValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CenterLogicValue::InternalSwap(CenterLogicValue* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  std::swap(oper_, other->oper_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CenterLogicValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterLogicValue_descriptor_;
  metadata.reflection = CenterLogicValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CenterLogicValue

// optional string key = 1;
 bool CenterLogicValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void CenterLogicValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
 void CenterLogicValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
 void CenterLogicValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& CenterLogicValue::key() const {
  // @@protoc_insertion_point(field_get:CenterLogicValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CenterLogicValue::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CenterLogicValue.key)
}
 void CenterLogicValue::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CenterLogicValue.key)
}
 void CenterLogicValue::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CenterLogicValue.key)
}
 ::std::string* CenterLogicValue::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:CenterLogicValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CenterLogicValue::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CenterLogicValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:CenterLogicValue.key)
}

// optional int32 value = 2;
 bool CenterLogicValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void CenterLogicValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
 void CenterLogicValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
 void CenterLogicValue::clear_value() {
  value_ = 0;
  clear_has_value();
}
 ::google::protobuf::int32 CenterLogicValue::value() const {
  // @@protoc_insertion_point(field_get:CenterLogicValue.value)
  return value_;
}
 void CenterLogicValue::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:CenterLogicValue.value)
}

// optional int32 oper = 3;
 bool CenterLogicValue::has_oper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void CenterLogicValue::set_has_oper() {
  _has_bits_[0] |= 0x00000004u;
}
 void CenterLogicValue::clear_has_oper() {
  _has_bits_[0] &= ~0x00000004u;
}
 void CenterLogicValue::clear_oper() {
  oper_ = 0;
  clear_has_oper();
}
 ::google::protobuf::int32 CenterLogicValue::oper() const {
  // @@protoc_insertion_point(field_get:CenterLogicValue.oper)
  return oper_;
}
 void CenterLogicValue::set_oper(::google::protobuf::int32 value) {
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:CenterLogicValue.oper)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UserLogin_Req::kSiteidFieldNumber;
const int UserLogin_Req::kPlatformIdFieldNumber;
const int UserLogin_Req::kNameFieldNumber;
const int UserLogin_Req::kProfileLinkFieldNumber;
const int UserLogin_Req::kGenderFieldNumber;
const int UserLogin_Req::kIsYellowDmdFieldNumber;
const int UserLogin_Req::kIsYellowDmdYearFieldNumber;
const int UserLogin_Req::kYellowDmdLvFieldNumber;
const int UserLogin_Req::kFriendsPlatidFieldNumber;
const int UserLogin_Req::kWebfdFieldNumber;
const int UserLogin_Req::kSidFieldNumber;
const int UserLogin_Req::kOpenKeyFieldNumber;
const int UserLogin_Req::kRegisterTypeFieldNumber;
const int UserLogin_Req::kActionFromFieldNumber;
const int UserLogin_Req::kDeviceFromFieldNumber;
#endif  // !_MSC_VER

UserLogin_Req::UserLogin_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserLogin_Req)
}

void UserLogin_Req::InitAsDefaultInstance() {
}

UserLogin_Req::UserLogin_Req(const UserLogin_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserLogin_Req)
}

void UserLogin_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  siteid_ = 0;
  platform_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  is_yellow_dmd_ = false;
  is_yellow_dmd_year_ = false;
  yellow_dmd_lv_ = 0;
  webfd_ = 0;
  sid_ = 0;
  open_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  register_type_ = 0;
  action_from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogin_Req::~UserLogin_Req() {
  // @@protoc_insertion_point(destructor:UserLogin_Req)
  SharedDtor();
}

void UserLogin_Req::SharedDtor() {
  platform_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserLogin_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLogin_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogin_Req_descriptor_;
}

const UserLogin_Req& UserLogin_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

UserLogin_Req* UserLogin_Req::default_instance_ = NULL;

UserLogin_Req* UserLogin_Req::New(::google::protobuf::Arena* arena) const {
  UserLogin_Req* n = new UserLogin_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserLogin_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserLogin_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(siteid_, gender_);
    ZR_(is_yellow_dmd_, yellow_dmd_lv_);
    if (has_platform_id()) {
      platform_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_profile_link()) {
      profile_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 32256) {
    ZR_(webfd_, sid_);
    if (has_open_key()) {
      open_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    register_type_ = 0;
    if (has_action_from()) {
      action_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_device_from()) {
      device_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  friends_platid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserLogin_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserLogin_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 siteid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &siteid_)));
          set_has_siteid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_platform_id;
        break;
      }

      // required string platform_id = 2;
      case 2: {
        if (tag == 18) {
         parse_platform_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform_id().data(), this->platform_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserLogin_Req.platform_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserLogin_Req.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_profile_link;
        break;
      }

      // required string profile_link = 4;
      case 4: {
        if (tag == 34) {
         parse_profile_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profile_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->profile_link().data(), this->profile_link().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserLogin_Req.profile_link");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // required int32 gender = 5;
      case 5: {
        if (tag == 40) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_yellow_dmd;
        break;
      }

      // required bool is_yellow_dmd = 6;
      case 6: {
        if (tag == 48) {
         parse_is_yellow_dmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yellow_dmd_)));
          set_has_is_yellow_dmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_yellow_dmd_year;
        break;
      }

      // required bool is_yellow_dmd_year = 7;
      case 7: {
        if (tag == 56) {
         parse_is_yellow_dmd_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yellow_dmd_year_)));
          set_has_is_yellow_dmd_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_yellow_dmd_lv;
        break;
      }

      // required int32 yellow_dmd_lv = 8;
      case 8: {
        if (tag == 64) {
         parse_yellow_dmd_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yellow_dmd_lv_)));
          set_has_yellow_dmd_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_friends_platid;
        break;
      }

      // repeated string friends_platid = 9;
      case 9: {
        if (tag == 74) {
         parse_friends_platid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_friends_platid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friends_platid(this->friends_platid_size() - 1).data(),
            this->friends_platid(this->friends_platid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserLogin_Req.friends_platid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_friends_platid;
        if (input->ExpectTag(80)) goto parse_webfd;
        break;
      }

      // required int32 webfd = 10;
      case 10: {
        if (tag == 80) {
         parse_webfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &webfd_)));
          set_has_webfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sid;
        break;
      }

      // required int32 sid = 11;
      case 11: {
        if (tag == 88) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_open_key;
        break;
      }

      // optional string open_key = 12;
      case 12: {
        if (tag == 98) {
         parse_open_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->open_key().data(), this->open_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserLogin_Req.open_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_register_type;
        break;
      }

      // optional int32 register_type = 13;
      case 13: {
        if (tag == 104) {
         parse_register_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &register_type_)));
          set_has_register_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_action_from;
        break;
      }

      // optional string action_from = 14;
      case 14: {
        if (tag == 114) {
         parse_action_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action_from().data(), this->action_from().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserLogin_Req.action_from");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_device_from;
        break;
      }

      // optional string device_from = 15;
      case 15: {
        if (tag == 122) {
         parse_device_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_from().data(), this->device_from().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserLogin_Req.device_from");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserLogin_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserLogin_Req)
  return false;
#undef DO_
}

void UserLogin_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserLogin_Req)
  // required int32 siteid = 1;
  if (has_siteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->siteid(), output);
  }

  // required string platform_id = 2;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.platform_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->platform_id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required string profile_link = 4;
  if (has_profile_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profile_link().data(), this->profile_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.profile_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->profile_link(), output);
  }

  // required int32 gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gender(), output);
  }

  // required bool is_yellow_dmd = 6;
  if (has_is_yellow_dmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_yellow_dmd(), output);
  }

  // required bool is_yellow_dmd_year = 7;
  if (has_is_yellow_dmd_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_yellow_dmd_year(), output);
  }

  // required int32 yellow_dmd_lv = 8;
  if (has_yellow_dmd_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->yellow_dmd_lv(), output);
  }

  // repeated string friends_platid = 9;
  for (int i = 0; i < this->friends_platid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->friends_platid(i).data(), this->friends_platid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "UserLogin_Req.friends_platid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->friends_platid(i), output);
  }

  // required int32 webfd = 10;
  if (has_webfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->webfd(), output);
  }

  // required int32 sid = 11;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sid(), output);
  }

  // optional string open_key = 12;
  if (has_open_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->open_key().data(), this->open_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.open_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->open_key(), output);
  }

  // optional int32 register_type = 13;
  if (has_register_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->register_type(), output);
  }

  // optional string action_from = 14;
  if (has_action_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action_from().data(), this->action_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.action_from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->action_from(), output);
  }

  // optional string device_from = 15;
  if (has_device_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_from().data(), this->device_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.device_from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->device_from(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserLogin_Req)
}

::google::protobuf::uint8* UserLogin_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserLogin_Req)
  // required int32 siteid = 1;
  if (has_siteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->siteid(), target);
  }

  // required string platform_id = 2;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.platform_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform_id(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string profile_link = 4;
  if (has_profile_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profile_link().data(), this->profile_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.profile_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->profile_link(), target);
  }

  // required int32 gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gender(), target);
  }

  // required bool is_yellow_dmd = 6;
  if (has_is_yellow_dmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_yellow_dmd(), target);
  }

  // required bool is_yellow_dmd_year = 7;
  if (has_is_yellow_dmd_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_yellow_dmd_year(), target);
  }

  // required int32 yellow_dmd_lv = 8;
  if (has_yellow_dmd_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->yellow_dmd_lv(), target);
  }

  // repeated string friends_platid = 9;
  for (int i = 0; i < this->friends_platid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friends_platid(i).data(), this->friends_platid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.friends_platid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->friends_platid(i), target);
  }

  // required int32 webfd = 10;
  if (has_webfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->webfd(), target);
  }

  // required int32 sid = 11;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sid(), target);
  }

  // optional string open_key = 12;
  if (has_open_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->open_key().data(), this->open_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.open_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->open_key(), target);
  }

  // optional int32 register_type = 13;
  if (has_register_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->register_type(), target);
  }

  // optional string action_from = 14;
  if (has_action_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action_from().data(), this->action_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.action_from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->action_from(), target);
  }

  // optional string device_from = 15;
  if (has_device_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_from().data(), this->device_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Req.device_from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->device_from(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserLogin_Req)
  return target;
}

int UserLogin_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_siteid()) {
    // required int32 siteid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->siteid());
  }

  if (has_platform_id()) {
    // required string platform_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platform_id());
  }

  if (has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_profile_link()) {
    // required string profile_link = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->profile_link());
  }

  if (has_gender()) {
    // required int32 gender = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gender());
  }

  if (has_is_yellow_dmd()) {
    // required bool is_yellow_dmd = 6;
    total_size += 1 + 1;
  }

  if (has_is_yellow_dmd_year()) {
    // required bool is_yellow_dmd_year = 7;
    total_size += 1 + 1;
  }

  if (has_yellow_dmd_lv()) {
    // required int32 yellow_dmd_lv = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->yellow_dmd_lv());
  }

  if (has_webfd()) {
    // required int32 webfd = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->webfd());
  }

  if (has_sid()) {
    // required int32 sid = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  return total_size;
}
int UserLogin_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000006ff) ^ 0x000006ff) == 0) {  // All required fields are present.
    // required int32 siteid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->siteid());

    // required string platform_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platform_id());

    // required string name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string profile_link = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->profile_link());

    // required int32 gender = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gender());

    // required bool is_yellow_dmd = 6;
    total_size += 1 + 1;

    // required bool is_yellow_dmd_year = 7;
    total_size += 1 + 1;

    // required int32 yellow_dmd_lv = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->yellow_dmd_lv());

    // required int32 webfd = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->webfd());

    // required int32 sid = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[11 / 32] & 30720) {
    // optional string open_key = 12;
    if (has_open_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_key());
    }

    // optional int32 register_type = 13;
    if (has_register_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->register_type());
    }

    // optional string action_from = 14;
    if (has_action_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_from());
    }

    // optional string device_from = 15;
    if (has_device_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_from());
    }

  }
  // repeated string friends_platid = 9;
  total_size += 1 * this->friends_platid_size();
  for (int i = 0; i < this->friends_platid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->friends_platid(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogin_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserLogin_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLogin_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLogin_Req::MergeFrom(const UserLogin_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  friends_platid_.MergeFrom(from.friends_platid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_siteid()) {
      set_siteid(from.siteid());
    }
    if (from.has_platform_id()) {
      set_has_platform_id();
      platform_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_profile_link()) {
      set_has_profile_link();
      profile_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profile_link_);
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_is_yellow_dmd()) {
      set_is_yellow_dmd(from.is_yellow_dmd());
    }
    if (from.has_is_yellow_dmd_year()) {
      set_is_yellow_dmd_year(from.is_yellow_dmd_year());
    }
    if (from.has_yellow_dmd_lv()) {
      set_yellow_dmd_lv(from.yellow_dmd_lv());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_webfd()) {
      set_webfd(from.webfd());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_open_key()) {
      set_has_open_key();
      open_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.open_key_);
    }
    if (from.has_register_type()) {
      set_register_type(from.register_type());
    }
    if (from.has_action_from()) {
      set_has_action_from();
      action_from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_from_);
    }
    if (from.has_device_from()) {
      set_has_device_from();
      device_from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_from_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserLogin_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogin_Req::CopyFrom(const UserLogin_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogin_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x000006ff) != 0x000006ff) return false;

  return true;
}

void UserLogin_Req::Swap(UserLogin_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLogin_Req::InternalSwap(UserLogin_Req* other) {
  std::swap(siteid_, other->siteid_);
  platform_id_.Swap(&other->platform_id_);
  name_.Swap(&other->name_);
  profile_link_.Swap(&other->profile_link_);
  std::swap(gender_, other->gender_);
  std::swap(is_yellow_dmd_, other->is_yellow_dmd_);
  std::swap(is_yellow_dmd_year_, other->is_yellow_dmd_year_);
  std::swap(yellow_dmd_lv_, other->yellow_dmd_lv_);
  friends_platid_.UnsafeArenaSwap(&other->friends_platid_);
  std::swap(webfd_, other->webfd_);
  std::swap(sid_, other->sid_);
  open_key_.Swap(&other->open_key_);
  std::swap(register_type_, other->register_type_);
  action_from_.Swap(&other->action_from_);
  device_from_.Swap(&other->device_from_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserLogin_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogin_Req_descriptor_;
  metadata.reflection = UserLogin_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserLogin_Req

// required int32 siteid = 1;
 bool UserLogin_Req::has_siteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void UserLogin_Req::set_has_siteid() {
  _has_bits_[0] |= 0x00000001u;
}
 void UserLogin_Req::clear_has_siteid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void UserLogin_Req::clear_siteid() {
  siteid_ = 0;
  clear_has_siteid();
}
 ::google::protobuf::int32 UserLogin_Req::siteid() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.siteid)
  return siteid_;
}
 void UserLogin_Req::set_siteid(::google::protobuf::int32 value) {
  set_has_siteid();
  siteid_ = value;
  // @@protoc_insertion_point(field_set:UserLogin_Req.siteid)
}

// required string platform_id = 2;
 bool UserLogin_Req::has_platform_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void UserLogin_Req::set_has_platform_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void UserLogin_Req::clear_has_platform_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void UserLogin_Req::clear_platform_id() {
  platform_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform_id();
}
 const ::std::string& UserLogin_Req::platform_id() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.platform_id)
  return platform_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Req::set_platform_id(const ::std::string& value) {
  set_has_platform_id();
  platform_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserLogin_Req.platform_id)
}
 void UserLogin_Req::set_platform_id(const char* value) {
  set_has_platform_id();
  platform_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserLogin_Req.platform_id)
}
 void UserLogin_Req::set_platform_id(const char* value, size_t size) {
  set_has_platform_id();
  platform_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserLogin_Req.platform_id)
}
 ::std::string* UserLogin_Req::mutable_platform_id() {
  set_has_platform_id();
  // @@protoc_insertion_point(field_mutable:UserLogin_Req.platform_id)
  return platform_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserLogin_Req::release_platform_id() {
  clear_has_platform_id();
  return platform_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Req::set_allocated_platform_id(::std::string* platform_id) {
  if (platform_id != NULL) {
    set_has_platform_id();
  } else {
    clear_has_platform_id();
  }
  platform_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform_id);
  // @@protoc_insertion_point(field_set_allocated:UserLogin_Req.platform_id)
}

// required string name = 3;
 bool UserLogin_Req::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void UserLogin_Req::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
 void UserLogin_Req::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
 void UserLogin_Req::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& UserLogin_Req::name() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Req::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserLogin_Req.name)
}
 void UserLogin_Req::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserLogin_Req.name)
}
 void UserLogin_Req::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserLogin_Req.name)
}
 ::std::string* UserLogin_Req::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:UserLogin_Req.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserLogin_Req::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Req::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:UserLogin_Req.name)
}

// required string profile_link = 4;
 bool UserLogin_Req::has_profile_link() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void UserLogin_Req::set_has_profile_link() {
  _has_bits_[0] |= 0x00000008u;
}
 void UserLogin_Req::clear_has_profile_link() {
  _has_bits_[0] &= ~0x00000008u;
}
 void UserLogin_Req::clear_profile_link() {
  profile_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_profile_link();
}
 const ::std::string& UserLogin_Req::profile_link() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.profile_link)
  return profile_link_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Req::set_profile_link(const ::std::string& value) {
  set_has_profile_link();
  profile_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserLogin_Req.profile_link)
}
 void UserLogin_Req::set_profile_link(const char* value) {
  set_has_profile_link();
  profile_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserLogin_Req.profile_link)
}
 void UserLogin_Req::set_profile_link(const char* value, size_t size) {
  set_has_profile_link();
  profile_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserLogin_Req.profile_link)
}
 ::std::string* UserLogin_Req::mutable_profile_link() {
  set_has_profile_link();
  // @@protoc_insertion_point(field_mutable:UserLogin_Req.profile_link)
  return profile_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserLogin_Req::release_profile_link() {
  clear_has_profile_link();
  return profile_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Req::set_allocated_profile_link(::std::string* profile_link) {
  if (profile_link != NULL) {
    set_has_profile_link();
  } else {
    clear_has_profile_link();
  }
  profile_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile_link);
  // @@protoc_insertion_point(field_set_allocated:UserLogin_Req.profile_link)
}

// required int32 gender = 5;
 bool UserLogin_Req::has_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void UserLogin_Req::set_has_gender() {
  _has_bits_[0] |= 0x00000010u;
}
 void UserLogin_Req::clear_has_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
 void UserLogin_Req::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
 ::google::protobuf::int32 UserLogin_Req::gender() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.gender)
  return gender_;
}
 void UserLogin_Req::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:UserLogin_Req.gender)
}

// required bool is_yellow_dmd = 6;
 bool UserLogin_Req::has_is_yellow_dmd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void UserLogin_Req::set_has_is_yellow_dmd() {
  _has_bits_[0] |= 0x00000020u;
}
 void UserLogin_Req::clear_has_is_yellow_dmd() {
  _has_bits_[0] &= ~0x00000020u;
}
 void UserLogin_Req::clear_is_yellow_dmd() {
  is_yellow_dmd_ = false;
  clear_has_is_yellow_dmd();
}
 bool UserLogin_Req::is_yellow_dmd() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.is_yellow_dmd)
  return is_yellow_dmd_;
}
 void UserLogin_Req::set_is_yellow_dmd(bool value) {
  set_has_is_yellow_dmd();
  is_yellow_dmd_ = value;
  // @@protoc_insertion_point(field_set:UserLogin_Req.is_yellow_dmd)
}

// required bool is_yellow_dmd_year = 7;
 bool UserLogin_Req::has_is_yellow_dmd_year() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void UserLogin_Req::set_has_is_yellow_dmd_year() {
  _has_bits_[0] |= 0x00000040u;
}
 void UserLogin_Req::clear_has_is_yellow_dmd_year() {
  _has_bits_[0] &= ~0x00000040u;
}
 void UserLogin_Req::clear_is_yellow_dmd_year() {
  is_yellow_dmd_year_ = false;
  clear_has_is_yellow_dmd_year();
}
 bool UserLogin_Req::is_yellow_dmd_year() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.is_yellow_dmd_year)
  return is_yellow_dmd_year_;
}
 void UserLogin_Req::set_is_yellow_dmd_year(bool value) {
  set_has_is_yellow_dmd_year();
  is_yellow_dmd_year_ = value;
  // @@protoc_insertion_point(field_set:UserLogin_Req.is_yellow_dmd_year)
}

// required int32 yellow_dmd_lv = 8;
 bool UserLogin_Req::has_yellow_dmd_lv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void UserLogin_Req::set_has_yellow_dmd_lv() {
  _has_bits_[0] |= 0x00000080u;
}
 void UserLogin_Req::clear_has_yellow_dmd_lv() {
  _has_bits_[0] &= ~0x00000080u;
}
 void UserLogin_Req::clear_yellow_dmd_lv() {
  yellow_dmd_lv_ = 0;
  clear_has_yellow_dmd_lv();
}
 ::google::protobuf::int32 UserLogin_Req::yellow_dmd_lv() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.yellow_dmd_lv)
  return yellow_dmd_lv_;
}
 void UserLogin_Req::set_yellow_dmd_lv(::google::protobuf::int32 value) {
  set_has_yellow_dmd_lv();
  yellow_dmd_lv_ = value;
  // @@protoc_insertion_point(field_set:UserLogin_Req.yellow_dmd_lv)
}

// repeated string friends_platid = 9;
 int UserLogin_Req::friends_platid_size() const {
  return friends_platid_.size();
}
 void UserLogin_Req::clear_friends_platid() {
  friends_platid_.Clear();
}
 const ::std::string& UserLogin_Req::friends_platid(int index) const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.friends_platid)
  return friends_platid_.Get(index);
}
 ::std::string* UserLogin_Req::mutable_friends_platid(int index) {
  // @@protoc_insertion_point(field_mutable:UserLogin_Req.friends_platid)
  return friends_platid_.Mutable(index);
}
 void UserLogin_Req::set_friends_platid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:UserLogin_Req.friends_platid)
  friends_platid_.Mutable(index)->assign(value);
}
 void UserLogin_Req::set_friends_platid(int index, const char* value) {
  friends_platid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:UserLogin_Req.friends_platid)
}
 void UserLogin_Req::set_friends_platid(int index, const char* value, size_t size) {
  friends_platid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserLogin_Req.friends_platid)
}
 ::std::string* UserLogin_Req::add_friends_platid() {
  return friends_platid_.Add();
}
 void UserLogin_Req::add_friends_platid(const ::std::string& value) {
  friends_platid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:UserLogin_Req.friends_platid)
}
 void UserLogin_Req::add_friends_platid(const char* value) {
  friends_platid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:UserLogin_Req.friends_platid)
}
 void UserLogin_Req::add_friends_platid(const char* value, size_t size) {
  friends_platid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:UserLogin_Req.friends_platid)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserLogin_Req::friends_platid() const {
  // @@protoc_insertion_point(field_list:UserLogin_Req.friends_platid)
  return friends_platid_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
UserLogin_Req::mutable_friends_platid() {
  // @@protoc_insertion_point(field_mutable_list:UserLogin_Req.friends_platid)
  return &friends_platid_;
}

// required int32 webfd = 10;
 bool UserLogin_Req::has_webfd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void UserLogin_Req::set_has_webfd() {
  _has_bits_[0] |= 0x00000200u;
}
 void UserLogin_Req::clear_has_webfd() {
  _has_bits_[0] &= ~0x00000200u;
}
 void UserLogin_Req::clear_webfd() {
  webfd_ = 0;
  clear_has_webfd();
}
 ::google::protobuf::int32 UserLogin_Req::webfd() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.webfd)
  return webfd_;
}
 void UserLogin_Req::set_webfd(::google::protobuf::int32 value) {
  set_has_webfd();
  webfd_ = value;
  // @@protoc_insertion_point(field_set:UserLogin_Req.webfd)
}

// required int32 sid = 11;
 bool UserLogin_Req::has_sid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void UserLogin_Req::set_has_sid() {
  _has_bits_[0] |= 0x00000400u;
}
 void UserLogin_Req::clear_has_sid() {
  _has_bits_[0] &= ~0x00000400u;
}
 void UserLogin_Req::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
 ::google::protobuf::int32 UserLogin_Req::sid() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.sid)
  return sid_;
}
 void UserLogin_Req::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:UserLogin_Req.sid)
}

// optional string open_key = 12;
 bool UserLogin_Req::has_open_key() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void UserLogin_Req::set_has_open_key() {
  _has_bits_[0] |= 0x00000800u;
}
 void UserLogin_Req::clear_has_open_key() {
  _has_bits_[0] &= ~0x00000800u;
}
 void UserLogin_Req::clear_open_key() {
  open_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_open_key();
}
 const ::std::string& UserLogin_Req::open_key() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.open_key)
  return open_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Req::set_open_key(const ::std::string& value) {
  set_has_open_key();
  open_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserLogin_Req.open_key)
}
 void UserLogin_Req::set_open_key(const char* value) {
  set_has_open_key();
  open_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserLogin_Req.open_key)
}
 void UserLogin_Req::set_open_key(const char* value, size_t size) {
  set_has_open_key();
  open_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserLogin_Req.open_key)
}
 ::std::string* UserLogin_Req::mutable_open_key() {
  set_has_open_key();
  // @@protoc_insertion_point(field_mutable:UserLogin_Req.open_key)
  return open_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserLogin_Req::release_open_key() {
  clear_has_open_key();
  return open_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Req::set_allocated_open_key(::std::string* open_key) {
  if (open_key != NULL) {
    set_has_open_key();
  } else {
    clear_has_open_key();
  }
  open_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), open_key);
  // @@protoc_insertion_point(field_set_allocated:UserLogin_Req.open_key)
}

// optional int32 register_type = 13;
 bool UserLogin_Req::has_register_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void UserLogin_Req::set_has_register_type() {
  _has_bits_[0] |= 0x00001000u;
}
 void UserLogin_Req::clear_has_register_type() {
  _has_bits_[0] &= ~0x00001000u;
}
 void UserLogin_Req::clear_register_type() {
  register_type_ = 0;
  clear_has_register_type();
}
 ::google::protobuf::int32 UserLogin_Req::register_type() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.register_type)
  return register_type_;
}
 void UserLogin_Req::set_register_type(::google::protobuf::int32 value) {
  set_has_register_type();
  register_type_ = value;
  // @@protoc_insertion_point(field_set:UserLogin_Req.register_type)
}

// optional string action_from = 14;
 bool UserLogin_Req::has_action_from() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
 void UserLogin_Req::set_has_action_from() {
  _has_bits_[0] |= 0x00002000u;
}
 void UserLogin_Req::clear_has_action_from() {
  _has_bits_[0] &= ~0x00002000u;
}
 void UserLogin_Req::clear_action_from() {
  action_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action_from();
}
 const ::std::string& UserLogin_Req::action_from() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.action_from)
  return action_from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Req::set_action_from(const ::std::string& value) {
  set_has_action_from();
  action_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserLogin_Req.action_from)
}
 void UserLogin_Req::set_action_from(const char* value) {
  set_has_action_from();
  action_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserLogin_Req.action_from)
}
 void UserLogin_Req::set_action_from(const char* value, size_t size) {
  set_has_action_from();
  action_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserLogin_Req.action_from)
}
 ::std::string* UserLogin_Req::mutable_action_from() {
  set_has_action_from();
  // @@protoc_insertion_point(field_mutable:UserLogin_Req.action_from)
  return action_from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserLogin_Req::release_action_from() {
  clear_has_action_from();
  return action_from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Req::set_allocated_action_from(::std::string* action_from) {
  if (action_from != NULL) {
    set_has_action_from();
  } else {
    clear_has_action_from();
  }
  action_from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_from);
  // @@protoc_insertion_point(field_set_allocated:UserLogin_Req.action_from)
}

// optional string device_from = 15;
 bool UserLogin_Req::has_device_from() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
 void UserLogin_Req::set_has_device_from() {
  _has_bits_[0] |= 0x00004000u;
}
 void UserLogin_Req::clear_has_device_from() {
  _has_bits_[0] &= ~0x00004000u;
}
 void UserLogin_Req::clear_device_from() {
  device_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_from();
}
 const ::std::string& UserLogin_Req::device_from() const {
  // @@protoc_insertion_point(field_get:UserLogin_Req.device_from)
  return device_from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Req::set_device_from(const ::std::string& value) {
  set_has_device_from();
  device_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserLogin_Req.device_from)
}
 void UserLogin_Req::set_device_from(const char* value) {
  set_has_device_from();
  device_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserLogin_Req.device_from)
}
 void UserLogin_Req::set_device_from(const char* value, size_t size) {
  set_has_device_from();
  device_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserLogin_Req.device_from)
}
 ::std::string* UserLogin_Req::mutable_device_from() {
  set_has_device_from();
  // @@protoc_insertion_point(field_mutable:UserLogin_Req.device_from)
  return device_from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserLogin_Req::release_device_from() {
  clear_has_device_from();
  return device_from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Req::set_allocated_device_from(::std::string* device_from) {
  if (device_from != NULL) {
    set_has_device_from();
  } else {
    clear_has_device_from();
  }
  device_from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_from);
  // @@protoc_insertion_point(field_set_allocated:UserLogin_Req.device_from)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UserLogin_Rsp::kUidFieldNumber;
const int UserLogin_Rsp::kSecretFieldNumber;
const int UserLogin_Rsp::kServerFieldNumber;
const int UserLogin_Rsp::kPortFieldNumber;
const int UserLogin_Rsp::kWebfdFieldNumber;
const int UserLogin_Rsp::kSidFieldNumber;
const int UserLogin_Rsp::kArgvFieldNumber;
#endif  // !_MSC_VER

UserLogin_Rsp::UserLogin_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserLogin_Rsp)
}

void UserLogin_Rsp::InitAsDefaultInstance() {
}

UserLogin_Rsp::UserLogin_Rsp(const UserLogin_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserLogin_Rsp)
}

void UserLogin_Rsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  webfd_ = 0;
  sid_ = 0;
  argv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogin_Rsp::~UserLogin_Rsp() {
  // @@protoc_insertion_point(destructor:UserLogin_Rsp)
  SharedDtor();
}

void UserLogin_Rsp::SharedDtor() {
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  argv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserLogin_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLogin_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogin_Rsp_descriptor_;
}

const UserLogin_Rsp& UserLogin_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

UserLogin_Rsp* UserLogin_Rsp::default_instance_ = NULL;

UserLogin_Rsp* UserLogin_Rsp::New(::google::protobuf::Arena* arena) const {
  UserLogin_Rsp* n = new UserLogin_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserLogin_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserLogin_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(port_, webfd_);
    uid_ = GOOGLE_LONGLONG(0);
    if (has_secret()) {
      secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_server()) {
      server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sid_ = 0;
    if (has_argv()) {
      argv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserLogin_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserLogin_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_secret;
        break;
      }

      // required string secret = 2;
      case 2: {
        if (tag == 18) {
         parse_secret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secret().data(), this->secret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserLogin_Rsp.secret");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_server;
        break;
      }

      // required string server = 3;
      case 3: {
        if (tag == 26) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server().data(), this->server().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserLogin_Rsp.server");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_webfd;
        break;
      }

      // required int32 webfd = 5;
      case 5: {
        if (tag == 40) {
         parse_webfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &webfd_)));
          set_has_webfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sid;
        break;
      }

      // required int32 sid = 6;
      case 6: {
        if (tag == 48) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_argv;
        break;
      }

      // optional string argv = 7;
      case 7: {
        if (tag == 58) {
         parse_argv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_argv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->argv().data(), this->argv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserLogin_Rsp.argv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserLogin_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserLogin_Rsp)
  return false;
#undef DO_
}

void UserLogin_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserLogin_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required string secret = 2;
  if (has_secret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret().data(), this->secret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Rsp.secret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secret(), output);
  }

  // required string server = 3;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Rsp.server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server(), output);
  }

  // required int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // required int32 webfd = 5;
  if (has_webfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->webfd(), output);
  }

  // required int32 sid = 6;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sid(), output);
  }

  // optional string argv = 7;
  if (has_argv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->argv().data(), this->argv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Rsp.argv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->argv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserLogin_Rsp)
}

::google::protobuf::uint8* UserLogin_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserLogin_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required string secret = 2;
  if (has_secret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret().data(), this->secret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Rsp.secret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secret(), target);
  }

  // required string server = 3;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Rsp.server");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server(), target);
  }

  // required int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // required int32 webfd = 5;
  if (has_webfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->webfd(), target);
  }

  // required int32 sid = 6;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sid(), target);
  }

  // optional string argv = 7;
  if (has_argv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->argv().data(), this->argv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserLogin_Rsp.argv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->argv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserLogin_Rsp)
  return target;
}

int UserLogin_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_secret()) {
    // required string secret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secret());
  }

  if (has_server()) {
    // required string server = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server());
  }

  if (has_port()) {
    // required int32 port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  if (has_webfd()) {
    // required int32 webfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->webfd());
  }

  if (has_sid()) {
    // required int32 sid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  return total_size;
}
int UserLogin_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required string secret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secret());

    // required string server = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server());

    // required int32 port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

    // required int32 webfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->webfd());

    // required int32 sid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string argv = 7;
  if (has_argv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->argv());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogin_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserLogin_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLogin_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLogin_Rsp::MergeFrom(const UserLogin_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_secret()) {
      set_has_secret();
      secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
    }
    if (from.has_server()) {
      set_has_server();
      server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_webfd()) {
      set_webfd(from.webfd());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_argv()) {
      set_has_argv();
      argv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.argv_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserLogin_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogin_Rsp::CopyFrom(const UserLogin_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogin_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void UserLogin_Rsp::Swap(UserLogin_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLogin_Rsp::InternalSwap(UserLogin_Rsp* other) {
  std::swap(uid_, other->uid_);
  secret_.Swap(&other->secret_);
  server_.Swap(&other->server_);
  std::swap(port_, other->port_);
  std::swap(webfd_, other->webfd_);
  std::swap(sid_, other->sid_);
  argv_.Swap(&other->argv_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserLogin_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogin_Rsp_descriptor_;
  metadata.reflection = UserLogin_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserLogin_Rsp

// required int64 uid = 1;
 bool UserLogin_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void UserLogin_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void UserLogin_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void UserLogin_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 UserLogin_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:UserLogin_Rsp.uid)
  return uid_;
}
 void UserLogin_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:UserLogin_Rsp.uid)
}

// required string secret = 2;
 bool UserLogin_Rsp::has_secret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void UserLogin_Rsp::set_has_secret() {
  _has_bits_[0] |= 0x00000002u;
}
 void UserLogin_Rsp::clear_has_secret() {
  _has_bits_[0] &= ~0x00000002u;
}
 void UserLogin_Rsp::clear_secret() {
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secret();
}
 const ::std::string& UserLogin_Rsp::secret() const {
  // @@protoc_insertion_point(field_get:UserLogin_Rsp.secret)
  return secret_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Rsp::set_secret(const ::std::string& value) {
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserLogin_Rsp.secret)
}
 void UserLogin_Rsp::set_secret(const char* value) {
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserLogin_Rsp.secret)
}
 void UserLogin_Rsp::set_secret(const char* value, size_t size) {
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserLogin_Rsp.secret)
}
 ::std::string* UserLogin_Rsp::mutable_secret() {
  set_has_secret();
  // @@protoc_insertion_point(field_mutable:UserLogin_Rsp.secret)
  return secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserLogin_Rsp::release_secret() {
  clear_has_secret();
  return secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Rsp::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    set_has_secret();
  } else {
    clear_has_secret();
  }
  secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:UserLogin_Rsp.secret)
}

// required string server = 3;
 bool UserLogin_Rsp::has_server() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void UserLogin_Rsp::set_has_server() {
  _has_bits_[0] |= 0x00000004u;
}
 void UserLogin_Rsp::clear_has_server() {
  _has_bits_[0] &= ~0x00000004u;
}
 void UserLogin_Rsp::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server();
}
 const ::std::string& UserLogin_Rsp::server() const {
  // @@protoc_insertion_point(field_get:UserLogin_Rsp.server)
  return server_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Rsp::set_server(const ::std::string& value) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserLogin_Rsp.server)
}
 void UserLogin_Rsp::set_server(const char* value) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserLogin_Rsp.server)
}
 void UserLogin_Rsp::set_server(const char* value, size_t size) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserLogin_Rsp.server)
}
 ::std::string* UserLogin_Rsp::mutable_server() {
  set_has_server();
  // @@protoc_insertion_point(field_mutable:UserLogin_Rsp.server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserLogin_Rsp::release_server() {
  clear_has_server();
  return server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Rsp::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    set_has_server();
  } else {
    clear_has_server();
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:UserLogin_Rsp.server)
}

// required int32 port = 4;
 bool UserLogin_Rsp::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void UserLogin_Rsp::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
 void UserLogin_Rsp::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
 void UserLogin_Rsp::clear_port() {
  port_ = 0;
  clear_has_port();
}
 ::google::protobuf::int32 UserLogin_Rsp::port() const {
  // @@protoc_insertion_point(field_get:UserLogin_Rsp.port)
  return port_;
}
 void UserLogin_Rsp::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:UserLogin_Rsp.port)
}

// required int32 webfd = 5;
 bool UserLogin_Rsp::has_webfd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void UserLogin_Rsp::set_has_webfd() {
  _has_bits_[0] |= 0x00000010u;
}
 void UserLogin_Rsp::clear_has_webfd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void UserLogin_Rsp::clear_webfd() {
  webfd_ = 0;
  clear_has_webfd();
}
 ::google::protobuf::int32 UserLogin_Rsp::webfd() const {
  // @@protoc_insertion_point(field_get:UserLogin_Rsp.webfd)
  return webfd_;
}
 void UserLogin_Rsp::set_webfd(::google::protobuf::int32 value) {
  set_has_webfd();
  webfd_ = value;
  // @@protoc_insertion_point(field_set:UserLogin_Rsp.webfd)
}

// required int32 sid = 6;
 bool UserLogin_Rsp::has_sid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void UserLogin_Rsp::set_has_sid() {
  _has_bits_[0] |= 0x00000020u;
}
 void UserLogin_Rsp::clear_has_sid() {
  _has_bits_[0] &= ~0x00000020u;
}
 void UserLogin_Rsp::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
 ::google::protobuf::int32 UserLogin_Rsp::sid() const {
  // @@protoc_insertion_point(field_get:UserLogin_Rsp.sid)
  return sid_;
}
 void UserLogin_Rsp::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:UserLogin_Rsp.sid)
}

// optional string argv = 7;
 bool UserLogin_Rsp::has_argv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void UserLogin_Rsp::set_has_argv() {
  _has_bits_[0] |= 0x00000040u;
}
 void UserLogin_Rsp::clear_has_argv() {
  _has_bits_[0] &= ~0x00000040u;
}
 void UserLogin_Rsp::clear_argv() {
  argv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_argv();
}
 const ::std::string& UserLogin_Rsp::argv() const {
  // @@protoc_insertion_point(field_get:UserLogin_Rsp.argv)
  return argv_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Rsp::set_argv(const ::std::string& value) {
  set_has_argv();
  argv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserLogin_Rsp.argv)
}
 void UserLogin_Rsp::set_argv(const char* value) {
  set_has_argv();
  argv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserLogin_Rsp.argv)
}
 void UserLogin_Rsp::set_argv(const char* value, size_t size) {
  set_has_argv();
  argv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserLogin_Rsp.argv)
}
 ::std::string* UserLogin_Rsp::mutable_argv() {
  set_has_argv();
  // @@protoc_insertion_point(field_mutable:UserLogin_Rsp.argv)
  return argv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserLogin_Rsp::release_argv() {
  clear_has_argv();
  return argv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_Rsp::set_allocated_argv(::std::string* argv) {
  if (argv != NULL) {
    set_has_argv();
  } else {
    clear_has_argv();
  }
  argv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), argv);
  // @@protoc_insertion_point(field_set_allocated:UserLogin_Rsp.argv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WG_UserLeave::kFdFieldNumber;
#endif  // !_MSC_VER

WG_UserLeave::WG_UserLeave()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WG_UserLeave)
}

void WG_UserLeave::InitAsDefaultInstance() {
}

WG_UserLeave::WG_UserLeave(const WG_UserLeave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WG_UserLeave)
}

void WG_UserLeave::SharedCtor() {
  _cached_size_ = 0;
  fd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WG_UserLeave::~WG_UserLeave() {
  // @@protoc_insertion_point(destructor:WG_UserLeave)
  SharedDtor();
}

void WG_UserLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WG_UserLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WG_UserLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WG_UserLeave_descriptor_;
}

const WG_UserLeave& WG_UserLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WG_UserLeave* WG_UserLeave::default_instance_ = NULL;

WG_UserLeave* WG_UserLeave::New(::google::protobuf::Arena* arena) const {
  WG_UserLeave* n = new WG_UserLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WG_UserLeave::Clear() {
  fd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WG_UserLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WG_UserLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WG_UserLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WG_UserLeave)
  return false;
#undef DO_
}

void WG_UserLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WG_UserLeave)
  // required int32 fd = 1;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WG_UserLeave)
}

::google::protobuf::uint8* WG_UserLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WG_UserLeave)
  // required int32 fd = 1;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WG_UserLeave)
  return target;
}

int WG_UserLeave::ByteSize() const {
  int total_size = 0;

  // required int32 fd = 1;
  if (has_fd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WG_UserLeave::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WG_UserLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WG_UserLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WG_UserLeave::MergeFrom(const WG_UserLeave& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fd()) {
      set_fd(from.fd());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WG_UserLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WG_UserLeave::CopyFrom(const WG_UserLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WG_UserLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WG_UserLeave::Swap(WG_UserLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WG_UserLeave::InternalSwap(WG_UserLeave* other) {
  std::swap(fd_, other->fd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WG_UserLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WG_UserLeave_descriptor_;
  metadata.reflection = WG_UserLeave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WG_UserLeave

// required int32 fd = 1;
 bool WG_UserLeave::has_fd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WG_UserLeave::set_has_fd() {
  _has_bits_[0] |= 0x00000001u;
}
 void WG_UserLeave::clear_has_fd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WG_UserLeave::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 WG_UserLeave::fd() const {
  // @@protoc_insertion_point(field_get:WG_UserLeave.fd)
  return fd_;
}
 void WG_UserLeave::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:WG_UserLeave.fd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WorkingStatus_Req::kGidFieldNumber;
const int WorkingStatus_Req::kFinishFieldNumber;
#endif  // !_MSC_VER

WorkingStatus_Req::WorkingStatus_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorkingStatus_Req)
}

void WorkingStatus_Req::InitAsDefaultInstance() {
}

WorkingStatus_Req::WorkingStatus_Req(const WorkingStatus_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WorkingStatus_Req)
}

void WorkingStatus_Req::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0;
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkingStatus_Req::~WorkingStatus_Req() {
  // @@protoc_insertion_point(destructor:WorkingStatus_Req)
  SharedDtor();
}

void WorkingStatus_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkingStatus_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkingStatus_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkingStatus_Req_descriptor_;
}

const WorkingStatus_Req& WorkingStatus_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WorkingStatus_Req* WorkingStatus_Req::default_instance_ = NULL;

WorkingStatus_Req* WorkingStatus_Req::New(::google::protobuf::Arena* arena) const {
  WorkingStatus_Req* n = new WorkingStatus_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkingStatus_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorkingStatus_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gid_, finish_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorkingStatus_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WorkingStatus_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }

      // required bool finish = 2;
      case 2: {
        if (tag == 16) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WorkingStatus_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WorkingStatus_Req)
  return false;
#undef DO_
}

void WorkingStatus_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WorkingStatus_Req)
  // required int32 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }

  // required bool finish = 2;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->finish(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WorkingStatus_Req)
}

::google::protobuf::uint8* WorkingStatus_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorkingStatus_Req)
  // required int32 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }

  // required bool finish = 2;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->finish(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorkingStatus_Req)
  return target;
}

int WorkingStatus_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_gid()) {
    // required int32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_finish()) {
    // required bool finish = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
int WorkingStatus_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required bool finish = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkingStatus_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorkingStatus_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkingStatus_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkingStatus_Req::MergeFrom(const WorkingStatus_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorkingStatus_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkingStatus_Req::CopyFrom(const WorkingStatus_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkingStatus_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WorkingStatus_Req::Swap(WorkingStatus_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkingStatus_Req::InternalSwap(WorkingStatus_Req* other) {
  std::swap(gid_, other->gid_);
  std::swap(finish_, other->finish_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkingStatus_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkingStatus_Req_descriptor_;
  metadata.reflection = WorkingStatus_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkingStatus_Req

// required int32 gid = 1;
 bool WorkingStatus_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WorkingStatus_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
 void WorkingStatus_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WorkingStatus_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 WorkingStatus_Req::gid() const {
  // @@protoc_insertion_point(field_get:WorkingStatus_Req.gid)
  return gid_;
}
 void WorkingStatus_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:WorkingStatus_Req.gid)
}

// required bool finish = 2;
 bool WorkingStatus_Req::has_finish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void WorkingStatus_Req::set_has_finish() {
  _has_bits_[0] |= 0x00000002u;
}
 void WorkingStatus_Req::clear_has_finish() {
  _has_bits_[0] &= ~0x00000002u;
}
 void WorkingStatus_Req::clear_finish() {
  finish_ = false;
  clear_has_finish();
}
 bool WorkingStatus_Req::finish() const {
  // @@protoc_insertion_point(field_get:WorkingStatus_Req.finish)
  return finish_;
}
 void WorkingStatus_Req::set_finish(bool value) {
  set_has_finish();
  finish_ = value;
  // @@protoc_insertion_point(field_set:WorkingStatus_Req.finish)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UserAuth_Req::kUidFieldNumber;
const int UserAuth_Req::kSecretFieldNumber;
const int UserAuth_Req::kSockfdFieldNumber;
#endif  // !_MSC_VER

UserAuth_Req::UserAuth_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserAuth_Req)
}

void UserAuth_Req::InitAsDefaultInstance() {
}

UserAuth_Req::UserAuth_Req(const UserAuth_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserAuth_Req)
}

void UserAuth_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  secret_ = GOOGLE_LONGLONG(0);
  sockfd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAuth_Req::~UserAuth_Req() {
  // @@protoc_insertion_point(destructor:UserAuth_Req)
  SharedDtor();
}

void UserAuth_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserAuth_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAuth_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAuth_Req_descriptor_;
}

const UserAuth_Req& UserAuth_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

UserAuth_Req* UserAuth_Req::default_instance_ = NULL;

UserAuth_Req* UserAuth_Req::New(::google::protobuf::Arena* arena) const {
  UserAuth_Req* n = new UserAuth_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserAuth_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserAuth_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, sockfd_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserAuth_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserAuth_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_secret;
        break;
      }

      // required int64 secret = 2;
      case 2: {
        if (tag == 16) {
         parse_secret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &secret_)));
          set_has_secret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sockfd;
        break;
      }

      // required int32 sockfd = 3;
      case 3: {
        if (tag == 24) {
         parse_sockfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sockfd_)));
          set_has_sockfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserAuth_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserAuth_Req)
  return false;
#undef DO_
}

void UserAuth_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserAuth_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int64 secret = 2;
  if (has_secret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->secret(), output);
  }

  // required int32 sockfd = 3;
  if (has_sockfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sockfd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserAuth_Req)
}

::google::protobuf::uint8* UserAuth_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAuth_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int64 secret = 2;
  if (has_secret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->secret(), target);
  }

  // required int32 sockfd = 3;
  if (has_sockfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sockfd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAuth_Req)
  return target;
}

int UserAuth_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_secret()) {
    // required int64 secret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->secret());
  }

  if (has_sockfd()) {
    // required int32 sockfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sockfd());
  }

  return total_size;
}
int UserAuth_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int64 secret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->secret());

    // required int32 sockfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sockfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAuth_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserAuth_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAuth_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAuth_Req::MergeFrom(const UserAuth_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_secret()) {
      set_secret(from.secret());
    }
    if (from.has_sockfd()) {
      set_sockfd(from.sockfd());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserAuth_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAuth_Req::CopyFrom(const UserAuth_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuth_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserAuth_Req::Swap(UserAuth_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserAuth_Req::InternalSwap(UserAuth_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(secret_, other->secret_);
  std::swap(sockfd_, other->sockfd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserAuth_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAuth_Req_descriptor_;
  metadata.reflection = UserAuth_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserAuth_Req

// required int64 uid = 1;
 bool UserAuth_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void UserAuth_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void UserAuth_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void UserAuth_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 UserAuth_Req::uid() const {
  // @@protoc_insertion_point(field_get:UserAuth_Req.uid)
  return uid_;
}
 void UserAuth_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:UserAuth_Req.uid)
}

// required int64 secret = 2;
 bool UserAuth_Req::has_secret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void UserAuth_Req::set_has_secret() {
  _has_bits_[0] |= 0x00000002u;
}
 void UserAuth_Req::clear_has_secret() {
  _has_bits_[0] &= ~0x00000002u;
}
 void UserAuth_Req::clear_secret() {
  secret_ = GOOGLE_LONGLONG(0);
  clear_has_secret();
}
 ::google::protobuf::int64 UserAuth_Req::secret() const {
  // @@protoc_insertion_point(field_get:UserAuth_Req.secret)
  return secret_;
}
 void UserAuth_Req::set_secret(::google::protobuf::int64 value) {
  set_has_secret();
  secret_ = value;
  // @@protoc_insertion_point(field_set:UserAuth_Req.secret)
}

// required int32 sockfd = 3;
 bool UserAuth_Req::has_sockfd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void UserAuth_Req::set_has_sockfd() {
  _has_bits_[0] |= 0x00000004u;
}
 void UserAuth_Req::clear_has_sockfd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void UserAuth_Req::clear_sockfd() {
  sockfd_ = 0;
  clear_has_sockfd();
}
 ::google::protobuf::int32 UserAuth_Req::sockfd() const {
  // @@protoc_insertion_point(field_get:UserAuth_Req.sockfd)
  return sockfd_;
}
 void UserAuth_Req::set_sockfd(::google::protobuf::int32 value) {
  set_has_sockfd();
  sockfd_ = value;
  // @@protoc_insertion_point(field_set:UserAuth_Req.sockfd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UserAuth_Rsp::kPassFieldNumber;
#endif  // !_MSC_VER

UserAuth_Rsp::UserAuth_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserAuth_Rsp)
}

void UserAuth_Rsp::InitAsDefaultInstance() {
}

UserAuth_Rsp::UserAuth_Rsp(const UserAuth_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserAuth_Rsp)
}

void UserAuth_Rsp::SharedCtor() {
  _cached_size_ = 0;
  pass_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAuth_Rsp::~UserAuth_Rsp() {
  // @@protoc_insertion_point(destructor:UserAuth_Rsp)
  SharedDtor();
}

void UserAuth_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserAuth_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAuth_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAuth_Rsp_descriptor_;
}

const UserAuth_Rsp& UserAuth_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

UserAuth_Rsp* UserAuth_Rsp::default_instance_ = NULL;

UserAuth_Rsp* UserAuth_Rsp::New(::google::protobuf::Arena* arena) const {
  UserAuth_Rsp* n = new UserAuth_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserAuth_Rsp::Clear() {
  pass_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserAuth_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserAuth_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool pass = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserAuth_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserAuth_Rsp)
  return false;
#undef DO_
}

void UserAuth_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserAuth_Rsp)
  // required bool pass = 1;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->pass(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserAuth_Rsp)
}

::google::protobuf::uint8* UserAuth_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserAuth_Rsp)
  // required bool pass = 1;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->pass(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserAuth_Rsp)
  return target;
}

int UserAuth_Rsp::ByteSize() const {
  int total_size = 0;

  // required bool pass = 1;
  if (has_pass()) {
    total_size += 1 + 1;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAuth_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserAuth_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAuth_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAuth_Rsp::MergeFrom(const UserAuth_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pass()) {
      set_pass(from.pass());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserAuth_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAuth_Rsp::CopyFrom(const UserAuth_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuth_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserAuth_Rsp::Swap(UserAuth_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserAuth_Rsp::InternalSwap(UserAuth_Rsp* other) {
  std::swap(pass_, other->pass_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserAuth_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAuth_Rsp_descriptor_;
  metadata.reflection = UserAuth_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserAuth_Rsp

// required bool pass = 1;
 bool UserAuth_Rsp::has_pass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void UserAuth_Rsp::set_has_pass() {
  _has_bits_[0] |= 0x00000001u;
}
 void UserAuth_Rsp::clear_has_pass() {
  _has_bits_[0] &= ~0x00000001u;
}
 void UserAuth_Rsp::clear_pass() {
  pass_ = false;
  clear_has_pass();
}
 bool UserAuth_Rsp::pass() const {
  // @@protoc_insertion_point(field_get:UserAuth_Rsp.pass)
  return pass_;
}
 void UserAuth_Rsp::set_pass(bool value) {
  set_has_pass();
  pass_ = value;
  // @@protoc_insertion_point(field_set:UserAuth_Rsp.pass)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SendRemoteUser_Req::kUidFieldNumber;
const int SendRemoteUser_Req::kCmdFieldNumber;
const int SendRemoteUser_Req::kTextFieldNumber;
#endif  // !_MSC_VER

SendRemoteUser_Req::SendRemoteUser_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SendRemoteUser_Req)
}

void SendRemoteUser_Req::InitAsDefaultInstance() {
}

SendRemoteUser_Req::SendRemoteUser_Req(const SendRemoteUser_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SendRemoteUser_Req)
}

void SendRemoteUser_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  cmd_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendRemoteUser_Req::~SendRemoteUser_Req() {
  // @@protoc_insertion_point(destructor:SendRemoteUser_Req)
  SharedDtor();
}

void SendRemoteUser_Req::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SendRemoteUser_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendRemoteUser_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendRemoteUser_Req_descriptor_;
}

const SendRemoteUser_Req& SendRemoteUser_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

SendRemoteUser_Req* SendRemoteUser_Req::default_instance_ = NULL;

SendRemoteUser_Req* SendRemoteUser_Req::New(::google::protobuf::Arena* arena) const {
  SendRemoteUser_Req* n = new SendRemoteUser_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendRemoteUser_Req::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    uid_ = GOOGLE_LONGLONG(0);
    cmd_ = 0;
    if (has_text()) {
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SendRemoteUser_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SendRemoteUser_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required int32 cmd = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // required string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SendRemoteUser_Req.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SendRemoteUser_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SendRemoteUser_Req)
  return false;
#undef DO_
}

void SendRemoteUser_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SendRemoteUser_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  // required string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SendRemoteUser_Req.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SendRemoteUser_Req)
}

::google::protobuf::uint8* SendRemoteUser_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SendRemoteUser_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  // required string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SendRemoteUser_Req.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SendRemoteUser_Req)
  return target;
}

int SendRemoteUser_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_cmd()) {
    // required int32 cmd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  if (has_text()) {
    // required string text = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  return total_size;
}
int SendRemoteUser_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 cmd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());

    // required string text = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendRemoteUser_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SendRemoteUser_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendRemoteUser_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendRemoteUser_Req::MergeFrom(const SendRemoteUser_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SendRemoteUser_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRemoteUser_Req::CopyFrom(const SendRemoteUser_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRemoteUser_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SendRemoteUser_Req::Swap(SendRemoteUser_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendRemoteUser_Req::InternalSwap(SendRemoteUser_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(cmd_, other->cmd_);
  text_.Swap(&other->text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendRemoteUser_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendRemoteUser_Req_descriptor_;
  metadata.reflection = SendRemoteUser_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendRemoteUser_Req

// required int64 uid = 1;
 bool SendRemoteUser_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void SendRemoteUser_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void SendRemoteUser_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void SendRemoteUser_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 SendRemoteUser_Req::uid() const {
  // @@protoc_insertion_point(field_get:SendRemoteUser_Req.uid)
  return uid_;
}
 void SendRemoteUser_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:SendRemoteUser_Req.uid)
}

// required int32 cmd = 2;
 bool SendRemoteUser_Req::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void SendRemoteUser_Req::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
 void SendRemoteUser_Req::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
 void SendRemoteUser_Req::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
 ::google::protobuf::int32 SendRemoteUser_Req::cmd() const {
  // @@protoc_insertion_point(field_get:SendRemoteUser_Req.cmd)
  return cmd_;
}
 void SendRemoteUser_Req::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:SendRemoteUser_Req.cmd)
}

// required string text = 3;
 bool SendRemoteUser_Req::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void SendRemoteUser_Req::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
 void SendRemoteUser_Req::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
 void SendRemoteUser_Req::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
 const ::std::string& SendRemoteUser_Req::text() const {
  // @@protoc_insertion_point(field_get:SendRemoteUser_Req.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendRemoteUser_Req::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SendRemoteUser_Req.text)
}
 void SendRemoteUser_Req::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendRemoteUser_Req.text)
}
 void SendRemoteUser_Req::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendRemoteUser_Req.text)
}
 ::std::string* SendRemoteUser_Req::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:SendRemoteUser_Req.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendRemoteUser_Req::release_text() {
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendRemoteUser_Req::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:SendRemoteUser_Req.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HallEnterRoom::HallEnterRoom()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HallEnterRoom)
}

void HallEnterRoom::InitAsDefaultInstance() {
}

HallEnterRoom::HallEnterRoom(const HallEnterRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HallEnterRoom)
}

void HallEnterRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HallEnterRoom::~HallEnterRoom() {
  // @@protoc_insertion_point(destructor:HallEnterRoom)
  SharedDtor();
}

void HallEnterRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HallEnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HallEnterRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HallEnterRoom_descriptor_;
}

const HallEnterRoom& HallEnterRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

HallEnterRoom* HallEnterRoom::default_instance_ = NULL;

HallEnterRoom* HallEnterRoom::New(::google::protobuf::Arena* arena) const {
  HallEnterRoom* n = new HallEnterRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HallEnterRoom::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HallEnterRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HallEnterRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:HallEnterRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HallEnterRoom)
  return false;
#undef DO_
}

void HallEnterRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HallEnterRoom)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HallEnterRoom)
}

::google::protobuf::uint8* HallEnterRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HallEnterRoom)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HallEnterRoom)
  return target;
}

int HallEnterRoom::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HallEnterRoom::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HallEnterRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HallEnterRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HallEnterRoom::MergeFrom(const HallEnterRoom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HallEnterRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallEnterRoom::CopyFrom(const HallEnterRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallEnterRoom::IsInitialized() const {

  return true;
}

void HallEnterRoom::Swap(HallEnterRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HallEnterRoom::InternalSwap(HallEnterRoom* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HallEnterRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HallEnterRoom_descriptor_;
  metadata.reflection = HallEnterRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HallEnterRoom

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BeLottery::kLotteryFieldNumber;
const int BeLottery::kSignFieldNumber;
const int BeLottery::kLotteryLevelFieldNumber;
#endif  // !_MSC_VER

BeLottery::BeLottery()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BeLottery)
}

void BeLottery::InitAsDefaultInstance() {
}

BeLottery::BeLottery(const BeLottery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BeLottery)
}

void BeLottery::SharedCtor() {
  _cached_size_ = 0;
  lottery_ = 0;
  sign_ = 0;
  lotterylevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeLottery::~BeLottery() {
  // @@protoc_insertion_point(destructor:BeLottery)
  SharedDtor();
}

void BeLottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeLottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeLottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeLottery_descriptor_;
}

const BeLottery& BeLottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

BeLottery* BeLottery::default_instance_ = NULL;

BeLottery* BeLottery::New(::google::protobuf::Arena* arena) const {
  BeLottery* n = new BeLottery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeLottery::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BeLottery*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lottery_, lotterylevel_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BeLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BeLottery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lottery = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lottery_)));
          set_has_lottery();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sign;
        break;
      }

      // required int32 sign = 2;
      case 2: {
        if (tag == 16) {
         parse_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_)));
          set_has_sign();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lotteryLevel;
        break;
      }

      // required int32 lotteryLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_lotteryLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lotterylevel_)));
          set_has_lotterylevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BeLottery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BeLottery)
  return false;
#undef DO_
}

void BeLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BeLottery)
  // required int32 lottery = 1;
  if (has_lottery()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lottery(), output);
  }

  // required int32 sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sign(), output);
  }

  // required int32 lotteryLevel = 3;
  if (has_lotterylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lotterylevel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BeLottery)
}

::google::protobuf::uint8* BeLottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BeLottery)
  // required int32 lottery = 1;
  if (has_lottery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lottery(), target);
  }

  // required int32 sign = 2;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sign(), target);
  }

  // required int32 lotteryLevel = 3;
  if (has_lotterylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lotterylevel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BeLottery)
  return target;
}

int BeLottery::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_lottery()) {
    // required int32 lottery = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lottery());
  }

  if (has_sign()) {
    // required int32 sign = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sign());
  }

  if (has_lotterylevel()) {
    // required int32 lotteryLevel = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lotterylevel());
  }

  return total_size;
}
int BeLottery::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 lottery = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lottery());

    // required int32 sign = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sign());

    // required int32 lotteryLevel = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lotterylevel());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeLottery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BeLottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeLottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeLottery::MergeFrom(const BeLottery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lottery()) {
      set_lottery(from.lottery());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_lotterylevel()) {
      set_lotterylevel(from.lotterylevel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BeLottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeLottery::CopyFrom(const BeLottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeLottery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BeLottery::Swap(BeLottery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeLottery::InternalSwap(BeLottery* other) {
  std::swap(lottery_, other->lottery_);
  std::swap(sign_, other->sign_);
  std::swap(lotterylevel_, other->lotterylevel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeLottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeLottery_descriptor_;
  metadata.reflection = BeLottery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeLottery

// required int32 lottery = 1;
 bool BeLottery::has_lottery() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void BeLottery::set_has_lottery() {
  _has_bits_[0] |= 0x00000001u;
}
 void BeLottery::clear_has_lottery() {
  _has_bits_[0] &= ~0x00000001u;
}
 void BeLottery::clear_lottery() {
  lottery_ = 0;
  clear_has_lottery();
}
 ::google::protobuf::int32 BeLottery::lottery() const {
  // @@protoc_insertion_point(field_get:BeLottery.lottery)
  return lottery_;
}
 void BeLottery::set_lottery(::google::protobuf::int32 value) {
  set_has_lottery();
  lottery_ = value;
  // @@protoc_insertion_point(field_set:BeLottery.lottery)
}

// required int32 sign = 2;
 bool BeLottery::has_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void BeLottery::set_has_sign() {
  _has_bits_[0] |= 0x00000002u;
}
 void BeLottery::clear_has_sign() {
  _has_bits_[0] &= ~0x00000002u;
}
 void BeLottery::clear_sign() {
  sign_ = 0;
  clear_has_sign();
}
 ::google::protobuf::int32 BeLottery::sign() const {
  // @@protoc_insertion_point(field_get:BeLottery.sign)
  return sign_;
}
 void BeLottery::set_sign(::google::protobuf::int32 value) {
  set_has_sign();
  sign_ = value;
  // @@protoc_insertion_point(field_set:BeLottery.sign)
}

// required int32 lotteryLevel = 3;
 bool BeLottery::has_lotterylevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void BeLottery::set_has_lotterylevel() {
  _has_bits_[0] |= 0x00000004u;
}
 void BeLottery::clear_has_lotterylevel() {
  _has_bits_[0] &= ~0x00000004u;
}
 void BeLottery::clear_lotterylevel() {
  lotterylevel_ = 0;
  clear_has_lotterylevel();
}
 ::google::protobuf::int32 BeLottery::lotterylevel() const {
  // @@protoc_insertion_point(field_get:BeLottery.lotteryLevel)
  return lotterylevel_;
}
 void BeLottery::set_lotterylevel(::google::protobuf::int32 value) {
  set_has_lotterylevel();
  lotterylevel_ = value;
  // @@protoc_insertion_point(field_set:BeLottery.lotteryLevel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BeUpdateWinInfo::kWinsFieldNumber;
const int BeUpdateWinInfo::kKillCountFieldNumber;
const int BeUpdateWinInfo::kBattleModeFieldNumber;
const int BeUpdateWinInfo::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

BeUpdateWinInfo::BeUpdateWinInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BeUpdateWinInfo)
}

void BeUpdateWinInfo::InitAsDefaultInstance() {
}

BeUpdateWinInfo::BeUpdateWinInfo(const BeUpdateWinInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BeUpdateWinInfo)
}

void BeUpdateWinInfo::SharedCtor() {
  _cached_size_ = 0;
  wins_ = false;
  killcount_ = 0;
  battlemode_ = 0u;
  roomtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeUpdateWinInfo::~BeUpdateWinInfo() {
  // @@protoc_insertion_point(destructor:BeUpdateWinInfo)
  SharedDtor();
}

void BeUpdateWinInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeUpdateWinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeUpdateWinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeUpdateWinInfo_descriptor_;
}

const BeUpdateWinInfo& BeUpdateWinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

BeUpdateWinInfo* BeUpdateWinInfo::default_instance_ = NULL;

BeUpdateWinInfo* BeUpdateWinInfo::New(::google::protobuf::Arena* arena) const {
  BeUpdateWinInfo* n = new BeUpdateWinInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeUpdateWinInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BeUpdateWinInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(wins_, roomtype_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BeUpdateWinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BeUpdateWinInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool wins = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_killCount;
        break;
      }

      // required int32 killCount = 2;
      case 2: {
        if (tag == 16) {
         parse_killCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_battleMode;
        break;
      }

      // optional uint32 battleMode = 3;
      case 3: {
        if (tag == 24) {
         parse_battleMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlemode_)));
          set_has_battlemode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomType;
        break;
      }

      // optional uint32 roomType = 4;
      case 4: {
        if (tag == 32) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BeUpdateWinInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BeUpdateWinInfo)
  return false;
#undef DO_
}

void BeUpdateWinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BeUpdateWinInfo)
  // required bool wins = 1;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->wins(), output);
  }

  // required int32 killCount = 2;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->killcount(), output);
  }

  // optional uint32 battleMode = 3;
  if (has_battlemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battlemode(), output);
  }

  // optional uint32 roomType = 4;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->roomtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BeUpdateWinInfo)
}

::google::protobuf::uint8* BeUpdateWinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BeUpdateWinInfo)
  // required bool wins = 1;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->wins(), target);
  }

  // required int32 killCount = 2;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->killcount(), target);
  }

  // optional uint32 battleMode = 3;
  if (has_battlemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battlemode(), target);
  }

  // optional uint32 roomType = 4;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->roomtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BeUpdateWinInfo)
  return target;
}

int BeUpdateWinInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_wins()) {
    // required bool wins = 1;
    total_size += 1 + 1;
  }

  if (has_killcount()) {
    // required int32 killCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->killcount());
  }

  return total_size;
}
int BeUpdateWinInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool wins = 1;
    total_size += 1 + 1;

    // required int32 killCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->killcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12) {
    // optional uint32 battleMode = 3;
    if (has_battlemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlemode());
    }

    // optional uint32 roomType = 4;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomtype());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeUpdateWinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BeUpdateWinInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeUpdateWinInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeUpdateWinInfo::MergeFrom(const BeUpdateWinInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_battlemode()) {
      set_battlemode(from.battlemode());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BeUpdateWinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeUpdateWinInfo::CopyFrom(const BeUpdateWinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeUpdateWinInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BeUpdateWinInfo::Swap(BeUpdateWinInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeUpdateWinInfo::InternalSwap(BeUpdateWinInfo* other) {
  std::swap(wins_, other->wins_);
  std::swap(killcount_, other->killcount_);
  std::swap(battlemode_, other->battlemode_);
  std::swap(roomtype_, other->roomtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeUpdateWinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeUpdateWinInfo_descriptor_;
  metadata.reflection = BeUpdateWinInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeUpdateWinInfo

// required bool wins = 1;
 bool BeUpdateWinInfo::has_wins() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void BeUpdateWinInfo::set_has_wins() {
  _has_bits_[0] |= 0x00000001u;
}
 void BeUpdateWinInfo::clear_has_wins() {
  _has_bits_[0] &= ~0x00000001u;
}
 void BeUpdateWinInfo::clear_wins() {
  wins_ = false;
  clear_has_wins();
}
 bool BeUpdateWinInfo::wins() const {
  // @@protoc_insertion_point(field_get:BeUpdateWinInfo.wins)
  return wins_;
}
 void BeUpdateWinInfo::set_wins(bool value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:BeUpdateWinInfo.wins)
}

// required int32 killCount = 2;
 bool BeUpdateWinInfo::has_killcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void BeUpdateWinInfo::set_has_killcount() {
  _has_bits_[0] |= 0x00000002u;
}
 void BeUpdateWinInfo::clear_has_killcount() {
  _has_bits_[0] &= ~0x00000002u;
}
 void BeUpdateWinInfo::clear_killcount() {
  killcount_ = 0;
  clear_has_killcount();
}
 ::google::protobuf::int32 BeUpdateWinInfo::killcount() const {
  // @@protoc_insertion_point(field_get:BeUpdateWinInfo.killCount)
  return killcount_;
}
 void BeUpdateWinInfo::set_killcount(::google::protobuf::int32 value) {
  set_has_killcount();
  killcount_ = value;
  // @@protoc_insertion_point(field_set:BeUpdateWinInfo.killCount)
}

// optional uint32 battleMode = 3;
 bool BeUpdateWinInfo::has_battlemode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void BeUpdateWinInfo::set_has_battlemode() {
  _has_bits_[0] |= 0x00000004u;
}
 void BeUpdateWinInfo::clear_has_battlemode() {
  _has_bits_[0] &= ~0x00000004u;
}
 void BeUpdateWinInfo::clear_battlemode() {
  battlemode_ = 0u;
  clear_has_battlemode();
}
 ::google::protobuf::uint32 BeUpdateWinInfo::battlemode() const {
  // @@protoc_insertion_point(field_get:BeUpdateWinInfo.battleMode)
  return battlemode_;
}
 void BeUpdateWinInfo::set_battlemode(::google::protobuf::uint32 value) {
  set_has_battlemode();
  battlemode_ = value;
  // @@protoc_insertion_point(field_set:BeUpdateWinInfo.battleMode)
}

// optional uint32 roomType = 4;
 bool BeUpdateWinInfo::has_roomtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void BeUpdateWinInfo::set_has_roomtype() {
  _has_bits_[0] |= 0x00000008u;
}
 void BeUpdateWinInfo::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000008u;
}
 void BeUpdateWinInfo::clear_roomtype() {
  roomtype_ = 0u;
  clear_has_roomtype();
}
 ::google::protobuf::uint32 BeUpdateWinInfo::roomtype() const {
  // @@protoc_insertion_point(field_get:BeUpdateWinInfo.roomType)
  return roomtype_;
}
 void BeUpdateWinInfo::set_roomtype(::google::protobuf::uint32 value) {
  set_has_roomtype();
  roomtype_ = value;
  // @@protoc_insertion_point(field_set:BeUpdateWinInfo.roomType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BeUpdateExp::kExpDetaFieldNumber;
#endif  // !_MSC_VER

BeUpdateExp::BeUpdateExp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BeUpdateExp)
}

void BeUpdateExp::InitAsDefaultInstance() {
}

BeUpdateExp::BeUpdateExp(const BeUpdateExp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BeUpdateExp)
}

void BeUpdateExp::SharedCtor() {
  _cached_size_ = 0;
  expdeta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeUpdateExp::~BeUpdateExp() {
  // @@protoc_insertion_point(destructor:BeUpdateExp)
  SharedDtor();
}

void BeUpdateExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeUpdateExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeUpdateExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeUpdateExp_descriptor_;
}

const BeUpdateExp& BeUpdateExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

BeUpdateExp* BeUpdateExp::default_instance_ = NULL;

BeUpdateExp* BeUpdateExp::New(::google::protobuf::Arena* arena) const {
  BeUpdateExp* n = new BeUpdateExp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeUpdateExp::Clear() {
  expdeta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BeUpdateExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BeUpdateExp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 expDeta = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expdeta_)));
          set_has_expdeta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BeUpdateExp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BeUpdateExp)
  return false;
#undef DO_
}

void BeUpdateExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BeUpdateExp)
  // required int32 expDeta = 1;
  if (has_expdeta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->expdeta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BeUpdateExp)
}

::google::protobuf::uint8* BeUpdateExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BeUpdateExp)
  // required int32 expDeta = 1;
  if (has_expdeta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->expdeta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BeUpdateExp)
  return target;
}

int BeUpdateExp::ByteSize() const {
  int total_size = 0;

  // required int32 expDeta = 1;
  if (has_expdeta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->expdeta());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeUpdateExp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BeUpdateExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeUpdateExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeUpdateExp::MergeFrom(const BeUpdateExp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expdeta()) {
      set_expdeta(from.expdeta());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BeUpdateExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeUpdateExp::CopyFrom(const BeUpdateExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeUpdateExp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BeUpdateExp::Swap(BeUpdateExp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeUpdateExp::InternalSwap(BeUpdateExp* other) {
  std::swap(expdeta_, other->expdeta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeUpdateExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeUpdateExp_descriptor_;
  metadata.reflection = BeUpdateExp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeUpdateExp

// required int32 expDeta = 1;
 bool BeUpdateExp::has_expdeta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void BeUpdateExp::set_has_expdeta() {
  _has_bits_[0] |= 0x00000001u;
}
 void BeUpdateExp::clear_has_expdeta() {
  _has_bits_[0] &= ~0x00000001u;
}
 void BeUpdateExp::clear_expdeta() {
  expdeta_ = 0;
  clear_has_expdeta();
}
 ::google::protobuf::int32 BeUpdateExp::expdeta() const {
  // @@protoc_insertion_point(field_get:BeUpdateExp.expDeta)
  return expdeta_;
}
 void BeUpdateExp::set_expdeta(::google::protobuf::int32 value) {
  set_has_expdeta();
  expdeta_ = value;
  // @@protoc_insertion_point(field_set:BeUpdateExp.expDeta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BeUpdateTool::kIdxFieldNumber;
const int BeUpdateTool::kToolFieldNumber;
#endif  // !_MSC_VER

BeUpdateTool::BeUpdateTool()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BeUpdateTool)
}

void BeUpdateTool::InitAsDefaultInstance() {
}

BeUpdateTool::BeUpdateTool(const BeUpdateTool& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BeUpdateTool)
}

void BeUpdateTool::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  tool_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeUpdateTool::~BeUpdateTool() {
  // @@protoc_insertion_point(destructor:BeUpdateTool)
  SharedDtor();
}

void BeUpdateTool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeUpdateTool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeUpdateTool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeUpdateTool_descriptor_;
}

const BeUpdateTool& BeUpdateTool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

BeUpdateTool* BeUpdateTool::default_instance_ = NULL;

BeUpdateTool* BeUpdateTool::New(::google::protobuf::Arena* arena) const {
  BeUpdateTool* n = new BeUpdateTool;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeUpdateTool::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BeUpdateTool*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(idx_, tool_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BeUpdateTool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BeUpdateTool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tool;
        break;
      }

      // required int32 tool = 2;
      case 2: {
        if (tag == 16) {
         parse_tool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tool_)));
          set_has_tool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BeUpdateTool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BeUpdateTool)
  return false;
#undef DO_
}

void BeUpdateTool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BeUpdateTool)
  // required int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // required int32 tool = 2;
  if (has_tool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tool(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BeUpdateTool)
}

::google::protobuf::uint8* BeUpdateTool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BeUpdateTool)
  // required int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // required int32 tool = 2;
  if (has_tool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tool(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BeUpdateTool)
  return target;
}

int BeUpdateTool::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_idx()) {
    // required int32 idx = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  if (has_tool()) {
    // required int32 tool = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tool());
  }

  return total_size;
}
int BeUpdateTool::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 idx = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idx());

    // required int32 tool = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tool());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeUpdateTool::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BeUpdateTool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeUpdateTool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeUpdateTool::MergeFrom(const BeUpdateTool& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_tool()) {
      set_tool(from.tool());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BeUpdateTool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeUpdateTool::CopyFrom(const BeUpdateTool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeUpdateTool::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BeUpdateTool::Swap(BeUpdateTool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeUpdateTool::InternalSwap(BeUpdateTool* other) {
  std::swap(idx_, other->idx_);
  std::swap(tool_, other->tool_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeUpdateTool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeUpdateTool_descriptor_;
  metadata.reflection = BeUpdateTool_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeUpdateTool

// required int32 idx = 1;
 bool BeUpdateTool::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void BeUpdateTool::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
 void BeUpdateTool::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
 void BeUpdateTool::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
 ::google::protobuf::int32 BeUpdateTool::idx() const {
  // @@protoc_insertion_point(field_get:BeUpdateTool.idx)
  return idx_;
}
 void BeUpdateTool::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:BeUpdateTool.idx)
}

// required int32 tool = 2;
 bool BeUpdateTool::has_tool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void BeUpdateTool::set_has_tool() {
  _has_bits_[0] |= 0x00000002u;
}
 void BeUpdateTool::clear_has_tool() {
  _has_bits_[0] &= ~0x00000002u;
}
 void BeUpdateTool::clear_tool() {
  tool_ = 0;
  clear_has_tool();
}
 ::google::protobuf::int32 BeUpdateTool::tool() const {
  // @@protoc_insertion_point(field_get:BeUpdateTool.tool)
  return tool_;
}
 void BeUpdateTool::set_tool(::google::protobuf::int32 value) {
  set_has_tool();
  tool_ = value;
  // @@protoc_insertion_point(field_set:BeUpdateTool.tool)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DpNormalResult::kResultFieldNumber;
#endif  // !_MSC_VER

DpNormalResult::DpNormalResult()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DpNormalResult)
}

void DpNormalResult::InitAsDefaultInstance() {
}

DpNormalResult::DpNormalResult(const DpNormalResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DpNormalResult)
}

void DpNormalResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DpNormalResult::~DpNormalResult() {
  // @@protoc_insertion_point(destructor:DpNormalResult)
  SharedDtor();
}

void DpNormalResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DpNormalResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DpNormalResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DpNormalResult_descriptor_;
}

const DpNormalResult& DpNormalResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

DpNormalResult* DpNormalResult::default_instance_ = NULL;

DpNormalResult* DpNormalResult::New(::google::protobuf::Arena* arena) const {
  DpNormalResult* n = new DpNormalResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DpNormalResult::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DpNormalResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DpNormalResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DpNormalResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DpNormalResult)
  return false;
#undef DO_
}

void DpNormalResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DpNormalResult)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DpNormalResult)
}

::google::protobuf::uint8* DpNormalResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DpNormalResult)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DpNormalResult)
  return target;
}

int DpNormalResult::ByteSize() const {
  int total_size = 0;

  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DpNormalResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DpNormalResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DpNormalResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DpNormalResult::MergeFrom(const DpNormalResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DpNormalResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpNormalResult::CopyFrom(const DpNormalResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpNormalResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DpNormalResult::Swap(DpNormalResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DpNormalResult::InternalSwap(DpNormalResult* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DpNormalResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DpNormalResult_descriptor_;
  metadata.reflection = DpNormalResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DpNormalResult

// required int32 result = 1;
 bool DpNormalResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DpNormalResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
 void DpNormalResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DpNormalResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 DpNormalResult::result() const {
  // @@protoc_insertion_point(field_get:DpNormalResult.result)
  return result_;
}
 void DpNormalResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:DpNormalResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GWG_FriendRequest::kTuidFieldNumber;
const int GWG_FriendRequest::kRetFieldNumber;
const int GWG_FriendRequest::kInfoFieldNumber;
const int GWG_FriendRequest::kPlatTypeFieldNumber;
const int GWG_FriendRequest::kPlatidFieldNumber;
const int GWG_FriendRequest::kIsPlatFriendFieldNumber;
const int GWG_FriendRequest::kActionIdFieldNumber;
#endif  // !_MSC_VER

GWG_FriendRequest::GWG_FriendRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GWG_FriendRequest)
}

void GWG_FriendRequest::InitAsDefaultInstance() {
  info_ = const_cast< ::FriendInfoLite*>(&::FriendInfoLite::default_instance());
}

GWG_FriendRequest::GWG_FriendRequest(const GWG_FriendRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GWG_FriendRequest)
}

void GWG_FriendRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tuid_ = GOOGLE_LONGLONG(-1);
  ret_ = false;
  info_ = NULL;
  plat_type_ = 0;
  platid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_plat_friend_ = true;
  action_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWG_FriendRequest::~GWG_FriendRequest() {
  // @@protoc_insertion_point(destructor:GWG_FriendRequest)
  SharedDtor();
}

void GWG_FriendRequest::SharedDtor() {
  platid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete info_;
  }
}

void GWG_FriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWG_FriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWG_FriendRequest_descriptor_;
}

const GWG_FriendRequest& GWG_FriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

GWG_FriendRequest* GWG_FriendRequest::default_instance_ = NULL;

GWG_FriendRequest* GWG_FriendRequest::New(::google::protobuf::Arena* arena) const {
  GWG_FriendRequest* n = new GWG_FriendRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GWG_FriendRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GWG_FriendRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(plat_type_, ret_);
    tuid_ = GOOGLE_LONGLONG(-1);
    if (has_info()) {
      if (info_ != NULL) info_->::FriendInfoLite::Clear();
    }
    if (has_platid()) {
      platid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    is_plat_friend_ = true;
    if (has_action_id()) {
      action_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GWG_FriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GWG_FriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tuid = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tuid_)));
          set_has_tuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional bool ret = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .FriendInfoLite info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_plat_type;
        break;
      }

      // optional int32 plat_type = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_plat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plat_type_)));
          set_has_plat_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_platid;
        break;
      }

      // optional string platid = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_platid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platid().data(), this->platid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GWG_FriendRequest.platid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_plat_friend;
        break;
      }

      // optional bool is_plat_friend = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_is_plat_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_plat_friend_)));
          set_has_is_plat_friend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_action_id;
        break;
      }

      // optional string action_id = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_action_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action_id().data(), this->action_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GWG_FriendRequest.action_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GWG_FriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GWG_FriendRequest)
  return false;
#undef DO_
}

void GWG_FriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GWG_FriendRequest)
  // optional int64 tuid = 1 [default = -1];
  if (has_tuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tuid(), output);
  }

  // optional bool ret = 2 [default = false];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ret(), output);
  }

  // optional .FriendInfoLite info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->info_, output);
  }

  // optional int32 plat_type = 4 [default = 0];
  if (has_plat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->plat_type(), output);
  }

  // optional string platid = 5 [default = ""];
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GWG_FriendRequest.platid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->platid(), output);
  }

  // optional bool is_plat_friend = 6 [default = true];
  if (has_is_plat_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_plat_friend(), output);
  }

  // optional string action_id = 7 [default = ""];
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GWG_FriendRequest.action_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->action_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GWG_FriendRequest)
}

::google::protobuf::uint8* GWG_FriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GWG_FriendRequest)
  // optional int64 tuid = 1 [default = -1];
  if (has_tuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tuid(), target);
  }

  // optional bool ret = 2 [default = false];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ret(), target);
  }

  // optional .FriendInfoLite info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->info_, target);
  }

  // optional int32 plat_type = 4 [default = 0];
  if (has_plat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->plat_type(), target);
  }

  // optional string platid = 5 [default = ""];
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GWG_FriendRequest.platid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platid(), target);
  }

  // optional bool is_plat_friend = 6 [default = true];
  if (has_is_plat_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_plat_friend(), target);
  }

  // optional string action_id = 7 [default = ""];
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GWG_FriendRequest.action_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->action_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GWG_FriendRequest)
  return target;
}

int GWG_FriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127) {
    // optional int64 tuid = 1 [default = -1];
    if (has_tuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tuid());
    }

    // optional bool ret = 2 [default = false];
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional .FriendInfoLite info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

    // optional int32 plat_type = 4 [default = 0];
    if (has_plat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plat_type());
    }

    // optional string platid = 5 [default = ""];
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }

    // optional bool is_plat_friend = 6 [default = true];
    if (has_is_plat_friend()) {
      total_size += 1 + 1;
    }

    // optional string action_id = 7 [default = ""];
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWG_FriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GWG_FriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWG_FriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWG_FriendRequest::MergeFrom(const GWG_FriendRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tuid()) {
      set_tuid(from.tuid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::FriendInfoLite::MergeFrom(from.info());
    }
    if (from.has_plat_type()) {
      set_plat_type(from.plat_type());
    }
    if (from.has_platid()) {
      set_has_platid();
      platid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platid_);
    }
    if (from.has_is_plat_friend()) {
      set_is_plat_friend(from.is_plat_friend());
    }
    if (from.has_action_id()) {
      set_has_action_id();
      action_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GWG_FriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWG_FriendRequest::CopyFrom(const GWG_FriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWG_FriendRequest::IsInitialized() const {

  if (has_info()) {
    if (!this->info_->IsInitialized()) return false;
  }
  return true;
}

void GWG_FriendRequest::Swap(GWG_FriendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GWG_FriendRequest::InternalSwap(GWG_FriendRequest* other) {
  std::swap(tuid_, other->tuid_);
  std::swap(ret_, other->ret_);
  std::swap(info_, other->info_);
  std::swap(plat_type_, other->plat_type_);
  platid_.Swap(&other->platid_);
  std::swap(is_plat_friend_, other->is_plat_friend_);
  action_id_.Swap(&other->action_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GWG_FriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWG_FriendRequest_descriptor_;
  metadata.reflection = GWG_FriendRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GWG_FriendRequest

// optional int64 tuid = 1 [default = -1];
 bool GWG_FriendRequest::has_tuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void GWG_FriendRequest::set_has_tuid() {
  _has_bits_[0] |= 0x00000001u;
}
 void GWG_FriendRequest::clear_has_tuid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void GWG_FriendRequest::clear_tuid() {
  tuid_ = GOOGLE_LONGLONG(-1);
  clear_has_tuid();
}
 ::google::protobuf::int64 GWG_FriendRequest::tuid() const {
  // @@protoc_insertion_point(field_get:GWG_FriendRequest.tuid)
  return tuid_;
}
 void GWG_FriendRequest::set_tuid(::google::protobuf::int64 value) {
  set_has_tuid();
  tuid_ = value;
  // @@protoc_insertion_point(field_set:GWG_FriendRequest.tuid)
}

// optional bool ret = 2 [default = false];
 bool GWG_FriendRequest::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void GWG_FriendRequest::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
 void GWG_FriendRequest::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
 void GWG_FriendRequest::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
 bool GWG_FriendRequest::ret() const {
  // @@protoc_insertion_point(field_get:GWG_FriendRequest.ret)
  return ret_;
}
 void GWG_FriendRequest::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:GWG_FriendRequest.ret)
}

// optional .FriendInfoLite info = 3;
 bool GWG_FriendRequest::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void GWG_FriendRequest::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
 void GWG_FriendRequest::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
 void GWG_FriendRequest::clear_info() {
  if (info_ != NULL) info_->::FriendInfoLite::Clear();
  clear_has_info();
}
 const ::FriendInfoLite& GWG_FriendRequest::info() const {
  // @@protoc_insertion_point(field_get:GWG_FriendRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
 ::FriendInfoLite* GWG_FriendRequest::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::FriendInfoLite;
  }
  // @@protoc_insertion_point(field_mutable:GWG_FriendRequest.info)
  return info_;
}
 ::FriendInfoLite* GWG_FriendRequest::release_info() {
  clear_has_info();
  ::FriendInfoLite* temp = info_;
  info_ = NULL;
  return temp;
}
 void GWG_FriendRequest::set_allocated_info(::FriendInfoLite* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:GWG_FriendRequest.info)
}

// optional int32 plat_type = 4 [default = 0];
 bool GWG_FriendRequest::has_plat_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void GWG_FriendRequest::set_has_plat_type() {
  _has_bits_[0] |= 0x00000008u;
}
 void GWG_FriendRequest::clear_has_plat_type() {
  _has_bits_[0] &= ~0x00000008u;
}
 void GWG_FriendRequest::clear_plat_type() {
  plat_type_ = 0;
  clear_has_plat_type();
}
 ::google::protobuf::int32 GWG_FriendRequest::plat_type() const {
  // @@protoc_insertion_point(field_get:GWG_FriendRequest.plat_type)
  return plat_type_;
}
 void GWG_FriendRequest::set_plat_type(::google::protobuf::int32 value) {
  set_has_plat_type();
  plat_type_ = value;
  // @@protoc_insertion_point(field_set:GWG_FriendRequest.plat_type)
}

// optional string platid = 5 [default = ""];
 bool GWG_FriendRequest::has_platid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void GWG_FriendRequest::set_has_platid() {
  _has_bits_[0] |= 0x00000010u;
}
 void GWG_FriendRequest::clear_has_platid() {
  _has_bits_[0] &= ~0x00000010u;
}
 void GWG_FriendRequest::clear_platid() {
  platid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platid();
}
 const ::std::string& GWG_FriendRequest::platid() const {
  // @@protoc_insertion_point(field_get:GWG_FriendRequest.platid)
  return platid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GWG_FriendRequest::set_platid(const ::std::string& value) {
  set_has_platid();
  platid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GWG_FriendRequest.platid)
}
 void GWG_FriendRequest::set_platid(const char* value) {
  set_has_platid();
  platid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GWG_FriendRequest.platid)
}
 void GWG_FriendRequest::set_platid(const char* value, size_t size) {
  set_has_platid();
  platid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GWG_FriendRequest.platid)
}
 ::std::string* GWG_FriendRequest::mutable_platid() {
  set_has_platid();
  // @@protoc_insertion_point(field_mutable:GWG_FriendRequest.platid)
  return platid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GWG_FriendRequest::release_platid() {
  clear_has_platid();
  return platid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GWG_FriendRequest::set_allocated_platid(::std::string* platid) {
  if (platid != NULL) {
    set_has_platid();
  } else {
    clear_has_platid();
  }
  platid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platid);
  // @@protoc_insertion_point(field_set_allocated:GWG_FriendRequest.platid)
}

// optional bool is_plat_friend = 6 [default = true];
 bool GWG_FriendRequest::has_is_plat_friend() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void GWG_FriendRequest::set_has_is_plat_friend() {
  _has_bits_[0] |= 0x00000020u;
}
 void GWG_FriendRequest::clear_has_is_plat_friend() {
  _has_bits_[0] &= ~0x00000020u;
}
 void GWG_FriendRequest::clear_is_plat_friend() {
  is_plat_friend_ = true;
  clear_has_is_plat_friend();
}
 bool GWG_FriendRequest::is_plat_friend() const {
  // @@protoc_insertion_point(field_get:GWG_FriendRequest.is_plat_friend)
  return is_plat_friend_;
}
 void GWG_FriendRequest::set_is_plat_friend(bool value) {
  set_has_is_plat_friend();
  is_plat_friend_ = value;
  // @@protoc_insertion_point(field_set:GWG_FriendRequest.is_plat_friend)
}

// optional string action_id = 7 [default = ""];
 bool GWG_FriendRequest::has_action_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void GWG_FriendRequest::set_has_action_id() {
  _has_bits_[0] |= 0x00000040u;
}
 void GWG_FriendRequest::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000040u;
}
 void GWG_FriendRequest::clear_action_id() {
  action_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action_id();
}
 const ::std::string& GWG_FriendRequest::action_id() const {
  // @@protoc_insertion_point(field_get:GWG_FriendRequest.action_id)
  return action_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GWG_FriendRequest::set_action_id(const ::std::string& value) {
  set_has_action_id();
  action_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GWG_FriendRequest.action_id)
}
 void GWG_FriendRequest::set_action_id(const char* value) {
  set_has_action_id();
  action_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GWG_FriendRequest.action_id)
}
 void GWG_FriendRequest::set_action_id(const char* value, size_t size) {
  set_has_action_id();
  action_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GWG_FriendRequest.action_id)
}
 ::std::string* GWG_FriendRequest::mutable_action_id() {
  set_has_action_id();
  // @@protoc_insertion_point(field_mutable:GWG_FriendRequest.action_id)
  return action_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GWG_FriendRequest::release_action_id() {
  clear_has_action_id();
  return action_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GWG_FriendRequest::set_allocated_action_id(::std::string* action_id) {
  if (action_id != NULL) {
    set_has_action_id();
  } else {
    clear_has_action_id();
  }
  action_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_id);
  // @@protoc_insertion_point(field_set_allocated:GWG_FriendRequest.action_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* ForwardInfo::_default_platid_ = NULL;
#ifndef _MSC_VER
const int ForwardInfo::kUidFieldNumber;
const int ForwardInfo::kPlatidFieldNumber;
const int ForwardInfo::kActionSenderPlatTypeFieldNumber;
const int ForwardInfo::kSendernameFieldNumber;
const int ForwardInfo::kSenderurlFieldNumber;
#endif  // !_MSC_VER

ForwardInfo::ForwardInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ForwardInfo)
}

void ForwardInfo::InitAsDefaultInstance() {
}

ForwardInfo::ForwardInfo(const ForwardInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ForwardInfo)
}

void ForwardInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  platid_.UnsafeSetDefault(_default_platid_);
  actionsenderplattype_ = 0;
  sendername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardInfo::~ForwardInfo() {
  // @@protoc_insertion_point(destructor:ForwardInfo)
  SharedDtor();
}

void ForwardInfo::SharedDtor() {
  platid_.DestroyNoArena(_default_platid_);
  sendername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ForwardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardInfo_descriptor_;
}

const ForwardInfo& ForwardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

ForwardInfo* ForwardInfo::default_instance_ = NULL;

ForwardInfo* ForwardInfo::New(::google::protobuf::Arena* arena) const {
  ForwardInfo* n = new ForwardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardInfo::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    uid_ = GOOGLE_LONGLONG(-1);
    if (has_platid()) {
      platid_.ClearToDefaultNoArena(_default_platid_);
    }
    actionsenderplattype_ = 0;
    if (has_sendername()) {
      sendername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_senderurl()) {
      senderurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ForwardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ForwardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_platid;
        break;
      }

      // optional string platid = 2 [default = "0"];
      case 2: {
        if (tag == 18) {
         parse_platid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platid().data(), this->platid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ForwardInfo.platid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ActionSenderPlatType;
        break;
      }

      // optional int32 ActionSenderPlatType = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_ActionSenderPlatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionsenderplattype_)));
          set_has_actionsenderplattype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sendername;
        break;
      }

      // optional string sendername = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_sendername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ForwardInfo.sendername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_senderurl;
        break;
      }

      // optional string senderurl = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_senderurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->senderurl().data(), this->senderurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ForwardInfo.senderurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ForwardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ForwardInfo)
  return false;
#undef DO_
}

void ForwardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ForwardInfo)
  // optional int64 uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional string platid = 2 [default = "0"];
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ForwardInfo.platid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->platid(), output);
  }

  // optional int32 ActionSenderPlatType = 3 [default = 0];
  if (has_actionsenderplattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionsenderplattype(), output);
  }

  // optional string sendername = 4 [default = ""];
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ForwardInfo.sendername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sendername(), output);
  }

  // optional string senderurl = 5 [default = ""];
  if (has_senderurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->senderurl().data(), this->senderurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ForwardInfo.senderurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->senderurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ForwardInfo)
}

::google::protobuf::uint8* ForwardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ForwardInfo)
  // optional int64 uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional string platid = 2 [default = "0"];
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ForwardInfo.platid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platid(), target);
  }

  // optional int32 ActionSenderPlatType = 3 [default = 0];
  if (has_actionsenderplattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionsenderplattype(), target);
  }

  // optional string sendername = 4 [default = ""];
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ForwardInfo.sendername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sendername(), target);
  }

  // optional string senderurl = 5 [default = ""];
  if (has_senderurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->senderurl().data(), this->senderurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ForwardInfo.senderurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->senderurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ForwardInfo)
  return target;
}

int ForwardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional int64 uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional string platid = 2 [default = "0"];
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }

    // optional int32 ActionSenderPlatType = 3 [default = 0];
    if (has_actionsenderplattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionsenderplattype());
    }

    // optional string sendername = 4 [default = ""];
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // optional string senderurl = 5 [default = ""];
    if (has_senderurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->senderurl());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ForwardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardInfo::MergeFrom(const ForwardInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_platid()) {
      set_has_platid();
      platid_.AssignWithDefault(_default_platid_, from.platid_);
    }
    if (from.has_actionsenderplattype()) {
      set_actionsenderplattype(from.actionsenderplattype());
    }
    if (from.has_sendername()) {
      set_has_sendername();
      sendername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sendername_);
    }
    if (from.has_senderurl()) {
      set_has_senderurl();
      senderurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderurl_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ForwardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardInfo::CopyFrom(const ForwardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardInfo::IsInitialized() const {

  return true;
}

void ForwardInfo::Swap(ForwardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardInfo::InternalSwap(ForwardInfo* other) {
  std::swap(uid_, other->uid_);
  platid_.Swap(&other->platid_);
  std::swap(actionsenderplattype_, other->actionsenderplattype_);
  sendername_.Swap(&other->sendername_);
  senderurl_.Swap(&other->senderurl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardInfo_descriptor_;
  metadata.reflection = ForwardInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardInfo

// optional int64 uid = 1 [default = -1];
 bool ForwardInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void ForwardInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void ForwardInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void ForwardInfo::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
 ::google::protobuf::int64 ForwardInfo::uid() const {
  // @@protoc_insertion_point(field_get:ForwardInfo.uid)
  return uid_;
}
 void ForwardInfo::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:ForwardInfo.uid)
}

// optional string platid = 2 [default = "0"];
 bool ForwardInfo::has_platid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void ForwardInfo::set_has_platid() {
  _has_bits_[0] |= 0x00000002u;
}
 void ForwardInfo::clear_has_platid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void ForwardInfo::clear_platid() {
  platid_.ClearToDefaultNoArena(_default_platid_);
  clear_has_platid();
}
 const ::std::string& ForwardInfo::platid() const {
  // @@protoc_insertion_point(field_get:ForwardInfo.platid)
  return platid_.GetNoArena(_default_platid_);
}
 void ForwardInfo::set_platid(const ::std::string& value) {
  set_has_platid();
  platid_.SetNoArena(_default_platid_, value);
  // @@protoc_insertion_point(field_set:ForwardInfo.platid)
}
 void ForwardInfo::set_platid(const char* value) {
  set_has_platid();
  platid_.SetNoArena(_default_platid_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ForwardInfo.platid)
}
 void ForwardInfo::set_platid(const char* value, size_t size) {
  set_has_platid();
  platid_.SetNoArena(_default_platid_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ForwardInfo.platid)
}
 ::std::string* ForwardInfo::mutable_platid() {
  set_has_platid();
  // @@protoc_insertion_point(field_mutable:ForwardInfo.platid)
  return platid_.MutableNoArena(_default_platid_);
}
 ::std::string* ForwardInfo::release_platid() {
  clear_has_platid();
  return platid_.ReleaseNoArena(_default_platid_);
}
 void ForwardInfo::set_allocated_platid(::std::string* platid) {
  if (platid != NULL) {
    set_has_platid();
  } else {
    clear_has_platid();
  }
  platid_.SetAllocatedNoArena(_default_platid_, platid);
  // @@protoc_insertion_point(field_set_allocated:ForwardInfo.platid)
}

// optional int32 ActionSenderPlatType = 3 [default = 0];
 bool ForwardInfo::has_actionsenderplattype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void ForwardInfo::set_has_actionsenderplattype() {
  _has_bits_[0] |= 0x00000004u;
}
 void ForwardInfo::clear_has_actionsenderplattype() {
  _has_bits_[0] &= ~0x00000004u;
}
 void ForwardInfo::clear_actionsenderplattype() {
  actionsenderplattype_ = 0;
  clear_has_actionsenderplattype();
}
 ::google::protobuf::int32 ForwardInfo::actionsenderplattype() const {
  // @@protoc_insertion_point(field_get:ForwardInfo.ActionSenderPlatType)
  return actionsenderplattype_;
}
 void ForwardInfo::set_actionsenderplattype(::google::protobuf::int32 value) {
  set_has_actionsenderplattype();
  actionsenderplattype_ = value;
  // @@protoc_insertion_point(field_set:ForwardInfo.ActionSenderPlatType)
}

// optional string sendername = 4 [default = ""];
 bool ForwardInfo::has_sendername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void ForwardInfo::set_has_sendername() {
  _has_bits_[0] |= 0x00000008u;
}
 void ForwardInfo::clear_has_sendername() {
  _has_bits_[0] &= ~0x00000008u;
}
 void ForwardInfo::clear_sendername() {
  sendername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sendername();
}
 const ::std::string& ForwardInfo::sendername() const {
  // @@protoc_insertion_point(field_get:ForwardInfo.sendername)
  return sendername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForwardInfo::set_sendername(const ::std::string& value) {
  set_has_sendername();
  sendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ForwardInfo.sendername)
}
 void ForwardInfo::set_sendername(const char* value) {
  set_has_sendername();
  sendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ForwardInfo.sendername)
}
 void ForwardInfo::set_sendername(const char* value, size_t size) {
  set_has_sendername();
  sendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ForwardInfo.sendername)
}
 ::std::string* ForwardInfo::mutable_sendername() {
  set_has_sendername();
  // @@protoc_insertion_point(field_mutable:ForwardInfo.sendername)
  return sendername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ForwardInfo::release_sendername() {
  clear_has_sendername();
  return sendername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForwardInfo::set_allocated_sendername(::std::string* sendername) {
  if (sendername != NULL) {
    set_has_sendername();
  } else {
    clear_has_sendername();
  }
  sendername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendername);
  // @@protoc_insertion_point(field_set_allocated:ForwardInfo.sendername)
}

// optional string senderurl = 5 [default = ""];
 bool ForwardInfo::has_senderurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void ForwardInfo::set_has_senderurl() {
  _has_bits_[0] |= 0x00000010u;
}
 void ForwardInfo::clear_has_senderurl() {
  _has_bits_[0] &= ~0x00000010u;
}
 void ForwardInfo::clear_senderurl() {
  senderurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_senderurl();
}
 const ::std::string& ForwardInfo::senderurl() const {
  // @@protoc_insertion_point(field_get:ForwardInfo.senderurl)
  return senderurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForwardInfo::set_senderurl(const ::std::string& value) {
  set_has_senderurl();
  senderurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ForwardInfo.senderurl)
}
 void ForwardInfo::set_senderurl(const char* value) {
  set_has_senderurl();
  senderurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ForwardInfo.senderurl)
}
 void ForwardInfo::set_senderurl(const char* value, size_t size) {
  set_has_senderurl();
  senderurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ForwardInfo.senderurl)
}
 ::std::string* ForwardInfo::mutable_senderurl() {
  set_has_senderurl();
  // @@protoc_insertion_point(field_mutable:ForwardInfo.senderurl)
  return senderurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ForwardInfo::release_senderurl() {
  clear_has_senderurl();
  return senderurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForwardInfo::set_allocated_senderurl(::std::string* senderurl) {
  if (senderurl != NULL) {
    set_has_senderurl();
  } else {
    clear_has_senderurl();
  }
  senderurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senderurl);
  // @@protoc_insertion_point(field_set_allocated:ForwardInfo.senderurl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebFreeGift::kUidFromFieldNumber;
const int WebFreeGift::kOpenidFieldNumber;
const int WebFreeGift::kItemTypeIdFieldNumber;
const int WebFreeGift::kItemNumFieldNumber;
const int WebFreeGift::kAskTypeFieldNumber;
const int WebFreeGift::kActiveFieldNumber;
const int WebFreeGift::kWebFdFieldNumber;
const int WebFreeGift::kOpenidForwardFieldNumber;
const int WebFreeGift::kOpenidFromFieldNumber;
#endif  // !_MSC_VER

WebFreeGift::WebFreeGift()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebFreeGift)
}

void WebFreeGift::InitAsDefaultInstance() {
}

WebFreeGift::WebFreeGift(const WebFreeGift& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebFreeGift)
}

void WebFreeGift::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_from_ = GOOGLE_LONGLONG(0);
  ask_type_ = 0;
  active_ = 0;
  web_fd_ = 0;
  openid_forward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebFreeGift::~WebFreeGift() {
  // @@protoc_insertion_point(destructor:WebFreeGift)
  SharedDtor();
}

void WebFreeGift::SharedDtor() {
  openid_forward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WebFreeGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebFreeGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebFreeGift_descriptor_;
}

const WebFreeGift& WebFreeGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebFreeGift* WebFreeGift::default_instance_ = NULL;

WebFreeGift* WebFreeGift::New(::google::protobuf::Arena* arena) const {
  WebFreeGift* n = new WebFreeGift;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebFreeGift::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WebFreeGift*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 241) {
    ZR_(ask_type_, active_);
    uid_from_ = GOOGLE_LONGLONG(0);
    web_fd_ = 0;
    if (has_openid_forward()) {
      openid_forward_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_openid_from()) {
    openid_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  openid_.Clear();
  item_type_id_.Clear();
  item_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebFreeGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebFreeGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid_from = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_from_)));
          set_has_uid_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // repeated string openid = 2;
      case 2: {
        if (tag == 18) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid(this->openid_size() - 1).data(),
            this->openid(this->openid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebFreeGift.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        if (input->ExpectTag(24)) goto parse_item_type_id;
        break;
      }

      // repeated int32 item_type_id = 3;
      case 3: {
        if (tag == 24) {
         parse_item_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_item_type_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_type_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_type_id;
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }

      // repeated int32 item_num = 4;
      case 4: {
        if (tag == 32) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_item_num())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        if (input->ExpectTag(40)) goto parse_ask_type;
        break;
      }

      // optional int32 ask_type = 5;
      case 5: {
        if (tag == 40) {
         parse_ask_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_type_)));
          set_has_ask_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_active;
        break;
      }

      // optional int32 active = 6;
      case 6: {
        if (tag == 48) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_web_fd;
        break;
      }

      // optional int32 web_fd = 7;
      case 7: {
        if (tag == 56) {
         parse_web_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &web_fd_)));
          set_has_web_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_openid_forward;
        break;
      }

      // optional string openid_forward = 8;
      case 8: {
        if (tag == 66) {
         parse_openid_forward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid_forward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid_forward().data(), this->openid_forward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebFreeGift.openid_forward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_openid_from;
        break;
      }

      // optional string openid_from = 9;
      case 9: {
        if (tag == 74) {
         parse_openid_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid_from().data(), this->openid_from().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebFreeGift.openid_from");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebFreeGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebFreeGift)
  return false;
#undef DO_
}

void WebFreeGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebFreeGift)
  // optional int64 uid_from = 1;
  if (has_uid_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid_from(), output);
  }

  // repeated string openid = 2;
  for (int i = 0; i < this->openid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->openid(i).data(), this->openid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "WebFreeGift.openid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid(i), output);
  }

  // repeated int32 item_type_id = 3;
  for (int i = 0; i < this->item_type_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->item_type_id(i), output);
  }

  // repeated int32 item_num = 4;
  for (int i = 0; i < this->item_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->item_num(i), output);
  }

  // optional int32 ask_type = 5;
  if (has_ask_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ask_type(), output);
  }

  // optional int32 active = 6;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->active(), output);
  }

  // optional int32 web_fd = 7;
  if (has_web_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->web_fd(), output);
  }

  // optional string openid_forward = 8;
  if (has_openid_forward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_forward().data(), this->openid_forward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebFreeGift.openid_forward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->openid_forward(), output);
  }

  // optional string openid_from = 9;
  if (has_openid_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_from().data(), this->openid_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebFreeGift.openid_from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->openid_from(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebFreeGift)
}

::google::protobuf::uint8* WebFreeGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebFreeGift)
  // optional int64 uid_from = 1;
  if (has_uid_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid_from(), target);
  }

  // repeated string openid = 2;
  for (int i = 0; i < this->openid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid(i).data(), this->openid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebFreeGift.openid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->openid(i), target);
  }

  // repeated int32 item_type_id = 3;
  for (int i = 0; i < this->item_type_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->item_type_id(i), target);
  }

  // repeated int32 item_num = 4;
  for (int i = 0; i < this->item_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->item_num(i), target);
  }

  // optional int32 ask_type = 5;
  if (has_ask_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ask_type(), target);
  }

  // optional int32 active = 6;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->active(), target);
  }

  // optional int32 web_fd = 7;
  if (has_web_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->web_fd(), target);
  }

  // optional string openid_forward = 8;
  if (has_openid_forward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_forward().data(), this->openid_forward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebFreeGift.openid_forward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->openid_forward(), target);
  }

  // optional string openid_from = 9;
  if (has_openid_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_from().data(), this->openid_from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebFreeGift.openid_from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->openid_from(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebFreeGift)
  return target;
}

int WebFreeGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 241) {
    // optional int64 uid_from = 1;
    if (has_uid_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid_from());
    }

    // optional int32 ask_type = 5;
    if (has_ask_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ask_type());
    }

    // optional int32 active = 6;
    if (has_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active());
    }

    // optional int32 web_fd = 7;
    if (has_web_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->web_fd());
    }

    // optional string openid_forward = 8;
    if (has_openid_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid_forward());
    }

  }
  // optional string openid_from = 9;
  if (has_openid_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openid_from());
  }

  // repeated string openid = 2;
  total_size += 1 * this->openid_size();
  for (int i = 0; i < this->openid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->openid(i));
  }

  // repeated int32 item_type_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_type_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_type_id(i));
    }
    total_size += 1 * this->item_type_id_size() + data_size;
  }

  // repeated int32 item_num = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_num(i));
    }
    total_size += 1 * this->item_num_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebFreeGift::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebFreeGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebFreeGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebFreeGift::MergeFrom(const WebFreeGift& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  openid_.MergeFrom(from.openid_);
  item_type_id_.MergeFrom(from.item_type_id_);
  item_num_.MergeFrom(from.item_num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid_from()) {
      set_uid_from(from.uid_from());
    }
    if (from.has_ask_type()) {
      set_ask_type(from.ask_type());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_web_fd()) {
      set_web_fd(from.web_fd());
    }
    if (from.has_openid_forward()) {
      set_has_openid_forward();
      openid_forward_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_forward_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_openid_from()) {
      set_has_openid_from();
      openid_from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_from_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebFreeGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebFreeGift::CopyFrom(const WebFreeGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebFreeGift::IsInitialized() const {

  return true;
}

void WebFreeGift::Swap(WebFreeGift* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebFreeGift::InternalSwap(WebFreeGift* other) {
  std::swap(uid_from_, other->uid_from_);
  openid_.UnsafeArenaSwap(&other->openid_);
  item_type_id_.UnsafeArenaSwap(&other->item_type_id_);
  item_num_.UnsafeArenaSwap(&other->item_num_);
  std::swap(ask_type_, other->ask_type_);
  std::swap(active_, other->active_);
  std::swap(web_fd_, other->web_fd_);
  openid_forward_.Swap(&other->openid_forward_);
  openid_from_.Swap(&other->openid_from_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebFreeGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebFreeGift_descriptor_;
  metadata.reflection = WebFreeGift_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebFreeGift

// optional int64 uid_from = 1;
 bool WebFreeGift::has_uid_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebFreeGift::set_has_uid_from() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebFreeGift::clear_has_uid_from() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebFreeGift::clear_uid_from() {
  uid_from_ = GOOGLE_LONGLONG(0);
  clear_has_uid_from();
}
 ::google::protobuf::int64 WebFreeGift::uid_from() const {
  // @@protoc_insertion_point(field_get:WebFreeGift.uid_from)
  return uid_from_;
}
 void WebFreeGift::set_uid_from(::google::protobuf::int64 value) {
  set_has_uid_from();
  uid_from_ = value;
  // @@protoc_insertion_point(field_set:WebFreeGift.uid_from)
}

// repeated string openid = 2;
 int WebFreeGift::openid_size() const {
  return openid_.size();
}
 void WebFreeGift::clear_openid() {
  openid_.Clear();
}
 const ::std::string& WebFreeGift::openid(int index) const {
  // @@protoc_insertion_point(field_get:WebFreeGift.openid)
  return openid_.Get(index);
}
 ::std::string* WebFreeGift::mutable_openid(int index) {
  // @@protoc_insertion_point(field_mutable:WebFreeGift.openid)
  return openid_.Mutable(index);
}
 void WebFreeGift::set_openid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:WebFreeGift.openid)
  openid_.Mutable(index)->assign(value);
}
 void WebFreeGift::set_openid(int index, const char* value) {
  openid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:WebFreeGift.openid)
}
 void WebFreeGift::set_openid(int index, const char* value, size_t size) {
  openid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WebFreeGift.openid)
}
 ::std::string* WebFreeGift::add_openid() {
  return openid_.Add();
}
 void WebFreeGift::add_openid(const ::std::string& value) {
  openid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:WebFreeGift.openid)
}
 void WebFreeGift::add_openid(const char* value) {
  openid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:WebFreeGift.openid)
}
 void WebFreeGift::add_openid(const char* value, size_t size) {
  openid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:WebFreeGift.openid)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
WebFreeGift::openid() const {
  // @@protoc_insertion_point(field_list:WebFreeGift.openid)
  return openid_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
WebFreeGift::mutable_openid() {
  // @@protoc_insertion_point(field_mutable_list:WebFreeGift.openid)
  return &openid_;
}

// repeated int32 item_type_id = 3;
 int WebFreeGift::item_type_id_size() const {
  return item_type_id_.size();
}
 void WebFreeGift::clear_item_type_id() {
  item_type_id_.Clear();
}
 ::google::protobuf::int32 WebFreeGift::item_type_id(int index) const {
  // @@protoc_insertion_point(field_get:WebFreeGift.item_type_id)
  return item_type_id_.Get(index);
}
 void WebFreeGift::set_item_type_id(int index, ::google::protobuf::int32 value) {
  item_type_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebFreeGift.item_type_id)
}
 void WebFreeGift::add_item_type_id(::google::protobuf::int32 value) {
  item_type_id_.Add(value);
  // @@protoc_insertion_point(field_add:WebFreeGift.item_type_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WebFreeGift::item_type_id() const {
  // @@protoc_insertion_point(field_list:WebFreeGift.item_type_id)
  return item_type_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WebFreeGift::mutable_item_type_id() {
  // @@protoc_insertion_point(field_mutable_list:WebFreeGift.item_type_id)
  return &item_type_id_;
}

// repeated int32 item_num = 4;
 int WebFreeGift::item_num_size() const {
  return item_num_.size();
}
 void WebFreeGift::clear_item_num() {
  item_num_.Clear();
}
 ::google::protobuf::int32 WebFreeGift::item_num(int index) const {
  // @@protoc_insertion_point(field_get:WebFreeGift.item_num)
  return item_num_.Get(index);
}
 void WebFreeGift::set_item_num(int index, ::google::protobuf::int32 value) {
  item_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebFreeGift.item_num)
}
 void WebFreeGift::add_item_num(::google::protobuf::int32 value) {
  item_num_.Add(value);
  // @@protoc_insertion_point(field_add:WebFreeGift.item_num)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WebFreeGift::item_num() const {
  // @@protoc_insertion_point(field_list:WebFreeGift.item_num)
  return item_num_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WebFreeGift::mutable_item_num() {
  // @@protoc_insertion_point(field_mutable_list:WebFreeGift.item_num)
  return &item_num_;
}

// optional int32 ask_type = 5;
 bool WebFreeGift::has_ask_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void WebFreeGift::set_has_ask_type() {
  _has_bits_[0] |= 0x00000010u;
}
 void WebFreeGift::clear_has_ask_type() {
  _has_bits_[0] &= ~0x00000010u;
}
 void WebFreeGift::clear_ask_type() {
  ask_type_ = 0;
  clear_has_ask_type();
}
 ::google::protobuf::int32 WebFreeGift::ask_type() const {
  // @@protoc_insertion_point(field_get:WebFreeGift.ask_type)
  return ask_type_;
}
 void WebFreeGift::set_ask_type(::google::protobuf::int32 value) {
  set_has_ask_type();
  ask_type_ = value;
  // @@protoc_insertion_point(field_set:WebFreeGift.ask_type)
}

// optional int32 active = 6;
 bool WebFreeGift::has_active() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void WebFreeGift::set_has_active() {
  _has_bits_[0] |= 0x00000020u;
}
 void WebFreeGift::clear_has_active() {
  _has_bits_[0] &= ~0x00000020u;
}
 void WebFreeGift::clear_active() {
  active_ = 0;
  clear_has_active();
}
 ::google::protobuf::int32 WebFreeGift::active() const {
  // @@protoc_insertion_point(field_get:WebFreeGift.active)
  return active_;
}
 void WebFreeGift::set_active(::google::protobuf::int32 value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:WebFreeGift.active)
}

// optional int32 web_fd = 7;
 bool WebFreeGift::has_web_fd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void WebFreeGift::set_has_web_fd() {
  _has_bits_[0] |= 0x00000040u;
}
 void WebFreeGift::clear_has_web_fd() {
  _has_bits_[0] &= ~0x00000040u;
}
 void WebFreeGift::clear_web_fd() {
  web_fd_ = 0;
  clear_has_web_fd();
}
 ::google::protobuf::int32 WebFreeGift::web_fd() const {
  // @@protoc_insertion_point(field_get:WebFreeGift.web_fd)
  return web_fd_;
}
 void WebFreeGift::set_web_fd(::google::protobuf::int32 value) {
  set_has_web_fd();
  web_fd_ = value;
  // @@protoc_insertion_point(field_set:WebFreeGift.web_fd)
}

// optional string openid_forward = 8;
 bool WebFreeGift::has_openid_forward() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void WebFreeGift::set_has_openid_forward() {
  _has_bits_[0] |= 0x00000080u;
}
 void WebFreeGift::clear_has_openid_forward() {
  _has_bits_[0] &= ~0x00000080u;
}
 void WebFreeGift::clear_openid_forward() {
  openid_forward_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid_forward();
}
 const ::std::string& WebFreeGift::openid_forward() const {
  // @@protoc_insertion_point(field_get:WebFreeGift.openid_forward)
  return openid_forward_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebFreeGift::set_openid_forward(const ::std::string& value) {
  set_has_openid_forward();
  openid_forward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebFreeGift.openid_forward)
}
 void WebFreeGift::set_openid_forward(const char* value) {
  set_has_openid_forward();
  openid_forward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebFreeGift.openid_forward)
}
 void WebFreeGift::set_openid_forward(const char* value, size_t size) {
  set_has_openid_forward();
  openid_forward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebFreeGift.openid_forward)
}
 ::std::string* WebFreeGift::mutable_openid_forward() {
  set_has_openid_forward();
  // @@protoc_insertion_point(field_mutable:WebFreeGift.openid_forward)
  return openid_forward_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebFreeGift::release_openid_forward() {
  clear_has_openid_forward();
  return openid_forward_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebFreeGift::set_allocated_openid_forward(::std::string* openid_forward) {
  if (openid_forward != NULL) {
    set_has_openid_forward();
  } else {
    clear_has_openid_forward();
  }
  openid_forward_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid_forward);
  // @@protoc_insertion_point(field_set_allocated:WebFreeGift.openid_forward)
}

// optional string openid_from = 9;
 bool WebFreeGift::has_openid_from() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void WebFreeGift::set_has_openid_from() {
  _has_bits_[0] |= 0x00000100u;
}
 void WebFreeGift::clear_has_openid_from() {
  _has_bits_[0] &= ~0x00000100u;
}
 void WebFreeGift::clear_openid_from() {
  openid_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid_from();
}
 const ::std::string& WebFreeGift::openid_from() const {
  // @@protoc_insertion_point(field_get:WebFreeGift.openid_from)
  return openid_from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebFreeGift::set_openid_from(const ::std::string& value) {
  set_has_openid_from();
  openid_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebFreeGift.openid_from)
}
 void WebFreeGift::set_openid_from(const char* value) {
  set_has_openid_from();
  openid_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebFreeGift.openid_from)
}
 void WebFreeGift::set_openid_from(const char* value, size_t size) {
  set_has_openid_from();
  openid_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebFreeGift.openid_from)
}
 ::std::string* WebFreeGift::mutable_openid_from() {
  set_has_openid_from();
  // @@protoc_insertion_point(field_mutable:WebFreeGift.openid_from)
  return openid_from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebFreeGift::release_openid_from() {
  clear_has_openid_from();
  return openid_from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebFreeGift::set_allocated_openid_from(::std::string* openid_from) {
  if (openid_from != NULL) {
    set_has_openid_from();
  } else {
    clear_has_openid_from();
  }
  openid_from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid_from);
  // @@protoc_insertion_point(field_set_allocated:WebFreeGift.openid_from)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebAskFor::kUidFromFieldNumber;
const int WebAskFor::kOpenidToFieldNumber;
const int WebAskFor::kItemTypeIdFieldNumber;
const int WebAskFor::kItemNumFieldNumber;
const int WebAskFor::kSuccFieldNumber;
const int WebAskFor::kFdFieldNumber;
const int WebAskFor::kOpenidForwardFieldNumber;
#endif  // !_MSC_VER

WebAskFor::WebAskFor()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAskFor)
}

void WebAskFor::InitAsDefaultInstance() {
}

WebAskFor::WebAskFor(const WebAskFor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebAskFor)
}

void WebAskFor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_from_ = GOOGLE_LONGLONG(0);
  succ_ = 0;
  fd_ = 0;
  openid_forward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebAskFor::~WebAskFor() {
  // @@protoc_insertion_point(destructor:WebAskFor)
  SharedDtor();
}

void WebAskFor::SharedDtor() {
  openid_forward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WebAskFor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebAskFor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebAskFor_descriptor_;
}

const WebAskFor& WebAskFor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebAskFor* WebAskFor::default_instance_ = NULL;

WebAskFor* WebAskFor::New(::google::protobuf::Arena* arena) const {
  WebAskFor* n = new WebAskFor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebAskFor::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WebAskFor*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 113) {
    ZR_(succ_, fd_);
    uid_from_ = GOOGLE_LONGLONG(0);
    if (has_openid_forward()) {
      openid_forward_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  openid_to_.Clear();
  item_type_id_.Clear();
  item_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebAskFor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAskFor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid_from = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_from_)));
          set_has_uid_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid_to;
        break;
      }

      // repeated string openid_to = 2;
      case 2: {
        if (tag == 18) {
         parse_openid_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_openid_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid_to(this->openid_to_size() - 1).data(),
            this->openid_to(this->openid_to_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAskFor.openid_to");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid_to;
        if (input->ExpectTag(24)) goto parse_item_type_id;
        break;
      }

      // repeated int32 item_type_id = 3;
      case 3: {
        if (tag == 24) {
         parse_item_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_item_type_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_type_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_type_id;
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }

      // repeated int32 item_num = 4;
      case 4: {
        if (tag == 32) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_item_num())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        if (input->ExpectTag(40)) goto parse_succ;
        break;
      }

      // optional int32 succ = 5;
      case 5: {
        if (tag == 40) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fd;
        break;
      }

      // required int32 fd = 6;
      case 6: {
        if (tag == 48) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_openid_forward;
        break;
      }

      // optional string openid_forward = 7;
      case 7: {
        if (tag == 58) {
         parse_openid_forward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid_forward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid_forward().data(), this->openid_forward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAskFor.openid_forward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAskFor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAskFor)
  return false;
#undef DO_
}

void WebAskFor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAskFor)
  // optional int64 uid_from = 1;
  if (has_uid_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid_from(), output);
  }

  // repeated string openid_to = 2;
  for (int i = 0; i < this->openid_to_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->openid_to(i).data(), this->openid_to(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "WebAskFor.openid_to");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid_to(i), output);
  }

  // repeated int32 item_type_id = 3;
  for (int i = 0; i < this->item_type_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->item_type_id(i), output);
  }

  // repeated int32 item_num = 4;
  for (int i = 0; i < this->item_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->item_num(i), output);
  }

  // optional int32 succ = 5;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->succ(), output);
  }

  // required int32 fd = 6;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fd(), output);
  }

  // optional string openid_forward = 7;
  if (has_openid_forward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_forward().data(), this->openid_forward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAskFor.openid_forward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->openid_forward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAskFor)
}

::google::protobuf::uint8* WebAskFor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebAskFor)
  // optional int64 uid_from = 1;
  if (has_uid_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid_from(), target);
  }

  // repeated string openid_to = 2;
  for (int i = 0; i < this->openid_to_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_to(i).data(), this->openid_to(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAskFor.openid_to");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->openid_to(i), target);
  }

  // repeated int32 item_type_id = 3;
  for (int i = 0; i < this->item_type_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->item_type_id(i), target);
  }

  // repeated int32 item_num = 4;
  for (int i = 0; i < this->item_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->item_num(i), target);
  }

  // optional int32 succ = 5;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->succ(), target);
  }

  // required int32 fd = 6;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fd(), target);
  }

  // optional string openid_forward = 7;
  if (has_openid_forward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_forward().data(), this->openid_forward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAskFor.openid_forward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->openid_forward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAskFor)
  return target;
}

int WebAskFor::ByteSize() const {
  int total_size = 0;

  // required int32 fd = 6;
  if (has_fd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }
  if (_has_bits_[0 / 32] & 81) {
    // optional int64 uid_from = 1;
    if (has_uid_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid_from());
    }

    // optional int32 succ = 5;
    if (has_succ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->succ());
    }

    // optional string openid_forward = 7;
    if (has_openid_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid_forward());
    }

  }
  // repeated string openid_to = 2;
  total_size += 1 * this->openid_to_size();
  for (int i = 0; i < this->openid_to_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->openid_to(i));
  }

  // repeated int32 item_type_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_type_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_type_id(i));
    }
    total_size += 1 * this->item_type_id_size() + data_size;
  }

  // repeated int32 item_num = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_num(i));
    }
    total_size += 1 * this->item_num_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebAskFor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebAskFor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebAskFor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebAskFor::MergeFrom(const WebAskFor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  openid_to_.MergeFrom(from.openid_to_);
  item_type_id_.MergeFrom(from.item_type_id_);
  item_num_.MergeFrom(from.item_num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid_from()) {
      set_uid_from(from.uid_from());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_openid_forward()) {
      set_has_openid_forward();
      openid_forward_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_forward_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebAskFor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebAskFor::CopyFrom(const WebAskFor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebAskFor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  return true;
}

void WebAskFor::Swap(WebAskFor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebAskFor::InternalSwap(WebAskFor* other) {
  std::swap(uid_from_, other->uid_from_);
  openid_to_.UnsafeArenaSwap(&other->openid_to_);
  item_type_id_.UnsafeArenaSwap(&other->item_type_id_);
  item_num_.UnsafeArenaSwap(&other->item_num_);
  std::swap(succ_, other->succ_);
  std::swap(fd_, other->fd_);
  openid_forward_.Swap(&other->openid_forward_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebAskFor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebAskFor_descriptor_;
  metadata.reflection = WebAskFor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebAskFor

// optional int64 uid_from = 1;
 bool WebAskFor::has_uid_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebAskFor::set_has_uid_from() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebAskFor::clear_has_uid_from() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebAskFor::clear_uid_from() {
  uid_from_ = GOOGLE_LONGLONG(0);
  clear_has_uid_from();
}
 ::google::protobuf::int64 WebAskFor::uid_from() const {
  // @@protoc_insertion_point(field_get:WebAskFor.uid_from)
  return uid_from_;
}
 void WebAskFor::set_uid_from(::google::protobuf::int64 value) {
  set_has_uid_from();
  uid_from_ = value;
  // @@protoc_insertion_point(field_set:WebAskFor.uid_from)
}

// repeated string openid_to = 2;
 int WebAskFor::openid_to_size() const {
  return openid_to_.size();
}
 void WebAskFor::clear_openid_to() {
  openid_to_.Clear();
}
 const ::std::string& WebAskFor::openid_to(int index) const {
  // @@protoc_insertion_point(field_get:WebAskFor.openid_to)
  return openid_to_.Get(index);
}
 ::std::string* WebAskFor::mutable_openid_to(int index) {
  // @@protoc_insertion_point(field_mutable:WebAskFor.openid_to)
  return openid_to_.Mutable(index);
}
 void WebAskFor::set_openid_to(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:WebAskFor.openid_to)
  openid_to_.Mutable(index)->assign(value);
}
 void WebAskFor::set_openid_to(int index, const char* value) {
  openid_to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:WebAskFor.openid_to)
}
 void WebAskFor::set_openid_to(int index, const char* value, size_t size) {
  openid_to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WebAskFor.openid_to)
}
 ::std::string* WebAskFor::add_openid_to() {
  return openid_to_.Add();
}
 void WebAskFor::add_openid_to(const ::std::string& value) {
  openid_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:WebAskFor.openid_to)
}
 void WebAskFor::add_openid_to(const char* value) {
  openid_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:WebAskFor.openid_to)
}
 void WebAskFor::add_openid_to(const char* value, size_t size) {
  openid_to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:WebAskFor.openid_to)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
WebAskFor::openid_to() const {
  // @@protoc_insertion_point(field_list:WebAskFor.openid_to)
  return openid_to_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
WebAskFor::mutable_openid_to() {
  // @@protoc_insertion_point(field_mutable_list:WebAskFor.openid_to)
  return &openid_to_;
}

// repeated int32 item_type_id = 3;
 int WebAskFor::item_type_id_size() const {
  return item_type_id_.size();
}
 void WebAskFor::clear_item_type_id() {
  item_type_id_.Clear();
}
 ::google::protobuf::int32 WebAskFor::item_type_id(int index) const {
  // @@protoc_insertion_point(field_get:WebAskFor.item_type_id)
  return item_type_id_.Get(index);
}
 void WebAskFor::set_item_type_id(int index, ::google::protobuf::int32 value) {
  item_type_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebAskFor.item_type_id)
}
 void WebAskFor::add_item_type_id(::google::protobuf::int32 value) {
  item_type_id_.Add(value);
  // @@protoc_insertion_point(field_add:WebAskFor.item_type_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WebAskFor::item_type_id() const {
  // @@protoc_insertion_point(field_list:WebAskFor.item_type_id)
  return item_type_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WebAskFor::mutable_item_type_id() {
  // @@protoc_insertion_point(field_mutable_list:WebAskFor.item_type_id)
  return &item_type_id_;
}

// repeated int32 item_num = 4;
 int WebAskFor::item_num_size() const {
  return item_num_.size();
}
 void WebAskFor::clear_item_num() {
  item_num_.Clear();
}
 ::google::protobuf::int32 WebAskFor::item_num(int index) const {
  // @@protoc_insertion_point(field_get:WebAskFor.item_num)
  return item_num_.Get(index);
}
 void WebAskFor::set_item_num(int index, ::google::protobuf::int32 value) {
  item_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebAskFor.item_num)
}
 void WebAskFor::add_item_num(::google::protobuf::int32 value) {
  item_num_.Add(value);
  // @@protoc_insertion_point(field_add:WebAskFor.item_num)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WebAskFor::item_num() const {
  // @@protoc_insertion_point(field_list:WebAskFor.item_num)
  return item_num_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WebAskFor::mutable_item_num() {
  // @@protoc_insertion_point(field_mutable_list:WebAskFor.item_num)
  return &item_num_;
}

// optional int32 succ = 5;
 bool WebAskFor::has_succ() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void WebAskFor::set_has_succ() {
  _has_bits_[0] |= 0x00000010u;
}
 void WebAskFor::clear_has_succ() {
  _has_bits_[0] &= ~0x00000010u;
}
 void WebAskFor::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 WebAskFor::succ() const {
  // @@protoc_insertion_point(field_get:WebAskFor.succ)
  return succ_;
}
 void WebAskFor::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:WebAskFor.succ)
}

// required int32 fd = 6;
 bool WebAskFor::has_fd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void WebAskFor::set_has_fd() {
  _has_bits_[0] |= 0x00000020u;
}
 void WebAskFor::clear_has_fd() {
  _has_bits_[0] &= ~0x00000020u;
}
 void WebAskFor::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 WebAskFor::fd() const {
  // @@protoc_insertion_point(field_get:WebAskFor.fd)
  return fd_;
}
 void WebAskFor::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:WebAskFor.fd)
}

// optional string openid_forward = 7;
 bool WebAskFor::has_openid_forward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void WebAskFor::set_has_openid_forward() {
  _has_bits_[0] |= 0x00000040u;
}
 void WebAskFor::clear_has_openid_forward() {
  _has_bits_[0] &= ~0x00000040u;
}
 void WebAskFor::clear_openid_forward() {
  openid_forward_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid_forward();
}
 const ::std::string& WebAskFor::openid_forward() const {
  // @@protoc_insertion_point(field_get:WebAskFor.openid_forward)
  return openid_forward_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebAskFor::set_openid_forward(const ::std::string& value) {
  set_has_openid_forward();
  openid_forward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAskFor.openid_forward)
}
 void WebAskFor::set_openid_forward(const char* value) {
  set_has_openid_forward();
  openid_forward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAskFor.openid_forward)
}
 void WebAskFor::set_openid_forward(const char* value, size_t size) {
  set_has_openid_forward();
  openid_forward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAskFor.openid_forward)
}
 ::std::string* WebAskFor::mutable_openid_forward() {
  set_has_openid_forward();
  // @@protoc_insertion_point(field_mutable:WebAskFor.openid_forward)
  return openid_forward_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebAskFor::release_openid_forward() {
  clear_has_openid_forward();
  return openid_forward_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebAskFor::set_allocated_openid_forward(::std::string* openid_forward) {
  if (openid_forward != NULL) {
    set_has_openid_forward();
  } else {
    clear_has_openid_forward();
  }
  openid_forward_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid_forward);
  // @@protoc_insertion_point(field_set_allocated:WebAskFor.openid_forward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebGiveFor::kUidFromFieldNumber;
const int WebGiveFor::kOpenidToFieldNumber;
const int WebGiveFor::kItemTypeIdFieldNumber;
const int WebGiveFor::kItemNumFieldNumber;
const int WebGiveFor::kSuccFieldNumber;
const int WebGiveFor::kFdFieldNumber;
const int WebGiveFor::kOpenidForwardFieldNumber;
#endif  // !_MSC_VER

WebGiveFor::WebGiveFor()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebGiveFor)
}

void WebGiveFor::InitAsDefaultInstance() {
}

WebGiveFor::WebGiveFor(const WebGiveFor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebGiveFor)
}

void WebGiveFor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_from_ = GOOGLE_LONGLONG(0);
  succ_ = 0;
  fd_ = 0;
  openid_forward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebGiveFor::~WebGiveFor() {
  // @@protoc_insertion_point(destructor:WebGiveFor)
  SharedDtor();
}

void WebGiveFor::SharedDtor() {
  openid_forward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WebGiveFor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebGiveFor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebGiveFor_descriptor_;
}

const WebGiveFor& WebGiveFor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebGiveFor* WebGiveFor::default_instance_ = NULL;

WebGiveFor* WebGiveFor::New(::google::protobuf::Arena* arena) const {
  WebGiveFor* n = new WebGiveFor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebGiveFor::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WebGiveFor*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 113) {
    ZR_(succ_, fd_);
    uid_from_ = GOOGLE_LONGLONG(0);
    if (has_openid_forward()) {
      openid_forward_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  openid_to_.Clear();
  item_type_id_.Clear();
  item_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebGiveFor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebGiveFor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid_from = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_from_)));
          set_has_uid_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid_to;
        break;
      }

      // repeated string openid_to = 2;
      case 2: {
        if (tag == 18) {
         parse_openid_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_openid_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid_to(this->openid_to_size() - 1).data(),
            this->openid_to(this->openid_to_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebGiveFor.openid_to");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid_to;
        if (input->ExpectTag(24)) goto parse_item_type_id;
        break;
      }

      // repeated int32 item_type_id = 3;
      case 3: {
        if (tag == 24) {
         parse_item_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_item_type_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_type_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_type_id;
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }

      // repeated int32 item_num = 4;
      case 4: {
        if (tag == 32) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_item_num())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        if (input->ExpectTag(40)) goto parse_succ;
        break;
      }

      // optional int32 succ = 5;
      case 5: {
        if (tag == 40) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fd;
        break;
      }

      // required int32 fd = 6;
      case 6: {
        if (tag == 48) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_openid_forward;
        break;
      }

      // optional string openid_forward = 7;
      case 7: {
        if (tag == 58) {
         parse_openid_forward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid_forward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid_forward().data(), this->openid_forward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebGiveFor.openid_forward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebGiveFor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebGiveFor)
  return false;
#undef DO_
}

void WebGiveFor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebGiveFor)
  // optional int64 uid_from = 1;
  if (has_uid_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid_from(), output);
  }

  // repeated string openid_to = 2;
  for (int i = 0; i < this->openid_to_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->openid_to(i).data(), this->openid_to(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "WebGiveFor.openid_to");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid_to(i), output);
  }

  // repeated int32 item_type_id = 3;
  for (int i = 0; i < this->item_type_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->item_type_id(i), output);
  }

  // repeated int32 item_num = 4;
  for (int i = 0; i < this->item_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->item_num(i), output);
  }

  // optional int32 succ = 5;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->succ(), output);
  }

  // required int32 fd = 6;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fd(), output);
  }

  // optional string openid_forward = 7;
  if (has_openid_forward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_forward().data(), this->openid_forward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebGiveFor.openid_forward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->openid_forward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebGiveFor)
}

::google::protobuf::uint8* WebGiveFor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebGiveFor)
  // optional int64 uid_from = 1;
  if (has_uid_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid_from(), target);
  }

  // repeated string openid_to = 2;
  for (int i = 0; i < this->openid_to_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_to(i).data(), this->openid_to(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebGiveFor.openid_to");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->openid_to(i), target);
  }

  // repeated int32 item_type_id = 3;
  for (int i = 0; i < this->item_type_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->item_type_id(i), target);
  }

  // repeated int32 item_num = 4;
  for (int i = 0; i < this->item_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->item_num(i), target);
  }

  // optional int32 succ = 5;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->succ(), target);
  }

  // required int32 fd = 6;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fd(), target);
  }

  // optional string openid_forward = 7;
  if (has_openid_forward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_forward().data(), this->openid_forward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebGiveFor.openid_forward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->openid_forward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebGiveFor)
  return target;
}

int WebGiveFor::ByteSize() const {
  int total_size = 0;

  // required int32 fd = 6;
  if (has_fd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }
  if (_has_bits_[0 / 32] & 81) {
    // optional int64 uid_from = 1;
    if (has_uid_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid_from());
    }

    // optional int32 succ = 5;
    if (has_succ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->succ());
    }

    // optional string openid_forward = 7;
    if (has_openid_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid_forward());
    }

  }
  // repeated string openid_to = 2;
  total_size += 1 * this->openid_to_size();
  for (int i = 0; i < this->openid_to_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->openid_to(i));
  }

  // repeated int32 item_type_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_type_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_type_id(i));
    }
    total_size += 1 * this->item_type_id_size() + data_size;
  }

  // repeated int32 item_num = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_num(i));
    }
    total_size += 1 * this->item_num_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebGiveFor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebGiveFor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebGiveFor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebGiveFor::MergeFrom(const WebGiveFor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  openid_to_.MergeFrom(from.openid_to_);
  item_type_id_.MergeFrom(from.item_type_id_);
  item_num_.MergeFrom(from.item_num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid_from()) {
      set_uid_from(from.uid_from());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_openid_forward()) {
      set_has_openid_forward();
      openid_forward_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_forward_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebGiveFor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebGiveFor::CopyFrom(const WebGiveFor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebGiveFor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  return true;
}

void WebGiveFor::Swap(WebGiveFor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebGiveFor::InternalSwap(WebGiveFor* other) {
  std::swap(uid_from_, other->uid_from_);
  openid_to_.UnsafeArenaSwap(&other->openid_to_);
  item_type_id_.UnsafeArenaSwap(&other->item_type_id_);
  item_num_.UnsafeArenaSwap(&other->item_num_);
  std::swap(succ_, other->succ_);
  std::swap(fd_, other->fd_);
  openid_forward_.Swap(&other->openid_forward_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebGiveFor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebGiveFor_descriptor_;
  metadata.reflection = WebGiveFor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebGiveFor

// optional int64 uid_from = 1;
 bool WebGiveFor::has_uid_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebGiveFor::set_has_uid_from() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebGiveFor::clear_has_uid_from() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebGiveFor::clear_uid_from() {
  uid_from_ = GOOGLE_LONGLONG(0);
  clear_has_uid_from();
}
 ::google::protobuf::int64 WebGiveFor::uid_from() const {
  // @@protoc_insertion_point(field_get:WebGiveFor.uid_from)
  return uid_from_;
}
 void WebGiveFor::set_uid_from(::google::protobuf::int64 value) {
  set_has_uid_from();
  uid_from_ = value;
  // @@protoc_insertion_point(field_set:WebGiveFor.uid_from)
}

// repeated string openid_to = 2;
 int WebGiveFor::openid_to_size() const {
  return openid_to_.size();
}
 void WebGiveFor::clear_openid_to() {
  openid_to_.Clear();
}
 const ::std::string& WebGiveFor::openid_to(int index) const {
  // @@protoc_insertion_point(field_get:WebGiveFor.openid_to)
  return openid_to_.Get(index);
}
 ::std::string* WebGiveFor::mutable_openid_to(int index) {
  // @@protoc_insertion_point(field_mutable:WebGiveFor.openid_to)
  return openid_to_.Mutable(index);
}
 void WebGiveFor::set_openid_to(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:WebGiveFor.openid_to)
  openid_to_.Mutable(index)->assign(value);
}
 void WebGiveFor::set_openid_to(int index, const char* value) {
  openid_to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:WebGiveFor.openid_to)
}
 void WebGiveFor::set_openid_to(int index, const char* value, size_t size) {
  openid_to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WebGiveFor.openid_to)
}
 ::std::string* WebGiveFor::add_openid_to() {
  return openid_to_.Add();
}
 void WebGiveFor::add_openid_to(const ::std::string& value) {
  openid_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:WebGiveFor.openid_to)
}
 void WebGiveFor::add_openid_to(const char* value) {
  openid_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:WebGiveFor.openid_to)
}
 void WebGiveFor::add_openid_to(const char* value, size_t size) {
  openid_to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:WebGiveFor.openid_to)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
WebGiveFor::openid_to() const {
  // @@protoc_insertion_point(field_list:WebGiveFor.openid_to)
  return openid_to_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
WebGiveFor::mutable_openid_to() {
  // @@protoc_insertion_point(field_mutable_list:WebGiveFor.openid_to)
  return &openid_to_;
}

// repeated int32 item_type_id = 3;
 int WebGiveFor::item_type_id_size() const {
  return item_type_id_.size();
}
 void WebGiveFor::clear_item_type_id() {
  item_type_id_.Clear();
}
 ::google::protobuf::int32 WebGiveFor::item_type_id(int index) const {
  // @@protoc_insertion_point(field_get:WebGiveFor.item_type_id)
  return item_type_id_.Get(index);
}
 void WebGiveFor::set_item_type_id(int index, ::google::protobuf::int32 value) {
  item_type_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebGiveFor.item_type_id)
}
 void WebGiveFor::add_item_type_id(::google::protobuf::int32 value) {
  item_type_id_.Add(value);
  // @@protoc_insertion_point(field_add:WebGiveFor.item_type_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WebGiveFor::item_type_id() const {
  // @@protoc_insertion_point(field_list:WebGiveFor.item_type_id)
  return item_type_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WebGiveFor::mutable_item_type_id() {
  // @@protoc_insertion_point(field_mutable_list:WebGiveFor.item_type_id)
  return &item_type_id_;
}

// repeated int32 item_num = 4;
 int WebGiveFor::item_num_size() const {
  return item_num_.size();
}
 void WebGiveFor::clear_item_num() {
  item_num_.Clear();
}
 ::google::protobuf::int32 WebGiveFor::item_num(int index) const {
  // @@protoc_insertion_point(field_get:WebGiveFor.item_num)
  return item_num_.Get(index);
}
 void WebGiveFor::set_item_num(int index, ::google::protobuf::int32 value) {
  item_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebGiveFor.item_num)
}
 void WebGiveFor::add_item_num(::google::protobuf::int32 value) {
  item_num_.Add(value);
  // @@protoc_insertion_point(field_add:WebGiveFor.item_num)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WebGiveFor::item_num() const {
  // @@protoc_insertion_point(field_list:WebGiveFor.item_num)
  return item_num_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WebGiveFor::mutable_item_num() {
  // @@protoc_insertion_point(field_mutable_list:WebGiveFor.item_num)
  return &item_num_;
}

// optional int32 succ = 5;
 bool WebGiveFor::has_succ() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void WebGiveFor::set_has_succ() {
  _has_bits_[0] |= 0x00000010u;
}
 void WebGiveFor::clear_has_succ() {
  _has_bits_[0] &= ~0x00000010u;
}
 void WebGiveFor::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 WebGiveFor::succ() const {
  // @@protoc_insertion_point(field_get:WebGiveFor.succ)
  return succ_;
}
 void WebGiveFor::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:WebGiveFor.succ)
}

// required int32 fd = 6;
 bool WebGiveFor::has_fd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void WebGiveFor::set_has_fd() {
  _has_bits_[0] |= 0x00000020u;
}
 void WebGiveFor::clear_has_fd() {
  _has_bits_[0] &= ~0x00000020u;
}
 void WebGiveFor::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 WebGiveFor::fd() const {
  // @@protoc_insertion_point(field_get:WebGiveFor.fd)
  return fd_;
}
 void WebGiveFor::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:WebGiveFor.fd)
}

// optional string openid_forward = 7;
 bool WebGiveFor::has_openid_forward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void WebGiveFor::set_has_openid_forward() {
  _has_bits_[0] |= 0x00000040u;
}
 void WebGiveFor::clear_has_openid_forward() {
  _has_bits_[0] &= ~0x00000040u;
}
 void WebGiveFor::clear_openid_forward() {
  openid_forward_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid_forward();
}
 const ::std::string& WebGiveFor::openid_forward() const {
  // @@protoc_insertion_point(field_get:WebGiveFor.openid_forward)
  return openid_forward_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebGiveFor::set_openid_forward(const ::std::string& value) {
  set_has_openid_forward();
  openid_forward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebGiveFor.openid_forward)
}
 void WebGiveFor::set_openid_forward(const char* value) {
  set_has_openid_forward();
  openid_forward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebGiveFor.openid_forward)
}
 void WebGiveFor::set_openid_forward(const char* value, size_t size) {
  set_has_openid_forward();
  openid_forward_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebGiveFor.openid_forward)
}
 ::std::string* WebGiveFor::mutable_openid_forward() {
  set_has_openid_forward();
  // @@protoc_insertion_point(field_mutable:WebGiveFor.openid_forward)
  return openid_forward_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebGiveFor::release_openid_forward() {
  clear_has_openid_forward();
  return openid_forward_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebGiveFor::set_allocated_openid_forward(::std::string* openid_forward) {
  if (openid_forward != NULL) {
    set_has_openid_forward();
  } else {
    clear_has_openid_forward();
  }
  openid_forward_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid_forward);
  // @@protoc_insertion_point(field_set_allocated:WebGiveFor.openid_forward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebInvite::kPlatidFieldNumber;
const int WebInvite::kInviteridFieldNumber;
const int WebInvite::kFdFieldNumber;
#endif  // !_MSC_VER

WebInvite::WebInvite()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebInvite)
}

void WebInvite::InitAsDefaultInstance() {
}

WebInvite::WebInvite(const WebInvite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebInvite)
}

void WebInvite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebInvite::~WebInvite() {
  // @@protoc_insertion_point(destructor:WebInvite)
  SharedDtor();
}

void WebInvite::SharedDtor() {
  platid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviterid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WebInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebInvite_descriptor_;
}

const WebInvite& WebInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebInvite* WebInvite::default_instance_ = NULL;

WebInvite* WebInvite::New(::google::protobuf::Arena* arena) const {
  WebInvite* n = new WebInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebInvite::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_platid()) {
      platid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_inviterid()) {
      inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    fd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string platid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platid().data(), this->platid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebInvite.platid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inviterid;
        break;
      }

      // required string inviterid = 2;
      case 2: {
        if (tag == 18) {
         parse_inviterid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviterid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inviterid().data(), this->inviterid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebInvite.inviterid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fd;
        break;
      }

      // required int32 fd = 3;
      case 3: {
        if (tag == 24) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebInvite)
  return false;
#undef DO_
}

void WebInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebInvite)
  // required string platid = 1;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebInvite.platid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->platid(), output);
  }

  // required string inviterid = 2;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviterid().data(), this->inviterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebInvite.inviterid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inviterid(), output);
  }

  // required int32 fd = 3;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebInvite)
}

::google::protobuf::uint8* WebInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebInvite)
  // required string platid = 1;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebInvite.platid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->platid(), target);
  }

  // required string inviterid = 2;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviterid().data(), this->inviterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebInvite.inviterid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inviterid(), target);
  }

  // required int32 fd = 3;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebInvite)
  return target;
}

int WebInvite::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_platid()) {
    // required string platid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platid());
  }

  if (has_inviterid()) {
    // required string inviterid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inviterid());
  }

  if (has_fd()) {
    // required int32 fd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }

  return total_size;
}
int WebInvite::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string platid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platid());

    // required string inviterid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inviterid());

    // required int32 fd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebInvite::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebInvite::MergeFrom(const WebInvite& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platid()) {
      set_has_platid();
      platid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platid_);
    }
    if (from.has_inviterid()) {
      set_has_inviterid();
      inviterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviterid_);
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebInvite::CopyFrom(const WebInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void WebInvite::Swap(WebInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebInvite::InternalSwap(WebInvite* other) {
  platid_.Swap(&other->platid_);
  inviterid_.Swap(&other->inviterid_);
  std::swap(fd_, other->fd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebInvite_descriptor_;
  metadata.reflection = WebInvite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebInvite

// required string platid = 1;
 bool WebInvite::has_platid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebInvite::set_has_platid() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebInvite::clear_has_platid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebInvite::clear_platid() {
  platid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platid();
}
 const ::std::string& WebInvite::platid() const {
  // @@protoc_insertion_point(field_get:WebInvite.platid)
  return platid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebInvite::set_platid(const ::std::string& value) {
  set_has_platid();
  platid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebInvite.platid)
}
 void WebInvite::set_platid(const char* value) {
  set_has_platid();
  platid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebInvite.platid)
}
 void WebInvite::set_platid(const char* value, size_t size) {
  set_has_platid();
  platid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebInvite.platid)
}
 ::std::string* WebInvite::mutable_platid() {
  set_has_platid();
  // @@protoc_insertion_point(field_mutable:WebInvite.platid)
  return platid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebInvite::release_platid() {
  clear_has_platid();
  return platid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebInvite::set_allocated_platid(::std::string* platid) {
  if (platid != NULL) {
    set_has_platid();
  } else {
    clear_has_platid();
  }
  platid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platid);
  // @@protoc_insertion_point(field_set_allocated:WebInvite.platid)
}

// required string inviterid = 2;
 bool WebInvite::has_inviterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void WebInvite::set_has_inviterid() {
  _has_bits_[0] |= 0x00000002u;
}
 void WebInvite::clear_has_inviterid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void WebInvite::clear_inviterid() {
  inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inviterid();
}
 const ::std::string& WebInvite::inviterid() const {
  // @@protoc_insertion_point(field_get:WebInvite.inviterid)
  return inviterid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebInvite::set_inviterid(const ::std::string& value) {
  set_has_inviterid();
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebInvite.inviterid)
}
 void WebInvite::set_inviterid(const char* value) {
  set_has_inviterid();
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebInvite.inviterid)
}
 void WebInvite::set_inviterid(const char* value, size_t size) {
  set_has_inviterid();
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebInvite.inviterid)
}
 ::std::string* WebInvite::mutable_inviterid() {
  set_has_inviterid();
  // @@protoc_insertion_point(field_mutable:WebInvite.inviterid)
  return inviterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebInvite::release_inviterid() {
  clear_has_inviterid();
  return inviterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebInvite::set_allocated_inviterid(::std::string* inviterid) {
  if (inviterid != NULL) {
    set_has_inviterid();
  } else {
    clear_has_inviterid();
  }
  inviterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviterid);
  // @@protoc_insertion_point(field_set_allocated:WebInvite.inviterid)
}

// required int32 fd = 3;
 bool WebInvite::has_fd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void WebInvite::set_has_fd() {
  _has_bits_[0] |= 0x00000004u;
}
 void WebInvite::clear_has_fd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void WebInvite::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 WebInvite::fd() const {
  // @@protoc_insertion_point(field_get:WebInvite.fd)
  return fd_;
}
 void WebInvite::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:WebInvite.fd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Invite::kPlatidFieldNumber;
const int Invite::kInviteridFieldNumber;
#endif  // !_MSC_VER

Invite::Invite()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Invite)
}

void Invite::InitAsDefaultInstance() {
}

Invite::Invite(const Invite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Invite)
}

void Invite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invite::~Invite() {
  // @@protoc_insertion_point(destructor:Invite)
  SharedDtor();
}

void Invite::SharedDtor() {
  platid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviterid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Invite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Invite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invite_descriptor_;
}

const Invite& Invite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Invite* Invite::default_instance_ = NULL;

Invite* Invite::New(::google::protobuf::Arena* arena) const {
  Invite* n = new Invite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Invite::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_platid()) {
      platid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_inviterid()) {
      inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Invite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Invite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string platid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platid().data(), this->platid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Invite.platid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inviterid;
        break;
      }

      // required string inviterid = 2;
      case 2: {
        if (tag == 18) {
         parse_inviterid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviterid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inviterid().data(), this->inviterid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Invite.inviterid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Invite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Invite)
  return false;
#undef DO_
}

void Invite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Invite)
  // required string platid = 1;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Invite.platid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->platid(), output);
  }

  // required string inviterid = 2;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviterid().data(), this->inviterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Invite.inviterid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inviterid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Invite)
}

::google::protobuf::uint8* Invite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Invite)
  // required string platid = 1;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Invite.platid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->platid(), target);
  }

  // required string inviterid = 2;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviterid().data(), this->inviterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Invite.inviterid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inviterid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Invite)
  return target;
}

int Invite::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_platid()) {
    // required string platid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platid());
  }

  if (has_inviterid()) {
    // required string inviterid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inviterid());
  }

  return total_size;
}
int Invite::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string platid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platid());

    // required string inviterid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inviterid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invite::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Invite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Invite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Invite::MergeFrom(const Invite& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platid()) {
      set_has_platid();
      platid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platid_);
    }
    if (from.has_inviterid()) {
      set_has_inviterid();
      inviterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviterid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Invite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invite::CopyFrom(const Invite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Invite::Swap(Invite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Invite::InternalSwap(Invite* other) {
  platid_.Swap(&other->platid_);
  inviterid_.Swap(&other->inviterid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Invite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Invite_descriptor_;
  metadata.reflection = Invite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Invite

// required string platid = 1;
 bool Invite::has_platid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Invite::set_has_platid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Invite::clear_has_platid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Invite::clear_platid() {
  platid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platid();
}
 const ::std::string& Invite::platid() const {
  // @@protoc_insertion_point(field_get:Invite.platid)
  return platid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Invite::set_platid(const ::std::string& value) {
  set_has_platid();
  platid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Invite.platid)
}
 void Invite::set_platid(const char* value) {
  set_has_platid();
  platid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Invite.platid)
}
 void Invite::set_platid(const char* value, size_t size) {
  set_has_platid();
  platid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Invite.platid)
}
 ::std::string* Invite::mutable_platid() {
  set_has_platid();
  // @@protoc_insertion_point(field_mutable:Invite.platid)
  return platid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Invite::release_platid() {
  clear_has_platid();
  return platid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Invite::set_allocated_platid(::std::string* platid) {
  if (platid != NULL) {
    set_has_platid();
  } else {
    clear_has_platid();
  }
  platid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platid);
  // @@protoc_insertion_point(field_set_allocated:Invite.platid)
}

// required string inviterid = 2;
 bool Invite::has_inviterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Invite::set_has_inviterid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Invite::clear_has_inviterid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Invite::clear_inviterid() {
  inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inviterid();
}
 const ::std::string& Invite::inviterid() const {
  // @@protoc_insertion_point(field_get:Invite.inviterid)
  return inviterid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Invite::set_inviterid(const ::std::string& value) {
  set_has_inviterid();
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Invite.inviterid)
}
 void Invite::set_inviterid(const char* value) {
  set_has_inviterid();
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Invite.inviterid)
}
 void Invite::set_inviterid(const char* value, size_t size) {
  set_has_inviterid();
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Invite.inviterid)
}
 ::std::string* Invite::mutable_inviterid() {
  set_has_inviterid();
  // @@protoc_insertion_point(field_mutable:Invite.inviterid)
  return inviterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Invite::release_inviterid() {
  clear_has_inviterid();
  return inviterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Invite::set_allocated_inviterid(::std::string* inviterid) {
  if (inviterid != NULL) {
    set_has_inviterid();
  } else {
    clear_has_inviterid();
  }
  inviterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviterid);
  // @@protoc_insertion_point(field_set_allocated:Invite.inviterid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int FriendRecallMsg::kUidMeFieldNumber;
const int FriendRecallMsg::kUidOtherFieldNumber;
const int FriendRecallMsg::kLevelFieldNumber;
const int FriendRecallMsg::kNameFieldNumber;
#endif  // !_MSC_VER

FriendRecallMsg::FriendRecallMsg()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRecallMsg)
}

void FriendRecallMsg::InitAsDefaultInstance() {
}

FriendRecallMsg::FriendRecallMsg(const FriendRecallMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FriendRecallMsg)
}

void FriendRecallMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uidme_ = GOOGLE_LONGLONG(0);
  uidother_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendRecallMsg::~FriendRecallMsg() {
  // @@protoc_insertion_point(destructor:FriendRecallMsg)
  SharedDtor();
}

void FriendRecallMsg::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FriendRecallMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRecallMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendRecallMsg_descriptor_;
}

const FriendRecallMsg& FriendRecallMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

FriendRecallMsg* FriendRecallMsg::default_instance_ = NULL;

FriendRecallMsg* FriendRecallMsg::New(::google::protobuf::Arena* arena) const {
  FriendRecallMsg* n = new FriendRecallMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRecallMsg::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FriendRecallMsg*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uidme_, uidother_);
    level_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FriendRecallMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRecallMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uidMe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uidme_)));
          set_has_uidme();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uidOther;
        break;
      }

      // required int64 uidOther = 2;
      case 2: {
        if (tag == 16) {
         parse_uidOther:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uidother_)));
          set_has_uidother();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendRecallMsg.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRecallMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRecallMsg)
  return false;
#undef DO_
}

void FriendRecallMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRecallMsg)
  // required int64 uidMe = 1;
  if (has_uidme()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uidme(), output);
  }

  // required int64 uidOther = 2;
  if (has_uidother()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uidother(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRecallMsg.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRecallMsg)
}

::google::protobuf::uint8* FriendRecallMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FriendRecallMsg)
  // required int64 uidMe = 1;
  if (has_uidme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uidme(), target);
  }

  // required int64 uidOther = 2;
  if (has_uidother()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uidother(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRecallMsg.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRecallMsg)
  return target;
}

int FriendRecallMsg::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uidme()) {
    // required int64 uidMe = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uidme());
  }

  if (has_uidother()) {
    // required int64 uidOther = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uidother());
  }

  if (has_level()) {
    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_name()) {
    // required string name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
int FriendRecallMsg::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 uidMe = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uidme());

    // required int64 uidOther = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uidother());

    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required string name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRecallMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FriendRecallMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendRecallMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendRecallMsg::MergeFrom(const FriendRecallMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uidme()) {
      set_uidme(from.uidme());
    }
    if (from.has_uidother()) {
      set_uidother(from.uidother());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FriendRecallMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRecallMsg::CopyFrom(const FriendRecallMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRecallMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FriendRecallMsg::Swap(FriendRecallMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRecallMsg::InternalSwap(FriendRecallMsg* other) {
  std::swap(uidme_, other->uidme_);
  std::swap(uidother_, other->uidother_);
  std::swap(level_, other->level_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRecallMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendRecallMsg_descriptor_;
  metadata.reflection = FriendRecallMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRecallMsg

// required int64 uidMe = 1;
 bool FriendRecallMsg::has_uidme() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void FriendRecallMsg::set_has_uidme() {
  _has_bits_[0] |= 0x00000001u;
}
 void FriendRecallMsg::clear_has_uidme() {
  _has_bits_[0] &= ~0x00000001u;
}
 void FriendRecallMsg::clear_uidme() {
  uidme_ = GOOGLE_LONGLONG(0);
  clear_has_uidme();
}
 ::google::protobuf::int64 FriendRecallMsg::uidme() const {
  // @@protoc_insertion_point(field_get:FriendRecallMsg.uidMe)
  return uidme_;
}
 void FriendRecallMsg::set_uidme(::google::protobuf::int64 value) {
  set_has_uidme();
  uidme_ = value;
  // @@protoc_insertion_point(field_set:FriendRecallMsg.uidMe)
}

// required int64 uidOther = 2;
 bool FriendRecallMsg::has_uidother() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void FriendRecallMsg::set_has_uidother() {
  _has_bits_[0] |= 0x00000002u;
}
 void FriendRecallMsg::clear_has_uidother() {
  _has_bits_[0] &= ~0x00000002u;
}
 void FriendRecallMsg::clear_uidother() {
  uidother_ = GOOGLE_LONGLONG(0);
  clear_has_uidother();
}
 ::google::protobuf::int64 FriendRecallMsg::uidother() const {
  // @@protoc_insertion_point(field_get:FriendRecallMsg.uidOther)
  return uidother_;
}
 void FriendRecallMsg::set_uidother(::google::protobuf::int64 value) {
  set_has_uidother();
  uidother_ = value;
  // @@protoc_insertion_point(field_set:FriendRecallMsg.uidOther)
}

// required int32 level = 3;
 bool FriendRecallMsg::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void FriendRecallMsg::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
 void FriendRecallMsg::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
 void FriendRecallMsg::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 FriendRecallMsg::level() const {
  // @@protoc_insertion_point(field_get:FriendRecallMsg.level)
  return level_;
}
 void FriendRecallMsg::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FriendRecallMsg.level)
}

// required string name = 4;
 bool FriendRecallMsg::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void FriendRecallMsg::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
 void FriendRecallMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
 void FriendRecallMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& FriendRecallMsg::name() const {
  // @@protoc_insertion_point(field_get:FriendRecallMsg.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendRecallMsg::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRecallMsg.name)
}
 void FriendRecallMsg::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRecallMsg.name)
}
 void FriendRecallMsg::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRecallMsg.name)
}
 ::std::string* FriendRecallMsg::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:FriendRecallMsg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FriendRecallMsg::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendRecallMsg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FriendRecallMsg.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MultiLevelFriendPoint::kKindFieldNumber;
const int MultiLevelFriendPoint::kPointAddFieldNumber;
const int MultiLevelFriendPoint::kPointFieldNumber;
const int MultiLevelFriendPoint::kOpenidFieldNumber;
const int MultiLevelFriendPoint::kLevelFieldNumber;
#endif  // !_MSC_VER

MultiLevelFriendPoint::MultiLevelFriendPoint()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiLevelFriendPoint)
}

void MultiLevelFriendPoint::InitAsDefaultInstance() {
}

MultiLevelFriendPoint::MultiLevelFriendPoint(const MultiLevelFriendPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MultiLevelFriendPoint)
}

void MultiLevelFriendPoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kind_ = 0;
  pointadd_ = 0;
  point_ = 0;
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiLevelFriendPoint::~MultiLevelFriendPoint() {
  // @@protoc_insertion_point(destructor:MultiLevelFriendPoint)
  SharedDtor();
}

void MultiLevelFriendPoint::SharedDtor() {
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MultiLevelFriendPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiLevelFriendPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiLevelFriendPoint_descriptor_;
}

const MultiLevelFriendPoint& MultiLevelFriendPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

MultiLevelFriendPoint* MultiLevelFriendPoint::default_instance_ = NULL;

MultiLevelFriendPoint* MultiLevelFriendPoint::New(::google::protobuf::Arena* arena) const {
  MultiLevelFriendPoint* n = new MultiLevelFriendPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiLevelFriendPoint::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MultiLevelFriendPoint*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(kind_, pointadd_);
    ZR_(point_, level_);
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MultiLevelFriendPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiLevelFriendPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kind = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pointAdd;
        break;
      }

      // required int32 pointAdd = 2;
      case 2: {
        if (tag == 16) {
         parse_pointAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointadd_)));
          set_has_pointadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // required int32 point = 3;
      case 3: {
        if (tag == 24) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_openid;
        break;
      }

      // required string openid = 4;
      case 4: {
        if (tag == 34) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MultiLevelFriendPoint.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiLevelFriendPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiLevelFriendPoint)
  return false;
#undef DO_
}

void MultiLevelFriendPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiLevelFriendPoint)
  // required int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  // required int32 pointAdd = 2;
  if (has_pointadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pointadd(), output);
  }

  // required int32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->point(), output);
  }

  // required string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MultiLevelFriendPoint.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->openid(), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MultiLevelFriendPoint)
}

::google::protobuf::uint8* MultiLevelFriendPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MultiLevelFriendPoint)
  // required int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  // required int32 pointAdd = 2;
  if (has_pointadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pointadd(), target);
  }

  // required int32 point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->point(), target);
  }

  // required string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MultiLevelFriendPoint.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }

  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultiLevelFriendPoint)
  return target;
}

int MultiLevelFriendPoint::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_kind()) {
    // required int32 kind = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kind());
  }

  if (has_pointadd()) {
    // required int32 pointAdd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pointadd());
  }

  if (has_point()) {
    // required int32 point = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->point());
  }

  if (has_openid()) {
    // required string openid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openid());
  }

  if (has_level()) {
    // required int32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  return total_size;
}
int MultiLevelFriendPoint::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 kind = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kind());

    // required int32 pointAdd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pointadd());

    // required int32 point = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->point());

    // required string openid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openid());

    // required int32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiLevelFriendPoint::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MultiLevelFriendPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiLevelFriendPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiLevelFriendPoint::MergeFrom(const MultiLevelFriendPoint& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_pointadd()) {
      set_pointadd(from.pointadd());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MultiLevelFriendPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiLevelFriendPoint::CopyFrom(const MultiLevelFriendPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiLevelFriendPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MultiLevelFriendPoint::Swap(MultiLevelFriendPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiLevelFriendPoint::InternalSwap(MultiLevelFriendPoint* other) {
  std::swap(kind_, other->kind_);
  std::swap(pointadd_, other->pointadd_);
  std::swap(point_, other->point_);
  openid_.Swap(&other->openid_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiLevelFriendPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiLevelFriendPoint_descriptor_;
  metadata.reflection = MultiLevelFriendPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiLevelFriendPoint

// required int32 kind = 1;
 bool MultiLevelFriendPoint::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MultiLevelFriendPoint::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
 void MultiLevelFriendPoint::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MultiLevelFriendPoint::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
 ::google::protobuf::int32 MultiLevelFriendPoint::kind() const {
  // @@protoc_insertion_point(field_get:MultiLevelFriendPoint.kind)
  return kind_;
}
 void MultiLevelFriendPoint::set_kind(::google::protobuf::int32 value) {
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:MultiLevelFriendPoint.kind)
}

// required int32 pointAdd = 2;
 bool MultiLevelFriendPoint::has_pointadd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MultiLevelFriendPoint::set_has_pointadd() {
  _has_bits_[0] |= 0x00000002u;
}
 void MultiLevelFriendPoint::clear_has_pointadd() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MultiLevelFriendPoint::clear_pointadd() {
  pointadd_ = 0;
  clear_has_pointadd();
}
 ::google::protobuf::int32 MultiLevelFriendPoint::pointadd() const {
  // @@protoc_insertion_point(field_get:MultiLevelFriendPoint.pointAdd)
  return pointadd_;
}
 void MultiLevelFriendPoint::set_pointadd(::google::protobuf::int32 value) {
  set_has_pointadd();
  pointadd_ = value;
  // @@protoc_insertion_point(field_set:MultiLevelFriendPoint.pointAdd)
}

// required int32 point = 3;
 bool MultiLevelFriendPoint::has_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void MultiLevelFriendPoint::set_has_point() {
  _has_bits_[0] |= 0x00000004u;
}
 void MultiLevelFriendPoint::clear_has_point() {
  _has_bits_[0] &= ~0x00000004u;
}
 void MultiLevelFriendPoint::clear_point() {
  point_ = 0;
  clear_has_point();
}
 ::google::protobuf::int32 MultiLevelFriendPoint::point() const {
  // @@protoc_insertion_point(field_get:MultiLevelFriendPoint.point)
  return point_;
}
 void MultiLevelFriendPoint::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:MultiLevelFriendPoint.point)
}

// required string openid = 4;
 bool MultiLevelFriendPoint::has_openid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void MultiLevelFriendPoint::set_has_openid() {
  _has_bits_[0] |= 0x00000008u;
}
 void MultiLevelFriendPoint::clear_has_openid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void MultiLevelFriendPoint::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& MultiLevelFriendPoint::openid() const {
  // @@protoc_insertion_point(field_get:MultiLevelFriendPoint.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultiLevelFriendPoint::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MultiLevelFriendPoint.openid)
}
 void MultiLevelFriendPoint::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MultiLevelFriendPoint.openid)
}
 void MultiLevelFriendPoint::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MultiLevelFriendPoint.openid)
}
 ::std::string* MultiLevelFriendPoint::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:MultiLevelFriendPoint.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MultiLevelFriendPoint::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultiLevelFriendPoint::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:MultiLevelFriendPoint.openid)
}

// required int32 level = 5;
 bool MultiLevelFriendPoint::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void MultiLevelFriendPoint::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
 void MultiLevelFriendPoint::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
 void MultiLevelFriendPoint::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 MultiLevelFriendPoint::level() const {
  // @@protoc_insertion_point(field_get:MultiLevelFriendPoint.level)
  return level_;
}
 void MultiLevelFriendPoint::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:MultiLevelFriendPoint.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TalentShow::kNameFieldNumber;
const int TalentShow::kUidFieldNumber;
const int TalentShow::kWeightFieldNumber;
#endif  // !_MSC_VER

TalentShow::TalentShow()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TalentShow)
}

void TalentShow::InitAsDefaultInstance() {
}

TalentShow::TalentShow(const TalentShow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TalentShow)
}

void TalentShow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_LONGLONG(0);
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalentShow::~TalentShow() {
  // @@protoc_insertion_point(destructor:TalentShow)
  SharedDtor();
}

void TalentShow::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TalentShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalentShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalentShow_descriptor_;
}

const TalentShow& TalentShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

TalentShow* TalentShow::default_instance_ = NULL;

TalentShow* TalentShow::New(::google::protobuf::Arena* arena) const {
  TalentShow* n = new TalentShow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalentShow::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TalentShow*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, weight_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TalentShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TalentShow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TalentShow.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_weight;
        break;
      }

      // required int32 weight = 3;
      case 3: {
        if (tag == 24) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TalentShow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TalentShow)
  return false;
#undef DO_
}

void TalentShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TalentShow)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TalentShow.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // required int32 weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TalentShow)
}

::google::protobuf::uint8* TalentShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TalentShow)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TalentShow.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // required int32 weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TalentShow)
  return target;
}

int TalentShow::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_uid()) {
    // required int64 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_weight()) {
    // required int32 weight = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weight());
  }

  return total_size;
}
int TalentShow::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int64 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 weight = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weight());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalentShow::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TalentShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalentShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalentShow::MergeFrom(const TalentShow& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TalentShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalentShow::CopyFrom(const TalentShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalentShow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TalentShow::Swap(TalentShow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalentShow::InternalSwap(TalentShow* other) {
  name_.Swap(&other->name_);
  std::swap(uid_, other->uid_);
  std::swap(weight_, other->weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalentShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalentShow_descriptor_;
  metadata.reflection = TalentShow_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalentShow

// required string name = 1;
 bool TalentShow::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void TalentShow::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void TalentShow::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void TalentShow::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& TalentShow::name() const {
  // @@protoc_insertion_point(field_get:TalentShow.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TalentShow::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TalentShow.name)
}
 void TalentShow::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TalentShow.name)
}
 void TalentShow::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TalentShow.name)
}
 ::std::string* TalentShow::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:TalentShow.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TalentShow::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TalentShow::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TalentShow.name)
}

// required int64 uid = 2;
 bool TalentShow::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void TalentShow::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
 void TalentShow::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void TalentShow::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 TalentShow::uid() const {
  // @@protoc_insertion_point(field_get:TalentShow.uid)
  return uid_;
}
 void TalentShow::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:TalentShow.uid)
}

// required int32 weight = 3;
 bool TalentShow::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void TalentShow::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
 void TalentShow::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
 void TalentShow::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
 ::google::protobuf::int32 TalentShow::weight() const {
  // @@protoc_insertion_point(field_get:TalentShow.weight)
  return weight_;
}
 void TalentShow::set_weight(::google::protobuf::int32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:TalentShow.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TalentShowList::kItemFieldNumber;
#endif  // !_MSC_VER

TalentShowList::TalentShowList()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TalentShowList)
}

void TalentShowList::InitAsDefaultInstance() {
}

TalentShowList::TalentShowList(const TalentShowList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TalentShowList)
}

void TalentShowList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalentShowList::~TalentShowList() {
  // @@protoc_insertion_point(destructor:TalentShowList)
  SharedDtor();
}

void TalentShowList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalentShowList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalentShowList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalentShowList_descriptor_;
}

const TalentShowList& TalentShowList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

TalentShowList* TalentShowList::default_instance_ = NULL;

TalentShowList* TalentShowList::New(::google::protobuf::Arena* arena) const {
  TalentShowList* n = new TalentShowList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalentShowList::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TalentShowList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TalentShowList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TalentShow item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TalentShowList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TalentShowList)
  return false;
#undef DO_
}

void TalentShowList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TalentShowList)
  // repeated .TalentShow item = 1;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TalentShowList)
}

::google::protobuf::uint8* TalentShowList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TalentShowList)
  // repeated .TalentShow item = 1;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TalentShowList)
  return target;
}

int TalentShowList::ByteSize() const {
  int total_size = 0;

  // repeated .TalentShow item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalentShowList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TalentShowList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalentShowList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalentShowList::MergeFrom(const TalentShowList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  item_.MergeFrom(from.item_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TalentShowList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalentShowList::CopyFrom(const TalentShowList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalentShowList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void TalentShowList::Swap(TalentShowList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalentShowList::InternalSwap(TalentShowList* other) {
  item_.UnsafeArenaSwap(&other->item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalentShowList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalentShowList_descriptor_;
  metadata.reflection = TalentShowList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalentShowList

// repeated .TalentShow item = 1;
 int TalentShowList::item_size() const {
  return item_.size();
}
 void TalentShowList::clear_item() {
  item_.Clear();
}
 const ::TalentShow& TalentShowList::item(int index) const {
  // @@protoc_insertion_point(field_get:TalentShowList.item)
  return item_.Get(index);
}
 ::TalentShow* TalentShowList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:TalentShowList.item)
  return item_.Mutable(index);
}
 ::TalentShow* TalentShowList::add_item() {
  // @@protoc_insertion_point(field_add:TalentShowList.item)
  return item_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::TalentShow >&
TalentShowList::item() const {
  // @@protoc_insertion_point(field_list:TalentShowList.item)
  return item_;
}
 ::google::protobuf::RepeatedPtrField< ::TalentShow >*
TalentShowList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:TalentShowList.item)
  return &item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int FriendSendGift::kItemIdFieldNumber;
const int FriendSendGift::kNameFieldNumber;
const int FriendSendGift::kUidFieldNumber;
#endif  // !_MSC_VER

FriendSendGift::FriendSendGift()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendSendGift)
}

void FriendSendGift::InitAsDefaultInstance() {
}

FriendSendGift::FriendSendGift(const FriendSendGift& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FriendSendGift)
}

void FriendSendGift::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemid_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendSendGift::~FriendSendGift() {
  // @@protoc_insertion_point(destructor:FriendSendGift)
  SharedDtor();
}

void FriendSendGift::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FriendSendGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendSendGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendSendGift_descriptor_;
}

const FriendSendGift& FriendSendGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

FriendSendGift* FriendSendGift::default_instance_ = NULL;

FriendSendGift* FriendSendGift::New(::google::protobuf::Arena* arena) const {
  FriendSendGift* n = new FriendSendGift;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendSendGift::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FriendSendGift*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, itemid_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FriendSendGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendSendGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendSendGift.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required int64 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendSendGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendSendGift)
  return false;
#undef DO_
}

void FriendSendGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendSendGift)
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendSendGift.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int64 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendSendGift)
}

::google::protobuf::uint8* FriendSendGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FriendSendGift)
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendSendGift.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int64 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendSendGift)
  return target;
}

int FriendSendGift::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_itemid()) {
    // required int32 itemId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemid());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_uid()) {
    // required int64 uid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  return total_size;
}
int FriendSendGift::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 itemId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemid());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int64 uid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendSendGift::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FriendSendGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendSendGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendSendGift::MergeFrom(const FriendSendGift& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FriendSendGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendSendGift::CopyFrom(const FriendSendGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendSendGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FriendSendGift::Swap(FriendSendGift* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendSendGift::InternalSwap(FriendSendGift* other) {
  std::swap(itemid_, other->itemid_);
  name_.Swap(&other->name_);
  std::swap(uid_, other->uid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendSendGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendSendGift_descriptor_;
  metadata.reflection = FriendSendGift_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendSendGift

// required int32 itemId = 1;
 bool FriendSendGift::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void FriendSendGift::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
 void FriendSendGift::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void FriendSendGift::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
 ::google::protobuf::int32 FriendSendGift::itemid() const {
  // @@protoc_insertion_point(field_get:FriendSendGift.itemId)
  return itemid_;
}
 void FriendSendGift::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:FriendSendGift.itemId)
}

// required string name = 2;
 bool FriendSendGift::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void FriendSendGift::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
 void FriendSendGift::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
 void FriendSendGift::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& FriendSendGift::name() const {
  // @@protoc_insertion_point(field_get:FriendSendGift.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendSendGift::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendSendGift.name)
}
 void FriendSendGift::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendSendGift.name)
}
 void FriendSendGift::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendSendGift.name)
}
 ::std::string* FriendSendGift::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:FriendSendGift.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FriendSendGift::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendSendGift::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FriendSendGift.name)
}

// required int64 uid = 3;
 bool FriendSendGift::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void FriendSendGift::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
 void FriendSendGift::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void FriendSendGift::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 FriendSendGift::uid() const {
  // @@protoc_insertion_point(field_get:FriendSendGift.uid)
  return uid_;
}
 void FriendSendGift::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:FriendSendGift.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int FortuneSteal::kKindFieldNumber;
const int FortuneSteal::kNameActiveFieldNumber;
const int FortuneSteal::kUidActiveFieldNumber;
const int FortuneSteal::kUidPassiveFieldNumber;
const int FortuneSteal::kPointFieldNumber;
#endif  // !_MSC_VER

FortuneSteal::FortuneSteal()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FortuneSteal)
}

void FortuneSteal::InitAsDefaultInstance() {
}

FortuneSteal::FortuneSteal(const FortuneSteal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FortuneSteal)
}

void FortuneSteal::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kind_ = 0;
  nameactive_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uidactive_ = GOOGLE_LONGLONG(0);
  uidpassive_ = GOOGLE_LONGLONG(0);
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FortuneSteal::~FortuneSteal() {
  // @@protoc_insertion_point(destructor:FortuneSteal)
  SharedDtor();
}

void FortuneSteal::SharedDtor() {
  nameactive_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FortuneSteal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FortuneSteal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FortuneSteal_descriptor_;
}

const FortuneSteal& FortuneSteal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

FortuneSteal* FortuneSteal::default_instance_ = NULL;

FortuneSteal* FortuneSteal::New(::google::protobuf::Arena* arena) const {
  FortuneSteal* n = new FortuneSteal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FortuneSteal::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FortuneSteal*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uidactive_, uidpassive_);
    if (has_nameactive()) {
      nameactive_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FortuneSteal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FortuneSteal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kind = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nameActive;
        break;
      }

      // required string nameActive = 2;
      case 2: {
        if (tag == 18) {
         parse_nameActive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameactive()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nameactive().data(), this->nameactive().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FortuneSteal.nameActive");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uidActive;
        break;
      }

      // required int64 uidActive = 3;
      case 3: {
        if (tag == 24) {
         parse_uidActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uidactive_)));
          set_has_uidactive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uidPassive;
        break;
      }

      // required int64 uidPassive = 4;
      case 4: {
        if (tag == 32) {
         parse_uidPassive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uidpassive_)));
          set_has_uidpassive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_point;
        break;
      }

      // required int32 point = 5;
      case 5: {
        if (tag == 40) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FortuneSteal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FortuneSteal)
  return false;
#undef DO_
}

void FortuneSteal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FortuneSteal)
  // required int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  // required string nameActive = 2;
  if (has_nameactive()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nameactive().data(), this->nameactive().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FortuneSteal.nameActive");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nameactive(), output);
  }

  // required int64 uidActive = 3;
  if (has_uidactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uidactive(), output);
  }

  // required int64 uidPassive = 4;
  if (has_uidpassive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->uidpassive(), output);
  }

  // required int32 point = 5;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FortuneSteal)
}

::google::protobuf::uint8* FortuneSteal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FortuneSteal)
  // required int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  // required string nameActive = 2;
  if (has_nameactive()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nameactive().data(), this->nameactive().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FortuneSteal.nameActive");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nameactive(), target);
  }

  // required int64 uidActive = 3;
  if (has_uidactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uidactive(), target);
  }

  // required int64 uidPassive = 4;
  if (has_uidpassive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->uidpassive(), target);
  }

  // required int32 point = 5;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FortuneSteal)
  return target;
}

int FortuneSteal::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_kind()) {
    // required int32 kind = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kind());
  }

  if (has_nameactive()) {
    // required string nameActive = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nameactive());
  }

  if (has_uidactive()) {
    // required int64 uidActive = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uidactive());
  }

  if (has_uidpassive()) {
    // required int64 uidPassive = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uidpassive());
  }

  if (has_point()) {
    // required int32 point = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->point());
  }

  return total_size;
}
int FortuneSteal::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 kind = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kind());

    // required string nameActive = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nameactive());

    // required int64 uidActive = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uidactive());

    // required int64 uidPassive = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uidpassive());

    // required int32 point = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->point());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FortuneSteal::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FortuneSteal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FortuneSteal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FortuneSteal::MergeFrom(const FortuneSteal& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_nameactive()) {
      set_has_nameactive();
      nameactive_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nameactive_);
    }
    if (from.has_uidactive()) {
      set_uidactive(from.uidactive());
    }
    if (from.has_uidpassive()) {
      set_uidpassive(from.uidpassive());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FortuneSteal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FortuneSteal::CopyFrom(const FortuneSteal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FortuneSteal::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FortuneSteal::Swap(FortuneSteal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FortuneSteal::InternalSwap(FortuneSteal* other) {
  std::swap(kind_, other->kind_);
  nameactive_.Swap(&other->nameactive_);
  std::swap(uidactive_, other->uidactive_);
  std::swap(uidpassive_, other->uidpassive_);
  std::swap(point_, other->point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FortuneSteal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FortuneSteal_descriptor_;
  metadata.reflection = FortuneSteal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FortuneSteal

// required int32 kind = 1;
 bool FortuneSteal::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void FortuneSteal::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
 void FortuneSteal::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
 void FortuneSteal::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
 ::google::protobuf::int32 FortuneSteal::kind() const {
  // @@protoc_insertion_point(field_get:FortuneSteal.kind)
  return kind_;
}
 void FortuneSteal::set_kind(::google::protobuf::int32 value) {
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:FortuneSteal.kind)
}

// required string nameActive = 2;
 bool FortuneSteal::has_nameactive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void FortuneSteal::set_has_nameactive() {
  _has_bits_[0] |= 0x00000002u;
}
 void FortuneSteal::clear_has_nameactive() {
  _has_bits_[0] &= ~0x00000002u;
}
 void FortuneSteal::clear_nameactive() {
  nameactive_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nameactive();
}
 const ::std::string& FortuneSteal::nameactive() const {
  // @@protoc_insertion_point(field_get:FortuneSteal.nameActive)
  return nameactive_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FortuneSteal::set_nameactive(const ::std::string& value) {
  set_has_nameactive();
  nameactive_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FortuneSteal.nameActive)
}
 void FortuneSteal::set_nameactive(const char* value) {
  set_has_nameactive();
  nameactive_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FortuneSteal.nameActive)
}
 void FortuneSteal::set_nameactive(const char* value, size_t size) {
  set_has_nameactive();
  nameactive_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FortuneSteal.nameActive)
}
 ::std::string* FortuneSteal::mutable_nameactive() {
  set_has_nameactive();
  // @@protoc_insertion_point(field_mutable:FortuneSteal.nameActive)
  return nameactive_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FortuneSteal::release_nameactive() {
  clear_has_nameactive();
  return nameactive_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FortuneSteal::set_allocated_nameactive(::std::string* nameactive) {
  if (nameactive != NULL) {
    set_has_nameactive();
  } else {
    clear_has_nameactive();
  }
  nameactive_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameactive);
  // @@protoc_insertion_point(field_set_allocated:FortuneSteal.nameActive)
}

// required int64 uidActive = 3;
 bool FortuneSteal::has_uidactive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void FortuneSteal::set_has_uidactive() {
  _has_bits_[0] |= 0x00000004u;
}
 void FortuneSteal::clear_has_uidactive() {
  _has_bits_[0] &= ~0x00000004u;
}
 void FortuneSteal::clear_uidactive() {
  uidactive_ = GOOGLE_LONGLONG(0);
  clear_has_uidactive();
}
 ::google::protobuf::int64 FortuneSteal::uidactive() const {
  // @@protoc_insertion_point(field_get:FortuneSteal.uidActive)
  return uidactive_;
}
 void FortuneSteal::set_uidactive(::google::protobuf::int64 value) {
  set_has_uidactive();
  uidactive_ = value;
  // @@protoc_insertion_point(field_set:FortuneSteal.uidActive)
}

// required int64 uidPassive = 4;
 bool FortuneSteal::has_uidpassive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void FortuneSteal::set_has_uidpassive() {
  _has_bits_[0] |= 0x00000008u;
}
 void FortuneSteal::clear_has_uidpassive() {
  _has_bits_[0] &= ~0x00000008u;
}
 void FortuneSteal::clear_uidpassive() {
  uidpassive_ = GOOGLE_LONGLONG(0);
  clear_has_uidpassive();
}
 ::google::protobuf::int64 FortuneSteal::uidpassive() const {
  // @@protoc_insertion_point(field_get:FortuneSteal.uidPassive)
  return uidpassive_;
}
 void FortuneSteal::set_uidpassive(::google::protobuf::int64 value) {
  set_has_uidpassive();
  uidpassive_ = value;
  // @@protoc_insertion_point(field_set:FortuneSteal.uidPassive)
}

// required int32 point = 5;
 bool FortuneSteal::has_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void FortuneSteal::set_has_point() {
  _has_bits_[0] |= 0x00000010u;
}
 void FortuneSteal::clear_has_point() {
  _has_bits_[0] &= ~0x00000010u;
}
 void FortuneSteal::clear_point() {
  point_ = 0;
  clear_has_point();
}
 ::google::protobuf::int32 FortuneSteal::point() const {
  // @@protoc_insertion_point(field_get:FortuneSteal.point)
  return point_;
}
 void FortuneSteal::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:FortuneSteal.point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ChiefVote::kKindFieldNumber;
const int ChiefVote::kNameActiveFieldNumber;
const int ChiefVote::kUidActiveFieldNumber;
const int ChiefVote::kUidPassiveFieldNumber;
const int ChiefVote::kNumFieldNumber;
const int ChiefVote::kSuccFieldNumber;
#endif  // !_MSC_VER

ChiefVote::ChiefVote()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChiefVote)
}

void ChiefVote::InitAsDefaultInstance() {
}

ChiefVote::ChiefVote(const ChiefVote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChiefVote)
}

void ChiefVote::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kind_ = 0;
  nameactive_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uidactive_ = GOOGLE_LONGLONG(0);
  uidpassive_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  succ_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChiefVote::~ChiefVote() {
  // @@protoc_insertion_point(destructor:ChiefVote)
  SharedDtor();
}

void ChiefVote::SharedDtor() {
  nameactive_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChiefVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChiefVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChiefVote_descriptor_;
}

const ChiefVote& ChiefVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

ChiefVote* ChiefVote::default_instance_ = NULL;

ChiefVote* ChiefVote::New(::google::protobuf::Arena* arena) const {
  ChiefVote* n = new ChiefVote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChiefVote::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChiefVote*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uidactive_, succ_);
    if (has_nameactive()) {
      nameactive_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChiefVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChiefVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kind = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nameActive;
        break;
      }

      // required string nameActive = 2;
      case 2: {
        if (tag == 18) {
         parse_nameActive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameactive()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nameactive().data(), this->nameactive().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ChiefVote.nameActive");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uidActive;
        break;
      }

      // required int64 uidActive = 3;
      case 3: {
        if (tag == 24) {
         parse_uidActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uidactive_)));
          set_has_uidactive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uidPassive;
        break;
      }

      // required int64 uidPassive = 4;
      case 4: {
        if (tag == 32) {
         parse_uidPassive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uidpassive_)));
          set_has_uidpassive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // required int32 num = 5;
      case 5: {
        if (tag == 40) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_succ;
        break;
      }

      // required bool succ = 6;
      case 6: {
        if (tag == 48) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChiefVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChiefVote)
  return false;
#undef DO_
}

void ChiefVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChiefVote)
  // required int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  // required string nameActive = 2;
  if (has_nameactive()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nameactive().data(), this->nameactive().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ChiefVote.nameActive");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nameactive(), output);
  }

  // required int64 uidActive = 3;
  if (has_uidactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uidactive(), output);
  }

  // required int64 uidPassive = 4;
  if (has_uidpassive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->uidpassive(), output);
  }

  // required int32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num(), output);
  }

  // required bool succ = 6;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChiefVote)
}

::google::protobuf::uint8* ChiefVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChiefVote)
  // required int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  // required string nameActive = 2;
  if (has_nameactive()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nameactive().data(), this->nameactive().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ChiefVote.nameActive");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nameactive(), target);
  }

  // required int64 uidActive = 3;
  if (has_uidactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uidactive(), target);
  }

  // required int64 uidPassive = 4;
  if (has_uidpassive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->uidpassive(), target);
  }

  // required int32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num(), target);
  }

  // required bool succ = 6;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChiefVote)
  return target;
}

int ChiefVote::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_kind()) {
    // required int32 kind = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kind());
  }

  if (has_nameactive()) {
    // required string nameActive = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nameactive());
  }

  if (has_uidactive()) {
    // required int64 uidActive = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uidactive());
  }

  if (has_uidpassive()) {
    // required int64 uidPassive = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uidpassive());
  }

  if (has_num()) {
    // required int32 num = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  if (has_succ()) {
    // required bool succ = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
int ChiefVote::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 kind = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kind());

    // required string nameActive = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nameactive());

    // required int64 uidActive = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uidactive());

    // required int64 uidPassive = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uidpassive());

    // required int32 num = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());

    // required bool succ = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChiefVote::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChiefVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChiefVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChiefVote::MergeFrom(const ChiefVote& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_nameactive()) {
      set_has_nameactive();
      nameactive_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nameactive_);
    }
    if (from.has_uidactive()) {
      set_uidactive(from.uidactive());
    }
    if (from.has_uidpassive()) {
      set_uidpassive(from.uidpassive());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChiefVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChiefVote::CopyFrom(const ChiefVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChiefVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ChiefVote::Swap(ChiefVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChiefVote::InternalSwap(ChiefVote* other) {
  std::swap(kind_, other->kind_);
  nameactive_.Swap(&other->nameactive_);
  std::swap(uidactive_, other->uidactive_);
  std::swap(uidpassive_, other->uidpassive_);
  std::swap(num_, other->num_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChiefVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChiefVote_descriptor_;
  metadata.reflection = ChiefVote_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChiefVote

// required int32 kind = 1;
 bool ChiefVote::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void ChiefVote::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
 void ChiefVote::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
 void ChiefVote::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
 ::google::protobuf::int32 ChiefVote::kind() const {
  // @@protoc_insertion_point(field_get:ChiefVote.kind)
  return kind_;
}
 void ChiefVote::set_kind(::google::protobuf::int32 value) {
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:ChiefVote.kind)
}

// required string nameActive = 2;
 bool ChiefVote::has_nameactive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void ChiefVote::set_has_nameactive() {
  _has_bits_[0] |= 0x00000002u;
}
 void ChiefVote::clear_has_nameactive() {
  _has_bits_[0] &= ~0x00000002u;
}
 void ChiefVote::clear_nameactive() {
  nameactive_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nameactive();
}
 const ::std::string& ChiefVote::nameactive() const {
  // @@protoc_insertion_point(field_get:ChiefVote.nameActive)
  return nameactive_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChiefVote::set_nameactive(const ::std::string& value) {
  set_has_nameactive();
  nameactive_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChiefVote.nameActive)
}
 void ChiefVote::set_nameactive(const char* value) {
  set_has_nameactive();
  nameactive_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChiefVote.nameActive)
}
 void ChiefVote::set_nameactive(const char* value, size_t size) {
  set_has_nameactive();
  nameactive_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChiefVote.nameActive)
}
 ::std::string* ChiefVote::mutable_nameactive() {
  set_has_nameactive();
  // @@protoc_insertion_point(field_mutable:ChiefVote.nameActive)
  return nameactive_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChiefVote::release_nameactive() {
  clear_has_nameactive();
  return nameactive_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChiefVote::set_allocated_nameactive(::std::string* nameactive) {
  if (nameactive != NULL) {
    set_has_nameactive();
  } else {
    clear_has_nameactive();
  }
  nameactive_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameactive);
  // @@protoc_insertion_point(field_set_allocated:ChiefVote.nameActive)
}

// required int64 uidActive = 3;
 bool ChiefVote::has_uidactive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void ChiefVote::set_has_uidactive() {
  _has_bits_[0] |= 0x00000004u;
}
 void ChiefVote::clear_has_uidactive() {
  _has_bits_[0] &= ~0x00000004u;
}
 void ChiefVote::clear_uidactive() {
  uidactive_ = GOOGLE_LONGLONG(0);
  clear_has_uidactive();
}
 ::google::protobuf::int64 ChiefVote::uidactive() const {
  // @@protoc_insertion_point(field_get:ChiefVote.uidActive)
  return uidactive_;
}
 void ChiefVote::set_uidactive(::google::protobuf::int64 value) {
  set_has_uidactive();
  uidactive_ = value;
  // @@protoc_insertion_point(field_set:ChiefVote.uidActive)
}

// required int64 uidPassive = 4;
 bool ChiefVote::has_uidpassive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void ChiefVote::set_has_uidpassive() {
  _has_bits_[0] |= 0x00000008u;
}
 void ChiefVote::clear_has_uidpassive() {
  _has_bits_[0] &= ~0x00000008u;
}
 void ChiefVote::clear_uidpassive() {
  uidpassive_ = GOOGLE_LONGLONG(0);
  clear_has_uidpassive();
}
 ::google::protobuf::int64 ChiefVote::uidpassive() const {
  // @@protoc_insertion_point(field_get:ChiefVote.uidPassive)
  return uidpassive_;
}
 void ChiefVote::set_uidpassive(::google::protobuf::int64 value) {
  set_has_uidpassive();
  uidpassive_ = value;
  // @@protoc_insertion_point(field_set:ChiefVote.uidPassive)
}

// required int32 num = 5;
 bool ChiefVote::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void ChiefVote::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
 void ChiefVote::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
 void ChiefVote::clear_num() {
  num_ = 0;
  clear_has_num();
}
 ::google::protobuf::int32 ChiefVote::num() const {
  // @@protoc_insertion_point(field_get:ChiefVote.num)
  return num_;
}
 void ChiefVote::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ChiefVote.num)
}

// required bool succ = 6;
 bool ChiefVote::has_succ() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void ChiefVote::set_has_succ() {
  _has_bits_[0] |= 0x00000020u;
}
 void ChiefVote::clear_has_succ() {
  _has_bits_[0] &= ~0x00000020u;
}
 void ChiefVote::clear_succ() {
  succ_ = false;
  clear_has_succ();
}
 bool ChiefVote::succ() const {
  // @@protoc_insertion_point(field_get:ChiefVote.succ)
  return succ_;
}
 void ChiefVote::set_succ(bool value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:ChiefVote.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LotteryTimer::kRoomidFieldNumber;
#endif  // !_MSC_VER

LotteryTimer::LotteryTimer()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LotteryTimer)
}

void LotteryTimer::InitAsDefaultInstance() {
}

LotteryTimer::LotteryTimer(const LotteryTimer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LotteryTimer)
}

void LotteryTimer::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryTimer::~LotteryTimer() {
  // @@protoc_insertion_point(destructor:LotteryTimer)
  SharedDtor();
}

void LotteryTimer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotteryTimer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryTimer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryTimer_descriptor_;
}

const LotteryTimer& LotteryTimer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

LotteryTimer* LotteryTimer::default_instance_ = NULL;

LotteryTimer* LotteryTimer::New(::google::protobuf::Arena* arena) const {
  LotteryTimer* n = new LotteryTimer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LotteryTimer::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LotteryTimer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LotteryTimer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LotteryTimer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LotteryTimer)
  return false;
#undef DO_
}

void LotteryTimer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LotteryTimer)
  // required int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LotteryTimer)
}

::google::protobuf::uint8* LotteryTimer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LotteryTimer)
  // required int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LotteryTimer)
  return target;
}

int LotteryTimer::ByteSize() const {
  int total_size = 0;

  // required int32 roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryTimer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LotteryTimer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryTimer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryTimer::MergeFrom(const LotteryTimer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LotteryTimer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryTimer::CopyFrom(const LotteryTimer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryTimer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LotteryTimer::Swap(LotteryTimer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LotteryTimer::InternalSwap(LotteryTimer* other) {
  std::swap(roomid_, other->roomid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LotteryTimer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryTimer_descriptor_;
  metadata.reflection = LotteryTimer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LotteryTimer

// required int32 roomid = 1;
 bool LotteryTimer::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void LotteryTimer::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
 void LotteryTimer::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void LotteryTimer::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
 ::google::protobuf::int32 LotteryTimer::roomid() const {
  // @@protoc_insertion_point(field_get:LotteryTimer.roomid)
  return roomid_;
}
 void LotteryTimer::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:LotteryTimer.roomid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BeUpdateBattleCnt::kBattleCntFieldNumber;
const int BeUpdateBattleCnt::kTodayBattleCntFieldNumber;
#endif  // !_MSC_VER

BeUpdateBattleCnt::BeUpdateBattleCnt()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BeUpdateBattleCnt)
}

void BeUpdateBattleCnt::InitAsDefaultInstance() {
}

BeUpdateBattleCnt::BeUpdateBattleCnt(const BeUpdateBattleCnt& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BeUpdateBattleCnt)
}

void BeUpdateBattleCnt::SharedCtor() {
  _cached_size_ = 0;
  battlecnt_ = 0;
  todaybattlecnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeUpdateBattleCnt::~BeUpdateBattleCnt() {
  // @@protoc_insertion_point(destructor:BeUpdateBattleCnt)
  SharedDtor();
}

void BeUpdateBattleCnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeUpdateBattleCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeUpdateBattleCnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeUpdateBattleCnt_descriptor_;
}

const BeUpdateBattleCnt& BeUpdateBattleCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

BeUpdateBattleCnt* BeUpdateBattleCnt::default_instance_ = NULL;

BeUpdateBattleCnt* BeUpdateBattleCnt::New(::google::protobuf::Arena* arena) const {
  BeUpdateBattleCnt* n = new BeUpdateBattleCnt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeUpdateBattleCnt::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BeUpdateBattleCnt*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(battlecnt_, todaybattlecnt_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BeUpdateBattleCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BeUpdateBattleCnt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 battleCnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlecnt_)));
          set_has_battlecnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_todayBattleCnt;
        break;
      }

      // required int32 todayBattleCnt = 2;
      case 2: {
        if (tag == 16) {
         parse_todayBattleCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todaybattlecnt_)));
          set_has_todaybattlecnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BeUpdateBattleCnt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BeUpdateBattleCnt)
  return false;
#undef DO_
}

void BeUpdateBattleCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BeUpdateBattleCnt)
  // required int32 battleCnt = 1;
  if (has_battlecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battlecnt(), output);
  }

  // required int32 todayBattleCnt = 2;
  if (has_todaybattlecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->todaybattlecnt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BeUpdateBattleCnt)
}

::google::protobuf::uint8* BeUpdateBattleCnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BeUpdateBattleCnt)
  // required int32 battleCnt = 1;
  if (has_battlecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->battlecnt(), target);
  }

  // required int32 todayBattleCnt = 2;
  if (has_todaybattlecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->todaybattlecnt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BeUpdateBattleCnt)
  return target;
}

int BeUpdateBattleCnt::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_battlecnt()) {
    // required int32 battleCnt = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battlecnt());
  }

  if (has_todaybattlecnt()) {
    // required int32 todayBattleCnt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->todaybattlecnt());
  }

  return total_size;
}
int BeUpdateBattleCnt::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 battleCnt = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battlecnt());

    // required int32 todayBattleCnt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->todaybattlecnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeUpdateBattleCnt::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BeUpdateBattleCnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeUpdateBattleCnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeUpdateBattleCnt::MergeFrom(const BeUpdateBattleCnt& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battlecnt()) {
      set_battlecnt(from.battlecnt());
    }
    if (from.has_todaybattlecnt()) {
      set_todaybattlecnt(from.todaybattlecnt());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BeUpdateBattleCnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeUpdateBattleCnt::CopyFrom(const BeUpdateBattleCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeUpdateBattleCnt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BeUpdateBattleCnt::Swap(BeUpdateBattleCnt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeUpdateBattleCnt::InternalSwap(BeUpdateBattleCnt* other) {
  std::swap(battlecnt_, other->battlecnt_);
  std::swap(todaybattlecnt_, other->todaybattlecnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeUpdateBattleCnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeUpdateBattleCnt_descriptor_;
  metadata.reflection = BeUpdateBattleCnt_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeUpdateBattleCnt

// required int32 battleCnt = 1;
 bool BeUpdateBattleCnt::has_battlecnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void BeUpdateBattleCnt::set_has_battlecnt() {
  _has_bits_[0] |= 0x00000001u;
}
 void BeUpdateBattleCnt::clear_has_battlecnt() {
  _has_bits_[0] &= ~0x00000001u;
}
 void BeUpdateBattleCnt::clear_battlecnt() {
  battlecnt_ = 0;
  clear_has_battlecnt();
}
 ::google::protobuf::int32 BeUpdateBattleCnt::battlecnt() const {
  // @@protoc_insertion_point(field_get:BeUpdateBattleCnt.battleCnt)
  return battlecnt_;
}
 void BeUpdateBattleCnt::set_battlecnt(::google::protobuf::int32 value) {
  set_has_battlecnt();
  battlecnt_ = value;
  // @@protoc_insertion_point(field_set:BeUpdateBattleCnt.battleCnt)
}

// required int32 todayBattleCnt = 2;
 bool BeUpdateBattleCnt::has_todaybattlecnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void BeUpdateBattleCnt::set_has_todaybattlecnt() {
  _has_bits_[0] |= 0x00000002u;
}
 void BeUpdateBattleCnt::clear_has_todaybattlecnt() {
  _has_bits_[0] &= ~0x00000002u;
}
 void BeUpdateBattleCnt::clear_todaybattlecnt() {
  todaybattlecnt_ = 0;
  clear_has_todaybattlecnt();
}
 ::google::protobuf::int32 BeUpdateBattleCnt::todaybattlecnt() const {
  // @@protoc_insertion_point(field_get:BeUpdateBattleCnt.todayBattleCnt)
  return todaybattlecnt_;
}
 void BeUpdateBattleCnt::set_todaybattlecnt(::google::protobuf::int32 value) {
  set_has_todaybattlecnt();
  todaybattlecnt_ = value;
  // @@protoc_insertion_point(field_set:BeUpdateBattleCnt.todayBattleCnt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddExp_Req::kUidFieldNumber;
const int Admin_AddExp_Req::kExpFieldNumber;
const int Admin_AddExp_Req::kGidFieldNumber;
const int Admin_AddExp_Req::kAdminfdFieldNumber;
const int Admin_AddExp_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AddExp_Req::Admin_AddExp_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddExp_Req)
}

void Admin_AddExp_Req::InitAsDefaultInstance() {
}

Admin_AddExp_Req::Admin_AddExp_Req(const Admin_AddExp_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddExp_Req)
}

void Admin_AddExp_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  exp_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddExp_Req::~Admin_AddExp_Req() {
  // @@protoc_insertion_point(destructor:Admin_AddExp_Req)
  SharedDtor();
}

void Admin_AddExp_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddExp_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddExp_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddExp_Req_descriptor_;
}

const Admin_AddExp_Req& Admin_AddExp_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddExp_Req* Admin_AddExp_Req::default_instance_ = NULL;

Admin_AddExp_Req* Admin_AddExp_Req::New(::google::protobuf::Arena* arena) const {
  Admin_AddExp_Req* n = new Admin_AddExp_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddExp_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddExp_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, fromweb_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddExp_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddExp_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required int32 exp = 2;
      case 2: {
        if (tag == 16) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddExp_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddExp_Req)
  return false;
#undef DO_
}

void Admin_AddExp_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddExp_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddExp_Req)
}

::google::protobuf::uint8* Admin_AddExp_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddExp_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddExp_Req)
  return target;
}

int Admin_AddExp_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_exp()) {
    // required int32 exp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  if (has_gid()) {
    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_AddExp_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 exp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());

    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddExp_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddExp_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddExp_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddExp_Req::MergeFrom(const Admin_AddExp_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddExp_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddExp_Req::CopyFrom(const Admin_AddExp_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddExp_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Admin_AddExp_Req::Swap(Admin_AddExp_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddExp_Req::InternalSwap(Admin_AddExp_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(exp_, other->exp_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddExp_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddExp_Req_descriptor_;
  metadata.reflection = Admin_AddExp_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddExp_Req

// required int64 uid = 1;
 bool Admin_AddExp_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddExp_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddExp_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddExp_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddExp_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Req.uid)
  return uid_;
}
 void Admin_AddExp_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Req.uid)
}

// required int32 exp = 2;
 bool Admin_AddExp_Req::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddExp_Req::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddExp_Req::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddExp_Req::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
 ::google::protobuf::int32 Admin_AddExp_Req::exp() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Req.exp)
  return exp_;
}
 void Admin_AddExp_Req::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Req.exp)
}

// required int32 gid = 3;
 bool Admin_AddExp_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddExp_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddExp_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddExp_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddExp_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Req.gid)
  return gid_;
}
 void Admin_AddExp_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Req.gid)
}

// required int32 adminfd = 4;
 bool Admin_AddExp_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddExp_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddExp_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddExp_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddExp_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Req.adminfd)
  return adminfd_;
}
 void Admin_AddExp_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Req.adminfd)
}

// optional bool fromweb = 5 [default = false];
 bool Admin_AddExp_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddExp_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddExp_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddExp_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddExp_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Req.fromweb)
  return fromweb_;
}
 void Admin_AddExp_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddExp_Rsp::kUidFieldNumber;
const int Admin_AddExp_Rsp::kOldlevelFieldNumber;
const int Admin_AddExp_Rsp::kOldexpFieldNumber;
const int Admin_AddExp_Rsp::kNewlevelFieldNumber;
const int Admin_AddExp_Rsp::kNewexpFieldNumber;
const int Admin_AddExp_Rsp::kGidFieldNumber;
const int Admin_AddExp_Rsp::kAdminfdFieldNumber;
const int Admin_AddExp_Rsp::kFromwebFieldNumber;
const int Admin_AddExp_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_AddExp_Rsp::Admin_AddExp_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddExp_Rsp)
}

void Admin_AddExp_Rsp::InitAsDefaultInstance() {
}

Admin_AddExp_Rsp::Admin_AddExp_Rsp(const Admin_AddExp_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddExp_Rsp)
}

void Admin_AddExp_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  oldlevel_ = 0;
  oldexp_ = 0;
  newlevel_ = 0;
  newexp_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddExp_Rsp::~Admin_AddExp_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_AddExp_Rsp)
  SharedDtor();
}

void Admin_AddExp_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddExp_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddExp_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddExp_Rsp_descriptor_;
}

const Admin_AddExp_Rsp& Admin_AddExp_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddExp_Rsp* Admin_AddExp_Rsp::default_instance_ = NULL;

Admin_AddExp_Rsp* Admin_AddExp_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_AddExp_Rsp* n = new Admin_AddExp_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddExp_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddExp_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, fromweb_);
  }
  succ_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddExp_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddExp_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oldlevel;
        break;
      }

      // required int32 oldlevel = 2;
      case 2: {
        if (tag == 16) {
         parse_oldlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldlevel_)));
          set_has_oldlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_oldexp;
        break;
      }

      // required int32 oldexp = 3;
      case 3: {
        if (tag == 24) {
         parse_oldexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldexp_)));
          set_has_oldexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_newlevel;
        break;
      }

      // required int32 newlevel = 4;
      case 4: {
        if (tag == 32) {
         parse_newlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newlevel_)));
          set_has_newlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_newexp;
        break;
      }

      // required int32 newexp = 5;
      case 5: {
        if (tag == 40) {
         parse_newexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newexp_)));
          set_has_newexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gid;
        break;
      }

      // required int32 gid = 6;
      case 6: {
        if (tag == 48) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 7;
      case 7: {
        if (tag == 56) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_succ;
        break;
      }

      // required int32 succ = 9;
      case 9: {
        if (tag == 72) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddExp_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddExp_Rsp)
  return false;
#undef DO_
}

void Admin_AddExp_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddExp_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 oldlevel = 2;
  if (has_oldlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oldlevel(), output);
  }

  // required int32 oldexp = 3;
  if (has_oldexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oldexp(), output);
  }

  // required int32 newlevel = 4;
  if (has_newlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->newlevel(), output);
  }

  // required int32 newexp = 5;
  if (has_newexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->newexp(), output);
  }

  // required int32 gid = 6;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gid(), output);
  }

  // required int32 adminfd = 7;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->adminfd(), output);
  }

  // optional bool fromweb = 8 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fromweb(), output);
  }

  // required int32 succ = 9;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddExp_Rsp)
}

::google::protobuf::uint8* Admin_AddExp_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddExp_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 oldlevel = 2;
  if (has_oldlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oldlevel(), target);
  }

  // required int32 oldexp = 3;
  if (has_oldexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oldexp(), target);
  }

  // required int32 newlevel = 4;
  if (has_newlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->newlevel(), target);
  }

  // required int32 newexp = 5;
  if (has_newexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->newexp(), target);
  }

  // required int32 gid = 6;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gid(), target);
  }

  // required int32 adminfd = 7;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->adminfd(), target);
  }

  // optional bool fromweb = 8 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fromweb(), target);
  }

  // required int32 succ = 9;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddExp_Rsp)
  return target;
}

int Admin_AddExp_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_oldlevel()) {
    // required int32 oldlevel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldlevel());
  }

  if (has_oldexp()) {
    // required int32 oldexp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldexp());
  }

  if (has_newlevel()) {
    // required int32 newlevel = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newlevel());
  }

  if (has_newexp()) {
    // required int32 newexp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newexp());
  }

  if (has_gid()) {
    // required int32 gid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_AddExp_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000017f) ^ 0x0000017f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 oldlevel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldlevel());

    // required int32 oldexp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldexp());

    // required int32 newlevel = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newlevel());

    // required int32 newexp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newexp());

    // required int32 gid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 8 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddExp_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddExp_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddExp_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddExp_Rsp::MergeFrom(const Admin_AddExp_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_oldlevel()) {
      set_oldlevel(from.oldlevel());
    }
    if (from.has_oldexp()) {
      set_oldexp(from.oldexp());
    }
    if (from.has_newlevel()) {
      set_newlevel(from.newlevel());
    }
    if (from.has_newexp()) {
      set_newexp(from.newexp());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddExp_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddExp_Rsp::CopyFrom(const Admin_AddExp_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddExp_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000017f) != 0x0000017f) return false;

  return true;
}

void Admin_AddExp_Rsp::Swap(Admin_AddExp_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddExp_Rsp::InternalSwap(Admin_AddExp_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(oldlevel_, other->oldlevel_);
  std::swap(oldexp_, other->oldexp_);
  std::swap(newlevel_, other->newlevel_);
  std::swap(newexp_, other->newexp_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddExp_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddExp_Rsp_descriptor_;
  metadata.reflection = Admin_AddExp_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddExp_Rsp

// required int64 uid = 1;
 bool Admin_AddExp_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddExp_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddExp_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddExp_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddExp_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Rsp.uid)
  return uid_;
}
 void Admin_AddExp_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Rsp.uid)
}

// required int32 oldlevel = 2;
 bool Admin_AddExp_Rsp::has_oldlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddExp_Rsp::set_has_oldlevel() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddExp_Rsp::clear_has_oldlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddExp_Rsp::clear_oldlevel() {
  oldlevel_ = 0;
  clear_has_oldlevel();
}
 ::google::protobuf::int32 Admin_AddExp_Rsp::oldlevel() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Rsp.oldlevel)
  return oldlevel_;
}
 void Admin_AddExp_Rsp::set_oldlevel(::google::protobuf::int32 value) {
  set_has_oldlevel();
  oldlevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Rsp.oldlevel)
}

// required int32 oldexp = 3;
 bool Admin_AddExp_Rsp::has_oldexp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddExp_Rsp::set_has_oldexp() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddExp_Rsp::clear_has_oldexp() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddExp_Rsp::clear_oldexp() {
  oldexp_ = 0;
  clear_has_oldexp();
}
 ::google::protobuf::int32 Admin_AddExp_Rsp::oldexp() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Rsp.oldexp)
  return oldexp_;
}
 void Admin_AddExp_Rsp::set_oldexp(::google::protobuf::int32 value) {
  set_has_oldexp();
  oldexp_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Rsp.oldexp)
}

// required int32 newlevel = 4;
 bool Admin_AddExp_Rsp::has_newlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddExp_Rsp::set_has_newlevel() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddExp_Rsp::clear_has_newlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddExp_Rsp::clear_newlevel() {
  newlevel_ = 0;
  clear_has_newlevel();
}
 ::google::protobuf::int32 Admin_AddExp_Rsp::newlevel() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Rsp.newlevel)
  return newlevel_;
}
 void Admin_AddExp_Rsp::set_newlevel(::google::protobuf::int32 value) {
  set_has_newlevel();
  newlevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Rsp.newlevel)
}

// required int32 newexp = 5;
 bool Admin_AddExp_Rsp::has_newexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddExp_Rsp::set_has_newexp() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddExp_Rsp::clear_has_newexp() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddExp_Rsp::clear_newexp() {
  newexp_ = 0;
  clear_has_newexp();
}
 ::google::protobuf::int32 Admin_AddExp_Rsp::newexp() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Rsp.newexp)
  return newexp_;
}
 void Admin_AddExp_Rsp::set_newexp(::google::protobuf::int32 value) {
  set_has_newexp();
  newexp_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Rsp.newexp)
}

// required int32 gid = 6;
 bool Admin_AddExp_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_AddExp_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_AddExp_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_AddExp_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddExp_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Rsp.gid)
  return gid_;
}
 void Admin_AddExp_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Rsp.gid)
}

// required int32 adminfd = 7;
 bool Admin_AddExp_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_AddExp_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_AddExp_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_AddExp_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddExp_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Rsp.adminfd)
  return adminfd_;
}
 void Admin_AddExp_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Rsp.adminfd)
}

// optional bool fromweb = 8 [default = false];
 bool Admin_AddExp_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_AddExp_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_AddExp_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_AddExp_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddExp_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Rsp.fromweb)
  return fromweb_;
}
 void Admin_AddExp_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Rsp.fromweb)
}

// required int32 succ = 9;
 bool Admin_AddExp_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Admin_AddExp_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000100u;
}
 void Admin_AddExp_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Admin_AddExp_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_AddExp_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_AddExp_Rsp.succ)
  return succ_;
}
 void Admin_AddExp_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddExp_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddGold_Req::kUidFieldNumber;
const int Admin_AddGold_Req::kGoldFieldNumber;
const int Admin_AddGold_Req::kGidFieldNumber;
const int Admin_AddGold_Req::kAdminfdFieldNumber;
const int Admin_AddGold_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AddGold_Req::Admin_AddGold_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddGold_Req)
}

void Admin_AddGold_Req::InitAsDefaultInstance() {
}

Admin_AddGold_Req::Admin_AddGold_Req(const Admin_AddGold_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddGold_Req)
}

void Admin_AddGold_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  gold_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddGold_Req::~Admin_AddGold_Req() {
  // @@protoc_insertion_point(destructor:Admin_AddGold_Req)
  SharedDtor();
}

void Admin_AddGold_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddGold_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddGold_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddGold_Req_descriptor_;
}

const Admin_AddGold_Req& Admin_AddGold_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddGold_Req* Admin_AddGold_Req::default_instance_ = NULL;

Admin_AddGold_Req* Admin_AddGold_Req::New(::google::protobuf::Arena* arena) const {
  Admin_AddGold_Req* n = new Admin_AddGold_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddGold_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddGold_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, fromweb_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddGold_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddGold_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // required int32 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddGold_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddGold_Req)
  return false;
#undef DO_
}

void Admin_AddGold_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddGold_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddGold_Req)
}

::google::protobuf::uint8* Admin_AddGold_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddGold_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddGold_Req)
  return target;
}

int Admin_AddGold_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_gold()) {
    // required int32 gold = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());
  }

  if (has_gid()) {
    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_AddGold_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 gold = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());

    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddGold_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddGold_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddGold_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddGold_Req::MergeFrom(const Admin_AddGold_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddGold_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddGold_Req::CopyFrom(const Admin_AddGold_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddGold_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Admin_AddGold_Req::Swap(Admin_AddGold_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddGold_Req::InternalSwap(Admin_AddGold_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(gold_, other->gold_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddGold_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddGold_Req_descriptor_;
  metadata.reflection = Admin_AddGold_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddGold_Req

// required int64 uid = 1;
 bool Admin_AddGold_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddGold_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddGold_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddGold_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddGold_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddGold_Req.uid)
  return uid_;
}
 void Admin_AddGold_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGold_Req.uid)
}

// required int32 gold = 2;
 bool Admin_AddGold_Req::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddGold_Req::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddGold_Req::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddGold_Req::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
 ::google::protobuf::int32 Admin_AddGold_Req::gold() const {
  // @@protoc_insertion_point(field_get:Admin_AddGold_Req.gold)
  return gold_;
}
 void Admin_AddGold_Req::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGold_Req.gold)
}

// required int32 gid = 3;
 bool Admin_AddGold_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddGold_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddGold_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddGold_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddGold_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddGold_Req.gid)
  return gid_;
}
 void Admin_AddGold_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGold_Req.gid)
}

// required int32 adminfd = 4;
 bool Admin_AddGold_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddGold_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddGold_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddGold_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddGold_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddGold_Req.adminfd)
  return adminfd_;
}
 void Admin_AddGold_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGold_Req.adminfd)
}

// optional bool fromweb = 5 [default = false];
 bool Admin_AddGold_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddGold_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddGold_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddGold_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddGold_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddGold_Req.fromweb)
  return fromweb_;
}
 void Admin_AddGold_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGold_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddGold_Rsp::kUidFieldNumber;
const int Admin_AddGold_Rsp::kOldgoldFieldNumber;
const int Admin_AddGold_Rsp::kNewgoldFieldNumber;
const int Admin_AddGold_Rsp::kGidFieldNumber;
const int Admin_AddGold_Rsp::kAdminfdFieldNumber;
const int Admin_AddGold_Rsp::kFromwebFieldNumber;
const int Admin_AddGold_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_AddGold_Rsp::Admin_AddGold_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddGold_Rsp)
}

void Admin_AddGold_Rsp::InitAsDefaultInstance() {
}

Admin_AddGold_Rsp::Admin_AddGold_Rsp(const Admin_AddGold_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddGold_Rsp)
}

void Admin_AddGold_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  oldgold_ = 0;
  newgold_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddGold_Rsp::~Admin_AddGold_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_AddGold_Rsp)
  SharedDtor();
}

void Admin_AddGold_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddGold_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddGold_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddGold_Rsp_descriptor_;
}

const Admin_AddGold_Rsp& Admin_AddGold_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddGold_Rsp* Admin_AddGold_Rsp::default_instance_ = NULL;

Admin_AddGold_Rsp* Admin_AddGold_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_AddGold_Rsp* n = new Admin_AddGold_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddGold_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddGold_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, succ_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddGold_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddGold_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oldgold;
        break;
      }

      // required int32 oldgold = 2;
      case 2: {
        if (tag == 16) {
         parse_oldgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldgold_)));
          set_has_oldgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_newgold;
        break;
      }

      // required int32 newgold = 3;
      case 3: {
        if (tag == 24) {
         parse_newgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newgold_)));
          set_has_newgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }

      // required int32 gid = 4;
      case 4: {
        if (tag == 32) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 5;
      case 5: {
        if (tag == 40) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_succ;
        break;
      }

      // required int32 succ = 7;
      case 7: {
        if (tag == 56) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddGold_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddGold_Rsp)
  return false;
#undef DO_
}

void Admin_AddGold_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddGold_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 oldgold = 2;
  if (has_oldgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oldgold(), output);
  }

  // required int32 newgold = 3;
  if (has_newgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->newgold(), output);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fromweb(), output);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddGold_Rsp)
}

::google::protobuf::uint8* Admin_AddGold_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddGold_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 oldgold = 2;
  if (has_oldgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oldgold(), target);
  }

  // required int32 newgold = 3;
  if (has_newgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->newgold(), target);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fromweb(), target);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddGold_Rsp)
  return target;
}

int Admin_AddGold_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_oldgold()) {
    // required int32 oldgold = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldgold());
  }

  if (has_newgold()) {
    // required int32 newgold = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newgold());
  }

  if (has_gid()) {
    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_AddGold_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000005f) ^ 0x0000005f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 oldgold = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldgold());

    // required int32 newgold = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newgold());

    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddGold_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddGold_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddGold_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddGold_Rsp::MergeFrom(const Admin_AddGold_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_oldgold()) {
      set_oldgold(from.oldgold());
    }
    if (from.has_newgold()) {
      set_newgold(from.newgold());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddGold_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddGold_Rsp::CopyFrom(const Admin_AddGold_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddGold_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void Admin_AddGold_Rsp::Swap(Admin_AddGold_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddGold_Rsp::InternalSwap(Admin_AddGold_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(oldgold_, other->oldgold_);
  std::swap(newgold_, other->newgold_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddGold_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddGold_Rsp_descriptor_;
  metadata.reflection = Admin_AddGold_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddGold_Rsp

// required int64 uid = 1;
 bool Admin_AddGold_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddGold_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddGold_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddGold_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddGold_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddGold_Rsp.uid)
  return uid_;
}
 void Admin_AddGold_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGold_Rsp.uid)
}

// required int32 oldgold = 2;
 bool Admin_AddGold_Rsp::has_oldgold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddGold_Rsp::set_has_oldgold() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddGold_Rsp::clear_has_oldgold() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddGold_Rsp::clear_oldgold() {
  oldgold_ = 0;
  clear_has_oldgold();
}
 ::google::protobuf::int32 Admin_AddGold_Rsp::oldgold() const {
  // @@protoc_insertion_point(field_get:Admin_AddGold_Rsp.oldgold)
  return oldgold_;
}
 void Admin_AddGold_Rsp::set_oldgold(::google::protobuf::int32 value) {
  set_has_oldgold();
  oldgold_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGold_Rsp.oldgold)
}

// required int32 newgold = 3;
 bool Admin_AddGold_Rsp::has_newgold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddGold_Rsp::set_has_newgold() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddGold_Rsp::clear_has_newgold() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddGold_Rsp::clear_newgold() {
  newgold_ = 0;
  clear_has_newgold();
}
 ::google::protobuf::int32 Admin_AddGold_Rsp::newgold() const {
  // @@protoc_insertion_point(field_get:Admin_AddGold_Rsp.newgold)
  return newgold_;
}
 void Admin_AddGold_Rsp::set_newgold(::google::protobuf::int32 value) {
  set_has_newgold();
  newgold_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGold_Rsp.newgold)
}

// required int32 gid = 4;
 bool Admin_AddGold_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddGold_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddGold_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddGold_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddGold_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddGold_Rsp.gid)
  return gid_;
}
 void Admin_AddGold_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGold_Rsp.gid)
}

// required int32 adminfd = 5;
 bool Admin_AddGold_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddGold_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddGold_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddGold_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddGold_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddGold_Rsp.adminfd)
  return adminfd_;
}
 void Admin_AddGold_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGold_Rsp.adminfd)
}

// optional bool fromweb = 6 [default = false];
 bool Admin_AddGold_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_AddGold_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_AddGold_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_AddGold_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddGold_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddGold_Rsp.fromweb)
  return fromweb_;
}
 void Admin_AddGold_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGold_Rsp.fromweb)
}

// required int32 succ = 7;
 bool Admin_AddGold_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_AddGold_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_AddGold_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_AddGold_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_AddGold_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_AddGold_Rsp.succ)
  return succ_;
}
 void Admin_AddGold_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGold_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_Clear_Req::kUidFieldNumber;
const int Admin_Clear_Req::kGidFieldNumber;
const int Admin_Clear_Req::kAdminfdFieldNumber;
const int Admin_Clear_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_Clear_Req::Admin_Clear_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_Clear_Req)
}

void Admin_Clear_Req::InitAsDefaultInstance() {
}

Admin_Clear_Req::Admin_Clear_Req(const Admin_Clear_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_Clear_Req)
}

void Admin_Clear_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_Clear_Req::~Admin_Clear_Req() {
  // @@protoc_insertion_point(destructor:Admin_Clear_Req)
  SharedDtor();
}

void Admin_Clear_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_Clear_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_Clear_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_Clear_Req_descriptor_;
}

const Admin_Clear_Req& Admin_Clear_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_Clear_Req* Admin_Clear_Req::default_instance_ = NULL;

Admin_Clear_Req* Admin_Clear_Req::New(::google::protobuf::Arena* arena) const {
  Admin_Clear_Req* n = new Admin_Clear_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_Clear_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_Clear_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, fromweb_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_Clear_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_Clear_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // required int32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 3;
      case 3: {
        if (tag == 24) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_Clear_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_Clear_Req)
  return false;
#undef DO_
}

void Admin_Clear_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_Clear_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gid(), output);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adminfd(), output);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_Clear_Req)
}

::google::protobuf::uint8* Admin_Clear_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_Clear_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gid(), target);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adminfd(), target);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_Clear_Req)
  return target;
}

int Admin_Clear_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_gid()) {
    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_Clear_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_Clear_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_Clear_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_Clear_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_Clear_Req::MergeFrom(const Admin_Clear_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_Clear_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_Clear_Req::CopyFrom(const Admin_Clear_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_Clear_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Admin_Clear_Req::Swap(Admin_Clear_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_Clear_Req::InternalSwap(Admin_Clear_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_Clear_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_Clear_Req_descriptor_;
  metadata.reflection = Admin_Clear_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_Clear_Req

// required int64 uid = 1;
 bool Admin_Clear_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_Clear_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_Clear_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_Clear_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_Clear_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_Clear_Req.uid)
  return uid_;
}
 void Admin_Clear_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_Clear_Req.uid)
}

// required int32 gid = 2;
 bool Admin_Clear_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_Clear_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_Clear_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_Clear_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_Clear_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_Clear_Req.gid)
  return gid_;
}
 void Admin_Clear_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_Clear_Req.gid)
}

// required int32 adminfd = 3;
 bool Admin_Clear_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_Clear_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_Clear_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_Clear_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_Clear_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_Clear_Req.adminfd)
  return adminfd_;
}
 void Admin_Clear_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_Clear_Req.adminfd)
}

// optional bool fromweb = 4 [default = false];
 bool Admin_Clear_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_Clear_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_Clear_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_Clear_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_Clear_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_Clear_Req.fromweb)
  return fromweb_;
}
 void Admin_Clear_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_Clear_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_Clear_Rsp::kUidFieldNumber;
const int Admin_Clear_Rsp::kGidFieldNumber;
const int Admin_Clear_Rsp::kAdminfdFieldNumber;
const int Admin_Clear_Rsp::kFromwebFieldNumber;
const int Admin_Clear_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_Clear_Rsp::Admin_Clear_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_Clear_Rsp)
}

void Admin_Clear_Rsp::InitAsDefaultInstance() {
}

Admin_Clear_Rsp::Admin_Clear_Rsp(const Admin_Clear_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_Clear_Rsp)
}

void Admin_Clear_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_Clear_Rsp::~Admin_Clear_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_Clear_Rsp)
  SharedDtor();
}

void Admin_Clear_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_Clear_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_Clear_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_Clear_Rsp_descriptor_;
}

const Admin_Clear_Rsp& Admin_Clear_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_Clear_Rsp* Admin_Clear_Rsp::default_instance_ = NULL;

Admin_Clear_Rsp* Admin_Clear_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_Clear_Rsp* n = new Admin_Clear_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_Clear_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_Clear_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, succ_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_Clear_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_Clear_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // required int32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 3;
      case 3: {
        if (tag == 24) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_succ;
        break;
      }

      // required int32 succ = 5;
      case 5: {
        if (tag == 40) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_Clear_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_Clear_Rsp)
  return false;
#undef DO_
}

void Admin_Clear_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_Clear_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gid(), output);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adminfd(), output);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }

  // required int32 succ = 5;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_Clear_Rsp)
}

::google::protobuf::uint8* Admin_Clear_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_Clear_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gid(), target);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adminfd(), target);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }

  // required int32 succ = 5;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_Clear_Rsp)
  return target;
}

int Admin_Clear_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_gid()) {
    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_Clear_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_Clear_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_Clear_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_Clear_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_Clear_Rsp::MergeFrom(const Admin_Clear_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_Clear_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_Clear_Rsp::CopyFrom(const Admin_Clear_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_Clear_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void Admin_Clear_Rsp::Swap(Admin_Clear_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_Clear_Rsp::InternalSwap(Admin_Clear_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_Clear_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_Clear_Rsp_descriptor_;
  metadata.reflection = Admin_Clear_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_Clear_Rsp

// required int64 uid = 1;
 bool Admin_Clear_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_Clear_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_Clear_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_Clear_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_Clear_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_Clear_Rsp.uid)
  return uid_;
}
 void Admin_Clear_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_Clear_Rsp.uid)
}

// required int32 gid = 2;
 bool Admin_Clear_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_Clear_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_Clear_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_Clear_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_Clear_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_Clear_Rsp.gid)
  return gid_;
}
 void Admin_Clear_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_Clear_Rsp.gid)
}

// required int32 adminfd = 3;
 bool Admin_Clear_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_Clear_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_Clear_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_Clear_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_Clear_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_Clear_Rsp.adminfd)
  return adminfd_;
}
 void Admin_Clear_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_Clear_Rsp.adminfd)
}

// optional bool fromweb = 4 [default = false];
 bool Admin_Clear_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_Clear_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_Clear_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_Clear_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_Clear_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_Clear_Rsp.fromweb)
  return fromweb_;
}
 void Admin_Clear_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_Clear_Rsp.fromweb)
}

// required int32 succ = 5;
 bool Admin_Clear_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_Clear_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_Clear_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_Clear_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_Clear_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_Clear_Rsp.succ)
  return succ_;
}
 void Admin_Clear_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_Clear_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_SetVal_Req::kUidFieldNumber;
const int Admin_SetVal_Req::kGidFieldNumber;
const int Admin_SetVal_Req::kAdminfdFieldNumber;
const int Admin_SetVal_Req::kFromwebFieldNumber;
const int Admin_SetVal_Req::kMapIdFieldNumber;
const int Admin_SetVal_Req::kValTypeFieldNumber;
const int Admin_SetVal_Req::kValValueFieldNumber;
const int Admin_SetVal_Req::kValValue2FieldNumber;
#endif  // !_MSC_VER

Admin_SetVal_Req::Admin_SetVal_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_SetVal_Req)
}

void Admin_SetVal_Req::InitAsDefaultInstance() {
}

Admin_SetVal_Req::Admin_SetVal_Req(const Admin_SetVal_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_SetVal_Req)
}

void Admin_SetVal_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  map_id_ = 0;
  val_type_ = 0;
  val_value_ = GOOGLE_LONGLONG(0);
  val_value2_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_SetVal_Req::~Admin_SetVal_Req() {
  // @@protoc_insertion_point(destructor:Admin_SetVal_Req)
  SharedDtor();
}

void Admin_SetVal_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_SetVal_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_SetVal_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_SetVal_Req_descriptor_;
}

const Admin_SetVal_Req& Admin_SetVal_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_SetVal_Req* Admin_SetVal_Req::default_instance_ = NULL;

Admin_SetVal_Req* Admin_SetVal_Req::New(::google::protobuf::Arena* arena) const {
  Admin_SetVal_Req* n = new Admin_SetVal_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_SetVal_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_SetVal_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, val_type_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_SetVal_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_SetVal_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // required int32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 3;
      case 3: {
        if (tag == 24) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_val_type;
        break;
      }

      // optional int32 val_type = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_val_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_type_)));
          set_has_val_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_val_value;
        break;
      }

      // optional int64 val_value = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_val_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_value_)));
          set_has_val_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_val_value2;
        break;
      }

      // optional int64 val_value2 = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_val_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_value2_)));
          set_has_val_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_SetVal_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_SetVal_Req)
  return false;
#undef DO_
}

void Admin_SetVal_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_SetVal_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gid(), output);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adminfd(), output);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }

  // optional int32 map_id = 5 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_id(), output);
  }

  // optional int32 val_type = 6 [default = 0];
  if (has_val_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->val_type(), output);
  }

  // optional int64 val_value = 7 [default = 0];
  if (has_val_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->val_value(), output);
  }

  // optional int64 val_value2 = 8 [default = 0];
  if (has_val_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->val_value2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_SetVal_Req)
}

::google::protobuf::uint8* Admin_SetVal_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_SetVal_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gid(), target);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adminfd(), target);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }

  // optional int32 map_id = 5 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_id(), target);
  }

  // optional int32 val_type = 6 [default = 0];
  if (has_val_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->val_type(), target);
  }

  // optional int64 val_value = 7 [default = 0];
  if (has_val_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->val_value(), target);
  }

  // optional int64 val_value2 = 8 [default = 0];
  if (has_val_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->val_value2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_SetVal_Req)
  return target;
}

int Admin_SetVal_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_gid()) {
    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_SetVal_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248) {
    // optional bool fromweb = 4 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

    // optional int32 map_id = 5 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // optional int32 val_type = 6 [default = 0];
    if (has_val_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_type());
    }

    // optional int64 val_value = 7 [default = 0];
    if (has_val_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val_value());
    }

    // optional int64 val_value2 = 8 [default = 0];
    if (has_val_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val_value2());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_SetVal_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_SetVal_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_SetVal_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_SetVal_Req::MergeFrom(const Admin_SetVal_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_val_type()) {
      set_val_type(from.val_type());
    }
    if (from.has_val_value()) {
      set_val_value(from.val_value());
    }
    if (from.has_val_value2()) {
      set_val_value2(from.val_value2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_SetVal_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_SetVal_Req::CopyFrom(const Admin_SetVal_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_SetVal_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Admin_SetVal_Req::Swap(Admin_SetVal_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_SetVal_Req::InternalSwap(Admin_SetVal_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(map_id_, other->map_id_);
  std::swap(val_type_, other->val_type_);
  std::swap(val_value_, other->val_value_);
  std::swap(val_value2_, other->val_value2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_SetVal_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_SetVal_Req_descriptor_;
  metadata.reflection = Admin_SetVal_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_SetVal_Req

// required int64 uid = 1;
 bool Admin_SetVal_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_SetVal_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_SetVal_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_SetVal_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_SetVal_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Req.uid)
  return uid_;
}
 void Admin_SetVal_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Req.uid)
}

// required int32 gid = 2;
 bool Admin_SetVal_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_SetVal_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_SetVal_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_SetVal_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_SetVal_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Req.gid)
  return gid_;
}
 void Admin_SetVal_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Req.gid)
}

// required int32 adminfd = 3;
 bool Admin_SetVal_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_SetVal_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_SetVal_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_SetVal_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_SetVal_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Req.adminfd)
  return adminfd_;
}
 void Admin_SetVal_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Req.adminfd)
}

// optional bool fromweb = 4 [default = false];
 bool Admin_SetVal_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_SetVal_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_SetVal_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_SetVal_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_SetVal_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Req.fromweb)
  return fromweb_;
}
 void Admin_SetVal_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Req.fromweb)
}

// optional int32 map_id = 5 [default = 0];
 bool Admin_SetVal_Req::has_map_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_SetVal_Req::set_has_map_id() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_SetVal_Req::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_SetVal_Req::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
 ::google::protobuf::int32 Admin_SetVal_Req::map_id() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Req.map_id)
  return map_id_;
}
 void Admin_SetVal_Req::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Req.map_id)
}

// optional int32 val_type = 6 [default = 0];
 bool Admin_SetVal_Req::has_val_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_SetVal_Req::set_has_val_type() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_SetVal_Req::clear_has_val_type() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_SetVal_Req::clear_val_type() {
  val_type_ = 0;
  clear_has_val_type();
}
 ::google::protobuf::int32 Admin_SetVal_Req::val_type() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Req.val_type)
  return val_type_;
}
 void Admin_SetVal_Req::set_val_type(::google::protobuf::int32 value) {
  set_has_val_type();
  val_type_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Req.val_type)
}

// optional int64 val_value = 7 [default = 0];
 bool Admin_SetVal_Req::has_val_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_SetVal_Req::set_has_val_value() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_SetVal_Req::clear_has_val_value() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_SetVal_Req::clear_val_value() {
  val_value_ = GOOGLE_LONGLONG(0);
  clear_has_val_value();
}
 ::google::protobuf::int64 Admin_SetVal_Req::val_value() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Req.val_value)
  return val_value_;
}
 void Admin_SetVal_Req::set_val_value(::google::protobuf::int64 value) {
  set_has_val_value();
  val_value_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Req.val_value)
}

// optional int64 val_value2 = 8 [default = 0];
 bool Admin_SetVal_Req::has_val_value2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_SetVal_Req::set_has_val_value2() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_SetVal_Req::clear_has_val_value2() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_SetVal_Req::clear_val_value2() {
  val_value2_ = GOOGLE_LONGLONG(0);
  clear_has_val_value2();
}
 ::google::protobuf::int64 Admin_SetVal_Req::val_value2() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Req.val_value2)
  return val_value2_;
}
 void Admin_SetVal_Req::set_val_value2(::google::protobuf::int64 value) {
  set_has_val_value2();
  val_value2_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Req.val_value2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_SetVal_Rsp::kUidFieldNumber;
const int Admin_SetVal_Rsp::kGidFieldNumber;
const int Admin_SetVal_Rsp::kAdminfdFieldNumber;
const int Admin_SetVal_Rsp::kFromwebFieldNumber;
const int Admin_SetVal_Rsp::kSuccFieldNumber;
const int Admin_SetVal_Rsp::kMapIdFieldNumber;
const int Admin_SetVal_Rsp::kValTypeFieldNumber;
const int Admin_SetVal_Rsp::kValValueFieldNumber;
const int Admin_SetVal_Rsp::kValValue2FieldNumber;
#endif  // !_MSC_VER

Admin_SetVal_Rsp::Admin_SetVal_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_SetVal_Rsp)
}

void Admin_SetVal_Rsp::InitAsDefaultInstance() {
}

Admin_SetVal_Rsp::Admin_SetVal_Rsp(const Admin_SetVal_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_SetVal_Rsp)
}

void Admin_SetVal_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  map_id_ = 0;
  val_type_ = 0;
  val_value_ = GOOGLE_LONGLONG(0);
  val_value2_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_SetVal_Rsp::~Admin_SetVal_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_SetVal_Rsp)
  SharedDtor();
}

void Admin_SetVal_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_SetVal_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_SetVal_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_SetVal_Rsp_descriptor_;
}

const Admin_SetVal_Rsp& Admin_SetVal_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_SetVal_Rsp* Admin_SetVal_Rsp::default_instance_ = NULL;

Admin_SetVal_Rsp* Admin_SetVal_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_SetVal_Rsp* n = new Admin_SetVal_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_SetVal_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_SetVal_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, val_value_);
  }
  val_value2_ = GOOGLE_LONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_SetVal_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_SetVal_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // required int32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 3;
      case 3: {
        if (tag == 24) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_succ;
        break;
      }

      // required int32 succ = 5;
      case 5: {
        if (tag == 40) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_val_type;
        break;
      }

      // optional int32 val_type = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_val_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_type_)));
          set_has_val_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_val_value;
        break;
      }

      // optional int64 val_value = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_val_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_value_)));
          set_has_val_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_val_value2;
        break;
      }

      // optional int64 val_value2 = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_val_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_value2_)));
          set_has_val_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_SetVal_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_SetVal_Rsp)
  return false;
#undef DO_
}

void Admin_SetVal_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_SetVal_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gid(), output);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adminfd(), output);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }

  // required int32 succ = 5;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->succ(), output);
  }

  // optional int32 map_id = 6 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->map_id(), output);
  }

  // optional int32 val_type = 7 [default = 0];
  if (has_val_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->val_type(), output);
  }

  // optional int64 val_value = 8 [default = 0];
  if (has_val_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->val_value(), output);
  }

  // optional int64 val_value2 = 9 [default = 0];
  if (has_val_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->val_value2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_SetVal_Rsp)
}

::google::protobuf::uint8* Admin_SetVal_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_SetVal_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gid(), target);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adminfd(), target);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }

  // required int32 succ = 5;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->succ(), target);
  }

  // optional int32 map_id = 6 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->map_id(), target);
  }

  // optional int32 val_type = 7 [default = 0];
  if (has_val_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->val_type(), target);
  }

  // optional int64 val_value = 8 [default = 0];
  if (has_val_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->val_value(), target);
  }

  // optional int64 val_value2 = 9 [default = 0];
  if (has_val_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->val_value2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_SetVal_Rsp)
  return target;
}

int Admin_SetVal_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_gid()) {
    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_SetVal_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 232) {
    // optional bool fromweb = 4 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

    // optional int32 map_id = 6 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // optional int32 val_type = 7 [default = 0];
    if (has_val_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_type());
    }

    // optional int64 val_value = 8 [default = 0];
    if (has_val_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val_value());
    }

  }
  // optional int64 val_value2 = 9 [default = 0];
  if (has_val_value2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->val_value2());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_SetVal_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_SetVal_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_SetVal_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_SetVal_Rsp::MergeFrom(const Admin_SetVal_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_val_type()) {
      set_val_type(from.val_type());
    }
    if (from.has_val_value()) {
      set_val_value(from.val_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_val_value2()) {
      set_val_value2(from.val_value2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_SetVal_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_SetVal_Rsp::CopyFrom(const Admin_SetVal_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_SetVal_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void Admin_SetVal_Rsp::Swap(Admin_SetVal_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_SetVal_Rsp::InternalSwap(Admin_SetVal_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(map_id_, other->map_id_);
  std::swap(val_type_, other->val_type_);
  std::swap(val_value_, other->val_value_);
  std::swap(val_value2_, other->val_value2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_SetVal_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_SetVal_Rsp_descriptor_;
  metadata.reflection = Admin_SetVal_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_SetVal_Rsp

// required int64 uid = 1;
 bool Admin_SetVal_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_SetVal_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_SetVal_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_SetVal_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_SetVal_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Rsp.uid)
  return uid_;
}
 void Admin_SetVal_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Rsp.uid)
}

// required int32 gid = 2;
 bool Admin_SetVal_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_SetVal_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_SetVal_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_SetVal_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_SetVal_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Rsp.gid)
  return gid_;
}
 void Admin_SetVal_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Rsp.gid)
}

// required int32 adminfd = 3;
 bool Admin_SetVal_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_SetVal_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_SetVal_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_SetVal_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_SetVal_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Rsp.adminfd)
  return adminfd_;
}
 void Admin_SetVal_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Rsp.adminfd)
}

// optional bool fromweb = 4 [default = false];
 bool Admin_SetVal_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_SetVal_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_SetVal_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_SetVal_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_SetVal_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Rsp.fromweb)
  return fromweb_;
}
 void Admin_SetVal_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Rsp.fromweb)
}

// required int32 succ = 5;
 bool Admin_SetVal_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_SetVal_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_SetVal_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_SetVal_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_SetVal_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Rsp.succ)
  return succ_;
}
 void Admin_SetVal_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Rsp.succ)
}

// optional int32 map_id = 6 [default = 0];
 bool Admin_SetVal_Rsp::has_map_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_SetVal_Rsp::set_has_map_id() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_SetVal_Rsp::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_SetVal_Rsp::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
 ::google::protobuf::int32 Admin_SetVal_Rsp::map_id() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Rsp.map_id)
  return map_id_;
}
 void Admin_SetVal_Rsp::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Rsp.map_id)
}

// optional int32 val_type = 7 [default = 0];
 bool Admin_SetVal_Rsp::has_val_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_SetVal_Rsp::set_has_val_type() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_SetVal_Rsp::clear_has_val_type() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_SetVal_Rsp::clear_val_type() {
  val_type_ = 0;
  clear_has_val_type();
}
 ::google::protobuf::int32 Admin_SetVal_Rsp::val_type() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Rsp.val_type)
  return val_type_;
}
 void Admin_SetVal_Rsp::set_val_type(::google::protobuf::int32 value) {
  set_has_val_type();
  val_type_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Rsp.val_type)
}

// optional int64 val_value = 8 [default = 0];
 bool Admin_SetVal_Rsp::has_val_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_SetVal_Rsp::set_has_val_value() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_SetVal_Rsp::clear_has_val_value() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_SetVal_Rsp::clear_val_value() {
  val_value_ = GOOGLE_LONGLONG(0);
  clear_has_val_value();
}
 ::google::protobuf::int64 Admin_SetVal_Rsp::val_value() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Rsp.val_value)
  return val_value_;
}
 void Admin_SetVal_Rsp::set_val_value(::google::protobuf::int64 value) {
  set_has_val_value();
  val_value_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Rsp.val_value)
}

// optional int64 val_value2 = 9 [default = 0];
 bool Admin_SetVal_Rsp::has_val_value2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Admin_SetVal_Rsp::set_has_val_value2() {
  _has_bits_[0] |= 0x00000100u;
}
 void Admin_SetVal_Rsp::clear_has_val_value2() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Admin_SetVal_Rsp::clear_val_value2() {
  val_value2_ = GOOGLE_LONGLONG(0);
  clear_has_val_value2();
}
 ::google::protobuf::int64 Admin_SetVal_Rsp::val_value2() const {
  // @@protoc_insertion_point(field_get:Admin_SetVal_Rsp.val_value2)
  return val_value2_;
}
 void Admin_SetVal_Rsp::set_val_value2(::google::protobuf::int64 value) {
  set_has_val_value2();
  val_value2_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetVal_Rsp.val_value2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_SetLevel_Req::kUidFieldNumber;
const int Admin_SetLevel_Req::kLevelFieldNumber;
const int Admin_SetLevel_Req::kGidFieldNumber;
const int Admin_SetLevel_Req::kAdminfdFieldNumber;
const int Admin_SetLevel_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_SetLevel_Req::Admin_SetLevel_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_SetLevel_Req)
}

void Admin_SetLevel_Req::InitAsDefaultInstance() {
}

Admin_SetLevel_Req::Admin_SetLevel_Req(const Admin_SetLevel_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_SetLevel_Req)
}

void Admin_SetLevel_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_SetLevel_Req::~Admin_SetLevel_Req() {
  // @@protoc_insertion_point(destructor:Admin_SetLevel_Req)
  SharedDtor();
}

void Admin_SetLevel_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_SetLevel_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_SetLevel_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_SetLevel_Req_descriptor_;
}

const Admin_SetLevel_Req& Admin_SetLevel_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_SetLevel_Req* Admin_SetLevel_Req::default_instance_ = NULL;

Admin_SetLevel_Req* Admin_SetLevel_Req::New(::google::protobuf::Arena* arena) const {
  Admin_SetLevel_Req* n = new Admin_SetLevel_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_SetLevel_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_SetLevel_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, fromweb_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_SetLevel_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_SetLevel_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_SetLevel_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_SetLevel_Req)
  return false;
#undef DO_
}

void Admin_SetLevel_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_SetLevel_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_SetLevel_Req)
}

::google::protobuf::uint8* Admin_SetLevel_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_SetLevel_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_SetLevel_Req)
  return target;
}

int Admin_SetLevel_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_gid()) {
    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_SetLevel_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_SetLevel_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_SetLevel_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_SetLevel_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_SetLevel_Req::MergeFrom(const Admin_SetLevel_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_SetLevel_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_SetLevel_Req::CopyFrom(const Admin_SetLevel_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_SetLevel_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Admin_SetLevel_Req::Swap(Admin_SetLevel_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_SetLevel_Req::InternalSwap(Admin_SetLevel_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(level_, other->level_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_SetLevel_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_SetLevel_Req_descriptor_;
  metadata.reflection = Admin_SetLevel_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_SetLevel_Req

// required int64 uid = 1;
 bool Admin_SetLevel_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_SetLevel_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_SetLevel_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_SetLevel_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_SetLevel_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_SetLevel_Req.uid)
  return uid_;
}
 void Admin_SetLevel_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetLevel_Req.uid)
}

// required int32 level = 2;
 bool Admin_SetLevel_Req::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_SetLevel_Req::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_SetLevel_Req::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_SetLevel_Req::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 Admin_SetLevel_Req::level() const {
  // @@protoc_insertion_point(field_get:Admin_SetLevel_Req.level)
  return level_;
}
 void Admin_SetLevel_Req::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetLevel_Req.level)
}

// required int32 gid = 3;
 bool Admin_SetLevel_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_SetLevel_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_SetLevel_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_SetLevel_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_SetLevel_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_SetLevel_Req.gid)
  return gid_;
}
 void Admin_SetLevel_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetLevel_Req.gid)
}

// required int32 adminfd = 4;
 bool Admin_SetLevel_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_SetLevel_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_SetLevel_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_SetLevel_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_SetLevel_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_SetLevel_Req.adminfd)
  return adminfd_;
}
 void Admin_SetLevel_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetLevel_Req.adminfd)
}

// optional bool fromweb = 5 [default = false];
 bool Admin_SetLevel_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_SetLevel_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_SetLevel_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_SetLevel_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_SetLevel_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_SetLevel_Req.fromweb)
  return fromweb_;
}
 void Admin_SetLevel_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetLevel_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_SetLevel_Rsp::kUidFieldNumber;
const int Admin_SetLevel_Rsp::kOldlevelFieldNumber;
const int Admin_SetLevel_Rsp::kNewlevelFieldNumber;
const int Admin_SetLevel_Rsp::kGidFieldNumber;
const int Admin_SetLevel_Rsp::kAdminfdFieldNumber;
const int Admin_SetLevel_Rsp::kFromwebFieldNumber;
const int Admin_SetLevel_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_SetLevel_Rsp::Admin_SetLevel_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_SetLevel_Rsp)
}

void Admin_SetLevel_Rsp::InitAsDefaultInstance() {
}

Admin_SetLevel_Rsp::Admin_SetLevel_Rsp(const Admin_SetLevel_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_SetLevel_Rsp)
}

void Admin_SetLevel_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  oldlevel_ = 0;
  newlevel_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_SetLevel_Rsp::~Admin_SetLevel_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_SetLevel_Rsp)
  SharedDtor();
}

void Admin_SetLevel_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_SetLevel_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_SetLevel_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_SetLevel_Rsp_descriptor_;
}

const Admin_SetLevel_Rsp& Admin_SetLevel_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_SetLevel_Rsp* Admin_SetLevel_Rsp::default_instance_ = NULL;

Admin_SetLevel_Rsp* Admin_SetLevel_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_SetLevel_Rsp* n = new Admin_SetLevel_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_SetLevel_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_SetLevel_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, succ_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_SetLevel_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_SetLevel_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oldlevel;
        break;
      }

      // required int32 oldlevel = 2;
      case 2: {
        if (tag == 16) {
         parse_oldlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldlevel_)));
          set_has_oldlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_newlevel;
        break;
      }

      // required int32 newlevel = 3;
      case 3: {
        if (tag == 24) {
         parse_newlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newlevel_)));
          set_has_newlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }

      // required int32 gid = 4;
      case 4: {
        if (tag == 32) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 5;
      case 5: {
        if (tag == 40) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_succ;
        break;
      }

      // required int32 succ = 7;
      case 7: {
        if (tag == 56) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_SetLevel_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_SetLevel_Rsp)
  return false;
#undef DO_
}

void Admin_SetLevel_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_SetLevel_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 oldlevel = 2;
  if (has_oldlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oldlevel(), output);
  }

  // required int32 newlevel = 3;
  if (has_newlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->newlevel(), output);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fromweb(), output);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_SetLevel_Rsp)
}

::google::protobuf::uint8* Admin_SetLevel_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_SetLevel_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 oldlevel = 2;
  if (has_oldlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oldlevel(), target);
  }

  // required int32 newlevel = 3;
  if (has_newlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->newlevel(), target);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fromweb(), target);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_SetLevel_Rsp)
  return target;
}

int Admin_SetLevel_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_oldlevel()) {
    // required int32 oldlevel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldlevel());
  }

  if (has_newlevel()) {
    // required int32 newlevel = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newlevel());
  }

  if (has_gid()) {
    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_SetLevel_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000005f) ^ 0x0000005f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 oldlevel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldlevel());

    // required int32 newlevel = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newlevel());

    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_SetLevel_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_SetLevel_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_SetLevel_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_SetLevel_Rsp::MergeFrom(const Admin_SetLevel_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_oldlevel()) {
      set_oldlevel(from.oldlevel());
    }
    if (from.has_newlevel()) {
      set_newlevel(from.newlevel());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_SetLevel_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_SetLevel_Rsp::CopyFrom(const Admin_SetLevel_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_SetLevel_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void Admin_SetLevel_Rsp::Swap(Admin_SetLevel_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_SetLevel_Rsp::InternalSwap(Admin_SetLevel_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(oldlevel_, other->oldlevel_);
  std::swap(newlevel_, other->newlevel_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_SetLevel_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_SetLevel_Rsp_descriptor_;
  metadata.reflection = Admin_SetLevel_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_SetLevel_Rsp

// required int64 uid = 1;
 bool Admin_SetLevel_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_SetLevel_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_SetLevel_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_SetLevel_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_SetLevel_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_SetLevel_Rsp.uid)
  return uid_;
}
 void Admin_SetLevel_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetLevel_Rsp.uid)
}

// required int32 oldlevel = 2;
 bool Admin_SetLevel_Rsp::has_oldlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_SetLevel_Rsp::set_has_oldlevel() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_SetLevel_Rsp::clear_has_oldlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_SetLevel_Rsp::clear_oldlevel() {
  oldlevel_ = 0;
  clear_has_oldlevel();
}
 ::google::protobuf::int32 Admin_SetLevel_Rsp::oldlevel() const {
  // @@protoc_insertion_point(field_get:Admin_SetLevel_Rsp.oldlevel)
  return oldlevel_;
}
 void Admin_SetLevel_Rsp::set_oldlevel(::google::protobuf::int32 value) {
  set_has_oldlevel();
  oldlevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetLevel_Rsp.oldlevel)
}

// required int32 newlevel = 3;
 bool Admin_SetLevel_Rsp::has_newlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_SetLevel_Rsp::set_has_newlevel() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_SetLevel_Rsp::clear_has_newlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_SetLevel_Rsp::clear_newlevel() {
  newlevel_ = 0;
  clear_has_newlevel();
}
 ::google::protobuf::int32 Admin_SetLevel_Rsp::newlevel() const {
  // @@protoc_insertion_point(field_get:Admin_SetLevel_Rsp.newlevel)
  return newlevel_;
}
 void Admin_SetLevel_Rsp::set_newlevel(::google::protobuf::int32 value) {
  set_has_newlevel();
  newlevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetLevel_Rsp.newlevel)
}

// required int32 gid = 4;
 bool Admin_SetLevel_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_SetLevel_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_SetLevel_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_SetLevel_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_SetLevel_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_SetLevel_Rsp.gid)
  return gid_;
}
 void Admin_SetLevel_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetLevel_Rsp.gid)
}

// required int32 adminfd = 5;
 bool Admin_SetLevel_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_SetLevel_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_SetLevel_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_SetLevel_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_SetLevel_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_SetLevel_Rsp.adminfd)
  return adminfd_;
}
 void Admin_SetLevel_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetLevel_Rsp.adminfd)
}

// optional bool fromweb = 6 [default = false];
 bool Admin_SetLevel_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_SetLevel_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_SetLevel_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_SetLevel_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_SetLevel_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_SetLevel_Rsp.fromweb)
  return fromweb_;
}
 void Admin_SetLevel_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetLevel_Rsp.fromweb)
}

// required int32 succ = 7;
 bool Admin_SetLevel_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_SetLevel_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_SetLevel_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_SetLevel_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_SetLevel_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_SetLevel_Rsp.succ)
  return succ_;
}
 void Admin_SetLevel_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetLevel_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddProp_Req::kUidFieldNumber;
const int Admin_AddProp_Req::kPropFieldNumber;
const int Admin_AddProp_Req::kLevelFieldNumber;
const int Admin_AddProp_Req::kAmountFieldNumber;
const int Admin_AddProp_Req::kGidFieldNumber;
const int Admin_AddProp_Req::kAdminfdFieldNumber;
const int Admin_AddProp_Req::kFromwebFieldNumber;
const int Admin_AddProp_Req::kActiveIdFieldNumber;
const int Admin_AddProp_Req::kSidFieldNumber;
#endif  // !_MSC_VER

Admin_AddProp_Req::Admin_AddProp_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddProp_Req)
}

void Admin_AddProp_Req::InitAsDefaultInstance() {
}

Admin_AddProp_Req::Admin_AddProp_Req(const Admin_AddProp_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddProp_Req)
}

void Admin_AddProp_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  prop_ = 0;
  level_ = 0;
  amount_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  activeid_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddProp_Req::~Admin_AddProp_Req() {
  // @@protoc_insertion_point(destructor:Admin_AddProp_Req)
  SharedDtor();
}

void Admin_AddProp_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddProp_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddProp_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddProp_Req_descriptor_;
}

const Admin_AddProp_Req& Admin_AddProp_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddProp_Req* Admin_AddProp_Req::default_instance_ = NULL;

Admin_AddProp_Req* Admin_AddProp_Req::New(::google::protobuf::Arena* arena) const {
  Admin_AddProp_Req* n = new Admin_AddProp_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddProp_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddProp_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, activeid_);
  }
  sid_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddProp_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddProp_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prop;
        break;
      }

      // required int32 prop = 2;
      case 2: {
        if (tag == 16) {
         parse_prop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prop_)));
          set_has_prop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // required int32 amount = 4;
      case 4: {
        if (tag == 32) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gid;
        break;
      }

      // required int32 gid = 5;
      case 5: {
        if (tag == 40) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 6;
      case 6: {
        if (tag == 48) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_activeId;
        break;
      }

      // optional int32 activeId = 8;
      case 8: {
        if (tag == 64) {
         parse_activeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sid;
        break;
      }

      // optional int32 sid = 9;
      case 9: {
        if (tag == 72) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddProp_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddProp_Req)
  return false;
#undef DO_
}

void Admin_AddProp_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddProp_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 prop = 2;
  if (has_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prop(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->amount(), output);
  }

  // required int32 gid = 5;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gid(), output);
  }

  // required int32 adminfd = 6;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->adminfd(), output);
  }

  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }

  // optional int32 activeId = 8;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->activeid(), output);
  }

  // optional int32 sid = 9;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddProp_Req)
}

::google::protobuf::uint8* Admin_AddProp_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddProp_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 prop = 2;
  if (has_prop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prop(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->amount(), target);
  }

  // required int32 gid = 5;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gid(), target);
  }

  // required int32 adminfd = 6;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->adminfd(), target);
  }

  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }

  // optional int32 activeId = 8;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->activeid(), target);
  }

  // optional int32 sid = 9;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddProp_Req)
  return target;
}

int Admin_AddProp_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_prop()) {
    // required int32 prop = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prop());
  }

  if (has_level()) {
    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_amount()) {
    // required int32 amount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->amount());
  }

  if (has_gid()) {
    // required int32 gid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_AddProp_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 prop = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prop());

    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 amount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->amount());

    // required int32 gid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[6 / 32] & 192) {
    // optional bool fromweb = 7 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

    // optional int32 activeId = 8;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeid());
    }

  }
  // optional int32 sid = 9;
  if (has_sid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddProp_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddProp_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddProp_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddProp_Req::MergeFrom(const Admin_AddProp_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_prop()) {
      set_prop(from.prop());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddProp_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddProp_Req::CopyFrom(const Admin_AddProp_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddProp_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Admin_AddProp_Req::Swap(Admin_AddProp_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddProp_Req::InternalSwap(Admin_AddProp_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(prop_, other->prop_);
  std::swap(level_, other->level_);
  std::swap(amount_, other->amount_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(activeid_, other->activeid_);
  std::swap(sid_, other->sid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddProp_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddProp_Req_descriptor_;
  metadata.reflection = Admin_AddProp_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddProp_Req

// required int64 uid = 1;
 bool Admin_AddProp_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddProp_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddProp_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddProp_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddProp_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Req.uid)
  return uid_;
}
 void Admin_AddProp_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Req.uid)
}

// required int32 prop = 2;
 bool Admin_AddProp_Req::has_prop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddProp_Req::set_has_prop() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddProp_Req::clear_has_prop() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddProp_Req::clear_prop() {
  prop_ = 0;
  clear_has_prop();
}
 ::google::protobuf::int32 Admin_AddProp_Req::prop() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Req.prop)
  return prop_;
}
 void Admin_AddProp_Req::set_prop(::google::protobuf::int32 value) {
  set_has_prop();
  prop_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Req.prop)
}

// required int32 level = 3;
 bool Admin_AddProp_Req::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddProp_Req::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddProp_Req::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddProp_Req::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 Admin_AddProp_Req::level() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Req.level)
  return level_;
}
 void Admin_AddProp_Req::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Req.level)
}

// required int32 amount = 4;
 bool Admin_AddProp_Req::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddProp_Req::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddProp_Req::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddProp_Req::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
 ::google::protobuf::int32 Admin_AddProp_Req::amount() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Req.amount)
  return amount_;
}
 void Admin_AddProp_Req::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Req.amount)
}

// required int32 gid = 5;
 bool Admin_AddProp_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddProp_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddProp_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddProp_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddProp_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Req.gid)
  return gid_;
}
 void Admin_AddProp_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Req.gid)
}

// required int32 adminfd = 6;
 bool Admin_AddProp_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_AddProp_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_AddProp_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_AddProp_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddProp_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Req.adminfd)
  return adminfd_;
}
 void Admin_AddProp_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Req.adminfd)
}

// optional bool fromweb = 7 [default = false];
 bool Admin_AddProp_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_AddProp_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_AddProp_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_AddProp_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddProp_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Req.fromweb)
  return fromweb_;
}
 void Admin_AddProp_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Req.fromweb)
}

// optional int32 activeId = 8;
 bool Admin_AddProp_Req::has_activeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_AddProp_Req::set_has_activeid() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_AddProp_Req::clear_has_activeid() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_AddProp_Req::clear_activeid() {
  activeid_ = 0;
  clear_has_activeid();
}
 ::google::protobuf::int32 Admin_AddProp_Req::activeid() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Req.activeId)
  return activeid_;
}
 void Admin_AddProp_Req::set_activeid(::google::protobuf::int32 value) {
  set_has_activeid();
  activeid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Req.activeId)
}

// optional int32 sid = 9;
 bool Admin_AddProp_Req::has_sid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Admin_AddProp_Req::set_has_sid() {
  _has_bits_[0] |= 0x00000100u;
}
 void Admin_AddProp_Req::clear_has_sid() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Admin_AddProp_Req::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
 ::google::protobuf::int32 Admin_AddProp_Req::sid() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Req.sid)
  return sid_;
}
 void Admin_AddProp_Req::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Req.sid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddProp_Rsp::kUidFieldNumber;
const int Admin_AddProp_Rsp::kPropIDFieldNumber;
const int Admin_AddProp_Rsp::kInfoIDFieldNumber;
const int Admin_AddProp_Rsp::kLevelFieldNumber;
const int Admin_AddProp_Rsp::kOldamountFieldNumber;
const int Admin_AddProp_Rsp::kNewamountFieldNumber;
const int Admin_AddProp_Rsp::kGidFieldNumber;
const int Admin_AddProp_Rsp::kAdminfdFieldNumber;
const int Admin_AddProp_Rsp::kFromwebFieldNumber;
const int Admin_AddProp_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_AddProp_Rsp::Admin_AddProp_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddProp_Rsp)
}

void Admin_AddProp_Rsp::InitAsDefaultInstance() {
}

Admin_AddProp_Rsp::Admin_AddProp_Rsp(const Admin_AddProp_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddProp_Rsp)
}

void Admin_AddProp_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  propid_ = GOOGLE_LONGLONG(0);
  infoid_ = 0;
  level_ = 0;
  oldamount_ = 0;
  newamount_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddProp_Rsp::~Admin_AddProp_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_AddProp_Rsp)
  SharedDtor();
}

void Admin_AddProp_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddProp_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddProp_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddProp_Rsp_descriptor_;
}

const Admin_AddProp_Rsp& Admin_AddProp_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddProp_Rsp* Admin_AddProp_Rsp::default_instance_ = NULL;

Admin_AddProp_Rsp* Admin_AddProp_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_AddProp_Rsp* n = new Admin_AddProp_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddProp_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddProp_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, adminfd_);
  }
  ZR_(fromweb_, succ_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddProp_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddProp_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propID;
        break;
      }

      // required int64 propID = 2;
      case 2: {
        if (tag == 16) {
         parse_propID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_infoID;
        break;
      }

      // required int32 infoID = 3;
      case 3: {
        if (tag == 24) {
         parse_infoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infoid_)));
          set_has_infoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_oldamount;
        break;
      }

      // required int32 oldamount = 5;
      case 5: {
        if (tag == 40) {
         parse_oldamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldamount_)));
          set_has_oldamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_newamount;
        break;
      }

      // required int32 newamount = 6;
      case 6: {
        if (tag == 48) {
         parse_newamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newamount_)));
          set_has_newamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gid;
        break;
      }

      // required int32 gid = 7;
      case 7: {
        if (tag == 56) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 8;
      case 8: {
        if (tag == 64) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_succ;
        break;
      }

      // required int32 succ = 10;
      case 10: {
        if (tag == 80) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddProp_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddProp_Rsp)
  return false;
#undef DO_
}

void Admin_AddProp_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddProp_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int64 propID = 2;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->propid(), output);
  }

  // required int32 infoID = 3;
  if (has_infoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->infoid(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 oldamount = 5;
  if (has_oldamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->oldamount(), output);
  }

  // required int32 newamount = 6;
  if (has_newamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->newamount(), output);
  }

  // required int32 gid = 7;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gid(), output);
  }

  // required int32 adminfd = 8;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->adminfd(), output);
  }

  // optional bool fromweb = 9 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->fromweb(), output);
  }

  // required int32 succ = 10;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddProp_Rsp)
}

::google::protobuf::uint8* Admin_AddProp_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddProp_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int64 propID = 2;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->propid(), target);
  }

  // required int32 infoID = 3;
  if (has_infoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->infoid(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 oldamount = 5;
  if (has_oldamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->oldamount(), target);
  }

  // required int32 newamount = 6;
  if (has_newamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->newamount(), target);
  }

  // required int32 gid = 7;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gid(), target);
  }

  // required int32 adminfd = 8;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->adminfd(), target);
  }

  // optional bool fromweb = 9 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->fromweb(), target);
  }

  // required int32 succ = 10;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddProp_Rsp)
  return target;
}

int Admin_AddProp_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_propid()) {
    // required int64 propID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->propid());
  }

  if (has_infoid()) {
    // required int32 infoID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infoid());
  }

  if (has_level()) {
    // required int32 level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_oldamount()) {
    // required int32 oldamount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldamount());
  }

  if (has_newamount()) {
    // required int32 newamount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newamount());
  }

  if (has_gid()) {
    // required int32 gid = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_AddProp_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000002ff) ^ 0x000002ff) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int64 propID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->propid());

    // required int32 infoID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infoid());

    // required int32 level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 oldamount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldamount());

    // required int32 newamount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newamount());

    // required int32 gid = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 9 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddProp_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddProp_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddProp_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddProp_Rsp::MergeFrom(const Admin_AddProp_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_infoid()) {
      set_infoid(from.infoid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_oldamount()) {
      set_oldamount(from.oldamount());
    }
    if (from.has_newamount()) {
      set_newamount(from.newamount());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddProp_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddProp_Rsp::CopyFrom(const Admin_AddProp_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddProp_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000002ff) != 0x000002ff) return false;

  return true;
}

void Admin_AddProp_Rsp::Swap(Admin_AddProp_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddProp_Rsp::InternalSwap(Admin_AddProp_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(propid_, other->propid_);
  std::swap(infoid_, other->infoid_);
  std::swap(level_, other->level_);
  std::swap(oldamount_, other->oldamount_);
  std::swap(newamount_, other->newamount_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddProp_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddProp_Rsp_descriptor_;
  metadata.reflection = Admin_AddProp_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddProp_Rsp

// required int64 uid = 1;
 bool Admin_AddProp_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddProp_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddProp_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddProp_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddProp_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Rsp.uid)
  return uid_;
}
 void Admin_AddProp_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Rsp.uid)
}

// required int64 propID = 2;
 bool Admin_AddProp_Rsp::has_propid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddProp_Rsp::set_has_propid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddProp_Rsp::clear_has_propid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddProp_Rsp::clear_propid() {
  propid_ = GOOGLE_LONGLONG(0);
  clear_has_propid();
}
 ::google::protobuf::int64 Admin_AddProp_Rsp::propid() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Rsp.propID)
  return propid_;
}
 void Admin_AddProp_Rsp::set_propid(::google::protobuf::int64 value) {
  set_has_propid();
  propid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Rsp.propID)
}

// required int32 infoID = 3;
 bool Admin_AddProp_Rsp::has_infoid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddProp_Rsp::set_has_infoid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddProp_Rsp::clear_has_infoid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddProp_Rsp::clear_infoid() {
  infoid_ = 0;
  clear_has_infoid();
}
 ::google::protobuf::int32 Admin_AddProp_Rsp::infoid() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Rsp.infoID)
  return infoid_;
}
 void Admin_AddProp_Rsp::set_infoid(::google::protobuf::int32 value) {
  set_has_infoid();
  infoid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Rsp.infoID)
}

// required int32 level = 4;
 bool Admin_AddProp_Rsp::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddProp_Rsp::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddProp_Rsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddProp_Rsp::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 Admin_AddProp_Rsp::level() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Rsp.level)
  return level_;
}
 void Admin_AddProp_Rsp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Rsp.level)
}

// required int32 oldamount = 5;
 bool Admin_AddProp_Rsp::has_oldamount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddProp_Rsp::set_has_oldamount() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddProp_Rsp::clear_has_oldamount() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddProp_Rsp::clear_oldamount() {
  oldamount_ = 0;
  clear_has_oldamount();
}
 ::google::protobuf::int32 Admin_AddProp_Rsp::oldamount() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Rsp.oldamount)
  return oldamount_;
}
 void Admin_AddProp_Rsp::set_oldamount(::google::protobuf::int32 value) {
  set_has_oldamount();
  oldamount_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Rsp.oldamount)
}

// required int32 newamount = 6;
 bool Admin_AddProp_Rsp::has_newamount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_AddProp_Rsp::set_has_newamount() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_AddProp_Rsp::clear_has_newamount() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_AddProp_Rsp::clear_newamount() {
  newamount_ = 0;
  clear_has_newamount();
}
 ::google::protobuf::int32 Admin_AddProp_Rsp::newamount() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Rsp.newamount)
  return newamount_;
}
 void Admin_AddProp_Rsp::set_newamount(::google::protobuf::int32 value) {
  set_has_newamount();
  newamount_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Rsp.newamount)
}

// required int32 gid = 7;
 bool Admin_AddProp_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_AddProp_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_AddProp_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_AddProp_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddProp_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Rsp.gid)
  return gid_;
}
 void Admin_AddProp_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Rsp.gid)
}

// required int32 adminfd = 8;
 bool Admin_AddProp_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_AddProp_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_AddProp_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_AddProp_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddProp_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Rsp.adminfd)
  return adminfd_;
}
 void Admin_AddProp_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Rsp.adminfd)
}

// optional bool fromweb = 9 [default = false];
 bool Admin_AddProp_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Admin_AddProp_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000100u;
}
 void Admin_AddProp_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Admin_AddProp_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddProp_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Rsp.fromweb)
  return fromweb_;
}
 void Admin_AddProp_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Rsp.fromweb)
}

// required int32 succ = 10;
 bool Admin_AddProp_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void Admin_AddProp_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000200u;
}
 void Admin_AddProp_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000200u;
}
 void Admin_AddProp_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_AddProp_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_AddProp_Rsp.succ)
  return succ_;
}
 void Admin_AddProp_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddProp_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_SetEquip_Req::kUidFieldNumber;
const int Admin_SetEquip_Req::kInfoIDFieldNumber;
const int Admin_SetEquip_Req::kPositionFieldNumber;
const int Admin_SetEquip_Req::kEquiplevelFieldNumber;
const int Admin_SetEquip_Req::kAtklevelFieldNumber;
const int Admin_SetEquip_Req::kDeflevelFieldNumber;
const int Admin_SetEquip_Req::kAgilitylevelFieldNumber;
const int Admin_SetEquip_Req::kLuckylevelFieldNumber;
const int Admin_SetEquip_Req::kGidFieldNumber;
const int Admin_SetEquip_Req::kAdminfdFieldNumber;
const int Admin_SetEquip_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_SetEquip_Req::Admin_SetEquip_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_SetEquip_Req)
}

void Admin_SetEquip_Req::InitAsDefaultInstance() {
}

Admin_SetEquip_Req::Admin_SetEquip_Req(const Admin_SetEquip_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_SetEquip_Req)
}

void Admin_SetEquip_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  infoid_ = 0;
  position_ = 0;
  equiplevel_ = 0;
  atklevel_ = 0;
  deflevel_ = 0;
  agilitylevel_ = 0;
  luckylevel_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_SetEquip_Req::~Admin_SetEquip_Req() {
  // @@protoc_insertion_point(destructor:Admin_SetEquip_Req)
  SharedDtor();
}

void Admin_SetEquip_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_SetEquip_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_SetEquip_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_SetEquip_Req_descriptor_;
}

const Admin_SetEquip_Req& Admin_SetEquip_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_SetEquip_Req* Admin_SetEquip_Req::default_instance_ = NULL;

Admin_SetEquip_Req* Admin_SetEquip_Req::New(::google::protobuf::Arena* arena) const {
  Admin_SetEquip_Req* n = new Admin_SetEquip_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_SetEquip_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_SetEquip_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, luckylevel_);
  }
  ZR_(gid_, fromweb_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_SetEquip_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_SetEquip_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_infoID;
        break;
      }

      // required int32 infoID = 2;
      case 2: {
        if (tag == 16) {
         parse_infoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infoid_)));
          set_has_infoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // required int32 position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_equiplevel;
        break;
      }

      // required int32 equiplevel = 4;
      case 4: {
        if (tag == 32) {
         parse_equiplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equiplevel_)));
          set_has_equiplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_atklevel;
        break;
      }

      // required int32 atklevel = 5;
      case 5: {
        if (tag == 40) {
         parse_atklevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atklevel_)));
          set_has_atklevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deflevel;
        break;
      }

      // required int32 deflevel = 6;
      case 6: {
        if (tag == 48) {
         parse_deflevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deflevel_)));
          set_has_deflevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_agilitylevel;
        break;
      }

      // required int32 agilitylevel = 7;
      case 7: {
        if (tag == 56) {
         parse_agilitylevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agilitylevel_)));
          set_has_agilitylevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_luckylevel;
        break;
      }

      // required int32 luckylevel = 8;
      case 8: {
        if (tag == 64) {
         parse_luckylevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luckylevel_)));
          set_has_luckylevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gid;
        break;
      }

      // required int32 gid = 9;
      case 9: {
        if (tag == 72) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 10;
      case 10: {
        if (tag == 80) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_SetEquip_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_SetEquip_Req)
  return false;
#undef DO_
}

void Admin_SetEquip_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_SetEquip_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 infoID = 2;
  if (has_infoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->infoid(), output);
  }

  // required int32 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position(), output);
  }

  // required int32 equiplevel = 4;
  if (has_equiplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->equiplevel(), output);
  }

  // required int32 atklevel = 5;
  if (has_atklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->atklevel(), output);
  }

  // required int32 deflevel = 6;
  if (has_deflevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->deflevel(), output);
  }

  // required int32 agilitylevel = 7;
  if (has_agilitylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->agilitylevel(), output);
  }

  // required int32 luckylevel = 8;
  if (has_luckylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->luckylevel(), output);
  }

  // required int32 gid = 9;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gid(), output);
  }

  // required int32 adminfd = 10;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->adminfd(), output);
  }

  // optional bool fromweb = 11 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_SetEquip_Req)
}

::google::protobuf::uint8* Admin_SetEquip_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_SetEquip_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 infoID = 2;
  if (has_infoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->infoid(), target);
  }

  // required int32 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position(), target);
  }

  // required int32 equiplevel = 4;
  if (has_equiplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->equiplevel(), target);
  }

  // required int32 atklevel = 5;
  if (has_atklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->atklevel(), target);
  }

  // required int32 deflevel = 6;
  if (has_deflevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->deflevel(), target);
  }

  // required int32 agilitylevel = 7;
  if (has_agilitylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->agilitylevel(), target);
  }

  // required int32 luckylevel = 8;
  if (has_luckylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->luckylevel(), target);
  }

  // required int32 gid = 9;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gid(), target);
  }

  // required int32 adminfd = 10;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->adminfd(), target);
  }

  // optional bool fromweb = 11 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_SetEquip_Req)
  return target;
}

int Admin_SetEquip_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_infoid()) {
    // required int32 infoID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infoid());
  }

  if (has_position()) {
    // required int32 position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  if (has_equiplevel()) {
    // required int32 equiplevel = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->equiplevel());
  }

  if (has_atklevel()) {
    // required int32 atklevel = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->atklevel());
  }

  if (has_deflevel()) {
    // required int32 deflevel = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deflevel());
  }

  if (has_agilitylevel()) {
    // required int32 agilitylevel = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->agilitylevel());
  }

  if (has_luckylevel()) {
    // required int32 luckylevel = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->luckylevel());
  }

  if (has_gid()) {
    // required int32 gid = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_SetEquip_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 infoID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infoid());

    // required int32 position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());

    // required int32 equiplevel = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->equiplevel());

    // required int32 atklevel = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->atklevel());

    // required int32 deflevel = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deflevel());

    // required int32 agilitylevel = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->agilitylevel());

    // required int32 luckylevel = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->luckylevel());

    // required int32 gid = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 11 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_SetEquip_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_SetEquip_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_SetEquip_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_SetEquip_Req::MergeFrom(const Admin_SetEquip_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_infoid()) {
      set_infoid(from.infoid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_equiplevel()) {
      set_equiplevel(from.equiplevel());
    }
    if (from.has_atklevel()) {
      set_atklevel(from.atklevel());
    }
    if (from.has_deflevel()) {
      set_deflevel(from.deflevel());
    }
    if (from.has_agilitylevel()) {
      set_agilitylevel(from.agilitylevel());
    }
    if (from.has_luckylevel()) {
      set_luckylevel(from.luckylevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_SetEquip_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_SetEquip_Req::CopyFrom(const Admin_SetEquip_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_SetEquip_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void Admin_SetEquip_Req::Swap(Admin_SetEquip_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_SetEquip_Req::InternalSwap(Admin_SetEquip_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(infoid_, other->infoid_);
  std::swap(position_, other->position_);
  std::swap(equiplevel_, other->equiplevel_);
  std::swap(atklevel_, other->atklevel_);
  std::swap(deflevel_, other->deflevel_);
  std::swap(agilitylevel_, other->agilitylevel_);
  std::swap(luckylevel_, other->luckylevel_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_SetEquip_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_SetEquip_Req_descriptor_;
  metadata.reflection = Admin_SetEquip_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_SetEquip_Req

// required int64 uid = 1;
 bool Admin_SetEquip_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_SetEquip_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_SetEquip_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_SetEquip_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_SetEquip_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Req.uid)
  return uid_;
}
 void Admin_SetEquip_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Req.uid)
}

// required int32 infoID = 2;
 bool Admin_SetEquip_Req::has_infoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_SetEquip_Req::set_has_infoid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_SetEquip_Req::clear_has_infoid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_SetEquip_Req::clear_infoid() {
  infoid_ = 0;
  clear_has_infoid();
}
 ::google::protobuf::int32 Admin_SetEquip_Req::infoid() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Req.infoID)
  return infoid_;
}
 void Admin_SetEquip_Req::set_infoid(::google::protobuf::int32 value) {
  set_has_infoid();
  infoid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Req.infoID)
}

// required int32 position = 3;
 bool Admin_SetEquip_Req::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_SetEquip_Req::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_SetEquip_Req::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_SetEquip_Req::clear_position() {
  position_ = 0;
  clear_has_position();
}
 ::google::protobuf::int32 Admin_SetEquip_Req::position() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Req.position)
  return position_;
}
 void Admin_SetEquip_Req::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Req.position)
}

// required int32 equiplevel = 4;
 bool Admin_SetEquip_Req::has_equiplevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_SetEquip_Req::set_has_equiplevel() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_SetEquip_Req::clear_has_equiplevel() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_SetEquip_Req::clear_equiplevel() {
  equiplevel_ = 0;
  clear_has_equiplevel();
}
 ::google::protobuf::int32 Admin_SetEquip_Req::equiplevel() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Req.equiplevel)
  return equiplevel_;
}
 void Admin_SetEquip_Req::set_equiplevel(::google::protobuf::int32 value) {
  set_has_equiplevel();
  equiplevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Req.equiplevel)
}

// required int32 atklevel = 5;
 bool Admin_SetEquip_Req::has_atklevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_SetEquip_Req::set_has_atklevel() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_SetEquip_Req::clear_has_atklevel() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_SetEquip_Req::clear_atklevel() {
  atklevel_ = 0;
  clear_has_atklevel();
}
 ::google::protobuf::int32 Admin_SetEquip_Req::atklevel() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Req.atklevel)
  return atklevel_;
}
 void Admin_SetEquip_Req::set_atklevel(::google::protobuf::int32 value) {
  set_has_atklevel();
  atklevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Req.atklevel)
}

// required int32 deflevel = 6;
 bool Admin_SetEquip_Req::has_deflevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_SetEquip_Req::set_has_deflevel() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_SetEquip_Req::clear_has_deflevel() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_SetEquip_Req::clear_deflevel() {
  deflevel_ = 0;
  clear_has_deflevel();
}
 ::google::protobuf::int32 Admin_SetEquip_Req::deflevel() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Req.deflevel)
  return deflevel_;
}
 void Admin_SetEquip_Req::set_deflevel(::google::protobuf::int32 value) {
  set_has_deflevel();
  deflevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Req.deflevel)
}

// required int32 agilitylevel = 7;
 bool Admin_SetEquip_Req::has_agilitylevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_SetEquip_Req::set_has_agilitylevel() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_SetEquip_Req::clear_has_agilitylevel() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_SetEquip_Req::clear_agilitylevel() {
  agilitylevel_ = 0;
  clear_has_agilitylevel();
}
 ::google::protobuf::int32 Admin_SetEquip_Req::agilitylevel() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Req.agilitylevel)
  return agilitylevel_;
}
 void Admin_SetEquip_Req::set_agilitylevel(::google::protobuf::int32 value) {
  set_has_agilitylevel();
  agilitylevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Req.agilitylevel)
}

// required int32 luckylevel = 8;
 bool Admin_SetEquip_Req::has_luckylevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_SetEquip_Req::set_has_luckylevel() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_SetEquip_Req::clear_has_luckylevel() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_SetEquip_Req::clear_luckylevel() {
  luckylevel_ = 0;
  clear_has_luckylevel();
}
 ::google::protobuf::int32 Admin_SetEquip_Req::luckylevel() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Req.luckylevel)
  return luckylevel_;
}
 void Admin_SetEquip_Req::set_luckylevel(::google::protobuf::int32 value) {
  set_has_luckylevel();
  luckylevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Req.luckylevel)
}

// required int32 gid = 9;
 bool Admin_SetEquip_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Admin_SetEquip_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000100u;
}
 void Admin_SetEquip_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Admin_SetEquip_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_SetEquip_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Req.gid)
  return gid_;
}
 void Admin_SetEquip_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Req.gid)
}

// required int32 adminfd = 10;
 bool Admin_SetEquip_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void Admin_SetEquip_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000200u;
}
 void Admin_SetEquip_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000200u;
}
 void Admin_SetEquip_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_SetEquip_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Req.adminfd)
  return adminfd_;
}
 void Admin_SetEquip_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Req.adminfd)
}

// optional bool fromweb = 11 [default = false];
 bool Admin_SetEquip_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void Admin_SetEquip_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000400u;
}
 void Admin_SetEquip_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000400u;
}
 void Admin_SetEquip_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_SetEquip_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Req.fromweb)
  return fromweb_;
}
 void Admin_SetEquip_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_SetEquip_Rsp::kUidFieldNumber;
const int Admin_SetEquip_Rsp::kEquipIDFieldNumber;
const int Admin_SetEquip_Rsp::kInfoIDFieldNumber;
const int Admin_SetEquip_Rsp::kPositionFieldNumber;
const int Admin_SetEquip_Rsp::kEquiplevelFieldNumber;
const int Admin_SetEquip_Rsp::kAtklevelFieldNumber;
const int Admin_SetEquip_Rsp::kDeflevelFieldNumber;
const int Admin_SetEquip_Rsp::kAgilitylevelFieldNumber;
const int Admin_SetEquip_Rsp::kLuckylevelFieldNumber;
const int Admin_SetEquip_Rsp::kGidFieldNumber;
const int Admin_SetEquip_Rsp::kAdminfdFieldNumber;
const int Admin_SetEquip_Rsp::kFromwebFieldNumber;
const int Admin_SetEquip_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_SetEquip_Rsp::Admin_SetEquip_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_SetEquip_Rsp)
}

void Admin_SetEquip_Rsp::InitAsDefaultInstance() {
}

Admin_SetEquip_Rsp::Admin_SetEquip_Rsp(const Admin_SetEquip_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_SetEquip_Rsp)
}

void Admin_SetEquip_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  equipid_ = GOOGLE_LONGLONG(0);
  infoid_ = 0;
  position_ = 0;
  equiplevel_ = 0;
  atklevel_ = 0;
  deflevel_ = 0;
  agilitylevel_ = 0;
  luckylevel_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_SetEquip_Rsp::~Admin_SetEquip_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_SetEquip_Rsp)
  SharedDtor();
}

void Admin_SetEquip_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_SetEquip_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_SetEquip_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_SetEquip_Rsp_descriptor_;
}

const Admin_SetEquip_Rsp& Admin_SetEquip_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_SetEquip_Rsp* Admin_SetEquip_Rsp::default_instance_ = NULL;

Admin_SetEquip_Rsp* Admin_SetEquip_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_SetEquip_Rsp* n = new Admin_SetEquip_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_SetEquip_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_SetEquip_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, agilitylevel_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(luckylevel_, succ_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_SetEquip_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_SetEquip_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equipID;
        break;
      }

      // required int64 equipID = 2;
      case 2: {
        if (tag == 16) {
         parse_equipID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_infoID;
        break;
      }

      // required int32 infoID = 3;
      case 3: {
        if (tag == 24) {
         parse_infoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infoid_)));
          set_has_infoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_position;
        break;
      }

      // required int32 position = 4;
      case 4: {
        if (tag == 32) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_equiplevel;
        break;
      }

      // required int32 equiplevel = 5;
      case 5: {
        if (tag == 40) {
         parse_equiplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equiplevel_)));
          set_has_equiplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_atklevel;
        break;
      }

      // required int32 atklevel = 6;
      case 6: {
        if (tag == 48) {
         parse_atklevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atklevel_)));
          set_has_atklevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_deflevel;
        break;
      }

      // required int32 deflevel = 7;
      case 7: {
        if (tag == 56) {
         parse_deflevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deflevel_)));
          set_has_deflevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_agilitylevel;
        break;
      }

      // required int32 agilitylevel = 8;
      case 8: {
        if (tag == 64) {
         parse_agilitylevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agilitylevel_)));
          set_has_agilitylevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_luckylevel;
        break;
      }

      // required int32 luckylevel = 9;
      case 9: {
        if (tag == 72) {
         parse_luckylevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luckylevel_)));
          set_has_luckylevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gid;
        break;
      }

      // required int32 gid = 10;
      case 10: {
        if (tag == 80) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 11;
      case 11: {
        if (tag == 88) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_succ;
        break;
      }

      // required int32 succ = 13;
      case 13: {
        if (tag == 104) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_SetEquip_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_SetEquip_Rsp)
  return false;
#undef DO_
}

void Admin_SetEquip_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_SetEquip_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int64 equipID = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equipid(), output);
  }

  // required int32 infoID = 3;
  if (has_infoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->infoid(), output);
  }

  // required int32 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->position(), output);
  }

  // required int32 equiplevel = 5;
  if (has_equiplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->equiplevel(), output);
  }

  // required int32 atklevel = 6;
  if (has_atklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->atklevel(), output);
  }

  // required int32 deflevel = 7;
  if (has_deflevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->deflevel(), output);
  }

  // required int32 agilitylevel = 8;
  if (has_agilitylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->agilitylevel(), output);
  }

  // required int32 luckylevel = 9;
  if (has_luckylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->luckylevel(), output);
  }

  // required int32 gid = 10;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gid(), output);
  }

  // required int32 adminfd = 11;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->adminfd(), output);
  }

  // optional bool fromweb = 12 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->fromweb(), output);
  }

  // required int32 succ = 13;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_SetEquip_Rsp)
}

::google::protobuf::uint8* Admin_SetEquip_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_SetEquip_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int64 equipID = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equipid(), target);
  }

  // required int32 infoID = 3;
  if (has_infoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->infoid(), target);
  }

  // required int32 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->position(), target);
  }

  // required int32 equiplevel = 5;
  if (has_equiplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->equiplevel(), target);
  }

  // required int32 atklevel = 6;
  if (has_atklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->atklevel(), target);
  }

  // required int32 deflevel = 7;
  if (has_deflevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->deflevel(), target);
  }

  // required int32 agilitylevel = 8;
  if (has_agilitylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->agilitylevel(), target);
  }

  // required int32 luckylevel = 9;
  if (has_luckylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->luckylevel(), target);
  }

  // required int32 gid = 10;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gid(), target);
  }

  // required int32 adminfd = 11;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->adminfd(), target);
  }

  // optional bool fromweb = 12 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->fromweb(), target);
  }

  // required int32 succ = 13;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_SetEquip_Rsp)
  return target;
}

int Admin_SetEquip_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_equipid()) {
    // required int64 equipID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->equipid());
  }

  if (has_infoid()) {
    // required int32 infoID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infoid());
  }

  if (has_position()) {
    // required int32 position = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  if (has_equiplevel()) {
    // required int32 equiplevel = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->equiplevel());
  }

  if (has_atklevel()) {
    // required int32 atklevel = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->atklevel());
  }

  if (has_deflevel()) {
    // required int32 deflevel = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deflevel());
  }

  if (has_agilitylevel()) {
    // required int32 agilitylevel = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->agilitylevel());
  }

  if (has_luckylevel()) {
    // required int32 luckylevel = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->luckylevel());
  }

  if (has_gid()) {
    // required int32 gid = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_SetEquip_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000017ff) ^ 0x000017ff) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int64 equipID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->equipid());

    // required int32 infoID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infoid());

    // required int32 position = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());

    // required int32 equiplevel = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->equiplevel());

    // required int32 atklevel = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->atklevel());

    // required int32 deflevel = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deflevel());

    // required int32 agilitylevel = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->agilitylevel());

    // required int32 luckylevel = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->luckylevel());

    // required int32 gid = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 12 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_SetEquip_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_SetEquip_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_SetEquip_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_SetEquip_Rsp::MergeFrom(const Admin_SetEquip_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_infoid()) {
      set_infoid(from.infoid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_equiplevel()) {
      set_equiplevel(from.equiplevel());
    }
    if (from.has_atklevel()) {
      set_atklevel(from.atklevel());
    }
    if (from.has_deflevel()) {
      set_deflevel(from.deflevel());
    }
    if (from.has_agilitylevel()) {
      set_agilitylevel(from.agilitylevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_luckylevel()) {
      set_luckylevel(from.luckylevel());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_SetEquip_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_SetEquip_Rsp::CopyFrom(const Admin_SetEquip_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_SetEquip_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000017ff) != 0x000017ff) return false;

  return true;
}

void Admin_SetEquip_Rsp::Swap(Admin_SetEquip_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_SetEquip_Rsp::InternalSwap(Admin_SetEquip_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(equipid_, other->equipid_);
  std::swap(infoid_, other->infoid_);
  std::swap(position_, other->position_);
  std::swap(equiplevel_, other->equiplevel_);
  std::swap(atklevel_, other->atklevel_);
  std::swap(deflevel_, other->deflevel_);
  std::swap(agilitylevel_, other->agilitylevel_);
  std::swap(luckylevel_, other->luckylevel_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_SetEquip_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_SetEquip_Rsp_descriptor_;
  metadata.reflection = Admin_SetEquip_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_SetEquip_Rsp

// required int64 uid = 1;
 bool Admin_SetEquip_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_SetEquip_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_SetEquip_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_SetEquip_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.uid)
  return uid_;
}
 void Admin_SetEquip_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.uid)
}

// required int64 equipID = 2;
 bool Admin_SetEquip_Rsp::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_SetEquip_Rsp::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_SetEquip_Rsp::clear_equipid() {
  equipid_ = GOOGLE_LONGLONG(0);
  clear_has_equipid();
}
 ::google::protobuf::int64 Admin_SetEquip_Rsp::equipid() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.equipID)
  return equipid_;
}
 void Admin_SetEquip_Rsp::set_equipid(::google::protobuf::int64 value) {
  set_has_equipid();
  equipid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.equipID)
}

// required int32 infoID = 3;
 bool Admin_SetEquip_Rsp::has_infoid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_infoid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_SetEquip_Rsp::clear_has_infoid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_SetEquip_Rsp::clear_infoid() {
  infoid_ = 0;
  clear_has_infoid();
}
 ::google::protobuf::int32 Admin_SetEquip_Rsp::infoid() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.infoID)
  return infoid_;
}
 void Admin_SetEquip_Rsp::set_infoid(::google::protobuf::int32 value) {
  set_has_infoid();
  infoid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.infoID)
}

// required int32 position = 4;
 bool Admin_SetEquip_Rsp::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_SetEquip_Rsp::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_SetEquip_Rsp::clear_position() {
  position_ = 0;
  clear_has_position();
}
 ::google::protobuf::int32 Admin_SetEquip_Rsp::position() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.position)
  return position_;
}
 void Admin_SetEquip_Rsp::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.position)
}

// required int32 equiplevel = 5;
 bool Admin_SetEquip_Rsp::has_equiplevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_equiplevel() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_SetEquip_Rsp::clear_has_equiplevel() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_SetEquip_Rsp::clear_equiplevel() {
  equiplevel_ = 0;
  clear_has_equiplevel();
}
 ::google::protobuf::int32 Admin_SetEquip_Rsp::equiplevel() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.equiplevel)
  return equiplevel_;
}
 void Admin_SetEquip_Rsp::set_equiplevel(::google::protobuf::int32 value) {
  set_has_equiplevel();
  equiplevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.equiplevel)
}

// required int32 atklevel = 6;
 bool Admin_SetEquip_Rsp::has_atklevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_atklevel() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_SetEquip_Rsp::clear_has_atklevel() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_SetEquip_Rsp::clear_atklevel() {
  atklevel_ = 0;
  clear_has_atklevel();
}
 ::google::protobuf::int32 Admin_SetEquip_Rsp::atklevel() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.atklevel)
  return atklevel_;
}
 void Admin_SetEquip_Rsp::set_atklevel(::google::protobuf::int32 value) {
  set_has_atklevel();
  atklevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.atklevel)
}

// required int32 deflevel = 7;
 bool Admin_SetEquip_Rsp::has_deflevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_deflevel() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_SetEquip_Rsp::clear_has_deflevel() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_SetEquip_Rsp::clear_deflevel() {
  deflevel_ = 0;
  clear_has_deflevel();
}
 ::google::protobuf::int32 Admin_SetEquip_Rsp::deflevel() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.deflevel)
  return deflevel_;
}
 void Admin_SetEquip_Rsp::set_deflevel(::google::protobuf::int32 value) {
  set_has_deflevel();
  deflevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.deflevel)
}

// required int32 agilitylevel = 8;
 bool Admin_SetEquip_Rsp::has_agilitylevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_agilitylevel() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_SetEquip_Rsp::clear_has_agilitylevel() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_SetEquip_Rsp::clear_agilitylevel() {
  agilitylevel_ = 0;
  clear_has_agilitylevel();
}
 ::google::protobuf::int32 Admin_SetEquip_Rsp::agilitylevel() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.agilitylevel)
  return agilitylevel_;
}
 void Admin_SetEquip_Rsp::set_agilitylevel(::google::protobuf::int32 value) {
  set_has_agilitylevel();
  agilitylevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.agilitylevel)
}

// required int32 luckylevel = 9;
 bool Admin_SetEquip_Rsp::has_luckylevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_luckylevel() {
  _has_bits_[0] |= 0x00000100u;
}
 void Admin_SetEquip_Rsp::clear_has_luckylevel() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Admin_SetEquip_Rsp::clear_luckylevel() {
  luckylevel_ = 0;
  clear_has_luckylevel();
}
 ::google::protobuf::int32 Admin_SetEquip_Rsp::luckylevel() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.luckylevel)
  return luckylevel_;
}
 void Admin_SetEquip_Rsp::set_luckylevel(::google::protobuf::int32 value) {
  set_has_luckylevel();
  luckylevel_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.luckylevel)
}

// required int32 gid = 10;
 bool Admin_SetEquip_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000200u;
}
 void Admin_SetEquip_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000200u;
}
 void Admin_SetEquip_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_SetEquip_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.gid)
  return gid_;
}
 void Admin_SetEquip_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.gid)
}

// required int32 adminfd = 11;
 bool Admin_SetEquip_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000400u;
}
 void Admin_SetEquip_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000400u;
}
 void Admin_SetEquip_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_SetEquip_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.adminfd)
  return adminfd_;
}
 void Admin_SetEquip_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.adminfd)
}

// optional bool fromweb = 12 [default = false];
 bool Admin_SetEquip_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000800u;
}
 void Admin_SetEquip_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000800u;
}
 void Admin_SetEquip_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_SetEquip_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.fromweb)
  return fromweb_;
}
 void Admin_SetEquip_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.fromweb)
}

// required int32 succ = 13;
 bool Admin_SetEquip_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void Admin_SetEquip_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00001000u;
}
 void Admin_SetEquip_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00001000u;
}
 void Admin_SetEquip_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_SetEquip_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_SetEquip_Rsp.succ)
  return succ_;
}
 void Admin_SetEquip_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetEquip_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_UserInfo_Req::kUidFieldNumber;
const int Admin_UserInfo_Req::kGidFieldNumber;
const int Admin_UserInfo_Req::kAdminfdFieldNumber;
const int Admin_UserInfo_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_UserInfo_Req::Admin_UserInfo_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_UserInfo_Req)
}

void Admin_UserInfo_Req::InitAsDefaultInstance() {
}

Admin_UserInfo_Req::Admin_UserInfo_Req(const Admin_UserInfo_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_UserInfo_Req)
}

void Admin_UserInfo_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_UserInfo_Req::~Admin_UserInfo_Req() {
  // @@protoc_insertion_point(destructor:Admin_UserInfo_Req)
  SharedDtor();
}

void Admin_UserInfo_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_UserInfo_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_UserInfo_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_UserInfo_Req_descriptor_;
}

const Admin_UserInfo_Req& Admin_UserInfo_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_UserInfo_Req* Admin_UserInfo_Req::default_instance_ = NULL;

Admin_UserInfo_Req* Admin_UserInfo_Req::New(::google::protobuf::Arena* arena) const {
  Admin_UserInfo_Req* n = new Admin_UserInfo_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_UserInfo_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_UserInfo_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, fromweb_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_UserInfo_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_UserInfo_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // required int32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 3;
      case 3: {
        if (tag == 24) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_UserInfo_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_UserInfo_Req)
  return false;
#undef DO_
}

void Admin_UserInfo_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_UserInfo_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gid(), output);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adminfd(), output);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_UserInfo_Req)
}

::google::protobuf::uint8* Admin_UserInfo_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_UserInfo_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gid(), target);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adminfd(), target);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_UserInfo_Req)
  return target;
}

int Admin_UserInfo_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_gid()) {
    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_UserInfo_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_UserInfo_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_UserInfo_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_UserInfo_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_UserInfo_Req::MergeFrom(const Admin_UserInfo_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_UserInfo_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_UserInfo_Req::CopyFrom(const Admin_UserInfo_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_UserInfo_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Admin_UserInfo_Req::Swap(Admin_UserInfo_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_UserInfo_Req::InternalSwap(Admin_UserInfo_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_UserInfo_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_UserInfo_Req_descriptor_;
  metadata.reflection = Admin_UserInfo_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_UserInfo_Req

// required int64 uid = 1;
 bool Admin_UserInfo_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_UserInfo_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_UserInfo_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_UserInfo_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_UserInfo_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_UserInfo_Req.uid)
  return uid_;
}
 void Admin_UserInfo_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_UserInfo_Req.uid)
}

// required int32 gid = 2;
 bool Admin_UserInfo_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_UserInfo_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_UserInfo_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_UserInfo_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_UserInfo_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_UserInfo_Req.gid)
  return gid_;
}
 void Admin_UserInfo_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_UserInfo_Req.gid)
}

// required int32 adminfd = 3;
 bool Admin_UserInfo_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_UserInfo_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_UserInfo_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_UserInfo_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_UserInfo_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_UserInfo_Req.adminfd)
  return adminfd_;
}
 void Admin_UserInfo_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_UserInfo_Req.adminfd)
}

// optional bool fromweb = 4 [default = false];
 bool Admin_UserInfo_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_UserInfo_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_UserInfo_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_UserInfo_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_UserInfo_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_UserInfo_Req.fromweb)
  return fromweb_;
}
 void Admin_UserInfo_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_UserInfo_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_UserInfo_Rsp::kUidFieldNumber;
const int Admin_UserInfo_Rsp::kGidFieldNumber;
const int Admin_UserInfo_Rsp::kAdminfdFieldNumber;
const int Admin_UserInfo_Rsp::kFromwebFieldNumber;
const int Admin_UserInfo_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_UserInfo_Rsp::Admin_UserInfo_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_UserInfo_Rsp)
}

void Admin_UserInfo_Rsp::InitAsDefaultInstance() {
}

Admin_UserInfo_Rsp::Admin_UserInfo_Rsp(const Admin_UserInfo_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_UserInfo_Rsp)
}

void Admin_UserInfo_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_UserInfo_Rsp::~Admin_UserInfo_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_UserInfo_Rsp)
  SharedDtor();
}

void Admin_UserInfo_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_UserInfo_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_UserInfo_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_UserInfo_Rsp_descriptor_;
}

const Admin_UserInfo_Rsp& Admin_UserInfo_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_UserInfo_Rsp* Admin_UserInfo_Rsp::default_instance_ = NULL;

Admin_UserInfo_Rsp* Admin_UserInfo_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_UserInfo_Rsp* n = new Admin_UserInfo_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_UserInfo_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_UserInfo_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, succ_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_UserInfo_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_UserInfo_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gid;
        break;
      }

      // required int32 gid = 6;
      case 6: {
        if (tag == 48) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 7;
      case 7: {
        if (tag == 56) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_succ;
        break;
      }

      // required int32 succ = 9;
      case 9: {
        if (tag == 72) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_UserInfo_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_UserInfo_Rsp)
  return false;
#undef DO_
}

void Admin_UserInfo_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_UserInfo_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 gid = 6;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gid(), output);
  }

  // required int32 adminfd = 7;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->adminfd(), output);
  }

  // optional bool fromweb = 8 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fromweb(), output);
  }

  // required int32 succ = 9;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_UserInfo_Rsp)
}

::google::protobuf::uint8* Admin_UserInfo_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_UserInfo_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 gid = 6;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gid(), target);
  }

  // required int32 adminfd = 7;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->adminfd(), target);
  }

  // optional bool fromweb = 8 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fromweb(), target);
  }

  // required int32 succ = 9;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_UserInfo_Rsp)
  return target;
}

int Admin_UserInfo_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_gid()) {
    // required int32 gid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_UserInfo_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 gid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 8 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_UserInfo_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_UserInfo_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_UserInfo_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_UserInfo_Rsp::MergeFrom(const Admin_UserInfo_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_UserInfo_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_UserInfo_Rsp::CopyFrom(const Admin_UserInfo_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_UserInfo_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void Admin_UserInfo_Rsp::Swap(Admin_UserInfo_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_UserInfo_Rsp::InternalSwap(Admin_UserInfo_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_UserInfo_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_UserInfo_Rsp_descriptor_;
  metadata.reflection = Admin_UserInfo_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_UserInfo_Rsp

// required int64 uid = 1;
 bool Admin_UserInfo_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_UserInfo_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_UserInfo_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_UserInfo_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_UserInfo_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_UserInfo_Rsp.uid)
  return uid_;
}
 void Admin_UserInfo_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_UserInfo_Rsp.uid)
}

// required int32 gid = 6;
 bool Admin_UserInfo_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_UserInfo_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_UserInfo_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_UserInfo_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_UserInfo_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_UserInfo_Rsp.gid)
  return gid_;
}
 void Admin_UserInfo_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_UserInfo_Rsp.gid)
}

// required int32 adminfd = 7;
 bool Admin_UserInfo_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_UserInfo_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_UserInfo_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_UserInfo_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_UserInfo_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_UserInfo_Rsp.adminfd)
  return adminfd_;
}
 void Admin_UserInfo_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_UserInfo_Rsp.adminfd)
}

// optional bool fromweb = 8 [default = false];
 bool Admin_UserInfo_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_UserInfo_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_UserInfo_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_UserInfo_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_UserInfo_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_UserInfo_Rsp.fromweb)
  return fromweb_;
}
 void Admin_UserInfo_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_UserInfo_Rsp.fromweb)
}

// required int32 succ = 9;
 bool Admin_UserInfo_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_UserInfo_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_UserInfo_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_UserInfo_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_UserInfo_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_UserInfo_Rsp.succ)
  return succ_;
}
 void Admin_UserInfo_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_UserInfo_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddGuest_Req::kUidFieldNumber;
const int Admin_AddGuest_Req::kGroupCntFieldNumber;
const int Admin_AddGuest_Req::kGidFieldNumber;
const int Admin_AddGuest_Req::kAdminfdFieldNumber;
const int Admin_AddGuest_Req::kFromwebFieldNumber;
const int Admin_AddGuest_Req::kMapIdFieldNumber;
#endif  // !_MSC_VER

Admin_AddGuest_Req::Admin_AddGuest_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddGuest_Req)
}

void Admin_AddGuest_Req::InitAsDefaultInstance() {
}

Admin_AddGuest_Req::Admin_AddGuest_Req(const Admin_AddGuest_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddGuest_Req)
}

void Admin_AddGuest_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  group_cnt_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  map_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddGuest_Req::~Admin_AddGuest_Req() {
  // @@protoc_insertion_point(destructor:Admin_AddGuest_Req)
  SharedDtor();
}

void Admin_AddGuest_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddGuest_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddGuest_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddGuest_Req_descriptor_;
}

const Admin_AddGuest_Req& Admin_AddGuest_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddGuest_Req* Admin_AddGuest_Req::default_instance_ = NULL;

Admin_AddGuest_Req* Admin_AddGuest_Req::New(::google::protobuf::Arena* arena) const {
  Admin_AddGuest_Req* n = new Admin_AddGuest_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddGuest_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddGuest_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, map_id_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddGuest_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddGuest_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_cnt;
        break;
      }

      // required int32 group_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_group_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_cnt_)));
          set_has_group_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 6;
      case 6: {
        if (tag == 48) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddGuest_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddGuest_Req)
  return false;
#undef DO_
}

void Admin_AddGuest_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddGuest_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 group_cnt = 2;
  if (has_group_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group_cnt(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fromweb(), output);
  }

  // optional int32 map_id = 6;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->map_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddGuest_Req)
}

::google::protobuf::uint8* Admin_AddGuest_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddGuest_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 group_cnt = 2;
  if (has_group_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group_cnt(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fromweb(), target);
  }

  // optional int32 map_id = 6;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->map_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddGuest_Req)
  return target;
}

int Admin_AddGuest_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_group_cnt()) {
    // required int32 group_cnt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_cnt());
  }

  if (has_gid()) {
    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_AddGuest_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 group_cnt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_cnt());

    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 48) {
    // optional bool fromweb = 5 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

    // optional int32 map_id = 6;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddGuest_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddGuest_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddGuest_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddGuest_Req::MergeFrom(const Admin_AddGuest_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_group_cnt()) {
      set_group_cnt(from.group_cnt());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddGuest_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddGuest_Req::CopyFrom(const Admin_AddGuest_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddGuest_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Admin_AddGuest_Req::Swap(Admin_AddGuest_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddGuest_Req::InternalSwap(Admin_AddGuest_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(group_cnt_, other->group_cnt_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(map_id_, other->map_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddGuest_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddGuest_Req_descriptor_;
  metadata.reflection = Admin_AddGuest_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddGuest_Req

// required int64 uid = 1;
 bool Admin_AddGuest_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddGuest_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddGuest_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddGuest_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddGuest_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Req.uid)
  return uid_;
}
 void Admin_AddGuest_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Req.uid)
}

// required int32 group_cnt = 2;
 bool Admin_AddGuest_Req::has_group_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddGuest_Req::set_has_group_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddGuest_Req::clear_has_group_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddGuest_Req::clear_group_cnt() {
  group_cnt_ = 0;
  clear_has_group_cnt();
}
 ::google::protobuf::int32 Admin_AddGuest_Req::group_cnt() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Req.group_cnt)
  return group_cnt_;
}
 void Admin_AddGuest_Req::set_group_cnt(::google::protobuf::int32 value) {
  set_has_group_cnt();
  group_cnt_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Req.group_cnt)
}

// required int32 gid = 3;
 bool Admin_AddGuest_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddGuest_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddGuest_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddGuest_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddGuest_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Req.gid)
  return gid_;
}
 void Admin_AddGuest_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Req.gid)
}

// required int32 adminfd = 4;
 bool Admin_AddGuest_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddGuest_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddGuest_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddGuest_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddGuest_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Req.adminfd)
  return adminfd_;
}
 void Admin_AddGuest_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Req.adminfd)
}

// optional bool fromweb = 5 [default = false];
 bool Admin_AddGuest_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddGuest_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddGuest_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddGuest_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddGuest_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Req.fromweb)
  return fromweb_;
}
 void Admin_AddGuest_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Req.fromweb)
}

// optional int32 map_id = 6;
 bool Admin_AddGuest_Req::has_map_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_AddGuest_Req::set_has_map_id() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_AddGuest_Req::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_AddGuest_Req::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
 ::google::protobuf::int32 Admin_AddGuest_Req::map_id() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Req.map_id)
  return map_id_;
}
 void Admin_AddGuest_Req::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Req.map_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddGuest_Rsp::kUidFieldNumber;
const int Admin_AddGuest_Rsp::kCurrentGroupCntFieldNumber;
const int Admin_AddGuest_Rsp::kGidFieldNumber;
const int Admin_AddGuest_Rsp::kAdminfdFieldNumber;
const int Admin_AddGuest_Rsp::kFromwebFieldNumber;
const int Admin_AddGuest_Rsp::kSuccFieldNumber;
const int Admin_AddGuest_Rsp::kMapIdFieldNumber;
#endif  // !_MSC_VER

Admin_AddGuest_Rsp::Admin_AddGuest_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddGuest_Rsp)
}

void Admin_AddGuest_Rsp::InitAsDefaultInstance() {
}

Admin_AddGuest_Rsp::Admin_AddGuest_Rsp(const Admin_AddGuest_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddGuest_Rsp)
}

void Admin_AddGuest_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  current_group_cnt_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  map_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddGuest_Rsp::~Admin_AddGuest_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_AddGuest_Rsp)
  SharedDtor();
}

void Admin_AddGuest_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddGuest_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddGuest_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddGuest_Rsp_descriptor_;
}

const Admin_AddGuest_Rsp& Admin_AddGuest_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddGuest_Rsp* Admin_AddGuest_Rsp::default_instance_ = NULL;

Admin_AddGuest_Rsp* Admin_AddGuest_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_AddGuest_Rsp* n = new Admin_AddGuest_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddGuest_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddGuest_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, map_id_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddGuest_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddGuest_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current_group_cnt;
        break;
      }

      // required int32 current_group_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_current_group_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_group_cnt_)));
          set_has_current_group_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_succ;
        break;
      }

      // required int32 succ = 6;
      case 6: {
        if (tag == 48) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 7;
      case 7: {
        if (tag == 56) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddGuest_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddGuest_Rsp)
  return false;
#undef DO_
}

void Admin_AddGuest_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddGuest_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 current_group_cnt = 2;
  if (has_current_group_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_group_cnt(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fromweb(), output);
  }

  // required int32 succ = 6;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->succ(), output);
  }

  // optional int32 map_id = 7;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->map_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddGuest_Rsp)
}

::google::protobuf::uint8* Admin_AddGuest_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddGuest_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 current_group_cnt = 2;
  if (has_current_group_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_group_cnt(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fromweb(), target);
  }

  // required int32 succ = 6;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->succ(), target);
  }

  // optional int32 map_id = 7;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->map_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddGuest_Rsp)
  return target;
}

int Admin_AddGuest_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_current_group_cnt()) {
    // required int32 current_group_cnt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_group_cnt());
  }

  if (has_gid()) {
    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_AddGuest_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 current_group_cnt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_group_cnt());

    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 80) {
    // optional bool fromweb = 5 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

    // optional int32 map_id = 7;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddGuest_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddGuest_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddGuest_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddGuest_Rsp::MergeFrom(const Admin_AddGuest_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_current_group_cnt()) {
      set_current_group_cnt(from.current_group_cnt());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddGuest_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddGuest_Rsp::CopyFrom(const Admin_AddGuest_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddGuest_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void Admin_AddGuest_Rsp::Swap(Admin_AddGuest_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddGuest_Rsp::InternalSwap(Admin_AddGuest_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(current_group_cnt_, other->current_group_cnt_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(map_id_, other->map_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddGuest_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddGuest_Rsp_descriptor_;
  metadata.reflection = Admin_AddGuest_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddGuest_Rsp

// required int64 uid = 1;
 bool Admin_AddGuest_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddGuest_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddGuest_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddGuest_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddGuest_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Rsp.uid)
  return uid_;
}
 void Admin_AddGuest_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Rsp.uid)
}

// required int32 current_group_cnt = 2;
 bool Admin_AddGuest_Rsp::has_current_group_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddGuest_Rsp::set_has_current_group_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddGuest_Rsp::clear_has_current_group_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddGuest_Rsp::clear_current_group_cnt() {
  current_group_cnt_ = 0;
  clear_has_current_group_cnt();
}
 ::google::protobuf::int32 Admin_AddGuest_Rsp::current_group_cnt() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Rsp.current_group_cnt)
  return current_group_cnt_;
}
 void Admin_AddGuest_Rsp::set_current_group_cnt(::google::protobuf::int32 value) {
  set_has_current_group_cnt();
  current_group_cnt_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Rsp.current_group_cnt)
}

// required int32 gid = 3;
 bool Admin_AddGuest_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddGuest_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddGuest_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddGuest_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddGuest_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Rsp.gid)
  return gid_;
}
 void Admin_AddGuest_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Rsp.gid)
}

// required int32 adminfd = 4;
 bool Admin_AddGuest_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddGuest_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddGuest_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddGuest_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddGuest_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Rsp.adminfd)
  return adminfd_;
}
 void Admin_AddGuest_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Rsp.adminfd)
}

// optional bool fromweb = 5 [default = false];
 bool Admin_AddGuest_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddGuest_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddGuest_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddGuest_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddGuest_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Rsp.fromweb)
  return fromweb_;
}
 void Admin_AddGuest_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Rsp.fromweb)
}

// required int32 succ = 6;
 bool Admin_AddGuest_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_AddGuest_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_AddGuest_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_AddGuest_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_AddGuest_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Rsp.succ)
  return succ_;
}
 void Admin_AddGuest_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Rsp.succ)
}

// optional int32 map_id = 7;
 bool Admin_AddGuest_Rsp::has_map_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_AddGuest_Rsp::set_has_map_id() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_AddGuest_Rsp::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_AddGuest_Rsp::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
 ::google::protobuf::int32 Admin_AddGuest_Rsp::map_id() const {
  // @@protoc_insertion_point(field_get:Admin_AddGuest_Rsp.map_id)
  return map_id_;
}
 void Admin_AddGuest_Rsp::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGuest_Rsp.map_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_SetPublicPraise_Req::kUidFieldNumber;
const int Admin_SetPublicPraise_Req::kPublicPraiseFieldNumber;
const int Admin_SetPublicPraise_Req::kGidFieldNumber;
const int Admin_SetPublicPraise_Req::kAdminfdFieldNumber;
const int Admin_SetPublicPraise_Req::kFromwebFieldNumber;
const int Admin_SetPublicPraise_Req::kMapIdFieldNumber;
#endif  // !_MSC_VER

Admin_SetPublicPraise_Req::Admin_SetPublicPraise_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_SetPublicPraise_Req)
}

void Admin_SetPublicPraise_Req::InitAsDefaultInstance() {
}

Admin_SetPublicPraise_Req::Admin_SetPublicPraise_Req(const Admin_SetPublicPraise_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_SetPublicPraise_Req)
}

void Admin_SetPublicPraise_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  public_praise_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  map_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_SetPublicPraise_Req::~Admin_SetPublicPraise_Req() {
  // @@protoc_insertion_point(destructor:Admin_SetPublicPraise_Req)
  SharedDtor();
}

void Admin_SetPublicPraise_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_SetPublicPraise_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_SetPublicPraise_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_SetPublicPraise_Req_descriptor_;
}

const Admin_SetPublicPraise_Req& Admin_SetPublicPraise_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_SetPublicPraise_Req* Admin_SetPublicPraise_Req::default_instance_ = NULL;

Admin_SetPublicPraise_Req* Admin_SetPublicPraise_Req::New(::google::protobuf::Arena* arena) const {
  Admin_SetPublicPraise_Req* n = new Admin_SetPublicPraise_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_SetPublicPraise_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_SetPublicPraise_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, map_id_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_SetPublicPraise_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_SetPublicPraise_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_public_praise;
        break;
      }

      // required int32 public_praise = 2;
      case 2: {
        if (tag == 16) {
         parse_public_praise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_praise_)));
          set_has_public_praise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 6;
      case 6: {
        if (tag == 48) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_SetPublicPraise_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_SetPublicPraise_Req)
  return false;
#undef DO_
}

void Admin_SetPublicPraise_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_SetPublicPraise_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 public_praise = 2;
  if (has_public_praise()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->public_praise(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fromweb(), output);
  }

  // optional int32 map_id = 6;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->map_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_SetPublicPraise_Req)
}

::google::protobuf::uint8* Admin_SetPublicPraise_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_SetPublicPraise_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 public_praise = 2;
  if (has_public_praise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->public_praise(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fromweb(), target);
  }

  // optional int32 map_id = 6;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->map_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_SetPublicPraise_Req)
  return target;
}

int Admin_SetPublicPraise_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_public_praise()) {
    // required int32 public_praise = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_praise());
  }

  if (has_gid()) {
    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_SetPublicPraise_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 public_praise = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_praise());

    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 48) {
    // optional bool fromweb = 5 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

    // optional int32 map_id = 6;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_SetPublicPraise_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_SetPublicPraise_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_SetPublicPraise_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_SetPublicPraise_Req::MergeFrom(const Admin_SetPublicPraise_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_public_praise()) {
      set_public_praise(from.public_praise());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_SetPublicPraise_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_SetPublicPraise_Req::CopyFrom(const Admin_SetPublicPraise_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_SetPublicPraise_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Admin_SetPublicPraise_Req::Swap(Admin_SetPublicPraise_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_SetPublicPraise_Req::InternalSwap(Admin_SetPublicPraise_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(public_praise_, other->public_praise_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(map_id_, other->map_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_SetPublicPraise_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_SetPublicPraise_Req_descriptor_;
  metadata.reflection = Admin_SetPublicPraise_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_SetPublicPraise_Req

// required int64 uid = 1;
 bool Admin_SetPublicPraise_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_SetPublicPraise_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_SetPublicPraise_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_SetPublicPraise_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_SetPublicPraise_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Req.uid)
  return uid_;
}
 void Admin_SetPublicPraise_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Req.uid)
}

// required int32 public_praise = 2;
 bool Admin_SetPublicPraise_Req::has_public_praise() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_SetPublicPraise_Req::set_has_public_praise() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_SetPublicPraise_Req::clear_has_public_praise() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_SetPublicPraise_Req::clear_public_praise() {
  public_praise_ = 0;
  clear_has_public_praise();
}
 ::google::protobuf::int32 Admin_SetPublicPraise_Req::public_praise() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Req.public_praise)
  return public_praise_;
}
 void Admin_SetPublicPraise_Req::set_public_praise(::google::protobuf::int32 value) {
  set_has_public_praise();
  public_praise_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Req.public_praise)
}

// required int32 gid = 3;
 bool Admin_SetPublicPraise_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_SetPublicPraise_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_SetPublicPraise_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_SetPublicPraise_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_SetPublicPraise_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Req.gid)
  return gid_;
}
 void Admin_SetPublicPraise_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Req.gid)
}

// required int32 adminfd = 4;
 bool Admin_SetPublicPraise_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_SetPublicPraise_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_SetPublicPraise_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_SetPublicPraise_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_SetPublicPraise_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Req.adminfd)
  return adminfd_;
}
 void Admin_SetPublicPraise_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Req.adminfd)
}

// optional bool fromweb = 5 [default = false];
 bool Admin_SetPublicPraise_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_SetPublicPraise_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_SetPublicPraise_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_SetPublicPraise_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_SetPublicPraise_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Req.fromweb)
  return fromweb_;
}
 void Admin_SetPublicPraise_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Req.fromweb)
}

// optional int32 map_id = 6;
 bool Admin_SetPublicPraise_Req::has_map_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_SetPublicPraise_Req::set_has_map_id() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_SetPublicPraise_Req::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_SetPublicPraise_Req::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
 ::google::protobuf::int32 Admin_SetPublicPraise_Req::map_id() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Req.map_id)
  return map_id_;
}
 void Admin_SetPublicPraise_Req::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Req.map_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_SetPublicPraise_Rsp::kUidFieldNumber;
const int Admin_SetPublicPraise_Rsp::kPublicPraiseFieldNumber;
const int Admin_SetPublicPraise_Rsp::kGidFieldNumber;
const int Admin_SetPublicPraise_Rsp::kAdminfdFieldNumber;
const int Admin_SetPublicPraise_Rsp::kFromwebFieldNumber;
const int Admin_SetPublicPraise_Rsp::kSuccFieldNumber;
const int Admin_SetPublicPraise_Rsp::kMapIdFieldNumber;
#endif  // !_MSC_VER

Admin_SetPublicPraise_Rsp::Admin_SetPublicPraise_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_SetPublicPraise_Rsp)
}

void Admin_SetPublicPraise_Rsp::InitAsDefaultInstance() {
}

Admin_SetPublicPraise_Rsp::Admin_SetPublicPraise_Rsp(const Admin_SetPublicPraise_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_SetPublicPraise_Rsp)
}

void Admin_SetPublicPraise_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  public_praise_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  map_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_SetPublicPraise_Rsp::~Admin_SetPublicPraise_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_SetPublicPraise_Rsp)
  SharedDtor();
}

void Admin_SetPublicPraise_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_SetPublicPraise_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_SetPublicPraise_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_SetPublicPraise_Rsp_descriptor_;
}

const Admin_SetPublicPraise_Rsp& Admin_SetPublicPraise_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_SetPublicPraise_Rsp* Admin_SetPublicPraise_Rsp::default_instance_ = NULL;

Admin_SetPublicPraise_Rsp* Admin_SetPublicPraise_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_SetPublicPraise_Rsp* n = new Admin_SetPublicPraise_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_SetPublicPraise_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_SetPublicPraise_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, map_id_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_SetPublicPraise_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_SetPublicPraise_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_public_praise;
        break;
      }

      // required int32 public_praise = 2;
      case 2: {
        if (tag == 16) {
         parse_public_praise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_praise_)));
          set_has_public_praise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_succ;
        break;
      }

      // required int32 succ = 6;
      case 6: {
        if (tag == 48) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 7;
      case 7: {
        if (tag == 56) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_SetPublicPraise_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_SetPublicPraise_Rsp)
  return false;
#undef DO_
}

void Admin_SetPublicPraise_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_SetPublicPraise_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 public_praise = 2;
  if (has_public_praise()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->public_praise(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fromweb(), output);
  }

  // required int32 succ = 6;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->succ(), output);
  }

  // optional int32 map_id = 7;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->map_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_SetPublicPraise_Rsp)
}

::google::protobuf::uint8* Admin_SetPublicPraise_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_SetPublicPraise_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 public_praise = 2;
  if (has_public_praise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->public_praise(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fromweb(), target);
  }

  // required int32 succ = 6;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->succ(), target);
  }

  // optional int32 map_id = 7;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->map_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_SetPublicPraise_Rsp)
  return target;
}

int Admin_SetPublicPraise_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_public_praise()) {
    // required int32 public_praise = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_praise());
  }

  if (has_gid()) {
    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_SetPublicPraise_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 public_praise = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_praise());

    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 80) {
    // optional bool fromweb = 5 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

    // optional int32 map_id = 7;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_SetPublicPraise_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_SetPublicPraise_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_SetPublicPraise_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_SetPublicPraise_Rsp::MergeFrom(const Admin_SetPublicPraise_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_public_praise()) {
      set_public_praise(from.public_praise());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_SetPublicPraise_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_SetPublicPraise_Rsp::CopyFrom(const Admin_SetPublicPraise_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_SetPublicPraise_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void Admin_SetPublicPraise_Rsp::Swap(Admin_SetPublicPraise_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_SetPublicPraise_Rsp::InternalSwap(Admin_SetPublicPraise_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(public_praise_, other->public_praise_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(map_id_, other->map_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_SetPublicPraise_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_SetPublicPraise_Rsp_descriptor_;
  metadata.reflection = Admin_SetPublicPraise_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_SetPublicPraise_Rsp

// required int64 uid = 1;
 bool Admin_SetPublicPraise_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_SetPublicPraise_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_SetPublicPraise_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_SetPublicPraise_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_SetPublicPraise_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Rsp.uid)
  return uid_;
}
 void Admin_SetPublicPraise_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Rsp.uid)
}

// required int32 public_praise = 2;
 bool Admin_SetPublicPraise_Rsp::has_public_praise() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_SetPublicPraise_Rsp::set_has_public_praise() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_SetPublicPraise_Rsp::clear_has_public_praise() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_SetPublicPraise_Rsp::clear_public_praise() {
  public_praise_ = 0;
  clear_has_public_praise();
}
 ::google::protobuf::int32 Admin_SetPublicPraise_Rsp::public_praise() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Rsp.public_praise)
  return public_praise_;
}
 void Admin_SetPublicPraise_Rsp::set_public_praise(::google::protobuf::int32 value) {
  set_has_public_praise();
  public_praise_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Rsp.public_praise)
}

// required int32 gid = 3;
 bool Admin_SetPublicPraise_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_SetPublicPraise_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_SetPublicPraise_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_SetPublicPraise_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_SetPublicPraise_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Rsp.gid)
  return gid_;
}
 void Admin_SetPublicPraise_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Rsp.gid)
}

// required int32 adminfd = 4;
 bool Admin_SetPublicPraise_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_SetPublicPraise_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_SetPublicPraise_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_SetPublicPraise_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_SetPublicPraise_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Rsp.adminfd)
  return adminfd_;
}
 void Admin_SetPublicPraise_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Rsp.adminfd)
}

// optional bool fromweb = 5 [default = false];
 bool Admin_SetPublicPraise_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_SetPublicPraise_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_SetPublicPraise_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_SetPublicPraise_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_SetPublicPraise_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Rsp.fromweb)
  return fromweb_;
}
 void Admin_SetPublicPraise_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Rsp.fromweb)
}

// required int32 succ = 6;
 bool Admin_SetPublicPraise_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_SetPublicPraise_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_SetPublicPraise_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_SetPublicPraise_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_SetPublicPraise_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Rsp.succ)
  return succ_;
}
 void Admin_SetPublicPraise_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Rsp.succ)
}

// optional int32 map_id = 7;
 bool Admin_SetPublicPraise_Rsp::has_map_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_SetPublicPraise_Rsp::set_has_map_id() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_SetPublicPraise_Rsp::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_SetPublicPraise_Rsp::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
 ::google::protobuf::int32 Admin_SetPublicPraise_Rsp::map_id() const {
  // @@protoc_insertion_point(field_get:Admin_SetPublicPraise_Rsp.map_id)
  return map_id_;
}
 void Admin_SetPublicPraise_Rsp::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
  // @@protoc_insertion_point(field_set:Admin_SetPublicPraise_Rsp.map_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_DelGoods_Req::kUidFieldNumber;
const int Admin_DelGoods_Req::kGoodsIdFieldNumber;
const int Admin_DelGoods_Req::kGidFieldNumber;
const int Admin_DelGoods_Req::kAdminfdFieldNumber;
const int Admin_DelGoods_Req::kFromwebFieldNumber;
const int Admin_DelGoods_Req::kGoodsAmountFieldNumber;
#endif  // !_MSC_VER

Admin_DelGoods_Req::Admin_DelGoods_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_DelGoods_Req)
}

void Admin_DelGoods_Req::InitAsDefaultInstance() {
}

Admin_DelGoods_Req::Admin_DelGoods_Req(const Admin_DelGoods_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_DelGoods_Req)
}

void Admin_DelGoods_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  goods_id_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  goods_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_DelGoods_Req::~Admin_DelGoods_Req() {
  // @@protoc_insertion_point(destructor:Admin_DelGoods_Req)
  SharedDtor();
}

void Admin_DelGoods_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_DelGoods_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_DelGoods_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_DelGoods_Req_descriptor_;
}

const Admin_DelGoods_Req& Admin_DelGoods_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_DelGoods_Req* Admin_DelGoods_Req::default_instance_ = NULL;

Admin_DelGoods_Req* Admin_DelGoods_Req::New(::google::protobuf::Arena* arena) const {
  Admin_DelGoods_Req* n = new Admin_DelGoods_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_DelGoods_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_DelGoods_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, goods_amount_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_DelGoods_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_DelGoods_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }

      // required int32 goods_id = 2;
      case 2: {
        if (tag == 16) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_goods_amount;
        break;
      }

      // required int32 goods_amount = 6;
      case 6: {
        if (tag == 48) {
         parse_goods_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_amount_)));
          set_has_goods_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_DelGoods_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_DelGoods_Req)
  return false;
#undef DO_
}

void Admin_DelGoods_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_DelGoods_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goods_id(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fromweb(), output);
  }

  // required int32 goods_amount = 6;
  if (has_goods_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->goods_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_DelGoods_Req)
}

::google::protobuf::uint8* Admin_DelGoods_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_DelGoods_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goods_id(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fromweb(), target);
  }

  // required int32 goods_amount = 6;
  if (has_goods_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->goods_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_DelGoods_Req)
  return target;
}

int Admin_DelGoods_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_goods_id()) {
    // required int32 goods_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_id());
  }

  if (has_gid()) {
    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_goods_amount()) {
    // required int32 goods_amount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_amount());
  }

  return total_size;
}
int Admin_DelGoods_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 goods_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_id());

    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 goods_amount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_amount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_DelGoods_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_DelGoods_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_DelGoods_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_DelGoods_Req::MergeFrom(const Admin_DelGoods_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_goods_amount()) {
      set_goods_amount(from.goods_amount());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_DelGoods_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_DelGoods_Req::CopyFrom(const Admin_DelGoods_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_DelGoods_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void Admin_DelGoods_Req::Swap(Admin_DelGoods_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_DelGoods_Req::InternalSwap(Admin_DelGoods_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(goods_id_, other->goods_id_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(goods_amount_, other->goods_amount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_DelGoods_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_DelGoods_Req_descriptor_;
  metadata.reflection = Admin_DelGoods_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_DelGoods_Req

// required int64 uid = 1;
 bool Admin_DelGoods_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_DelGoods_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_DelGoods_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_DelGoods_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_DelGoods_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Req.uid)
  return uid_;
}
 void Admin_DelGoods_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Req.uid)
}

// required int32 goods_id = 2;
 bool Admin_DelGoods_Req::has_goods_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_DelGoods_Req::set_has_goods_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_DelGoods_Req::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_DelGoods_Req::clear_goods_id() {
  goods_id_ = 0;
  clear_has_goods_id();
}
 ::google::protobuf::int32 Admin_DelGoods_Req::goods_id() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Req.goods_id)
  return goods_id_;
}
 void Admin_DelGoods_Req::set_goods_id(::google::protobuf::int32 value) {
  set_has_goods_id();
  goods_id_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Req.goods_id)
}

// required int32 gid = 3;
 bool Admin_DelGoods_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_DelGoods_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_DelGoods_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_DelGoods_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_DelGoods_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Req.gid)
  return gid_;
}
 void Admin_DelGoods_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Req.gid)
}

// required int32 adminfd = 4;
 bool Admin_DelGoods_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_DelGoods_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_DelGoods_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_DelGoods_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_DelGoods_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Req.adminfd)
  return adminfd_;
}
 void Admin_DelGoods_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Req.adminfd)
}

// optional bool fromweb = 5 [default = false];
 bool Admin_DelGoods_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_DelGoods_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_DelGoods_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_DelGoods_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_DelGoods_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Req.fromweb)
  return fromweb_;
}
 void Admin_DelGoods_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Req.fromweb)
}

// required int32 goods_amount = 6;
 bool Admin_DelGoods_Req::has_goods_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_DelGoods_Req::set_has_goods_amount() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_DelGoods_Req::clear_has_goods_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_DelGoods_Req::clear_goods_amount() {
  goods_amount_ = 0;
  clear_has_goods_amount();
}
 ::google::protobuf::int32 Admin_DelGoods_Req::goods_amount() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Req.goods_amount)
  return goods_amount_;
}
 void Admin_DelGoods_Req::set_goods_amount(::google::protobuf::int32 value) {
  set_has_goods_amount();
  goods_amount_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Req.goods_amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_DelGoods_Rsp::kUidFieldNumber;
const int Admin_DelGoods_Rsp::kGoodsIdFieldNumber;
const int Admin_DelGoods_Rsp::kGoodsCurrentAmountFieldNumber;
const int Admin_DelGoods_Rsp::kAdminfdFieldNumber;
const int Admin_DelGoods_Rsp::kGidFieldNumber;
const int Admin_DelGoods_Rsp::kFromwebFieldNumber;
const int Admin_DelGoods_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_DelGoods_Rsp::Admin_DelGoods_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_DelGoods_Rsp)
}

void Admin_DelGoods_Rsp::InitAsDefaultInstance() {
}

Admin_DelGoods_Rsp::Admin_DelGoods_Rsp(const Admin_DelGoods_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_DelGoods_Rsp)
}

void Admin_DelGoods_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  goods_id_ = 0;
  goods_current_amount_ = 0;
  adminfd_ = 0;
  gid_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_DelGoods_Rsp::~Admin_DelGoods_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_DelGoods_Rsp)
  SharedDtor();
}

void Admin_DelGoods_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_DelGoods_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_DelGoods_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_DelGoods_Rsp_descriptor_;
}

const Admin_DelGoods_Rsp& Admin_DelGoods_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_DelGoods_Rsp* Admin_DelGoods_Rsp::default_instance_ = NULL;

Admin_DelGoods_Rsp* Admin_DelGoods_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_DelGoods_Rsp* n = new Admin_DelGoods_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_DelGoods_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_DelGoods_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, succ_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_DelGoods_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_DelGoods_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }

      // required int32 goods_id = 2;
      case 2: {
        if (tag == 16) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_goods_current_amount;
        break;
      }

      // required int32 goods_current_amount = 3;
      case 3: {
        if (tag == 24) {
         parse_goods_current_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_current_amount_)));
          set_has_goods_current_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gid;
        break;
      }

      // required int32 gid = 5;
      case 5: {
        if (tag == 40) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_succ;
        break;
      }

      // required int32 succ = 7;
      case 7: {
        if (tag == 56) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_DelGoods_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_DelGoods_Rsp)
  return false;
#undef DO_
}

void Admin_DelGoods_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_DelGoods_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goods_id(), output);
  }

  // required int32 goods_current_amount = 3;
  if (has_goods_current_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goods_current_amount(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // required int32 gid = 5;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gid(), output);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fromweb(), output);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_DelGoods_Rsp)
}

::google::protobuf::uint8* Admin_DelGoods_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_DelGoods_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goods_id(), target);
  }

  // required int32 goods_current_amount = 3;
  if (has_goods_current_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goods_current_amount(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // required int32 gid = 5;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gid(), target);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fromweb(), target);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_DelGoods_Rsp)
  return target;
}

int Admin_DelGoods_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_goods_id()) {
    // required int32 goods_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_id());
  }

  if (has_goods_current_amount()) {
    // required int32 goods_current_amount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_current_amount());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_gid()) {
    // required int32 gid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_succ()) {
    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_DelGoods_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000005f) ^ 0x0000005f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 goods_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_id());

    // required int32 goods_current_amount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_current_amount());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 gid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_DelGoods_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_DelGoods_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_DelGoods_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_DelGoods_Rsp::MergeFrom(const Admin_DelGoods_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_goods_current_amount()) {
      set_goods_current_amount(from.goods_current_amount());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_DelGoods_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_DelGoods_Rsp::CopyFrom(const Admin_DelGoods_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_DelGoods_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void Admin_DelGoods_Rsp::Swap(Admin_DelGoods_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_DelGoods_Rsp::InternalSwap(Admin_DelGoods_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(goods_id_, other->goods_id_);
  std::swap(goods_current_amount_, other->goods_current_amount_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(gid_, other->gid_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_DelGoods_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_DelGoods_Rsp_descriptor_;
  metadata.reflection = Admin_DelGoods_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_DelGoods_Rsp

// required int64 uid = 1;
 bool Admin_DelGoods_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_DelGoods_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_DelGoods_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_DelGoods_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_DelGoods_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Rsp.uid)
  return uid_;
}
 void Admin_DelGoods_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Rsp.uid)
}

// required int32 goods_id = 2;
 bool Admin_DelGoods_Rsp::has_goods_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_DelGoods_Rsp::set_has_goods_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_DelGoods_Rsp::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_DelGoods_Rsp::clear_goods_id() {
  goods_id_ = 0;
  clear_has_goods_id();
}
 ::google::protobuf::int32 Admin_DelGoods_Rsp::goods_id() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Rsp.goods_id)
  return goods_id_;
}
 void Admin_DelGoods_Rsp::set_goods_id(::google::protobuf::int32 value) {
  set_has_goods_id();
  goods_id_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Rsp.goods_id)
}

// required int32 goods_current_amount = 3;
 bool Admin_DelGoods_Rsp::has_goods_current_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_DelGoods_Rsp::set_has_goods_current_amount() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_DelGoods_Rsp::clear_has_goods_current_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_DelGoods_Rsp::clear_goods_current_amount() {
  goods_current_amount_ = 0;
  clear_has_goods_current_amount();
}
 ::google::protobuf::int32 Admin_DelGoods_Rsp::goods_current_amount() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Rsp.goods_current_amount)
  return goods_current_amount_;
}
 void Admin_DelGoods_Rsp::set_goods_current_amount(::google::protobuf::int32 value) {
  set_has_goods_current_amount();
  goods_current_amount_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Rsp.goods_current_amount)
}

// required int32 adminfd = 4;
 bool Admin_DelGoods_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_DelGoods_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_DelGoods_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_DelGoods_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_DelGoods_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Rsp.adminfd)
  return adminfd_;
}
 void Admin_DelGoods_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Rsp.adminfd)
}

// required int32 gid = 5;
 bool Admin_DelGoods_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_DelGoods_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_DelGoods_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_DelGoods_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_DelGoods_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Rsp.gid)
  return gid_;
}
 void Admin_DelGoods_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Rsp.gid)
}

// optional bool fromweb = 6 [default = false];
 bool Admin_DelGoods_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_DelGoods_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_DelGoods_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_DelGoods_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_DelGoods_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Rsp.fromweb)
  return fromweb_;
}
 void Admin_DelGoods_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Rsp.fromweb)
}

// required int32 succ = 7;
 bool Admin_DelGoods_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_DelGoods_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_DelGoods_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_DelGoods_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_DelGoods_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_DelGoods_Rsp.succ)
  return succ_;
}
 void Admin_DelGoods_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelGoods_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddGoods_Req::kUidFieldNumber;
const int Admin_AddGoods_Req::kGoodsIdFieldNumber;
const int Admin_AddGoods_Req::kGidFieldNumber;
const int Admin_AddGoods_Req::kAdminfdFieldNumber;
const int Admin_AddGoods_Req::kFromwebFieldNumber;
const int Admin_AddGoods_Req::kGoodsAmountFieldNumber;
#endif  // !_MSC_VER

Admin_AddGoods_Req::Admin_AddGoods_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddGoods_Req)
}

void Admin_AddGoods_Req::InitAsDefaultInstance() {
}

Admin_AddGoods_Req::Admin_AddGoods_Req(const Admin_AddGoods_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddGoods_Req)
}

void Admin_AddGoods_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  goods_id_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  goods_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddGoods_Req::~Admin_AddGoods_Req() {
  // @@protoc_insertion_point(destructor:Admin_AddGoods_Req)
  SharedDtor();
}

void Admin_AddGoods_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddGoods_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddGoods_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddGoods_Req_descriptor_;
}

const Admin_AddGoods_Req& Admin_AddGoods_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddGoods_Req* Admin_AddGoods_Req::default_instance_ = NULL;

Admin_AddGoods_Req* Admin_AddGoods_Req::New(::google::protobuf::Arena* arena) const {
  Admin_AddGoods_Req* n = new Admin_AddGoods_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddGoods_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddGoods_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, goods_amount_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddGoods_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddGoods_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }

      // required int32 goods_id = 2;
      case 2: {
        if (tag == 16) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_goods_amount;
        break;
      }

      // required int32 goods_amount = 6;
      case 6: {
        if (tag == 48) {
         parse_goods_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_amount_)));
          set_has_goods_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddGoods_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddGoods_Req)
  return false;
#undef DO_
}

void Admin_AddGoods_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddGoods_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goods_id(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fromweb(), output);
  }

  // required int32 goods_amount = 6;
  if (has_goods_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->goods_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddGoods_Req)
}

::google::protobuf::uint8* Admin_AddGoods_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddGoods_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goods_id(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fromweb(), target);
  }

  // required int32 goods_amount = 6;
  if (has_goods_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->goods_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddGoods_Req)
  return target;
}

int Admin_AddGoods_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_goods_id()) {
    // required int32 goods_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_id());
  }

  if (has_gid()) {
    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_goods_amount()) {
    // required int32 goods_amount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_amount());
  }

  return total_size;
}
int Admin_AddGoods_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 goods_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_id());

    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 goods_amount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_amount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddGoods_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddGoods_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddGoods_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddGoods_Req::MergeFrom(const Admin_AddGoods_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_goods_amount()) {
      set_goods_amount(from.goods_amount());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddGoods_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddGoods_Req::CopyFrom(const Admin_AddGoods_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddGoods_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void Admin_AddGoods_Req::Swap(Admin_AddGoods_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddGoods_Req::InternalSwap(Admin_AddGoods_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(goods_id_, other->goods_id_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(goods_amount_, other->goods_amount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddGoods_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddGoods_Req_descriptor_;
  metadata.reflection = Admin_AddGoods_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddGoods_Req

// required int64 uid = 1;
 bool Admin_AddGoods_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddGoods_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddGoods_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddGoods_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddGoods_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Req.uid)
  return uid_;
}
 void Admin_AddGoods_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Req.uid)
}

// required int32 goods_id = 2;
 bool Admin_AddGoods_Req::has_goods_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddGoods_Req::set_has_goods_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddGoods_Req::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddGoods_Req::clear_goods_id() {
  goods_id_ = 0;
  clear_has_goods_id();
}
 ::google::protobuf::int32 Admin_AddGoods_Req::goods_id() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Req.goods_id)
  return goods_id_;
}
 void Admin_AddGoods_Req::set_goods_id(::google::protobuf::int32 value) {
  set_has_goods_id();
  goods_id_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Req.goods_id)
}

// required int32 gid = 3;
 bool Admin_AddGoods_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddGoods_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddGoods_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddGoods_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddGoods_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Req.gid)
  return gid_;
}
 void Admin_AddGoods_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Req.gid)
}

// required int32 adminfd = 4;
 bool Admin_AddGoods_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddGoods_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddGoods_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddGoods_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddGoods_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Req.adminfd)
  return adminfd_;
}
 void Admin_AddGoods_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Req.adminfd)
}

// optional bool fromweb = 5 [default = false];
 bool Admin_AddGoods_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddGoods_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddGoods_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddGoods_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddGoods_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Req.fromweb)
  return fromweb_;
}
 void Admin_AddGoods_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Req.fromweb)
}

// required int32 goods_amount = 6;
 bool Admin_AddGoods_Req::has_goods_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_AddGoods_Req::set_has_goods_amount() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_AddGoods_Req::clear_has_goods_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_AddGoods_Req::clear_goods_amount() {
  goods_amount_ = 0;
  clear_has_goods_amount();
}
 ::google::protobuf::int32 Admin_AddGoods_Req::goods_amount() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Req.goods_amount)
  return goods_amount_;
}
 void Admin_AddGoods_Req::set_goods_amount(::google::protobuf::int32 value) {
  set_has_goods_amount();
  goods_amount_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Req.goods_amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddGoods_Rsp::kUidFieldNumber;
const int Admin_AddGoods_Rsp::kGoodsIdFieldNumber;
const int Admin_AddGoods_Rsp::kGoodsCurrentAmountFieldNumber;
const int Admin_AddGoods_Rsp::kAdminfdFieldNumber;
const int Admin_AddGoods_Rsp::kGidFieldNumber;
const int Admin_AddGoods_Rsp::kFromwebFieldNumber;
const int Admin_AddGoods_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_AddGoods_Rsp::Admin_AddGoods_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddGoods_Rsp)
}

void Admin_AddGoods_Rsp::InitAsDefaultInstance() {
}

Admin_AddGoods_Rsp::Admin_AddGoods_Rsp(const Admin_AddGoods_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddGoods_Rsp)
}

void Admin_AddGoods_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  goods_id_ = 0;
  goods_current_amount_ = 0;
  adminfd_ = 0;
  gid_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddGoods_Rsp::~Admin_AddGoods_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_AddGoods_Rsp)
  SharedDtor();
}

void Admin_AddGoods_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddGoods_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddGoods_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddGoods_Rsp_descriptor_;
}

const Admin_AddGoods_Rsp& Admin_AddGoods_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddGoods_Rsp* Admin_AddGoods_Rsp::default_instance_ = NULL;

Admin_AddGoods_Rsp* Admin_AddGoods_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_AddGoods_Rsp* n = new Admin_AddGoods_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddGoods_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddGoods_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, succ_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddGoods_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddGoods_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }

      // required int32 goods_id = 2;
      case 2: {
        if (tag == 16) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_goods_current_amount;
        break;
      }

      // required int32 goods_current_amount = 3;
      case 3: {
        if (tag == 24) {
         parse_goods_current_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_current_amount_)));
          set_has_goods_current_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gid;
        break;
      }

      // required int32 gid = 5;
      case 5: {
        if (tag == 40) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_succ;
        break;
      }

      // required int32 succ = 7;
      case 7: {
        if (tag == 56) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddGoods_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddGoods_Rsp)
  return false;
#undef DO_
}

void Admin_AddGoods_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddGoods_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goods_id(), output);
  }

  // required int32 goods_current_amount = 3;
  if (has_goods_current_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goods_current_amount(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // required int32 gid = 5;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gid(), output);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fromweb(), output);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddGoods_Rsp)
}

::google::protobuf::uint8* Admin_AddGoods_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddGoods_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goods_id(), target);
  }

  // required int32 goods_current_amount = 3;
  if (has_goods_current_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goods_current_amount(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // required int32 gid = 5;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gid(), target);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fromweb(), target);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddGoods_Rsp)
  return target;
}

int Admin_AddGoods_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_goods_id()) {
    // required int32 goods_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_id());
  }

  if (has_goods_current_amount()) {
    // required int32 goods_current_amount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_current_amount());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_gid()) {
    // required int32 gid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_succ()) {
    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_AddGoods_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000005f) ^ 0x0000005f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 goods_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_id());

    // required int32 goods_current_amount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_current_amount());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 gid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddGoods_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddGoods_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddGoods_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddGoods_Rsp::MergeFrom(const Admin_AddGoods_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_goods_current_amount()) {
      set_goods_current_amount(from.goods_current_amount());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddGoods_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddGoods_Rsp::CopyFrom(const Admin_AddGoods_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddGoods_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void Admin_AddGoods_Rsp::Swap(Admin_AddGoods_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddGoods_Rsp::InternalSwap(Admin_AddGoods_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(goods_id_, other->goods_id_);
  std::swap(goods_current_amount_, other->goods_current_amount_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(gid_, other->gid_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddGoods_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddGoods_Rsp_descriptor_;
  metadata.reflection = Admin_AddGoods_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddGoods_Rsp

// required int64 uid = 1;
 bool Admin_AddGoods_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddGoods_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddGoods_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddGoods_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddGoods_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Rsp.uid)
  return uid_;
}
 void Admin_AddGoods_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Rsp.uid)
}

// required int32 goods_id = 2;
 bool Admin_AddGoods_Rsp::has_goods_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddGoods_Rsp::set_has_goods_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddGoods_Rsp::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddGoods_Rsp::clear_goods_id() {
  goods_id_ = 0;
  clear_has_goods_id();
}
 ::google::protobuf::int32 Admin_AddGoods_Rsp::goods_id() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Rsp.goods_id)
  return goods_id_;
}
 void Admin_AddGoods_Rsp::set_goods_id(::google::protobuf::int32 value) {
  set_has_goods_id();
  goods_id_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Rsp.goods_id)
}

// required int32 goods_current_amount = 3;
 bool Admin_AddGoods_Rsp::has_goods_current_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddGoods_Rsp::set_has_goods_current_amount() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddGoods_Rsp::clear_has_goods_current_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddGoods_Rsp::clear_goods_current_amount() {
  goods_current_amount_ = 0;
  clear_has_goods_current_amount();
}
 ::google::protobuf::int32 Admin_AddGoods_Rsp::goods_current_amount() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Rsp.goods_current_amount)
  return goods_current_amount_;
}
 void Admin_AddGoods_Rsp::set_goods_current_amount(::google::protobuf::int32 value) {
  set_has_goods_current_amount();
  goods_current_amount_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Rsp.goods_current_amount)
}

// required int32 adminfd = 4;
 bool Admin_AddGoods_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddGoods_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddGoods_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddGoods_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddGoods_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Rsp.adminfd)
  return adminfd_;
}
 void Admin_AddGoods_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Rsp.adminfd)
}

// required int32 gid = 5;
 bool Admin_AddGoods_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddGoods_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddGoods_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddGoods_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddGoods_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Rsp.gid)
  return gid_;
}
 void Admin_AddGoods_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Rsp.gid)
}

// optional bool fromweb = 6 [default = false];
 bool Admin_AddGoods_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_AddGoods_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_AddGoods_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_AddGoods_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddGoods_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Rsp.fromweb)
  return fromweb_;
}
 void Admin_AddGoods_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Rsp.fromweb)
}

// required int32 succ = 7;
 bool Admin_AddGoods_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_AddGoods_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_AddGoods_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_AddGoods_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_AddGoods_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_AddGoods_Rsp.succ)
  return succ_;
}
 void Admin_AddGoods_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddGoods_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_Common_Req::kFuncFieldNumber;
const int Admin_Common_Req::kUidFieldNumber;
const int Admin_Common_Req::kArg1FieldNumber;
const int Admin_Common_Req::kArg2FieldNumber;
const int Admin_Common_Req::kArg3FieldNumber;
const int Admin_Common_Req::kArg4FieldNumber;
const int Admin_Common_Req::kAdminfdFieldNumber;
const int Admin_Common_Req::kGidFieldNumber;
#endif  // !_MSC_VER

Admin_Common_Req::Admin_Common_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_Common_Req)
}

void Admin_Common_Req::InitAsDefaultInstance() {
}

Admin_Common_Req::Admin_Common_Req(const Admin_Common_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_Common_Req)
}

void Admin_Common_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_LONGLONG(0);
  arg1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adminfd_ = 0;
  gid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_Common_Req::~Admin_Common_Req() {
  // @@protoc_insertion_point(destructor:Admin_Common_Req)
  SharedDtor();
}

void Admin_Common_Req::SharedDtor() {
  func_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg4_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Admin_Common_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_Common_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_Common_Req_descriptor_;
}

const Admin_Common_Req& Admin_Common_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_Common_Req* Admin_Common_Req::default_instance_ = NULL;

Admin_Common_Req* Admin_Common_Req::New(::google::protobuf::Arena* arena) const {
  Admin_Common_Req* n = new Admin_Common_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_Common_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_Common_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(adminfd_, gid_);
    if (has_func()) {
      func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    uid_ = GOOGLE_LONGLONG(0);
    if (has_arg1()) {
      arg1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_arg2()) {
      arg2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_arg3()) {
      arg3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_arg4()) {
      arg4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_Common_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_Common_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string func = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->func().data(), this->func().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_Common_Req.func");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_arg1;
        break;
      }

      // required string arg1 = 3;
      case 3: {
        if (tag == 26) {
         parse_arg1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arg1().data(), this->arg1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_Common_Req.arg1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arg2;
        break;
      }

      // required string arg2 = 4;
      case 4: {
        if (tag == 34) {
         parse_arg2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arg2().data(), this->arg2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_Common_Req.arg2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_arg3;
        break;
      }

      // required string arg3 = 5;
      case 5: {
        if (tag == 42) {
         parse_arg3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arg3().data(), this->arg3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_Common_Req.arg3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_arg4;
        break;
      }

      // required string arg4 = 6;
      case 6: {
        if (tag == 50) {
         parse_arg4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arg4().data(), this->arg4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_Common_Req.arg4");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 7;
      case 7: {
        if (tag == 56) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gid;
        break;
      }

      // required int32 gid = 8;
      case 8: {
        if (tag == 64) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_Common_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_Common_Req)
  return false;
#undef DO_
}

void Admin_Common_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_Common_Req)
  // required string func = 1;
  if (has_func()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func().data(), this->func().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Req.func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->func(), output);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // required string arg1 = 3;
  if (has_arg1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg1().data(), this->arg1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Req.arg1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->arg1(), output);
  }

  // required string arg2 = 4;
  if (has_arg2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg2().data(), this->arg2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Req.arg2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->arg2(), output);
  }

  // required string arg3 = 5;
  if (has_arg3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg3().data(), this->arg3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Req.arg3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->arg3(), output);
  }

  // required string arg4 = 6;
  if (has_arg4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg4().data(), this->arg4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Req.arg4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->arg4(), output);
  }

  // required int32 adminfd = 7;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->adminfd(), output);
  }

  // required int32 gid = 8;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_Common_Req)
}

::google::protobuf::uint8* Admin_Common_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_Common_Req)
  // required string func = 1;
  if (has_func()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func().data(), this->func().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Req.func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->func(), target);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // required string arg1 = 3;
  if (has_arg1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg1().data(), this->arg1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Req.arg1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->arg1(), target);
  }

  // required string arg2 = 4;
  if (has_arg2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg2().data(), this->arg2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Req.arg2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->arg2(), target);
  }

  // required string arg3 = 5;
  if (has_arg3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg3().data(), this->arg3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Req.arg3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->arg3(), target);
  }

  // required string arg4 = 6;
  if (has_arg4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg4().data(), this->arg4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Req.arg4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->arg4(), target);
  }

  // required int32 adminfd = 7;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->adminfd(), target);
  }

  // required int32 gid = 8;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_Common_Req)
  return target;
}

int Admin_Common_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_func()) {
    // required string func = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func());
  }

  if (has_uid()) {
    // required int64 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_arg1()) {
    // required string arg1 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg1());
  }

  if (has_arg2()) {
    // required string arg2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg2());
  }

  if (has_arg3()) {
    // required string arg3 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg3());
  }

  if (has_arg4()) {
    // required string arg4 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg4());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_gid()) {
    // required int32 gid = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  return total_size;
}
int Admin_Common_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string func = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func());

    // required int64 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required string arg1 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg1());

    // required string arg2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg2());

    // required string arg3 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg3());

    // required string arg4 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg4());

    // required int32 adminfd = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 gid = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_Common_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_Common_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_Common_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_Common_Req::MergeFrom(const Admin_Common_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_func()) {
      set_has_func();
      func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_);
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_arg1()) {
      set_has_arg1();
      arg1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arg1_);
    }
    if (from.has_arg2()) {
      set_has_arg2();
      arg2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arg2_);
    }
    if (from.has_arg3()) {
      set_has_arg3();
      arg3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arg3_);
    }
    if (from.has_arg4()) {
      set_has_arg4();
      arg4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arg4_);
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_Common_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_Common_Req::CopyFrom(const Admin_Common_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_Common_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Admin_Common_Req::Swap(Admin_Common_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_Common_Req::InternalSwap(Admin_Common_Req* other) {
  func_.Swap(&other->func_);
  std::swap(uid_, other->uid_);
  arg1_.Swap(&other->arg1_);
  arg2_.Swap(&other->arg2_);
  arg3_.Swap(&other->arg3_);
  arg4_.Swap(&other->arg4_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(gid_, other->gid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_Common_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_Common_Req_descriptor_;
  metadata.reflection = Admin_Common_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_Common_Req

// required string func = 1;
 bool Admin_Common_Req::has_func() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_Common_Req::set_has_func() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_Common_Req::clear_has_func() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_Common_Req::clear_func() {
  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_func();
}
 const ::std::string& Admin_Common_Req::func() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Req.func)
  return func_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Req::set_func(const ::std::string& value) {
  set_has_func();
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_Common_Req.func)
}
 void Admin_Common_Req::set_func(const char* value) {
  set_has_func();
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_Common_Req.func)
}
 void Admin_Common_Req::set_func(const char* value, size_t size) {
  set_has_func();
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_Common_Req.func)
}
 ::std::string* Admin_Common_Req::mutable_func() {
  set_has_func();
  // @@protoc_insertion_point(field_mutable:Admin_Common_Req.func)
  return func_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_Common_Req::release_func() {
  clear_has_func();
  return func_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Req::set_allocated_func(::std::string* func) {
  if (func != NULL) {
    set_has_func();
  } else {
    clear_has_func();
  }
  func_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func);
  // @@protoc_insertion_point(field_set_allocated:Admin_Common_Req.func)
}

// required int64 uid = 2;
 bool Admin_Common_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_Common_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_Common_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_Common_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_Common_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Req.uid)
  return uid_;
}
 void Admin_Common_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_Common_Req.uid)
}

// required string arg1 = 3;
 bool Admin_Common_Req::has_arg1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_Common_Req::set_has_arg1() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_Common_Req::clear_has_arg1() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_Common_Req::clear_arg1() {
  arg1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_arg1();
}
 const ::std::string& Admin_Common_Req::arg1() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Req.arg1)
  return arg1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Req::set_arg1(const ::std::string& value) {
  set_has_arg1();
  arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_Common_Req.arg1)
}
 void Admin_Common_Req::set_arg1(const char* value) {
  set_has_arg1();
  arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_Common_Req.arg1)
}
 void Admin_Common_Req::set_arg1(const char* value, size_t size) {
  set_has_arg1();
  arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_Common_Req.arg1)
}
 ::std::string* Admin_Common_Req::mutable_arg1() {
  set_has_arg1();
  // @@protoc_insertion_point(field_mutable:Admin_Common_Req.arg1)
  return arg1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_Common_Req::release_arg1() {
  clear_has_arg1();
  return arg1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Req::set_allocated_arg1(::std::string* arg1) {
  if (arg1 != NULL) {
    set_has_arg1();
  } else {
    clear_has_arg1();
  }
  arg1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg1);
  // @@protoc_insertion_point(field_set_allocated:Admin_Common_Req.arg1)
}

// required string arg2 = 4;
 bool Admin_Common_Req::has_arg2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_Common_Req::set_has_arg2() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_Common_Req::clear_has_arg2() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_Common_Req::clear_arg2() {
  arg2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_arg2();
}
 const ::std::string& Admin_Common_Req::arg2() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Req.arg2)
  return arg2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Req::set_arg2(const ::std::string& value) {
  set_has_arg2();
  arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_Common_Req.arg2)
}
 void Admin_Common_Req::set_arg2(const char* value) {
  set_has_arg2();
  arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_Common_Req.arg2)
}
 void Admin_Common_Req::set_arg2(const char* value, size_t size) {
  set_has_arg2();
  arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_Common_Req.arg2)
}
 ::std::string* Admin_Common_Req::mutable_arg2() {
  set_has_arg2();
  // @@protoc_insertion_point(field_mutable:Admin_Common_Req.arg2)
  return arg2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_Common_Req::release_arg2() {
  clear_has_arg2();
  return arg2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Req::set_allocated_arg2(::std::string* arg2) {
  if (arg2 != NULL) {
    set_has_arg2();
  } else {
    clear_has_arg2();
  }
  arg2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg2);
  // @@protoc_insertion_point(field_set_allocated:Admin_Common_Req.arg2)
}

// required string arg3 = 5;
 bool Admin_Common_Req::has_arg3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_Common_Req::set_has_arg3() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_Common_Req::clear_has_arg3() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_Common_Req::clear_arg3() {
  arg3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_arg3();
}
 const ::std::string& Admin_Common_Req::arg3() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Req.arg3)
  return arg3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Req::set_arg3(const ::std::string& value) {
  set_has_arg3();
  arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_Common_Req.arg3)
}
 void Admin_Common_Req::set_arg3(const char* value) {
  set_has_arg3();
  arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_Common_Req.arg3)
}
 void Admin_Common_Req::set_arg3(const char* value, size_t size) {
  set_has_arg3();
  arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_Common_Req.arg3)
}
 ::std::string* Admin_Common_Req::mutable_arg3() {
  set_has_arg3();
  // @@protoc_insertion_point(field_mutable:Admin_Common_Req.arg3)
  return arg3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_Common_Req::release_arg3() {
  clear_has_arg3();
  return arg3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Req::set_allocated_arg3(::std::string* arg3) {
  if (arg3 != NULL) {
    set_has_arg3();
  } else {
    clear_has_arg3();
  }
  arg3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg3);
  // @@protoc_insertion_point(field_set_allocated:Admin_Common_Req.arg3)
}

// required string arg4 = 6;
 bool Admin_Common_Req::has_arg4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_Common_Req::set_has_arg4() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_Common_Req::clear_has_arg4() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_Common_Req::clear_arg4() {
  arg4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_arg4();
}
 const ::std::string& Admin_Common_Req::arg4() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Req.arg4)
  return arg4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Req::set_arg4(const ::std::string& value) {
  set_has_arg4();
  arg4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_Common_Req.arg4)
}
 void Admin_Common_Req::set_arg4(const char* value) {
  set_has_arg4();
  arg4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_Common_Req.arg4)
}
 void Admin_Common_Req::set_arg4(const char* value, size_t size) {
  set_has_arg4();
  arg4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_Common_Req.arg4)
}
 ::std::string* Admin_Common_Req::mutable_arg4() {
  set_has_arg4();
  // @@protoc_insertion_point(field_mutable:Admin_Common_Req.arg4)
  return arg4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_Common_Req::release_arg4() {
  clear_has_arg4();
  return arg4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Req::set_allocated_arg4(::std::string* arg4) {
  if (arg4 != NULL) {
    set_has_arg4();
  } else {
    clear_has_arg4();
  }
  arg4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg4);
  // @@protoc_insertion_point(field_set_allocated:Admin_Common_Req.arg4)
}

// required int32 adminfd = 7;
 bool Admin_Common_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_Common_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_Common_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_Common_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_Common_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Req.adminfd)
  return adminfd_;
}
 void Admin_Common_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_Common_Req.adminfd)
}

// required int32 gid = 8;
 bool Admin_Common_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_Common_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_Common_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_Common_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_Common_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Req.gid)
  return gid_;
}
 void Admin_Common_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_Common_Req.gid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_Common_Rsp::kFuncFieldNumber;
const int Admin_Common_Rsp::kUidFieldNumber;
const int Admin_Common_Rsp::kSuccFieldNumber;
const int Admin_Common_Rsp::kArg1FieldNumber;
const int Admin_Common_Rsp::kArg2FieldNumber;
const int Admin_Common_Rsp::kArg3FieldNumber;
const int Admin_Common_Rsp::kArg4FieldNumber;
const int Admin_Common_Rsp::kAdminfdFieldNumber;
const int Admin_Common_Rsp::kGidFieldNumber;
#endif  // !_MSC_VER

Admin_Common_Rsp::Admin_Common_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_Common_Rsp)
}

void Admin_Common_Rsp::InitAsDefaultInstance() {
}

Admin_Common_Rsp::Admin_Common_Rsp(const Admin_Common_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_Common_Rsp)
}

void Admin_Common_Rsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_LONGLONG(0);
  succ_ = 0;
  arg1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adminfd_ = 0;
  gid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_Common_Rsp::~Admin_Common_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_Common_Rsp)
  SharedDtor();
}

void Admin_Common_Rsp::SharedDtor() {
  func_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg4_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Admin_Common_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_Common_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_Common_Rsp_descriptor_;
}

const Admin_Common_Rsp& Admin_Common_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_Common_Rsp* Admin_Common_Rsp::default_instance_ = NULL;

Admin_Common_Rsp* Admin_Common_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_Common_Rsp* n = new Admin_Common_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_Common_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_Common_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(succ_, adminfd_);
    if (has_func()) {
      func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    uid_ = GOOGLE_LONGLONG(0);
    if (has_arg1()) {
      arg1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_arg2()) {
      arg2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_arg3()) {
      arg3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_arg4()) {
      arg4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  gid_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_Common_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_Common_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string func = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->func().data(), this->func().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_Common_Rsp.func");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_succ;
        break;
      }

      // required int32 succ = 3;
      case 3: {
        if (tag == 24) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arg1;
        break;
      }

      // required string arg1 = 4;
      case 4: {
        if (tag == 34) {
         parse_arg1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arg1().data(), this->arg1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_Common_Rsp.arg1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_arg2;
        break;
      }

      // required string arg2 = 5;
      case 5: {
        if (tag == 42) {
         parse_arg2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arg2().data(), this->arg2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_Common_Rsp.arg2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_arg3;
        break;
      }

      // required string arg3 = 6;
      case 6: {
        if (tag == 50) {
         parse_arg3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arg3().data(), this->arg3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_Common_Rsp.arg3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_arg4;
        break;
      }

      // required string arg4 = 7;
      case 7: {
        if (tag == 58) {
         parse_arg4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arg4().data(), this->arg4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_Common_Rsp.arg4");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 8;
      case 8: {
        if (tag == 64) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gid;
        break;
      }

      // required int32 gid = 9;
      case 9: {
        if (tag == 72) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_Common_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_Common_Rsp)
  return false;
#undef DO_
}

void Admin_Common_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_Common_Rsp)
  // required string func = 1;
  if (has_func()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func().data(), this->func().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Rsp.func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->func(), output);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // required int32 succ = 3;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->succ(), output);
  }

  // required string arg1 = 4;
  if (has_arg1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg1().data(), this->arg1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Rsp.arg1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->arg1(), output);
  }

  // required string arg2 = 5;
  if (has_arg2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg2().data(), this->arg2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Rsp.arg2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->arg2(), output);
  }

  // required string arg3 = 6;
  if (has_arg3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg3().data(), this->arg3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Rsp.arg3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->arg3(), output);
  }

  // required string arg4 = 7;
  if (has_arg4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg4().data(), this->arg4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Rsp.arg4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->arg4(), output);
  }

  // required int32 adminfd = 8;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->adminfd(), output);
  }

  // required int32 gid = 9;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_Common_Rsp)
}

::google::protobuf::uint8* Admin_Common_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_Common_Rsp)
  // required string func = 1;
  if (has_func()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func().data(), this->func().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Rsp.func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->func(), target);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // required int32 succ = 3;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->succ(), target);
  }

  // required string arg1 = 4;
  if (has_arg1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg1().data(), this->arg1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Rsp.arg1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->arg1(), target);
  }

  // required string arg2 = 5;
  if (has_arg2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg2().data(), this->arg2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Rsp.arg2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->arg2(), target);
  }

  // required string arg3 = 6;
  if (has_arg3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg3().data(), this->arg3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Rsp.arg3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->arg3(), target);
  }

  // required string arg4 = 7;
  if (has_arg4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg4().data(), this->arg4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_Common_Rsp.arg4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->arg4(), target);
  }

  // required int32 adminfd = 8;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->adminfd(), target);
  }

  // required int32 gid = 9;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_Common_Rsp)
  return target;
}

int Admin_Common_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_func()) {
    // required string func = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func());
  }

  if (has_uid()) {
    // required int64 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_succ()) {
    // required int32 succ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  if (has_arg1()) {
    // required string arg1 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg1());
  }

  if (has_arg2()) {
    // required string arg2 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg2());
  }

  if (has_arg3()) {
    // required string arg3 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg3());
  }

  if (has_arg4()) {
    // required string arg4 = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg4());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_gid()) {
    // required int32 gid = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  return total_size;
}
int Admin_Common_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required string func = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func());

    // required int64 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 succ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

    // required string arg1 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg1());

    // required string arg2 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg2());

    // required string arg3 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg3());

    // required string arg4 = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arg4());

    // required int32 adminfd = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 gid = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_Common_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_Common_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_Common_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_Common_Rsp::MergeFrom(const Admin_Common_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_func()) {
      set_has_func();
      func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_);
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_arg1()) {
      set_has_arg1();
      arg1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arg1_);
    }
    if (from.has_arg2()) {
      set_has_arg2();
      arg2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arg2_);
    }
    if (from.has_arg3()) {
      set_has_arg3();
      arg3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arg3_);
    }
    if (from.has_arg4()) {
      set_has_arg4();
      arg4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arg4_);
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_Common_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_Common_Rsp::CopyFrom(const Admin_Common_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_Common_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void Admin_Common_Rsp::Swap(Admin_Common_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_Common_Rsp::InternalSwap(Admin_Common_Rsp* other) {
  func_.Swap(&other->func_);
  std::swap(uid_, other->uid_);
  std::swap(succ_, other->succ_);
  arg1_.Swap(&other->arg1_);
  arg2_.Swap(&other->arg2_);
  arg3_.Swap(&other->arg3_);
  arg4_.Swap(&other->arg4_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(gid_, other->gid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_Common_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_Common_Rsp_descriptor_;
  metadata.reflection = Admin_Common_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_Common_Rsp

// required string func = 1;
 bool Admin_Common_Rsp::has_func() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_Common_Rsp::set_has_func() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_Common_Rsp::clear_has_func() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_Common_Rsp::clear_func() {
  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_func();
}
 const ::std::string& Admin_Common_Rsp::func() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Rsp.func)
  return func_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Rsp::set_func(const ::std::string& value) {
  set_has_func();
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_Common_Rsp.func)
}
 void Admin_Common_Rsp::set_func(const char* value) {
  set_has_func();
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_Common_Rsp.func)
}
 void Admin_Common_Rsp::set_func(const char* value, size_t size) {
  set_has_func();
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_Common_Rsp.func)
}
 ::std::string* Admin_Common_Rsp::mutable_func() {
  set_has_func();
  // @@protoc_insertion_point(field_mutable:Admin_Common_Rsp.func)
  return func_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_Common_Rsp::release_func() {
  clear_has_func();
  return func_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Rsp::set_allocated_func(::std::string* func) {
  if (func != NULL) {
    set_has_func();
  } else {
    clear_has_func();
  }
  func_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func);
  // @@protoc_insertion_point(field_set_allocated:Admin_Common_Rsp.func)
}

// required int64 uid = 2;
 bool Admin_Common_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_Common_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_Common_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_Common_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_Common_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Rsp.uid)
  return uid_;
}
 void Admin_Common_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_Common_Rsp.uid)
}

// required int32 succ = 3;
 bool Admin_Common_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_Common_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_Common_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_Common_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_Common_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Rsp.succ)
  return succ_;
}
 void Admin_Common_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_Common_Rsp.succ)
}

// required string arg1 = 4;
 bool Admin_Common_Rsp::has_arg1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_Common_Rsp::set_has_arg1() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_Common_Rsp::clear_has_arg1() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_Common_Rsp::clear_arg1() {
  arg1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_arg1();
}
 const ::std::string& Admin_Common_Rsp::arg1() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Rsp.arg1)
  return arg1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Rsp::set_arg1(const ::std::string& value) {
  set_has_arg1();
  arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_Common_Rsp.arg1)
}
 void Admin_Common_Rsp::set_arg1(const char* value) {
  set_has_arg1();
  arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_Common_Rsp.arg1)
}
 void Admin_Common_Rsp::set_arg1(const char* value, size_t size) {
  set_has_arg1();
  arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_Common_Rsp.arg1)
}
 ::std::string* Admin_Common_Rsp::mutable_arg1() {
  set_has_arg1();
  // @@protoc_insertion_point(field_mutable:Admin_Common_Rsp.arg1)
  return arg1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_Common_Rsp::release_arg1() {
  clear_has_arg1();
  return arg1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Rsp::set_allocated_arg1(::std::string* arg1) {
  if (arg1 != NULL) {
    set_has_arg1();
  } else {
    clear_has_arg1();
  }
  arg1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg1);
  // @@protoc_insertion_point(field_set_allocated:Admin_Common_Rsp.arg1)
}

// required string arg2 = 5;
 bool Admin_Common_Rsp::has_arg2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_Common_Rsp::set_has_arg2() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_Common_Rsp::clear_has_arg2() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_Common_Rsp::clear_arg2() {
  arg2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_arg2();
}
 const ::std::string& Admin_Common_Rsp::arg2() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Rsp.arg2)
  return arg2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Rsp::set_arg2(const ::std::string& value) {
  set_has_arg2();
  arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_Common_Rsp.arg2)
}
 void Admin_Common_Rsp::set_arg2(const char* value) {
  set_has_arg2();
  arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_Common_Rsp.arg2)
}
 void Admin_Common_Rsp::set_arg2(const char* value, size_t size) {
  set_has_arg2();
  arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_Common_Rsp.arg2)
}
 ::std::string* Admin_Common_Rsp::mutable_arg2() {
  set_has_arg2();
  // @@protoc_insertion_point(field_mutable:Admin_Common_Rsp.arg2)
  return arg2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_Common_Rsp::release_arg2() {
  clear_has_arg2();
  return arg2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Rsp::set_allocated_arg2(::std::string* arg2) {
  if (arg2 != NULL) {
    set_has_arg2();
  } else {
    clear_has_arg2();
  }
  arg2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg2);
  // @@protoc_insertion_point(field_set_allocated:Admin_Common_Rsp.arg2)
}

// required string arg3 = 6;
 bool Admin_Common_Rsp::has_arg3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_Common_Rsp::set_has_arg3() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_Common_Rsp::clear_has_arg3() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_Common_Rsp::clear_arg3() {
  arg3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_arg3();
}
 const ::std::string& Admin_Common_Rsp::arg3() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Rsp.arg3)
  return arg3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Rsp::set_arg3(const ::std::string& value) {
  set_has_arg3();
  arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_Common_Rsp.arg3)
}
 void Admin_Common_Rsp::set_arg3(const char* value) {
  set_has_arg3();
  arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_Common_Rsp.arg3)
}
 void Admin_Common_Rsp::set_arg3(const char* value, size_t size) {
  set_has_arg3();
  arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_Common_Rsp.arg3)
}
 ::std::string* Admin_Common_Rsp::mutable_arg3() {
  set_has_arg3();
  // @@protoc_insertion_point(field_mutable:Admin_Common_Rsp.arg3)
  return arg3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_Common_Rsp::release_arg3() {
  clear_has_arg3();
  return arg3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Rsp::set_allocated_arg3(::std::string* arg3) {
  if (arg3 != NULL) {
    set_has_arg3();
  } else {
    clear_has_arg3();
  }
  arg3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg3);
  // @@protoc_insertion_point(field_set_allocated:Admin_Common_Rsp.arg3)
}

// required string arg4 = 7;
 bool Admin_Common_Rsp::has_arg4() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_Common_Rsp::set_has_arg4() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_Common_Rsp::clear_has_arg4() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_Common_Rsp::clear_arg4() {
  arg4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_arg4();
}
 const ::std::string& Admin_Common_Rsp::arg4() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Rsp.arg4)
  return arg4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Rsp::set_arg4(const ::std::string& value) {
  set_has_arg4();
  arg4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_Common_Rsp.arg4)
}
 void Admin_Common_Rsp::set_arg4(const char* value) {
  set_has_arg4();
  arg4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_Common_Rsp.arg4)
}
 void Admin_Common_Rsp::set_arg4(const char* value, size_t size) {
  set_has_arg4();
  arg4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_Common_Rsp.arg4)
}
 ::std::string* Admin_Common_Rsp::mutable_arg4() {
  set_has_arg4();
  // @@protoc_insertion_point(field_mutable:Admin_Common_Rsp.arg4)
  return arg4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_Common_Rsp::release_arg4() {
  clear_has_arg4();
  return arg4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_Common_Rsp::set_allocated_arg4(::std::string* arg4) {
  if (arg4 != NULL) {
    set_has_arg4();
  } else {
    clear_has_arg4();
  }
  arg4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg4);
  // @@protoc_insertion_point(field_set_allocated:Admin_Common_Rsp.arg4)
}

// required int32 adminfd = 8;
 bool Admin_Common_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_Common_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_Common_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_Common_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_Common_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Rsp.adminfd)
  return adminfd_;
}
 void Admin_Common_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_Common_Rsp.adminfd)
}

// required int32 gid = 9;
 bool Admin_Common_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Admin_Common_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000100u;
}
 void Admin_Common_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Admin_Common_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_Common_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_Common_Rsp.gid)
  return gid_;
}
 void Admin_Common_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_Common_Rsp.gid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_DelProp_Req::kUidFieldNumber;
const int Admin_DelProp_Req::kPositionFieldNumber;
const int Admin_DelProp_Req::kGidFieldNumber;
const int Admin_DelProp_Req::kAdminfdFieldNumber;
const int Admin_DelProp_Req::kFromwebFieldNumber;
const int Admin_DelProp_Req::kPropIDFieldNumber;
#endif  // !_MSC_VER

Admin_DelProp_Req::Admin_DelProp_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_DelProp_Req)
}

void Admin_DelProp_Req::InitAsDefaultInstance() {
}

Admin_DelProp_Req::Admin_DelProp_Req(const Admin_DelProp_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_DelProp_Req)
}

void Admin_DelProp_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  propid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_DelProp_Req::~Admin_DelProp_Req() {
  // @@protoc_insertion_point(destructor:Admin_DelProp_Req)
  SharedDtor();
}

void Admin_DelProp_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_DelProp_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_DelProp_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_DelProp_Req_descriptor_;
}

const Admin_DelProp_Req& Admin_DelProp_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_DelProp_Req* Admin_DelProp_Req::default_instance_ = NULL;

Admin_DelProp_Req* Admin_DelProp_Req::New(::google::protobuf::Arena* arena) const {
  Admin_DelProp_Req* n = new Admin_DelProp_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_DelProp_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_DelProp_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, propid_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_DelProp_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_DelProp_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required int32 position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_propID;
        break;
      }

      // required int64 propID = 6;
      case 6: {
        if (tag == 48) {
         parse_propID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_DelProp_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_DelProp_Req)
  return false;
#undef DO_
}

void Admin_DelProp_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_DelProp_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fromweb(), output);
  }

  // required int64 propID = 6;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->propid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_DelProp_Req)
}

::google::protobuf::uint8* Admin_DelProp_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_DelProp_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fromweb(), target);
  }

  // required int64 propID = 6;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->propid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_DelProp_Req)
  return target;
}

int Admin_DelProp_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_position()) {
    // required int32 position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  if (has_gid()) {
    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_propid()) {
    // required int64 propID = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->propid());
  }

  return total_size;
}
int Admin_DelProp_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());

    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int64 propID = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->propid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_DelProp_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_DelProp_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_DelProp_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_DelProp_Req::MergeFrom(const Admin_DelProp_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_propid()) {
      set_propid(from.propid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_DelProp_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_DelProp_Req::CopyFrom(const Admin_DelProp_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_DelProp_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void Admin_DelProp_Req::Swap(Admin_DelProp_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_DelProp_Req::InternalSwap(Admin_DelProp_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(position_, other->position_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(propid_, other->propid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_DelProp_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_DelProp_Req_descriptor_;
  metadata.reflection = Admin_DelProp_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_DelProp_Req

// required int64 uid = 1;
 bool Admin_DelProp_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_DelProp_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_DelProp_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_DelProp_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_DelProp_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Req.uid)
  return uid_;
}
 void Admin_DelProp_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Req.uid)
}

// required int32 position = 2;
 bool Admin_DelProp_Req::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_DelProp_Req::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_DelProp_Req::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_DelProp_Req::clear_position() {
  position_ = 0;
  clear_has_position();
}
 ::google::protobuf::int32 Admin_DelProp_Req::position() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Req.position)
  return position_;
}
 void Admin_DelProp_Req::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Req.position)
}

// required int32 gid = 3;
 bool Admin_DelProp_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_DelProp_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_DelProp_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_DelProp_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_DelProp_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Req.gid)
  return gid_;
}
 void Admin_DelProp_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Req.gid)
}

// required int32 adminfd = 4;
 bool Admin_DelProp_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_DelProp_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_DelProp_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_DelProp_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_DelProp_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Req.adminfd)
  return adminfd_;
}
 void Admin_DelProp_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Req.adminfd)
}

// optional bool fromweb = 5 [default = false];
 bool Admin_DelProp_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_DelProp_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_DelProp_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_DelProp_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_DelProp_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Req.fromweb)
  return fromweb_;
}
 void Admin_DelProp_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Req.fromweb)
}

// required int64 propID = 6;
 bool Admin_DelProp_Req::has_propid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_DelProp_Req::set_has_propid() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_DelProp_Req::clear_has_propid() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_DelProp_Req::clear_propid() {
  propid_ = GOOGLE_LONGLONG(0);
  clear_has_propid();
}
 ::google::protobuf::int64 Admin_DelProp_Req::propid() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Req.propID)
  return propid_;
}
 void Admin_DelProp_Req::set_propid(::google::protobuf::int64 value) {
  set_has_propid();
  propid_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Req.propID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_DelProp_Rsp::kUidFieldNumber;
const int Admin_DelProp_Rsp::kPropIDFieldNumber;
const int Admin_DelProp_Rsp::kInfoIDFieldNumber;
const int Admin_DelProp_Rsp::kLevelFieldNumber;
const int Admin_DelProp_Rsp::kDelamountFieldNumber;
const int Admin_DelProp_Rsp::kGidFieldNumber;
const int Admin_DelProp_Rsp::kAdminfdFieldNumber;
const int Admin_DelProp_Rsp::kFromwebFieldNumber;
const int Admin_DelProp_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_DelProp_Rsp::Admin_DelProp_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_DelProp_Rsp)
}

void Admin_DelProp_Rsp::InitAsDefaultInstance() {
}

Admin_DelProp_Rsp::Admin_DelProp_Rsp(const Admin_DelProp_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_DelProp_Rsp)
}

void Admin_DelProp_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  propid_ = GOOGLE_LONGLONG(0);
  infoid_ = 0;
  level_ = 0;
  delamount_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_DelProp_Rsp::~Admin_DelProp_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_DelProp_Rsp)
  SharedDtor();
}

void Admin_DelProp_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_DelProp_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_DelProp_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_DelProp_Rsp_descriptor_;
}

const Admin_DelProp_Rsp& Admin_DelProp_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_DelProp_Rsp* Admin_DelProp_Rsp::default_instance_ = NULL;

Admin_DelProp_Rsp* Admin_DelProp_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_DelProp_Rsp* n = new Admin_DelProp_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_DelProp_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_DelProp_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, fromweb_);
  }
  succ_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_DelProp_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_DelProp_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propID;
        break;
      }

      // required int64 propID = 2;
      case 2: {
        if (tag == 16) {
         parse_propID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_infoID;
        break;
      }

      // required int32 infoID = 3;
      case 3: {
        if (tag == 24) {
         parse_infoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infoid_)));
          set_has_infoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_delamount;
        break;
      }

      // required int32 delamount = 5;
      case 5: {
        if (tag == 40) {
         parse_delamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delamount_)));
          set_has_delamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gid;
        break;
      }

      // required int32 gid = 6;
      case 6: {
        if (tag == 48) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 7;
      case 7: {
        if (tag == 56) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_succ;
        break;
      }

      // required int32 succ = 9;
      case 9: {
        if (tag == 72) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_DelProp_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_DelProp_Rsp)
  return false;
#undef DO_
}

void Admin_DelProp_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_DelProp_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int64 propID = 2;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->propid(), output);
  }

  // required int32 infoID = 3;
  if (has_infoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->infoid(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 delamount = 5;
  if (has_delamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->delamount(), output);
  }

  // required int32 gid = 6;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gid(), output);
  }

  // required int32 adminfd = 7;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->adminfd(), output);
  }

  // optional bool fromweb = 8 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fromweb(), output);
  }

  // required int32 succ = 9;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_DelProp_Rsp)
}

::google::protobuf::uint8* Admin_DelProp_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_DelProp_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int64 propID = 2;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->propid(), target);
  }

  // required int32 infoID = 3;
  if (has_infoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->infoid(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 delamount = 5;
  if (has_delamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->delamount(), target);
  }

  // required int32 gid = 6;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gid(), target);
  }

  // required int32 adminfd = 7;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->adminfd(), target);
  }

  // optional bool fromweb = 8 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fromweb(), target);
  }

  // required int32 succ = 9;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_DelProp_Rsp)
  return target;
}

int Admin_DelProp_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_propid()) {
    // required int64 propID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->propid());
  }

  if (has_infoid()) {
    // required int32 infoID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infoid());
  }

  if (has_level()) {
    // required int32 level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_delamount()) {
    // required int32 delamount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delamount());
  }

  if (has_gid()) {
    // required int32 gid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_DelProp_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000017f) ^ 0x0000017f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int64 propID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->propid());

    // required int32 infoID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infoid());

    // required int32 level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 delamount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delamount());

    // required int32 gid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 8 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_DelProp_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_DelProp_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_DelProp_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_DelProp_Rsp::MergeFrom(const Admin_DelProp_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_infoid()) {
      set_infoid(from.infoid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_delamount()) {
      set_delamount(from.delamount());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_DelProp_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_DelProp_Rsp::CopyFrom(const Admin_DelProp_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_DelProp_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000017f) != 0x0000017f) return false;

  return true;
}

void Admin_DelProp_Rsp::Swap(Admin_DelProp_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_DelProp_Rsp::InternalSwap(Admin_DelProp_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(propid_, other->propid_);
  std::swap(infoid_, other->infoid_);
  std::swap(level_, other->level_);
  std::swap(delamount_, other->delamount_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_DelProp_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_DelProp_Rsp_descriptor_;
  metadata.reflection = Admin_DelProp_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_DelProp_Rsp

// required int64 uid = 1;
 bool Admin_DelProp_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_DelProp_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_DelProp_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_DelProp_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_DelProp_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Rsp.uid)
  return uid_;
}
 void Admin_DelProp_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Rsp.uid)
}

// required int64 propID = 2;
 bool Admin_DelProp_Rsp::has_propid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_DelProp_Rsp::set_has_propid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_DelProp_Rsp::clear_has_propid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_DelProp_Rsp::clear_propid() {
  propid_ = GOOGLE_LONGLONG(0);
  clear_has_propid();
}
 ::google::protobuf::int64 Admin_DelProp_Rsp::propid() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Rsp.propID)
  return propid_;
}
 void Admin_DelProp_Rsp::set_propid(::google::protobuf::int64 value) {
  set_has_propid();
  propid_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Rsp.propID)
}

// required int32 infoID = 3;
 bool Admin_DelProp_Rsp::has_infoid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_DelProp_Rsp::set_has_infoid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_DelProp_Rsp::clear_has_infoid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_DelProp_Rsp::clear_infoid() {
  infoid_ = 0;
  clear_has_infoid();
}
 ::google::protobuf::int32 Admin_DelProp_Rsp::infoid() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Rsp.infoID)
  return infoid_;
}
 void Admin_DelProp_Rsp::set_infoid(::google::protobuf::int32 value) {
  set_has_infoid();
  infoid_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Rsp.infoID)
}

// required int32 level = 4;
 bool Admin_DelProp_Rsp::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_DelProp_Rsp::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_DelProp_Rsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_DelProp_Rsp::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 Admin_DelProp_Rsp::level() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Rsp.level)
  return level_;
}
 void Admin_DelProp_Rsp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Rsp.level)
}

// required int32 delamount = 5;
 bool Admin_DelProp_Rsp::has_delamount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_DelProp_Rsp::set_has_delamount() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_DelProp_Rsp::clear_has_delamount() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_DelProp_Rsp::clear_delamount() {
  delamount_ = 0;
  clear_has_delamount();
}
 ::google::protobuf::int32 Admin_DelProp_Rsp::delamount() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Rsp.delamount)
  return delamount_;
}
 void Admin_DelProp_Rsp::set_delamount(::google::protobuf::int32 value) {
  set_has_delamount();
  delamount_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Rsp.delamount)
}

// required int32 gid = 6;
 bool Admin_DelProp_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_DelProp_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_DelProp_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_DelProp_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_DelProp_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Rsp.gid)
  return gid_;
}
 void Admin_DelProp_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Rsp.gid)
}

// required int32 adminfd = 7;
 bool Admin_DelProp_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_DelProp_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_DelProp_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_DelProp_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_DelProp_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Rsp.adminfd)
  return adminfd_;
}
 void Admin_DelProp_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Rsp.adminfd)
}

// optional bool fromweb = 8 [default = false];
 bool Admin_DelProp_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_DelProp_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_DelProp_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_DelProp_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_DelProp_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Rsp.fromweb)
  return fromweb_;
}
 void Admin_DelProp_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Rsp.fromweb)
}

// required int32 succ = 9;
 bool Admin_DelProp_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Admin_DelProp_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000100u;
}
 void Admin_DelProp_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Admin_DelProp_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_DelProp_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_DelProp_Rsp.succ)
  return succ_;
}
 void Admin_DelProp_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_DelProp_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_RunTask_Req::kUidFieldNumber;
const int Admin_RunTask_Req::kTaskidFieldNumber;
const int Admin_RunTask_Req::kStepFieldNumber;
const int Admin_RunTask_Req::kGidFieldNumber;
const int Admin_RunTask_Req::kAdminfdFieldNumber;
const int Admin_RunTask_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_RunTask_Req::Admin_RunTask_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_RunTask_Req)
}

void Admin_RunTask_Req::InitAsDefaultInstance() {
}

Admin_RunTask_Req::Admin_RunTask_Req(const Admin_RunTask_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_RunTask_Req)
}

void Admin_RunTask_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  taskid_ = 0;
  step_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_RunTask_Req::~Admin_RunTask_Req() {
  // @@protoc_insertion_point(destructor:Admin_RunTask_Req)
  SharedDtor();
}

void Admin_RunTask_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_RunTask_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_RunTask_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_RunTask_Req_descriptor_;
}

const Admin_RunTask_Req& Admin_RunTask_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_RunTask_Req* Admin_RunTask_Req::default_instance_ = NULL;

Admin_RunTask_Req* Admin_RunTask_Req::New(::google::protobuf::Arena* arena) const {
  Admin_RunTask_Req* n = new Admin_RunTask_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_RunTask_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_RunTask_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, fromweb_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_RunTask_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_RunTask_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_taskid;
        break;
      }

      // required int32 taskid = 2;
      case 2: {
        if (tag == 16) {
         parse_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_step;
        break;
      }

      // required int32 step = 3;
      case 3: {
        if (tag == 24) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }

      // required int32 gid = 4;
      case 4: {
        if (tag == 32) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 5;
      case 5: {
        if (tag == 40) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_RunTask_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_RunTask_Req)
  return false;
#undef DO_
}

void Admin_RunTask_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_RunTask_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 taskid = 2;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->taskid(), output);
  }

  // required int32 step = 3;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->step(), output);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_RunTask_Req)
}

::google::protobuf::uint8* Admin_RunTask_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_RunTask_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 taskid = 2;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->taskid(), target);
  }

  // required int32 step = 3;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->step(), target);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_RunTask_Req)
  return target;
}

int Admin_RunTask_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_taskid()) {
    // required int32 taskid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());
  }

  if (has_step()) {
    // required int32 step = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());
  }

  if (has_gid()) {
    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_RunTask_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 taskid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());

    // required int32 step = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());

    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_RunTask_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_RunTask_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_RunTask_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_RunTask_Req::MergeFrom(const Admin_RunTask_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_RunTask_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_RunTask_Req::CopyFrom(const Admin_RunTask_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_RunTask_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Admin_RunTask_Req::Swap(Admin_RunTask_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_RunTask_Req::InternalSwap(Admin_RunTask_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(taskid_, other->taskid_);
  std::swap(step_, other->step_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_RunTask_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_RunTask_Req_descriptor_;
  metadata.reflection = Admin_RunTask_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_RunTask_Req

// required int64 uid = 1;
 bool Admin_RunTask_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_RunTask_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_RunTask_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_RunTask_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_RunTask_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Req.uid)
  return uid_;
}
 void Admin_RunTask_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Req.uid)
}

// required int32 taskid = 2;
 bool Admin_RunTask_Req::has_taskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_RunTask_Req::set_has_taskid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_RunTask_Req::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_RunTask_Req::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
 ::google::protobuf::int32 Admin_RunTask_Req::taskid() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Req.taskid)
  return taskid_;
}
 void Admin_RunTask_Req::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Req.taskid)
}

// required int32 step = 3;
 bool Admin_RunTask_Req::has_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_RunTask_Req::set_has_step() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_RunTask_Req::clear_has_step() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_RunTask_Req::clear_step() {
  step_ = 0;
  clear_has_step();
}
 ::google::protobuf::int32 Admin_RunTask_Req::step() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Req.step)
  return step_;
}
 void Admin_RunTask_Req::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Req.step)
}

// required int32 gid = 4;
 bool Admin_RunTask_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_RunTask_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_RunTask_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_RunTask_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_RunTask_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Req.gid)
  return gid_;
}
 void Admin_RunTask_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Req.gid)
}

// required int32 adminfd = 5;
 bool Admin_RunTask_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_RunTask_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_RunTask_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_RunTask_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_RunTask_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Req.adminfd)
  return adminfd_;
}
 void Admin_RunTask_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Req.adminfd)
}

// optional bool fromweb = 6 [default = false];
 bool Admin_RunTask_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_RunTask_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_RunTask_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_RunTask_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_RunTask_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Req.fromweb)
  return fromweb_;
}
 void Admin_RunTask_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_RunTask_Rsp::kUidFieldNumber;
const int Admin_RunTask_Rsp::kTaskidFieldNumber;
const int Admin_RunTask_Rsp::kStepFieldNumber;
const int Admin_RunTask_Rsp::kGidFieldNumber;
const int Admin_RunTask_Rsp::kAdminfdFieldNumber;
const int Admin_RunTask_Rsp::kFromwebFieldNumber;
const int Admin_RunTask_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_RunTask_Rsp::Admin_RunTask_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_RunTask_Rsp)
}

void Admin_RunTask_Rsp::InitAsDefaultInstance() {
}

Admin_RunTask_Rsp::Admin_RunTask_Rsp(const Admin_RunTask_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_RunTask_Rsp)
}

void Admin_RunTask_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  taskid_ = 0;
  step_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_RunTask_Rsp::~Admin_RunTask_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_RunTask_Rsp)
  SharedDtor();
}

void Admin_RunTask_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_RunTask_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_RunTask_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_RunTask_Rsp_descriptor_;
}

const Admin_RunTask_Rsp& Admin_RunTask_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_RunTask_Rsp* Admin_RunTask_Rsp::default_instance_ = NULL;

Admin_RunTask_Rsp* Admin_RunTask_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_RunTask_Rsp* n = new Admin_RunTask_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_RunTask_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_RunTask_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, succ_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_RunTask_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_RunTask_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_taskid;
        break;
      }

      // required int32 taskid = 2;
      case 2: {
        if (tag == 16) {
         parse_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_step;
        break;
      }

      // required int32 step = 3;
      case 3: {
        if (tag == 24) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }

      // required int32 gid = 4;
      case 4: {
        if (tag == 32) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 5;
      case 5: {
        if (tag == 40) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_succ;
        break;
      }

      // required int32 succ = 7;
      case 7: {
        if (tag == 56) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_RunTask_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_RunTask_Rsp)
  return false;
#undef DO_
}

void Admin_RunTask_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_RunTask_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 taskid = 2;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->taskid(), output);
  }

  // required int32 step = 3;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->step(), output);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fromweb(), output);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_RunTask_Rsp)
}

::google::protobuf::uint8* Admin_RunTask_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_RunTask_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 taskid = 2;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->taskid(), target);
  }

  // required int32 step = 3;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->step(), target);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fromweb(), target);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_RunTask_Rsp)
  return target;
}

int Admin_RunTask_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_taskid()) {
    // required int32 taskid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());
  }

  if (has_step()) {
    // required int32 step = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());
  }

  if (has_gid()) {
    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_RunTask_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000005f) ^ 0x0000005f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 taskid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());

    // required int32 step = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());

    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_RunTask_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_RunTask_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_RunTask_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_RunTask_Rsp::MergeFrom(const Admin_RunTask_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_RunTask_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_RunTask_Rsp::CopyFrom(const Admin_RunTask_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_RunTask_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void Admin_RunTask_Rsp::Swap(Admin_RunTask_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_RunTask_Rsp::InternalSwap(Admin_RunTask_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(taskid_, other->taskid_);
  std::swap(step_, other->step_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_RunTask_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_RunTask_Rsp_descriptor_;
  metadata.reflection = Admin_RunTask_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_RunTask_Rsp

// required int64 uid = 1;
 bool Admin_RunTask_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_RunTask_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_RunTask_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_RunTask_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_RunTask_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Rsp.uid)
  return uid_;
}
 void Admin_RunTask_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Rsp.uid)
}

// required int32 taskid = 2;
 bool Admin_RunTask_Rsp::has_taskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_RunTask_Rsp::set_has_taskid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_RunTask_Rsp::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_RunTask_Rsp::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
 ::google::protobuf::int32 Admin_RunTask_Rsp::taskid() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Rsp.taskid)
  return taskid_;
}
 void Admin_RunTask_Rsp::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Rsp.taskid)
}

// required int32 step = 3;
 bool Admin_RunTask_Rsp::has_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_RunTask_Rsp::set_has_step() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_RunTask_Rsp::clear_has_step() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_RunTask_Rsp::clear_step() {
  step_ = 0;
  clear_has_step();
}
 ::google::protobuf::int32 Admin_RunTask_Rsp::step() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Rsp.step)
  return step_;
}
 void Admin_RunTask_Rsp::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Rsp.step)
}

// required int32 gid = 4;
 bool Admin_RunTask_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_RunTask_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_RunTask_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_RunTask_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_RunTask_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Rsp.gid)
  return gid_;
}
 void Admin_RunTask_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Rsp.gid)
}

// required int32 adminfd = 5;
 bool Admin_RunTask_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_RunTask_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_RunTask_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_RunTask_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_RunTask_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Rsp.adminfd)
  return adminfd_;
}
 void Admin_RunTask_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Rsp.adminfd)
}

// optional bool fromweb = 6 [default = false];
 bool Admin_RunTask_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_RunTask_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_RunTask_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_RunTask_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_RunTask_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Rsp.fromweb)
  return fromweb_;
}
 void Admin_RunTask_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Rsp.fromweb)
}

// required int32 succ = 7;
 bool Admin_RunTask_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_RunTask_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_RunTask_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_RunTask_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_RunTask_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_RunTask_Rsp.succ)
  return succ_;
}
 void Admin_RunTask_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_RunTask_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_BroadCast_Req::kMsgFieldNumber;
const int Admin_BroadCast_Req::kGidFieldNumber;
const int Admin_BroadCast_Req::kAdminfdFieldNumber;
const int Admin_BroadCast_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_BroadCast_Req::Admin_BroadCast_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_BroadCast_Req)
}

void Admin_BroadCast_Req::InitAsDefaultInstance() {
}

Admin_BroadCast_Req::Admin_BroadCast_Req(const Admin_BroadCast_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_BroadCast_Req)
}

void Admin_BroadCast_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BroadCast_Req::~Admin_BroadCast_Req() {
  // @@protoc_insertion_point(destructor:Admin_BroadCast_Req)
  SharedDtor();
}

void Admin_BroadCast_Req::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Admin_BroadCast_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_BroadCast_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BroadCast_Req_descriptor_;
}

const Admin_BroadCast_Req& Admin_BroadCast_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_BroadCast_Req* Admin_BroadCast_Req::default_instance_ = NULL;

Admin_BroadCast_Req* Admin_BroadCast_Req::New(::google::protobuf::Arena* arena) const {
  Admin_BroadCast_Req* n = new Admin_BroadCast_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_BroadCast_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_BroadCast_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(gid_, fromweb_);
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_BroadCast_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_BroadCast_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_BroadCast_Req.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // required int32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 3;
      case 3: {
        if (tag == 24) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_BroadCast_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_BroadCast_Req)
  return false;
#undef DO_
}

void Admin_BroadCast_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_BroadCast_Req)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_BroadCast_Req.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gid(), output);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adminfd(), output);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_BroadCast_Req)
}

::google::protobuf::uint8* Admin_BroadCast_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_BroadCast_Req)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_BroadCast_Req.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gid(), target);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adminfd(), target);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_BroadCast_Req)
  return target;
}

int Admin_BroadCast_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msg()) {
    // required string msg = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  if (has_gid()) {
    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_BroadCast_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string msg = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());

    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_BroadCast_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_BroadCast_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BroadCast_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BroadCast_Req::MergeFrom(const Admin_BroadCast_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_BroadCast_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BroadCast_Req::CopyFrom(const Admin_BroadCast_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BroadCast_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Admin_BroadCast_Req::Swap(Admin_BroadCast_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_BroadCast_Req::InternalSwap(Admin_BroadCast_Req* other) {
  msg_.Swap(&other->msg_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_BroadCast_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BroadCast_Req_descriptor_;
  metadata.reflection = Admin_BroadCast_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_BroadCast_Req

// required string msg = 1;
 bool Admin_BroadCast_Req::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_BroadCast_Req::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_BroadCast_Req::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_BroadCast_Req::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& Admin_BroadCast_Req::msg() const {
  // @@protoc_insertion_point(field_get:Admin_BroadCast_Req.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_BroadCast_Req::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_BroadCast_Req.msg)
}
 void Admin_BroadCast_Req::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_BroadCast_Req.msg)
}
 void Admin_BroadCast_Req::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_BroadCast_Req.msg)
}
 ::std::string* Admin_BroadCast_Req::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:Admin_BroadCast_Req.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_BroadCast_Req::release_msg() {
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_BroadCast_Req::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Admin_BroadCast_Req.msg)
}

// required int32 gid = 2;
 bool Admin_BroadCast_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_BroadCast_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_BroadCast_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_BroadCast_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_BroadCast_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_BroadCast_Req.gid)
  return gid_;
}
 void Admin_BroadCast_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_BroadCast_Req.gid)
}

// required int32 adminfd = 3;
 bool Admin_BroadCast_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_BroadCast_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_BroadCast_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_BroadCast_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_BroadCast_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_BroadCast_Req.adminfd)
  return adminfd_;
}
 void Admin_BroadCast_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_BroadCast_Req.adminfd)
}

// optional bool fromweb = 4 [default = false];
 bool Admin_BroadCast_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_BroadCast_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_BroadCast_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_BroadCast_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_BroadCast_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_BroadCast_Req.fromweb)
  return fromweb_;
}
 void Admin_BroadCast_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_BroadCast_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_BroadCast_Rsp::kMsgFieldNumber;
const int Admin_BroadCast_Rsp::kGidFieldNumber;
const int Admin_BroadCast_Rsp::kAdminfdFieldNumber;
const int Admin_BroadCast_Rsp::kFromwebFieldNumber;
const int Admin_BroadCast_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_BroadCast_Rsp::Admin_BroadCast_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_BroadCast_Rsp)
}

void Admin_BroadCast_Rsp::InitAsDefaultInstance() {
}

Admin_BroadCast_Rsp::Admin_BroadCast_Rsp(const Admin_BroadCast_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_BroadCast_Rsp)
}

void Admin_BroadCast_Rsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BroadCast_Rsp::~Admin_BroadCast_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_BroadCast_Rsp)
  SharedDtor();
}

void Admin_BroadCast_Rsp::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Admin_BroadCast_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_BroadCast_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BroadCast_Rsp_descriptor_;
}

const Admin_BroadCast_Rsp& Admin_BroadCast_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_BroadCast_Rsp* Admin_BroadCast_Rsp::default_instance_ = NULL;

Admin_BroadCast_Rsp* Admin_BroadCast_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_BroadCast_Rsp* n = new Admin_BroadCast_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_BroadCast_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_BroadCast_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(gid_, succ_);
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_BroadCast_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_BroadCast_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_BroadCast_Rsp.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // required int32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 3;
      case 3: {
        if (tag == 24) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_succ;
        break;
      }

      // required int32 succ = 5;
      case 5: {
        if (tag == 40) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_BroadCast_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_BroadCast_Rsp)
  return false;
#undef DO_
}

void Admin_BroadCast_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_BroadCast_Rsp)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_BroadCast_Rsp.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gid(), output);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adminfd(), output);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }

  // required int32 succ = 5;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_BroadCast_Rsp)
}

::google::protobuf::uint8* Admin_BroadCast_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_BroadCast_Rsp)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_BroadCast_Rsp.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gid(), target);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adminfd(), target);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }

  // required int32 succ = 5;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_BroadCast_Rsp)
  return target;
}

int Admin_BroadCast_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msg()) {
    // required string msg = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  if (has_gid()) {
    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_BroadCast_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required string msg = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());

    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_BroadCast_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_BroadCast_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BroadCast_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BroadCast_Rsp::MergeFrom(const Admin_BroadCast_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_BroadCast_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BroadCast_Rsp::CopyFrom(const Admin_BroadCast_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BroadCast_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void Admin_BroadCast_Rsp::Swap(Admin_BroadCast_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_BroadCast_Rsp::InternalSwap(Admin_BroadCast_Rsp* other) {
  msg_.Swap(&other->msg_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_BroadCast_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BroadCast_Rsp_descriptor_;
  metadata.reflection = Admin_BroadCast_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_BroadCast_Rsp

// required string msg = 1;
 bool Admin_BroadCast_Rsp::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_BroadCast_Rsp::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_BroadCast_Rsp::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_BroadCast_Rsp::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& Admin_BroadCast_Rsp::msg() const {
  // @@protoc_insertion_point(field_get:Admin_BroadCast_Rsp.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_BroadCast_Rsp::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_BroadCast_Rsp.msg)
}
 void Admin_BroadCast_Rsp::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_BroadCast_Rsp.msg)
}
 void Admin_BroadCast_Rsp::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_BroadCast_Rsp.msg)
}
 ::std::string* Admin_BroadCast_Rsp::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:Admin_BroadCast_Rsp.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_BroadCast_Rsp::release_msg() {
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_BroadCast_Rsp::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Admin_BroadCast_Rsp.msg)
}

// required int32 gid = 2;
 bool Admin_BroadCast_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_BroadCast_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_BroadCast_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_BroadCast_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_BroadCast_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_BroadCast_Rsp.gid)
  return gid_;
}
 void Admin_BroadCast_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_BroadCast_Rsp.gid)
}

// required int32 adminfd = 3;
 bool Admin_BroadCast_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_BroadCast_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_BroadCast_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_BroadCast_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_BroadCast_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_BroadCast_Rsp.adminfd)
  return adminfd_;
}
 void Admin_BroadCast_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_BroadCast_Rsp.adminfd)
}

// optional bool fromweb = 4 [default = false];
 bool Admin_BroadCast_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_BroadCast_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_BroadCast_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_BroadCast_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_BroadCast_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_BroadCast_Rsp.fromweb)
  return fromweb_;
}
 void Admin_BroadCast_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_BroadCast_Rsp.fromweb)
}

// required int32 succ = 5;
 bool Admin_BroadCast_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_BroadCast_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_BroadCast_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_BroadCast_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_BroadCast_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_BroadCast_Rsp.succ)
  return succ_;
}
 void Admin_BroadCast_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_BroadCast_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int FluentPriceItem::kTypeIdFieldNumber;
const int FluentPriceItem::kPriceFieldNumber;
const int FluentPriceItem::kRandN1FieldNumber;
const int FluentPriceItem::kRandN2FieldNumber;
#endif  // !_MSC_VER

FluentPriceItem::FluentPriceItem()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FluentPriceItem)
}

void FluentPriceItem::InitAsDefaultInstance() {
}

FluentPriceItem::FluentPriceItem(const FluentPriceItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FluentPriceItem)
}

void FluentPriceItem::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  price_ = 0;
  rand_n1_ = 0;
  rand_n2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FluentPriceItem::~FluentPriceItem() {
  // @@protoc_insertion_point(destructor:FluentPriceItem)
  SharedDtor();
}

void FluentPriceItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FluentPriceItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FluentPriceItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FluentPriceItem_descriptor_;
}

const FluentPriceItem& FluentPriceItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

FluentPriceItem* FluentPriceItem::default_instance_ = NULL;

FluentPriceItem* FluentPriceItem::New(::google::protobuf::Arena* arena) const {
  FluentPriceItem* n = new FluentPriceItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FluentPriceItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FluentPriceItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_id_, rand_n2_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FluentPriceItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FluentPriceItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional int32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rand_n1;
        break;
      }

      // optional int32 rand_n1 = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_rand_n1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rand_n1_)));
          set_has_rand_n1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rand_n2;
        break;
      }

      // optional int32 rand_n2 = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_rand_n2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rand_n2_)));
          set_has_rand_n2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FluentPriceItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FluentPriceItem)
  return false;
#undef DO_
}

void FluentPriceItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FluentPriceItem)
  // optional int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // optional int32 rand_n1 = 3 [default = 0];
  if (has_rand_n1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rand_n1(), output);
  }

  // optional int32 rand_n2 = 4 [default = 0];
  if (has_rand_n2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rand_n2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FluentPriceItem)
}

::google::protobuf::uint8* FluentPriceItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FluentPriceItem)
  // optional int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // optional int32 rand_n1 = 3 [default = 0];
  if (has_rand_n1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rand_n1(), target);
  }

  // optional int32 rand_n2 = 4 [default = 0];
  if (has_rand_n2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rand_n2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FluentPriceItem)
  return target;
}

int FluentPriceItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 rand_n1 = 3 [default = 0];
    if (has_rand_n1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rand_n1());
    }

    // optional int32 rand_n2 = 4 [default = 0];
    if (has_rand_n2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rand_n2());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FluentPriceItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FluentPriceItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FluentPriceItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FluentPriceItem::MergeFrom(const FluentPriceItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_rand_n1()) {
      set_rand_n1(from.rand_n1());
    }
    if (from.has_rand_n2()) {
      set_rand_n2(from.rand_n2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FluentPriceItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FluentPriceItem::CopyFrom(const FluentPriceItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FluentPriceItem::IsInitialized() const {

  return true;
}

void FluentPriceItem::Swap(FluentPriceItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FluentPriceItem::InternalSwap(FluentPriceItem* other) {
  std::swap(type_id_, other->type_id_);
  std::swap(price_, other->price_);
  std::swap(rand_n1_, other->rand_n1_);
  std::swap(rand_n2_, other->rand_n2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FluentPriceItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FluentPriceItem_descriptor_;
  metadata.reflection = FluentPriceItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FluentPriceItem

// optional int32 type_id = 1;
 bool FluentPriceItem::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void FluentPriceItem::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void FluentPriceItem::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void FluentPriceItem::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
 ::google::protobuf::int32 FluentPriceItem::type_id() const {
  // @@protoc_insertion_point(field_get:FluentPriceItem.type_id)
  return type_id_;
}
 void FluentPriceItem::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:FluentPriceItem.type_id)
}

// optional int32 price = 2;
 bool FluentPriceItem::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void FluentPriceItem::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
 void FluentPriceItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
 void FluentPriceItem::clear_price() {
  price_ = 0;
  clear_has_price();
}
 ::google::protobuf::int32 FluentPriceItem::price() const {
  // @@protoc_insertion_point(field_get:FluentPriceItem.price)
  return price_;
}
 void FluentPriceItem::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:FluentPriceItem.price)
}

// optional int32 rand_n1 = 3 [default = 0];
 bool FluentPriceItem::has_rand_n1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void FluentPriceItem::set_has_rand_n1() {
  _has_bits_[0] |= 0x00000004u;
}
 void FluentPriceItem::clear_has_rand_n1() {
  _has_bits_[0] &= ~0x00000004u;
}
 void FluentPriceItem::clear_rand_n1() {
  rand_n1_ = 0;
  clear_has_rand_n1();
}
 ::google::protobuf::int32 FluentPriceItem::rand_n1() const {
  // @@protoc_insertion_point(field_get:FluentPriceItem.rand_n1)
  return rand_n1_;
}
 void FluentPriceItem::set_rand_n1(::google::protobuf::int32 value) {
  set_has_rand_n1();
  rand_n1_ = value;
  // @@protoc_insertion_point(field_set:FluentPriceItem.rand_n1)
}

// optional int32 rand_n2 = 4 [default = 0];
 bool FluentPriceItem::has_rand_n2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void FluentPriceItem::set_has_rand_n2() {
  _has_bits_[0] |= 0x00000008u;
}
 void FluentPriceItem::clear_has_rand_n2() {
  _has_bits_[0] &= ~0x00000008u;
}
 void FluentPriceItem::clear_rand_n2() {
  rand_n2_ = 0;
  clear_has_rand_n2();
}
 ::google::protobuf::int32 FluentPriceItem::rand_n2() const {
  // @@protoc_insertion_point(field_get:FluentPriceItem.rand_n2)
  return rand_n2_;
}
 void FluentPriceItem::set_rand_n2(::google::protobuf::int32 value) {
  set_has_rand_n2();
  rand_n2_ = value;
  // @@protoc_insertion_point(field_set:FluentPriceItem.rand_n2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_FluentPrice_Req::kAdminfdFieldNumber;
const int Admin_FluentPrice_Req::kFromwebFieldNumber;
const int Admin_FluentPrice_Req::kPriceItemFieldNumber;
#endif  // !_MSC_VER

Admin_FluentPrice_Req::Admin_FluentPrice_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_FluentPrice_Req)
}

void Admin_FluentPrice_Req::InitAsDefaultInstance() {
}

Admin_FluentPrice_Req::Admin_FluentPrice_Req(const Admin_FluentPrice_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_FluentPrice_Req)
}

void Admin_FluentPrice_Req::SharedCtor() {
  _cached_size_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_FluentPrice_Req::~Admin_FluentPrice_Req() {
  // @@protoc_insertion_point(destructor:Admin_FluentPrice_Req)
  SharedDtor();
}

void Admin_FluentPrice_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_FluentPrice_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_FluentPrice_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_FluentPrice_Req_descriptor_;
}

const Admin_FluentPrice_Req& Admin_FluentPrice_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_FluentPrice_Req* Admin_FluentPrice_Req::default_instance_ = NULL;

Admin_FluentPrice_Req* Admin_FluentPrice_Req::New(::google::protobuf::Arena* arena) const {
  Admin_FluentPrice_Req* n = new Admin_FluentPrice_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_FluentPrice_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_FluentPrice_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(adminfd_, fromweb_);

#undef ZR_HELPER_
#undef ZR_

  price_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_FluentPrice_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_FluentPrice_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 adminfd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_price_item;
        break;
      }

      // repeated .FluentPriceItem price_item = 3;
      case 3: {
        if (tag == 26) {
         parse_price_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_price_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_price_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_FluentPrice_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_FluentPrice_Req)
  return false;
#undef DO_
}

void Admin_FluentPrice_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_FluentPrice_Req)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->adminfd(), output);
  }

  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fromweb(), output);
  }

  // repeated .FluentPriceItem price_item = 3;
  for (unsigned int i = 0, n = this->price_item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->price_item(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_FluentPrice_Req)
}

::google::protobuf::uint8* Admin_FluentPrice_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_FluentPrice_Req)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->adminfd(), target);
  }

  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fromweb(), target);
  }

  // repeated .FluentPriceItem price_item = 3;
  for (unsigned int i = 0, n = this->price_item_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->price_item(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_FluentPrice_Req)
  return target;
}

int Admin_FluentPrice_Req::ByteSize() const {
  int total_size = 0;

  // required int32 adminfd = 1;
  if (has_adminfd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }
  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  // repeated .FluentPriceItem price_item = 3;
  total_size += 1 * this->price_item_size();
  for (int i = 0; i < this->price_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->price_item(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_FluentPrice_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_FluentPrice_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_FluentPrice_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_FluentPrice_Req::MergeFrom(const Admin_FluentPrice_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  price_item_.MergeFrom(from.price_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_FluentPrice_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_FluentPrice_Req::CopyFrom(const Admin_FluentPrice_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_FluentPrice_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Admin_FluentPrice_Req::Swap(Admin_FluentPrice_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_FluentPrice_Req::InternalSwap(Admin_FluentPrice_Req* other) {
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  price_item_.UnsafeArenaSwap(&other->price_item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_FluentPrice_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_FluentPrice_Req_descriptor_;
  metadata.reflection = Admin_FluentPrice_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_FluentPrice_Req

// required int32 adminfd = 1;
 bool Admin_FluentPrice_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_FluentPrice_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_FluentPrice_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_FluentPrice_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_FluentPrice_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_FluentPrice_Req.adminfd)
  return adminfd_;
}
 void Admin_FluentPrice_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_FluentPrice_Req.adminfd)
}

// optional bool fromweb = 2 [default = false];
 bool Admin_FluentPrice_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_FluentPrice_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_FluentPrice_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_FluentPrice_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_FluentPrice_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_FluentPrice_Req.fromweb)
  return fromweb_;
}
 void Admin_FluentPrice_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_FluentPrice_Req.fromweb)
}

// repeated .FluentPriceItem price_item = 3;
 int Admin_FluentPrice_Req::price_item_size() const {
  return price_item_.size();
}
 void Admin_FluentPrice_Req::clear_price_item() {
  price_item_.Clear();
}
 const ::FluentPriceItem& Admin_FluentPrice_Req::price_item(int index) const {
  // @@protoc_insertion_point(field_get:Admin_FluentPrice_Req.price_item)
  return price_item_.Get(index);
}
 ::FluentPriceItem* Admin_FluentPrice_Req::mutable_price_item(int index) {
  // @@protoc_insertion_point(field_mutable:Admin_FluentPrice_Req.price_item)
  return price_item_.Mutable(index);
}
 ::FluentPriceItem* Admin_FluentPrice_Req::add_price_item() {
  // @@protoc_insertion_point(field_add:Admin_FluentPrice_Req.price_item)
  return price_item_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::FluentPriceItem >&
Admin_FluentPrice_Req::price_item() const {
  // @@protoc_insertion_point(field_list:Admin_FluentPrice_Req.price_item)
  return price_item_;
}
 ::google::protobuf::RepeatedPtrField< ::FluentPriceItem >*
Admin_FluentPrice_Req::mutable_price_item() {
  // @@protoc_insertion_point(field_mutable_list:Admin_FluentPrice_Req.price_item)
  return &price_item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_FluentPrice_Rsp::kAdminfdFieldNumber;
const int Admin_FluentPrice_Rsp::kFromwebFieldNumber;
const int Admin_FluentPrice_Rsp::kSuccFieldNumber;
const int Admin_FluentPrice_Rsp::kPriceItemFieldNumber;
#endif  // !_MSC_VER

Admin_FluentPrice_Rsp::Admin_FluentPrice_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_FluentPrice_Rsp)
}

void Admin_FluentPrice_Rsp::InitAsDefaultInstance() {
}

Admin_FluentPrice_Rsp::Admin_FluentPrice_Rsp(const Admin_FluentPrice_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_FluentPrice_Rsp)
}

void Admin_FluentPrice_Rsp::SharedCtor() {
  _cached_size_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_FluentPrice_Rsp::~Admin_FluentPrice_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_FluentPrice_Rsp)
  SharedDtor();
}

void Admin_FluentPrice_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_FluentPrice_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_FluentPrice_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_FluentPrice_Rsp_descriptor_;
}

const Admin_FluentPrice_Rsp& Admin_FluentPrice_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_FluentPrice_Rsp* Admin_FluentPrice_Rsp::default_instance_ = NULL;

Admin_FluentPrice_Rsp* Admin_FluentPrice_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_FluentPrice_Rsp* n = new Admin_FluentPrice_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_FluentPrice_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_FluentPrice_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(adminfd_, fromweb_);
    succ_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  price_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_FluentPrice_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_FluentPrice_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 adminfd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_succ;
        break;
      }

      // required int32 succ = 3;
      case 3: {
        if (tag == 24) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_price_item;
        break;
      }

      // repeated .FluentPriceItem price_item = 4;
      case 4: {
        if (tag == 34) {
         parse_price_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_price_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_price_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_FluentPrice_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_FluentPrice_Rsp)
  return false;
#undef DO_
}

void Admin_FluentPrice_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_FluentPrice_Rsp)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->adminfd(), output);
  }

  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fromweb(), output);
  }

  // required int32 succ = 3;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->succ(), output);
  }

  // repeated .FluentPriceItem price_item = 4;
  for (unsigned int i = 0, n = this->price_item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->price_item(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_FluentPrice_Rsp)
}

::google::protobuf::uint8* Admin_FluentPrice_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_FluentPrice_Rsp)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->adminfd(), target);
  }

  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fromweb(), target);
  }

  // required int32 succ = 3;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->succ(), target);
  }

  // repeated .FluentPriceItem price_item = 4;
  for (unsigned int i = 0, n = this->price_item_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->price_item(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_FluentPrice_Rsp)
  return target;
}

int Admin_FluentPrice_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_adminfd()) {
    // required int32 adminfd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_FluentPrice_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int32 adminfd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  // repeated .FluentPriceItem price_item = 4;
  total_size += 1 * this->price_item_size();
  for (int i = 0; i < this->price_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->price_item(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_FluentPrice_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_FluentPrice_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_FluentPrice_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_FluentPrice_Rsp::MergeFrom(const Admin_FluentPrice_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  price_item_.MergeFrom(from.price_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_FluentPrice_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_FluentPrice_Rsp::CopyFrom(const Admin_FluentPrice_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_FluentPrice_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Admin_FluentPrice_Rsp::Swap(Admin_FluentPrice_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_FluentPrice_Rsp::InternalSwap(Admin_FluentPrice_Rsp* other) {
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  price_item_.UnsafeArenaSwap(&other->price_item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_FluentPrice_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_FluentPrice_Rsp_descriptor_;
  metadata.reflection = Admin_FluentPrice_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_FluentPrice_Rsp

// required int32 adminfd = 1;
 bool Admin_FluentPrice_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_FluentPrice_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_FluentPrice_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_FluentPrice_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_FluentPrice_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_FluentPrice_Rsp.adminfd)
  return adminfd_;
}
 void Admin_FluentPrice_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_FluentPrice_Rsp.adminfd)
}

// optional bool fromweb = 2 [default = false];
 bool Admin_FluentPrice_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_FluentPrice_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_FluentPrice_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_FluentPrice_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_FluentPrice_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_FluentPrice_Rsp.fromweb)
  return fromweb_;
}
 void Admin_FluentPrice_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_FluentPrice_Rsp.fromweb)
}

// required int32 succ = 3;
 bool Admin_FluentPrice_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_FluentPrice_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_FluentPrice_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_FluentPrice_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_FluentPrice_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_FluentPrice_Rsp.succ)
  return succ_;
}
 void Admin_FluentPrice_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_FluentPrice_Rsp.succ)
}

// repeated .FluentPriceItem price_item = 4;
 int Admin_FluentPrice_Rsp::price_item_size() const {
  return price_item_.size();
}
 void Admin_FluentPrice_Rsp::clear_price_item() {
  price_item_.Clear();
}
 const ::FluentPriceItem& Admin_FluentPrice_Rsp::price_item(int index) const {
  // @@protoc_insertion_point(field_get:Admin_FluentPrice_Rsp.price_item)
  return price_item_.Get(index);
}
 ::FluentPriceItem* Admin_FluentPrice_Rsp::mutable_price_item(int index) {
  // @@protoc_insertion_point(field_mutable:Admin_FluentPrice_Rsp.price_item)
  return price_item_.Mutable(index);
}
 ::FluentPriceItem* Admin_FluentPrice_Rsp::add_price_item() {
  // @@protoc_insertion_point(field_add:Admin_FluentPrice_Rsp.price_item)
  return price_item_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::FluentPriceItem >&
Admin_FluentPrice_Rsp::price_item() const {
  // @@protoc_insertion_point(field_list:Admin_FluentPrice_Rsp.price_item)
  return price_item_;
}
 ::google::protobuf::RepeatedPtrField< ::FluentPriceItem >*
Admin_FluentPrice_Rsp::mutable_price_item() {
  // @@protoc_insertion_point(field_mutable_list:Admin_FluentPrice_Rsp.price_item)
  return &price_item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_StatisticsOnLinePeople_Req::kAdminfdFieldNumber;
const int Admin_StatisticsOnLinePeople_Req::kFromwebFieldNumber;
const int Admin_StatisticsOnLinePeople_Req::kGidFieldNumber;
#endif  // !_MSC_VER

Admin_StatisticsOnLinePeople_Req::Admin_StatisticsOnLinePeople_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_StatisticsOnLinePeople_Req)
}

void Admin_StatisticsOnLinePeople_Req::InitAsDefaultInstance() {
}

Admin_StatisticsOnLinePeople_Req::Admin_StatisticsOnLinePeople_Req(const Admin_StatisticsOnLinePeople_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_StatisticsOnLinePeople_Req)
}

void Admin_StatisticsOnLinePeople_Req::SharedCtor() {
  _cached_size_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  gid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_StatisticsOnLinePeople_Req::~Admin_StatisticsOnLinePeople_Req() {
  // @@protoc_insertion_point(destructor:Admin_StatisticsOnLinePeople_Req)
  SharedDtor();
}

void Admin_StatisticsOnLinePeople_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_StatisticsOnLinePeople_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_StatisticsOnLinePeople_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_StatisticsOnLinePeople_Req_descriptor_;
}

const Admin_StatisticsOnLinePeople_Req& Admin_StatisticsOnLinePeople_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_StatisticsOnLinePeople_Req* Admin_StatisticsOnLinePeople_Req::default_instance_ = NULL;

Admin_StatisticsOnLinePeople_Req* Admin_StatisticsOnLinePeople_Req::New(::google::protobuf::Arena* arena) const {
  Admin_StatisticsOnLinePeople_Req* n = new Admin_StatisticsOnLinePeople_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_StatisticsOnLinePeople_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_StatisticsOnLinePeople_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(adminfd_, gid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_StatisticsOnLinePeople_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_StatisticsOnLinePeople_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 adminfd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // optional int32 gid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_StatisticsOnLinePeople_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_StatisticsOnLinePeople_Req)
  return false;
#undef DO_
}

void Admin_StatisticsOnLinePeople_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_StatisticsOnLinePeople_Req)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->adminfd(), output);
  }

  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fromweb(), output);
  }

  // optional int32 gid = 3 [default = 0];
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_StatisticsOnLinePeople_Req)
}

::google::protobuf::uint8* Admin_StatisticsOnLinePeople_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_StatisticsOnLinePeople_Req)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->adminfd(), target);
  }

  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fromweb(), target);
  }

  // optional int32 gid = 3 [default = 0];
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_StatisticsOnLinePeople_Req)
  return target;
}

int Admin_StatisticsOnLinePeople_Req::ByteSize() const {
  int total_size = 0;

  // required int32 adminfd = 1;
  if (has_adminfd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }
  if (_has_bits_[1 / 32] & 6) {
    // optional bool fromweb = 2 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

    // optional int32 gid = 3 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_StatisticsOnLinePeople_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_StatisticsOnLinePeople_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_StatisticsOnLinePeople_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_StatisticsOnLinePeople_Req::MergeFrom(const Admin_StatisticsOnLinePeople_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_StatisticsOnLinePeople_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_StatisticsOnLinePeople_Req::CopyFrom(const Admin_StatisticsOnLinePeople_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_StatisticsOnLinePeople_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Admin_StatisticsOnLinePeople_Req::Swap(Admin_StatisticsOnLinePeople_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_StatisticsOnLinePeople_Req::InternalSwap(Admin_StatisticsOnLinePeople_Req* other) {
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(gid_, other->gid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_StatisticsOnLinePeople_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_StatisticsOnLinePeople_Req_descriptor_;
  metadata.reflection = Admin_StatisticsOnLinePeople_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_StatisticsOnLinePeople_Req

// required int32 adminfd = 1;
 bool Admin_StatisticsOnLinePeople_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_StatisticsOnLinePeople_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_StatisticsOnLinePeople_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_StatisticsOnLinePeople_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_StatisticsOnLinePeople_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_StatisticsOnLinePeople_Req.adminfd)
  return adminfd_;
}
 void Admin_StatisticsOnLinePeople_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_StatisticsOnLinePeople_Req.adminfd)
}

// optional bool fromweb = 2 [default = false];
 bool Admin_StatisticsOnLinePeople_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_StatisticsOnLinePeople_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_StatisticsOnLinePeople_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_StatisticsOnLinePeople_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_StatisticsOnLinePeople_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_StatisticsOnLinePeople_Req.fromweb)
  return fromweb_;
}
 void Admin_StatisticsOnLinePeople_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_StatisticsOnLinePeople_Req.fromweb)
}

// optional int32 gid = 3 [default = 0];
 bool Admin_StatisticsOnLinePeople_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_StatisticsOnLinePeople_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_StatisticsOnLinePeople_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_StatisticsOnLinePeople_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_StatisticsOnLinePeople_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_StatisticsOnLinePeople_Req.gid)
  return gid_;
}
 void Admin_StatisticsOnLinePeople_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_StatisticsOnLinePeople_Req.gid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_StatisticsOnLinePeople_Rsp::kAdminfdFieldNumber;
const int Admin_StatisticsOnLinePeople_Rsp::kFromwebFieldNumber;
const int Admin_StatisticsOnLinePeople_Rsp::kSuccFieldNumber;
const int Admin_StatisticsOnLinePeople_Rsp::kOnlineNumFieldNumber;
const int Admin_StatisticsOnLinePeople_Rsp::kGidFieldNumber;
#endif  // !_MSC_VER

Admin_StatisticsOnLinePeople_Rsp::Admin_StatisticsOnLinePeople_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_StatisticsOnLinePeople_Rsp)
}

void Admin_StatisticsOnLinePeople_Rsp::InitAsDefaultInstance() {
}

Admin_StatisticsOnLinePeople_Rsp::Admin_StatisticsOnLinePeople_Rsp(const Admin_StatisticsOnLinePeople_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_StatisticsOnLinePeople_Rsp)
}

void Admin_StatisticsOnLinePeople_Rsp::SharedCtor() {
  _cached_size_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  online_num_ = 0;
  gid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_StatisticsOnLinePeople_Rsp::~Admin_StatisticsOnLinePeople_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_StatisticsOnLinePeople_Rsp)
  SharedDtor();
}

void Admin_StatisticsOnLinePeople_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_StatisticsOnLinePeople_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_StatisticsOnLinePeople_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_StatisticsOnLinePeople_Rsp_descriptor_;
}

const Admin_StatisticsOnLinePeople_Rsp& Admin_StatisticsOnLinePeople_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_StatisticsOnLinePeople_Rsp* Admin_StatisticsOnLinePeople_Rsp::default_instance_ = NULL;

Admin_StatisticsOnLinePeople_Rsp* Admin_StatisticsOnLinePeople_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_StatisticsOnLinePeople_Rsp* n = new Admin_StatisticsOnLinePeople_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_StatisticsOnLinePeople_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_StatisticsOnLinePeople_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(adminfd_, gid_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_StatisticsOnLinePeople_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_StatisticsOnLinePeople_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 adminfd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_succ;
        break;
      }

      // required int32 succ = 3;
      case 3: {
        if (tag == 24) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_online_num;
        break;
      }

      // optional int32 online_num = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_online_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_num_)));
          set_has_online_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gid;
        break;
      }

      // optional int32 gid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_StatisticsOnLinePeople_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_StatisticsOnLinePeople_Rsp)
  return false;
#undef DO_
}

void Admin_StatisticsOnLinePeople_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_StatisticsOnLinePeople_Rsp)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->adminfd(), output);
  }

  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fromweb(), output);
  }

  // required int32 succ = 3;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->succ(), output);
  }

  // optional int32 online_num = 4 [default = 0];
  if (has_online_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->online_num(), output);
  }

  // optional int32 gid = 5 [default = 0];
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_StatisticsOnLinePeople_Rsp)
}

::google::protobuf::uint8* Admin_StatisticsOnLinePeople_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_StatisticsOnLinePeople_Rsp)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->adminfd(), target);
  }

  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fromweb(), target);
  }

  // required int32 succ = 3;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->succ(), target);
  }

  // optional int32 online_num = 4 [default = 0];
  if (has_online_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->online_num(), target);
  }

  // optional int32 gid = 5 [default = 0];
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_StatisticsOnLinePeople_Rsp)
  return target;
}

int Admin_StatisticsOnLinePeople_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_adminfd()) {
    // required int32 adminfd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_StatisticsOnLinePeople_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int32 adminfd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 26) {
    // optional bool fromweb = 2 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

    // optional int32 online_num = 4 [default = 0];
    if (has_online_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_num());
    }

    // optional int32 gid = 5 [default = 0];
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_StatisticsOnLinePeople_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_StatisticsOnLinePeople_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_StatisticsOnLinePeople_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_StatisticsOnLinePeople_Rsp::MergeFrom(const Admin_StatisticsOnLinePeople_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_online_num()) {
      set_online_num(from.online_num());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_StatisticsOnLinePeople_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_StatisticsOnLinePeople_Rsp::CopyFrom(const Admin_StatisticsOnLinePeople_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_StatisticsOnLinePeople_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Admin_StatisticsOnLinePeople_Rsp::Swap(Admin_StatisticsOnLinePeople_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_StatisticsOnLinePeople_Rsp::InternalSwap(Admin_StatisticsOnLinePeople_Rsp* other) {
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(online_num_, other->online_num_);
  std::swap(gid_, other->gid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_StatisticsOnLinePeople_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_StatisticsOnLinePeople_Rsp_descriptor_;
  metadata.reflection = Admin_StatisticsOnLinePeople_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_StatisticsOnLinePeople_Rsp

// required int32 adminfd = 1;
 bool Admin_StatisticsOnLinePeople_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_StatisticsOnLinePeople_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_StatisticsOnLinePeople_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_StatisticsOnLinePeople_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_StatisticsOnLinePeople_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_StatisticsOnLinePeople_Rsp.adminfd)
  return adminfd_;
}
 void Admin_StatisticsOnLinePeople_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_StatisticsOnLinePeople_Rsp.adminfd)
}

// optional bool fromweb = 2 [default = false];
 bool Admin_StatisticsOnLinePeople_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_StatisticsOnLinePeople_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_StatisticsOnLinePeople_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_StatisticsOnLinePeople_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_StatisticsOnLinePeople_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_StatisticsOnLinePeople_Rsp.fromweb)
  return fromweb_;
}
 void Admin_StatisticsOnLinePeople_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_StatisticsOnLinePeople_Rsp.fromweb)
}

// required int32 succ = 3;
 bool Admin_StatisticsOnLinePeople_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_StatisticsOnLinePeople_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_StatisticsOnLinePeople_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_StatisticsOnLinePeople_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_StatisticsOnLinePeople_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_StatisticsOnLinePeople_Rsp.succ)
  return succ_;
}
 void Admin_StatisticsOnLinePeople_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_StatisticsOnLinePeople_Rsp.succ)
}

// optional int32 online_num = 4 [default = 0];
 bool Admin_StatisticsOnLinePeople_Rsp::has_online_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_StatisticsOnLinePeople_Rsp::set_has_online_num() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_StatisticsOnLinePeople_Rsp::clear_has_online_num() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_StatisticsOnLinePeople_Rsp::clear_online_num() {
  online_num_ = 0;
  clear_has_online_num();
}
 ::google::protobuf::int32 Admin_StatisticsOnLinePeople_Rsp::online_num() const {
  // @@protoc_insertion_point(field_get:Admin_StatisticsOnLinePeople_Rsp.online_num)
  return online_num_;
}
 void Admin_StatisticsOnLinePeople_Rsp::set_online_num(::google::protobuf::int32 value) {
  set_has_online_num();
  online_num_ = value;
  // @@protoc_insertion_point(field_set:Admin_StatisticsOnLinePeople_Rsp.online_num)
}

// optional int32 gid = 5 [default = 0];
 bool Admin_StatisticsOnLinePeople_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_StatisticsOnLinePeople_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_StatisticsOnLinePeople_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_StatisticsOnLinePeople_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_StatisticsOnLinePeople_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_StatisticsOnLinePeople_Rsp.gid)
  return gid_;
}
 void Admin_StatisticsOnLinePeople_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_StatisticsOnLinePeople_Rsp.gid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_KickPlayer_Req::kAdminfdFieldNumber;
const int Admin_KickPlayer_Req::kFromwebFieldNumber;
const int Admin_KickPlayer_Req::kUidFieldNumber;
#endif  // !_MSC_VER

Admin_KickPlayer_Req::Admin_KickPlayer_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_KickPlayer_Req)
}

void Admin_KickPlayer_Req::InitAsDefaultInstance() {
}

Admin_KickPlayer_Req::Admin_KickPlayer_Req(const Admin_KickPlayer_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_KickPlayer_Req)
}

void Admin_KickPlayer_Req::SharedCtor() {
  _cached_size_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_KickPlayer_Req::~Admin_KickPlayer_Req() {
  // @@protoc_insertion_point(destructor:Admin_KickPlayer_Req)
  SharedDtor();
}

void Admin_KickPlayer_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_KickPlayer_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_KickPlayer_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_KickPlayer_Req_descriptor_;
}

const Admin_KickPlayer_Req& Admin_KickPlayer_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_KickPlayer_Req* Admin_KickPlayer_Req::default_instance_ = NULL;

Admin_KickPlayer_Req* Admin_KickPlayer_Req::New(::google::protobuf::Arena* arena) const {
  Admin_KickPlayer_Req* n = new Admin_KickPlayer_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_KickPlayer_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_KickPlayer_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(adminfd_, uid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_KickPlayer_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_KickPlayer_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 adminfd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional int64 uid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_KickPlayer_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_KickPlayer_Req)
  return false;
#undef DO_
}

void Admin_KickPlayer_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_KickPlayer_Req)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->adminfd(), output);
  }

  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fromweb(), output);
  }

  // optional int64 uid = 3 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_KickPlayer_Req)
}

::google::protobuf::uint8* Admin_KickPlayer_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_KickPlayer_Req)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->adminfd(), target);
  }

  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fromweb(), target);
  }

  // optional int64 uid = 3 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_KickPlayer_Req)
  return target;
}

int Admin_KickPlayer_Req::ByteSize() const {
  int total_size = 0;

  // required int32 adminfd = 1;
  if (has_adminfd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }
  if (_has_bits_[1 / 32] & 6) {
    // optional bool fromweb = 2 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

    // optional int64 uid = 3 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_KickPlayer_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_KickPlayer_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_KickPlayer_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_KickPlayer_Req::MergeFrom(const Admin_KickPlayer_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_KickPlayer_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_KickPlayer_Req::CopyFrom(const Admin_KickPlayer_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_KickPlayer_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Admin_KickPlayer_Req::Swap(Admin_KickPlayer_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_KickPlayer_Req::InternalSwap(Admin_KickPlayer_Req* other) {
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(uid_, other->uid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_KickPlayer_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_KickPlayer_Req_descriptor_;
  metadata.reflection = Admin_KickPlayer_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_KickPlayer_Req

// required int32 adminfd = 1;
 bool Admin_KickPlayer_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_KickPlayer_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_KickPlayer_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_KickPlayer_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_KickPlayer_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_KickPlayer_Req.adminfd)
  return adminfd_;
}
 void Admin_KickPlayer_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_KickPlayer_Req.adminfd)
}

// optional bool fromweb = 2 [default = false];
 bool Admin_KickPlayer_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_KickPlayer_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_KickPlayer_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_KickPlayer_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_KickPlayer_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_KickPlayer_Req.fromweb)
  return fromweb_;
}
 void Admin_KickPlayer_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_KickPlayer_Req.fromweb)
}

// optional int64 uid = 3 [default = 0];
 bool Admin_KickPlayer_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_KickPlayer_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_KickPlayer_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_KickPlayer_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_KickPlayer_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_KickPlayer_Req.uid)
  return uid_;
}
 void Admin_KickPlayer_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_KickPlayer_Req.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_KickPlayer_Rsp::kAdminfdFieldNumber;
const int Admin_KickPlayer_Rsp::kFromwebFieldNumber;
const int Admin_KickPlayer_Rsp::kSuccFieldNumber;
const int Admin_KickPlayer_Rsp::kUidFieldNumber;
#endif  // !_MSC_VER

Admin_KickPlayer_Rsp::Admin_KickPlayer_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_KickPlayer_Rsp)
}

void Admin_KickPlayer_Rsp::InitAsDefaultInstance() {
}

Admin_KickPlayer_Rsp::Admin_KickPlayer_Rsp(const Admin_KickPlayer_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_KickPlayer_Rsp)
}

void Admin_KickPlayer_Rsp::SharedCtor() {
  _cached_size_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_KickPlayer_Rsp::~Admin_KickPlayer_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_KickPlayer_Rsp)
  SharedDtor();
}

void Admin_KickPlayer_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_KickPlayer_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_KickPlayer_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_KickPlayer_Rsp_descriptor_;
}

const Admin_KickPlayer_Rsp& Admin_KickPlayer_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_KickPlayer_Rsp* Admin_KickPlayer_Rsp::default_instance_ = NULL;

Admin_KickPlayer_Rsp* Admin_KickPlayer_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_KickPlayer_Rsp* n = new Admin_KickPlayer_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_KickPlayer_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_KickPlayer_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(adminfd_, succ_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_KickPlayer_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_KickPlayer_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 adminfd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_succ;
        break;
      }

      // required int32 succ = 3;
      case 3: {
        if (tag == 24) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // optional int64 uid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_KickPlayer_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_KickPlayer_Rsp)
  return false;
#undef DO_
}

void Admin_KickPlayer_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_KickPlayer_Rsp)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->adminfd(), output);
  }

  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fromweb(), output);
  }

  // required int32 succ = 3;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->succ(), output);
  }

  // optional int64 uid = 4 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_KickPlayer_Rsp)
}

::google::protobuf::uint8* Admin_KickPlayer_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_KickPlayer_Rsp)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->adminfd(), target);
  }

  // optional bool fromweb = 2 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fromweb(), target);
  }

  // required int32 succ = 3;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->succ(), target);
  }

  // optional int64 uid = 4 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_KickPlayer_Rsp)
  return target;
}

int Admin_KickPlayer_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_adminfd()) {
    // required int32 adminfd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_KickPlayer_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int32 adminfd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 10) {
    // optional bool fromweb = 2 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

    // optional int64 uid = 4 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_KickPlayer_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_KickPlayer_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_KickPlayer_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_KickPlayer_Rsp::MergeFrom(const Admin_KickPlayer_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_KickPlayer_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_KickPlayer_Rsp::CopyFrom(const Admin_KickPlayer_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_KickPlayer_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Admin_KickPlayer_Rsp::Swap(Admin_KickPlayer_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_KickPlayer_Rsp::InternalSwap(Admin_KickPlayer_Rsp* other) {
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(uid_, other->uid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_KickPlayer_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_KickPlayer_Rsp_descriptor_;
  metadata.reflection = Admin_KickPlayer_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_KickPlayer_Rsp

// required int32 adminfd = 1;
 bool Admin_KickPlayer_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_KickPlayer_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_KickPlayer_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_KickPlayer_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_KickPlayer_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_KickPlayer_Rsp.adminfd)
  return adminfd_;
}
 void Admin_KickPlayer_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_KickPlayer_Rsp.adminfd)
}

// optional bool fromweb = 2 [default = false];
 bool Admin_KickPlayer_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_KickPlayer_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_KickPlayer_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_KickPlayer_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_KickPlayer_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_KickPlayer_Rsp.fromweb)
  return fromweb_;
}
 void Admin_KickPlayer_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_KickPlayer_Rsp.fromweb)
}

// required int32 succ = 3;
 bool Admin_KickPlayer_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_KickPlayer_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_KickPlayer_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_KickPlayer_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_KickPlayer_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_KickPlayer_Rsp.succ)
  return succ_;
}
 void Admin_KickPlayer_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_KickPlayer_Rsp.succ)
}

// optional int64 uid = 4 [default = 0];
 bool Admin_KickPlayer_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_KickPlayer_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_KickPlayer_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_KickPlayer_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_KickPlayer_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_KickPlayer_Rsp.uid)
  return uid_;
}
 void Admin_KickPlayer_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_KickPlayer_Rsp.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_STR_Req::kAdminfdFieldNumber;
const int Admin_STR_Req::kUidFieldNumber;
const int Admin_STR_Req::kStrFieldNumber;
const int Admin_STR_Req::kOpenidFieldNumber;
#endif  // !_MSC_VER

Admin_STR_Req::Admin_STR_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_STR_Req)
}

void Admin_STR_Req::InitAsDefaultInstance() {
}

Admin_STR_Req::Admin_STR_Req(const Admin_STR_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_STR_Req)
}

void Admin_STR_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adminfd_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_STR_Req::~Admin_STR_Req() {
  // @@protoc_insertion_point(destructor:Admin_STR_Req)
  SharedDtor();
}

void Admin_STR_Req::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Admin_STR_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_STR_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_STR_Req_descriptor_;
}

const Admin_STR_Req& Admin_STR_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_STR_Req* Admin_STR_Req::default_instance_ = NULL;

Admin_STR_Req* Admin_STR_Req::New(::google::protobuf::Arena* arena) const {
  Admin_STR_Req* n = new Admin_STR_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_STR_Req::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    adminfd_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    if (has_str()) {
      str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_STR_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_STR_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 adminfd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional int64 uid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_str;
        break;
      }

      // optional string str = 4;
      case 4: {
        if (tag == 34) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_STR_Req.str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_openid;
        break;
      }

      // optional string openid = 5;
      case 5: {
        if (tag == 42) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_STR_Req.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_STR_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_STR_Req)
  return false;
#undef DO_
}

void Admin_STR_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_STR_Req)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->adminfd(), output);
  }

  // optional int64 uid = 3 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uid(), output);
  }

  // optional string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_STR_Req.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->str(), output);
  }

  // optional string openid = 5;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_STR_Req.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->openid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_STR_Req)
}

::google::protobuf::uint8* Admin_STR_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_STR_Req)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->adminfd(), target);
  }

  // optional int64 uid = 3 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uid(), target);
  }

  // optional string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_STR_Req.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str(), target);
  }

  // optional string openid = 5;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_STR_Req.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->openid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_STR_Req)
  return target;
}

int Admin_STR_Req::ByteSize() const {
  int total_size = 0;

  // required int32 adminfd = 1;
  if (has_adminfd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }
  if (_has_bits_[1 / 32] & 14) {
    // optional int64 uid = 3 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional string str = 4;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional string openid = 5;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_STR_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_STR_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_STR_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_STR_Req::MergeFrom(const Admin_STR_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_str()) {
      set_has_str();
      str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_STR_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_STR_Req::CopyFrom(const Admin_STR_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_STR_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Admin_STR_Req::Swap(Admin_STR_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_STR_Req::InternalSwap(Admin_STR_Req* other) {
  std::swap(adminfd_, other->adminfd_);
  std::swap(uid_, other->uid_);
  str_.Swap(&other->str_);
  openid_.Swap(&other->openid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_STR_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_STR_Req_descriptor_;
  metadata.reflection = Admin_STR_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_STR_Req

// required int32 adminfd = 1;
 bool Admin_STR_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_STR_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_STR_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_STR_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_STR_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_STR_Req.adminfd)
  return adminfd_;
}
 void Admin_STR_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_STR_Req.adminfd)
}

// optional int64 uid = 3 [default = 0];
 bool Admin_STR_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_STR_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_STR_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_STR_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_STR_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_STR_Req.uid)
  return uid_;
}
 void Admin_STR_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_STR_Req.uid)
}

// optional string str = 4;
 bool Admin_STR_Req::has_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_STR_Req::set_has_str() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_STR_Req::clear_has_str() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_STR_Req::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str();
}
 const ::std::string& Admin_STR_Req::str() const {
  // @@protoc_insertion_point(field_get:Admin_STR_Req.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_STR_Req::set_str(const ::std::string& value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_STR_Req.str)
}
 void Admin_STR_Req::set_str(const char* value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_STR_Req.str)
}
 void Admin_STR_Req::set_str(const char* value, size_t size) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_STR_Req.str)
}
 ::std::string* Admin_STR_Req::mutable_str() {
  set_has_str();
  // @@protoc_insertion_point(field_mutable:Admin_STR_Req.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_STR_Req::release_str() {
  clear_has_str();
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_STR_Req::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    set_has_str();
  } else {
    clear_has_str();
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:Admin_STR_Req.str)
}

// optional string openid = 5;
 bool Admin_STR_Req::has_openid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_STR_Req::set_has_openid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_STR_Req::clear_has_openid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_STR_Req::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& Admin_STR_Req::openid() const {
  // @@protoc_insertion_point(field_get:Admin_STR_Req.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_STR_Req::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_STR_Req.openid)
}
 void Admin_STR_Req::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_STR_Req.openid)
}
 void Admin_STR_Req::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_STR_Req.openid)
}
 ::std::string* Admin_STR_Req::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:Admin_STR_Req.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_STR_Req::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_STR_Req::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:Admin_STR_Req.openid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_STR_Rsp::kAdminfdFieldNumber;
const int Admin_STR_Rsp::kUidFieldNumber;
const int Admin_STR_Rsp::kSuccFieldNumber;
const int Admin_STR_Rsp::kStrFieldNumber;
const int Admin_STR_Rsp::kOpenidFieldNumber;
#endif  // !_MSC_VER

Admin_STR_Rsp::Admin_STR_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_STR_Rsp)
}

void Admin_STR_Rsp::InitAsDefaultInstance() {
}

Admin_STR_Rsp::Admin_STR_Rsp(const Admin_STR_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_STR_Rsp)
}

void Admin_STR_Rsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adminfd_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  succ_ = 0;
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_STR_Rsp::~Admin_STR_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_STR_Rsp)
  SharedDtor();
}

void Admin_STR_Rsp::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Admin_STR_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_STR_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_STR_Rsp_descriptor_;
}

const Admin_STR_Rsp& Admin_STR_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_STR_Rsp* Admin_STR_Rsp::default_instance_ = NULL;

Admin_STR_Rsp* Admin_STR_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_STR_Rsp* n = new Admin_STR_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_STR_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_STR_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, succ_);
    if (has_str()) {
      str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_STR_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_STR_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 adminfd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int64 uid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_succ;
        break;
      }

      // required int32 succ = 3;
      case 3: {
        if (tag == 24) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_str;
        break;
      }

      // optional string str = 4;
      case 4: {
        if (tag == 34) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_STR_Rsp.str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_openid;
        break;
      }

      // optional string openid = 5;
      case 5: {
        if (tag == 42) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_STR_Rsp.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_STR_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_STR_Rsp)
  return false;
#undef DO_
}

void Admin_STR_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_STR_Rsp)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->adminfd(), output);
  }

  // optional int64 uid = 2 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // required int32 succ = 3;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->succ(), output);
  }

  // optional string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_STR_Rsp.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->str(), output);
  }

  // optional string openid = 5;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_STR_Rsp.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->openid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_STR_Rsp)
}

::google::protobuf::uint8* Admin_STR_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_STR_Rsp)
  // required int32 adminfd = 1;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->adminfd(), target);
  }

  // optional int64 uid = 2 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // required int32 succ = 3;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->succ(), target);
  }

  // optional string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_STR_Rsp.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str(), target);
  }

  // optional string openid = 5;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_STR_Rsp.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->openid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_STR_Rsp)
  return target;
}

int Admin_STR_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_adminfd()) {
    // required int32 adminfd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_STR_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int32 adminfd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 26) {
    // optional int64 uid = 2 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional string str = 4;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional string openid = 5;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_STR_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_STR_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_STR_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_STR_Rsp::MergeFrom(const Admin_STR_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_str()) {
      set_has_str();
      str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_STR_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_STR_Rsp::CopyFrom(const Admin_STR_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_STR_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Admin_STR_Rsp::Swap(Admin_STR_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_STR_Rsp::InternalSwap(Admin_STR_Rsp* other) {
  std::swap(adminfd_, other->adminfd_);
  std::swap(uid_, other->uid_);
  std::swap(succ_, other->succ_);
  str_.Swap(&other->str_);
  openid_.Swap(&other->openid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_STR_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_STR_Rsp_descriptor_;
  metadata.reflection = Admin_STR_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_STR_Rsp

// required int32 adminfd = 1;
 bool Admin_STR_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_STR_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_STR_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_STR_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_STR_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_STR_Rsp.adminfd)
  return adminfd_;
}
 void Admin_STR_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_STR_Rsp.adminfd)
}

// optional int64 uid = 2 [default = 0];
 bool Admin_STR_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_STR_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_STR_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_STR_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_STR_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_STR_Rsp.uid)
  return uid_;
}
 void Admin_STR_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_STR_Rsp.uid)
}

// required int32 succ = 3;
 bool Admin_STR_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_STR_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_STR_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_STR_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_STR_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_STR_Rsp.succ)
  return succ_;
}
 void Admin_STR_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_STR_Rsp.succ)
}

// optional string str = 4;
 bool Admin_STR_Rsp::has_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_STR_Rsp::set_has_str() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_STR_Rsp::clear_has_str() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_STR_Rsp::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str();
}
 const ::std::string& Admin_STR_Rsp::str() const {
  // @@protoc_insertion_point(field_get:Admin_STR_Rsp.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_STR_Rsp::set_str(const ::std::string& value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_STR_Rsp.str)
}
 void Admin_STR_Rsp::set_str(const char* value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_STR_Rsp.str)
}
 void Admin_STR_Rsp::set_str(const char* value, size_t size) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_STR_Rsp.str)
}
 ::std::string* Admin_STR_Rsp::mutable_str() {
  set_has_str();
  // @@protoc_insertion_point(field_mutable:Admin_STR_Rsp.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_STR_Rsp::release_str() {
  clear_has_str();
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_STR_Rsp::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    set_has_str();
  } else {
    clear_has_str();
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:Admin_STR_Rsp.str)
}

// optional string openid = 5;
 bool Admin_STR_Rsp::has_openid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_STR_Rsp::set_has_openid() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_STR_Rsp::clear_has_openid() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_STR_Rsp::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& Admin_STR_Rsp::openid() const {
  // @@protoc_insertion_point(field_get:Admin_STR_Rsp.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_STR_Rsp::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_STR_Rsp.openid)
}
 void Admin_STR_Rsp::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_STR_Rsp.openid)
}
 void Admin_STR_Rsp::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_STR_Rsp.openid)
}
 ::std::string* Admin_STR_Rsp::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:Admin_STR_Rsp.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_STR_Rsp::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_STR_Rsp::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:Admin_STR_Rsp.openid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebUnlock::kUidFieldNumber;
const int WebUnlock::kTypeFieldNumber;
const int WebUnlock::kBalanceFieldNumber;
const int WebUnlock::kPosFieldNumber;
const int WebUnlock::kSidFieldNumber;
const int WebUnlock::kSuccFieldNumber;
const int WebUnlock::kInfodetailFieldNumber;
const int WebUnlock::kFdFieldNumber;
const int WebUnlock::kKeyFieldNumber;
#endif  // !_MSC_VER

WebUnlock::WebUnlock()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebUnlock)
}

void WebUnlock::InitAsDefaultInstance() {
}

WebUnlock::WebUnlock(const WebUnlock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebUnlock)
}

void WebUnlock::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  balance_ = 0;
  pos_ = 0;
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  succ_ = false;
  infodetail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fd_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebUnlock::~WebUnlock() {
  // @@protoc_insertion_point(destructor:WebUnlock)
  SharedDtor();
}

void WebUnlock::SharedDtor() {
  sid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infodetail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WebUnlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebUnlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebUnlock_descriptor_;
}

const WebUnlock& WebUnlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebUnlock* WebUnlock::default_instance_ = NULL;

WebUnlock* WebUnlock::New(::google::protobuf::Arena* arena) const {
  WebUnlock* n = new WebUnlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebUnlock::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WebUnlock*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, balance_);
    ZR_(pos_, succ_);
    if (has_sid()) {
      sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_infodetail()) {
      infodetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    fd_ = 0;
  }
  if (has_key()) {
    key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebUnlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebUnlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_balance;
        break;
      }

      // required int32 balance = 3;
      case 3: {
        if (tag == 24) {
         parse_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // required int32 pos = 4;
      case 4: {
        if (tag == 32) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sid;
        break;
      }

      // required string sid = 5;
      case 5: {
        if (tag == 42) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebUnlock.sid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_succ;
        break;
      }

      // optional bool succ = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_infodetail;
        break;
      }

      // optional string infodetail = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_infodetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infodetail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infodetail().data(), this->infodetail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebUnlock.infodetail");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fd;
        break;
      }

      // required int32 fd = 9;
      case 9: {
        if (tag == 72) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_key;
        break;
      }

      // required string key = 10;
      case 10: {
        if (tag == 82) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebUnlock.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebUnlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebUnlock)
  return false;
#undef DO_
}

void WebUnlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebUnlock)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 balance = 3;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->balance(), output);
  }

  // required int32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }

  // required string sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebUnlock.sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sid(), output);
  }

  // optional bool succ = 7 [default = false];
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->succ(), output);
  }

  // optional string infodetail = 8 [default = ""];
  if (has_infodetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infodetail().data(), this->infodetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebUnlock.infodetail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->infodetail(), output);
  }

  // required int32 fd = 9;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fd(), output);
  }

  // required string key = 10;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebUnlock.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebUnlock)
}

::google::protobuf::uint8* WebUnlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebUnlock)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 balance = 3;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->balance(), target);
  }

  // required int32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }

  // required string sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebUnlock.sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sid(), target);
  }

  // optional bool succ = 7 [default = false];
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->succ(), target);
  }

  // optional string infodetail = 8 [default = ""];
  if (has_infodetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infodetail().data(), this->infodetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebUnlock.infodetail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->infodetail(), target);
  }

  // required int32 fd = 9;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fd(), target);
  }

  // required string key = 10;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebUnlock.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebUnlock)
  return target;
}

int WebUnlock::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_balance()) {
    // required int32 balance = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->balance());
  }

  if (has_pos()) {
    // required int32 pos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  if (has_sid()) {
    // required string sid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());
  }

  if (has_fd()) {
    // required int32 fd = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }

  if (has_key()) {
    // required string key = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  return total_size;
}
int WebUnlock::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000019f) ^ 0x0000019f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 balance = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->balance());

    // required int32 pos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());

    // required string sid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());

    // required int32 fd = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());

    // required string key = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96) {
    // optional bool succ = 7 [default = false];
    if (has_succ()) {
      total_size += 1 + 1;
    }

    // optional string infodetail = 8 [default = ""];
    if (has_infodetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infodetail());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebUnlock::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebUnlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebUnlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebUnlock::MergeFrom(const WebUnlock& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_sid()) {
      set_has_sid();
      sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_infodetail()) {
      set_has_infodetail();
      infodetail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infodetail_);
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebUnlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebUnlock::CopyFrom(const WebUnlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebUnlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000019f) != 0x0000019f) return false;

  return true;
}

void WebUnlock::Swap(WebUnlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebUnlock::InternalSwap(WebUnlock* other) {
  std::swap(uid_, other->uid_);
  std::swap(type_, other->type_);
  std::swap(balance_, other->balance_);
  std::swap(pos_, other->pos_);
  sid_.Swap(&other->sid_);
  std::swap(succ_, other->succ_);
  infodetail_.Swap(&other->infodetail_);
  std::swap(fd_, other->fd_);
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebUnlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebUnlock_descriptor_;
  metadata.reflection = WebUnlock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebUnlock

// required int64 uid = 1;
 bool WebUnlock::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebUnlock::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebUnlock::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebUnlock::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 WebUnlock::uid() const {
  // @@protoc_insertion_point(field_get:WebUnlock.uid)
  return uid_;
}
 void WebUnlock::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:WebUnlock.uid)
}

// required int32 type = 2;
 bool WebUnlock::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void WebUnlock::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
 void WebUnlock::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
 void WebUnlock::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 WebUnlock::type() const {
  // @@protoc_insertion_point(field_get:WebUnlock.type)
  return type_;
}
 void WebUnlock::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WebUnlock.type)
}

// required int32 balance = 3;
 bool WebUnlock::has_balance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void WebUnlock::set_has_balance() {
  _has_bits_[0] |= 0x00000004u;
}
 void WebUnlock::clear_has_balance() {
  _has_bits_[0] &= ~0x00000004u;
}
 void WebUnlock::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
 ::google::protobuf::int32 WebUnlock::balance() const {
  // @@protoc_insertion_point(field_get:WebUnlock.balance)
  return balance_;
}
 void WebUnlock::set_balance(::google::protobuf::int32 value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:WebUnlock.balance)
}

// required int32 pos = 4;
 bool WebUnlock::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void WebUnlock::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
 void WebUnlock::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
 void WebUnlock::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
 ::google::protobuf::int32 WebUnlock::pos() const {
  // @@protoc_insertion_point(field_get:WebUnlock.pos)
  return pos_;
}
 void WebUnlock::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:WebUnlock.pos)
}

// required string sid = 5;
 bool WebUnlock::has_sid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void WebUnlock::set_has_sid() {
  _has_bits_[0] |= 0x00000010u;
}
 void WebUnlock::clear_has_sid() {
  _has_bits_[0] &= ~0x00000010u;
}
 void WebUnlock::clear_sid() {
  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sid();
}
 const ::std::string& WebUnlock::sid() const {
  // @@protoc_insertion_point(field_get:WebUnlock.sid)
  return sid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebUnlock::set_sid(const ::std::string& value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebUnlock.sid)
}
 void WebUnlock::set_sid(const char* value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebUnlock.sid)
}
 void WebUnlock::set_sid(const char* value, size_t size) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebUnlock.sid)
}
 ::std::string* WebUnlock::mutable_sid() {
  set_has_sid();
  // @@protoc_insertion_point(field_mutable:WebUnlock.sid)
  return sid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebUnlock::release_sid() {
  clear_has_sid();
  return sid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebUnlock::set_allocated_sid(::std::string* sid) {
  if (sid != NULL) {
    set_has_sid();
  } else {
    clear_has_sid();
  }
  sid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:WebUnlock.sid)
}

// optional bool succ = 7 [default = false];
 bool WebUnlock::has_succ() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void WebUnlock::set_has_succ() {
  _has_bits_[0] |= 0x00000020u;
}
 void WebUnlock::clear_has_succ() {
  _has_bits_[0] &= ~0x00000020u;
}
 void WebUnlock::clear_succ() {
  succ_ = false;
  clear_has_succ();
}
 bool WebUnlock::succ() const {
  // @@protoc_insertion_point(field_get:WebUnlock.succ)
  return succ_;
}
 void WebUnlock::set_succ(bool value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:WebUnlock.succ)
}

// optional string infodetail = 8 [default = ""];
 bool WebUnlock::has_infodetail() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void WebUnlock::set_has_infodetail() {
  _has_bits_[0] |= 0x00000040u;
}
 void WebUnlock::clear_has_infodetail() {
  _has_bits_[0] &= ~0x00000040u;
}
 void WebUnlock::clear_infodetail() {
  infodetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_infodetail();
}
 const ::std::string& WebUnlock::infodetail() const {
  // @@protoc_insertion_point(field_get:WebUnlock.infodetail)
  return infodetail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebUnlock::set_infodetail(const ::std::string& value) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebUnlock.infodetail)
}
 void WebUnlock::set_infodetail(const char* value) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebUnlock.infodetail)
}
 void WebUnlock::set_infodetail(const char* value, size_t size) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebUnlock.infodetail)
}
 ::std::string* WebUnlock::mutable_infodetail() {
  set_has_infodetail();
  // @@protoc_insertion_point(field_mutable:WebUnlock.infodetail)
  return infodetail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebUnlock::release_infodetail() {
  clear_has_infodetail();
  return infodetail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebUnlock::set_allocated_infodetail(::std::string* infodetail) {
  if (infodetail != NULL) {
    set_has_infodetail();
  } else {
    clear_has_infodetail();
  }
  infodetail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), infodetail);
  // @@protoc_insertion_point(field_set_allocated:WebUnlock.infodetail)
}

// required int32 fd = 9;
 bool WebUnlock::has_fd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void WebUnlock::set_has_fd() {
  _has_bits_[0] |= 0x00000080u;
}
 void WebUnlock::clear_has_fd() {
  _has_bits_[0] &= ~0x00000080u;
}
 void WebUnlock::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 WebUnlock::fd() const {
  // @@protoc_insertion_point(field_get:WebUnlock.fd)
  return fd_;
}
 void WebUnlock::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:WebUnlock.fd)
}

// required string key = 10;
 bool WebUnlock::has_key() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void WebUnlock::set_has_key() {
  _has_bits_[0] |= 0x00000100u;
}
 void WebUnlock::clear_has_key() {
  _has_bits_[0] &= ~0x00000100u;
}
 void WebUnlock::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& WebUnlock::key() const {
  // @@protoc_insertion_point(field_get:WebUnlock.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebUnlock::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebUnlock.key)
}
 void WebUnlock::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebUnlock.key)
}
 void WebUnlock::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebUnlock.key)
}
 ::std::string* WebUnlock::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:WebUnlock.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebUnlock::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebUnlock::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:WebUnlock.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebAddEmployee::kUidFieldNumber;
const int WebAddEmployee::kTypeFieldNumber;
const int WebAddEmployee::kBalanceFieldNumber;
const int WebAddEmployee::kHiretypeFieldNumber;
const int WebAddEmployee::kIndexFieldNumber;
const int WebAddEmployee::kSidFieldNumber;
const int WebAddEmployee::kSuccFieldNumber;
const int WebAddEmployee::kInfodetailFieldNumber;
const int WebAddEmployee::kFdFieldNumber;
const int WebAddEmployee::kKeyFieldNumber;
#endif  // !_MSC_VER

WebAddEmployee::WebAddEmployee()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAddEmployee)
}

void WebAddEmployee::InitAsDefaultInstance() {
}

WebAddEmployee::WebAddEmployee(const WebAddEmployee& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebAddEmployee)
}

void WebAddEmployee::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  balance_ = 0;
  hiretype_ = 0;
  index_ = 0;
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  succ_ = false;
  infodetail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fd_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebAddEmployee::~WebAddEmployee() {
  // @@protoc_insertion_point(destructor:WebAddEmployee)
  SharedDtor();
}

void WebAddEmployee::SharedDtor() {
  sid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infodetail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WebAddEmployee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebAddEmployee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebAddEmployee_descriptor_;
}

const WebAddEmployee& WebAddEmployee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebAddEmployee* WebAddEmployee::default_instance_ = NULL;

WebAddEmployee* WebAddEmployee::New(::google::protobuf::Arena* arena) const {
  WebAddEmployee* n = new WebAddEmployee;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebAddEmployee::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WebAddEmployee*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, index_);
    if (has_sid()) {
      sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    succ_ = false;
    if (has_infodetail()) {
      infodetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    fd_ = 0;
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebAddEmployee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAddEmployee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_balance;
        break;
      }

      // required int32 balance = 3;
      case 3: {
        if (tag == 24) {
         parse_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hiretype;
        break;
      }

      // required int32 hiretype = 4;
      case 4: {
        if (tag == 32) {
         parse_hiretype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hiretype_)));
          set_has_hiretype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // required int32 index = 5;
      case 5: {
        if (tag == 40) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sid;
        break;
      }

      // required string sid = 6;
      case 6: {
        if (tag == 50) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAddEmployee.sid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_succ;
        break;
      }

      // optional bool succ = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_infodetail;
        break;
      }

      // optional string infodetail = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_infodetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infodetail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infodetail().data(), this->infodetail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAddEmployee.infodetail");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fd;
        break;
      }

      // required int32 fd = 9;
      case 9: {
        if (tag == 72) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_key;
        break;
      }

      // required string key = 10;
      case 10: {
        if (tag == 82) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAddEmployee.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAddEmployee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAddEmployee)
  return false;
#undef DO_
}

void WebAddEmployee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAddEmployee)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 balance = 3;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->balance(), output);
  }

  // required int32 hiretype = 4;
  if (has_hiretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hiretype(), output);
  }

  // required int32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }

  // required string sid = 6;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAddEmployee.sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sid(), output);
  }

  // optional bool succ = 7 [default = false];
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->succ(), output);
  }

  // optional string infodetail = 8 [default = ""];
  if (has_infodetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infodetail().data(), this->infodetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAddEmployee.infodetail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->infodetail(), output);
  }

  // required int32 fd = 9;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fd(), output);
  }

  // required string key = 10;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAddEmployee.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAddEmployee)
}

::google::protobuf::uint8* WebAddEmployee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebAddEmployee)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 balance = 3;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->balance(), target);
  }

  // required int32 hiretype = 4;
  if (has_hiretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hiretype(), target);
  }

  // required int32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }

  // required string sid = 6;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAddEmployee.sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sid(), target);
  }

  // optional bool succ = 7 [default = false];
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->succ(), target);
  }

  // optional string infodetail = 8 [default = ""];
  if (has_infodetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infodetail().data(), this->infodetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAddEmployee.infodetail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->infodetail(), target);
  }

  // required int32 fd = 9;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fd(), target);
  }

  // required string key = 10;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAddEmployee.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAddEmployee)
  return target;
}

int WebAddEmployee::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_balance()) {
    // required int32 balance = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->balance());
  }

  if (has_hiretype()) {
    // required int32 hiretype = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hiretype());
  }

  if (has_index()) {
    // required int32 index = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_sid()) {
    // required string sid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());
  }

  if (has_fd()) {
    // required int32 fd = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }

  if (has_key()) {
    // required string key = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  return total_size;
}
int WebAddEmployee::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000033f) ^ 0x0000033f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 balance = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->balance());

    // required int32 hiretype = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hiretype());

    // required int32 index = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required string sid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());

    // required int32 fd = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());

    // required string key = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[6 / 32] & 192) {
    // optional bool succ = 7 [default = false];
    if (has_succ()) {
      total_size += 1 + 1;
    }

    // optional string infodetail = 8 [default = ""];
    if (has_infodetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infodetail());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebAddEmployee::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebAddEmployee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebAddEmployee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebAddEmployee::MergeFrom(const WebAddEmployee& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_hiretype()) {
      set_hiretype(from.hiretype());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_sid()) {
      set_has_sid();
      sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_infodetail()) {
      set_has_infodetail();
      infodetail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infodetail_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebAddEmployee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebAddEmployee::CopyFrom(const WebAddEmployee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebAddEmployee::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000033f) != 0x0000033f) return false;

  return true;
}

void WebAddEmployee::Swap(WebAddEmployee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebAddEmployee::InternalSwap(WebAddEmployee* other) {
  std::swap(uid_, other->uid_);
  std::swap(type_, other->type_);
  std::swap(balance_, other->balance_);
  std::swap(hiretype_, other->hiretype_);
  std::swap(index_, other->index_);
  sid_.Swap(&other->sid_);
  std::swap(succ_, other->succ_);
  infodetail_.Swap(&other->infodetail_);
  std::swap(fd_, other->fd_);
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebAddEmployee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebAddEmployee_descriptor_;
  metadata.reflection = WebAddEmployee_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebAddEmployee

// required int64 uid = 1;
 bool WebAddEmployee::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebAddEmployee::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebAddEmployee::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebAddEmployee::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 WebAddEmployee::uid() const {
  // @@protoc_insertion_point(field_get:WebAddEmployee.uid)
  return uid_;
}
 void WebAddEmployee::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:WebAddEmployee.uid)
}

// required int32 type = 2;
 bool WebAddEmployee::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void WebAddEmployee::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
 void WebAddEmployee::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
 void WebAddEmployee::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 WebAddEmployee::type() const {
  // @@protoc_insertion_point(field_get:WebAddEmployee.type)
  return type_;
}
 void WebAddEmployee::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WebAddEmployee.type)
}

// required int32 balance = 3;
 bool WebAddEmployee::has_balance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void WebAddEmployee::set_has_balance() {
  _has_bits_[0] |= 0x00000004u;
}
 void WebAddEmployee::clear_has_balance() {
  _has_bits_[0] &= ~0x00000004u;
}
 void WebAddEmployee::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
 ::google::protobuf::int32 WebAddEmployee::balance() const {
  // @@protoc_insertion_point(field_get:WebAddEmployee.balance)
  return balance_;
}
 void WebAddEmployee::set_balance(::google::protobuf::int32 value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:WebAddEmployee.balance)
}

// required int32 hiretype = 4;
 bool WebAddEmployee::has_hiretype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void WebAddEmployee::set_has_hiretype() {
  _has_bits_[0] |= 0x00000008u;
}
 void WebAddEmployee::clear_has_hiretype() {
  _has_bits_[0] &= ~0x00000008u;
}
 void WebAddEmployee::clear_hiretype() {
  hiretype_ = 0;
  clear_has_hiretype();
}
 ::google::protobuf::int32 WebAddEmployee::hiretype() const {
  // @@protoc_insertion_point(field_get:WebAddEmployee.hiretype)
  return hiretype_;
}
 void WebAddEmployee::set_hiretype(::google::protobuf::int32 value) {
  set_has_hiretype();
  hiretype_ = value;
  // @@protoc_insertion_point(field_set:WebAddEmployee.hiretype)
}

// required int32 index = 5;
 bool WebAddEmployee::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void WebAddEmployee::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
 void WebAddEmployee::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
 void WebAddEmployee::clear_index() {
  index_ = 0;
  clear_has_index();
}
 ::google::protobuf::int32 WebAddEmployee::index() const {
  // @@protoc_insertion_point(field_get:WebAddEmployee.index)
  return index_;
}
 void WebAddEmployee::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:WebAddEmployee.index)
}

// required string sid = 6;
 bool WebAddEmployee::has_sid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void WebAddEmployee::set_has_sid() {
  _has_bits_[0] |= 0x00000020u;
}
 void WebAddEmployee::clear_has_sid() {
  _has_bits_[0] &= ~0x00000020u;
}
 void WebAddEmployee::clear_sid() {
  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sid();
}
 const ::std::string& WebAddEmployee::sid() const {
  // @@protoc_insertion_point(field_get:WebAddEmployee.sid)
  return sid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebAddEmployee::set_sid(const ::std::string& value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAddEmployee.sid)
}
 void WebAddEmployee::set_sid(const char* value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAddEmployee.sid)
}
 void WebAddEmployee::set_sid(const char* value, size_t size) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAddEmployee.sid)
}
 ::std::string* WebAddEmployee::mutable_sid() {
  set_has_sid();
  // @@protoc_insertion_point(field_mutable:WebAddEmployee.sid)
  return sid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebAddEmployee::release_sid() {
  clear_has_sid();
  return sid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebAddEmployee::set_allocated_sid(::std::string* sid) {
  if (sid != NULL) {
    set_has_sid();
  } else {
    clear_has_sid();
  }
  sid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:WebAddEmployee.sid)
}

// optional bool succ = 7 [default = false];
 bool WebAddEmployee::has_succ() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void WebAddEmployee::set_has_succ() {
  _has_bits_[0] |= 0x00000040u;
}
 void WebAddEmployee::clear_has_succ() {
  _has_bits_[0] &= ~0x00000040u;
}
 void WebAddEmployee::clear_succ() {
  succ_ = false;
  clear_has_succ();
}
 bool WebAddEmployee::succ() const {
  // @@protoc_insertion_point(field_get:WebAddEmployee.succ)
  return succ_;
}
 void WebAddEmployee::set_succ(bool value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:WebAddEmployee.succ)
}

// optional string infodetail = 8 [default = ""];
 bool WebAddEmployee::has_infodetail() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void WebAddEmployee::set_has_infodetail() {
  _has_bits_[0] |= 0x00000080u;
}
 void WebAddEmployee::clear_has_infodetail() {
  _has_bits_[0] &= ~0x00000080u;
}
 void WebAddEmployee::clear_infodetail() {
  infodetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_infodetail();
}
 const ::std::string& WebAddEmployee::infodetail() const {
  // @@protoc_insertion_point(field_get:WebAddEmployee.infodetail)
  return infodetail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebAddEmployee::set_infodetail(const ::std::string& value) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAddEmployee.infodetail)
}
 void WebAddEmployee::set_infodetail(const char* value) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAddEmployee.infodetail)
}
 void WebAddEmployee::set_infodetail(const char* value, size_t size) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAddEmployee.infodetail)
}
 ::std::string* WebAddEmployee::mutable_infodetail() {
  set_has_infodetail();
  // @@protoc_insertion_point(field_mutable:WebAddEmployee.infodetail)
  return infodetail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebAddEmployee::release_infodetail() {
  clear_has_infodetail();
  return infodetail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebAddEmployee::set_allocated_infodetail(::std::string* infodetail) {
  if (infodetail != NULL) {
    set_has_infodetail();
  } else {
    clear_has_infodetail();
  }
  infodetail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), infodetail);
  // @@protoc_insertion_point(field_set_allocated:WebAddEmployee.infodetail)
}

// required int32 fd = 9;
 bool WebAddEmployee::has_fd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void WebAddEmployee::set_has_fd() {
  _has_bits_[0] |= 0x00000100u;
}
 void WebAddEmployee::clear_has_fd() {
  _has_bits_[0] &= ~0x00000100u;
}
 void WebAddEmployee::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 WebAddEmployee::fd() const {
  // @@protoc_insertion_point(field_get:WebAddEmployee.fd)
  return fd_;
}
 void WebAddEmployee::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:WebAddEmployee.fd)
}

// required string key = 10;
 bool WebAddEmployee::has_key() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void WebAddEmployee::set_has_key() {
  _has_bits_[0] |= 0x00000200u;
}
 void WebAddEmployee::clear_has_key() {
  _has_bits_[0] &= ~0x00000200u;
}
 void WebAddEmployee::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& WebAddEmployee::key() const {
  // @@protoc_insertion_point(field_get:WebAddEmployee.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebAddEmployee::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAddEmployee.key)
}
 void WebAddEmployee::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAddEmployee.key)
}
 void WebAddEmployee::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAddEmployee.key)
}
 ::std::string* WebAddEmployee::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:WebAddEmployee.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebAddEmployee::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebAddEmployee::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:WebAddEmployee.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebBuyDetail::kShopidFieldNumber;
const int WebBuyDetail::kCountFieldNumber;
const int WebBuyDetail::kIndateFieldNumber;
const int WebBuyDetail::kPriceFieldNumber;
const int WebBuyDetail::kPosxFieldNumber;
const int WebBuyDetail::kPosyFieldNumber;
const int WebBuyDetail::kDirectionFieldNumber;
#endif  // !_MSC_VER

WebBuyDetail::WebBuyDetail()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebBuyDetail)
}

void WebBuyDetail::InitAsDefaultInstance() {
}

WebBuyDetail::WebBuyDetail(const WebBuyDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebBuyDetail)
}

void WebBuyDetail::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  indate_ = 0;
  price_ = 0;
  posx_ = 0;
  posy_ = 0;
  direction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebBuyDetail::~WebBuyDetail() {
  // @@protoc_insertion_point(destructor:WebBuyDetail)
  SharedDtor();
}

void WebBuyDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WebBuyDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebBuyDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebBuyDetail_descriptor_;
}

const WebBuyDetail& WebBuyDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebBuyDetail* WebBuyDetail::default_instance_ = NULL;

WebBuyDetail* WebBuyDetail::New(::google::protobuf::Arena* arena) const {
  WebBuyDetail* n = new WebBuyDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebBuyDetail::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WebBuyDetail*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(shopid_, direction_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebBuyDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebBuyDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 shopid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_indate;
        break;
      }

      // required int32 indate = 3;
      case 3: {
        if (tag == 24) {
         parse_indate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indate_)));
          set_has_indate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // required int32 price = 4;
      case 4: {
        if (tag == 32) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_posx;
        break;
      }

      // optional int32 posx = 5;
      case 5: {
        if (tag == 40) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_posy;
        break;
      }

      // optional int32 posy = 6;
      case 6: {
        if (tag == 48) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_direction;
        break;
      }

      // optional int32 direction = 7;
      case 7: {
        if (tag == 56) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebBuyDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebBuyDetail)
  return false;
#undef DO_
}

void WebBuyDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebBuyDetail)
  // required int64 shopid = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->shopid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 indate = 3;
  if (has_indate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->indate(), output);
  }

  // required int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }

  // optional int32 posx = 5;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->posx(), output);
  }

  // optional int32 posy = 6;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->posy(), output);
  }

  // optional int32 direction = 7;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebBuyDetail)
}

::google::protobuf::uint8* WebBuyDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebBuyDetail)
  // required int64 shopid = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->shopid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 indate = 3;
  if (has_indate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->indate(), target);
  }

  // required int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }

  // optional int32 posx = 5;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->posx(), target);
  }

  // optional int32 posy = 6;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->posy(), target);
  }

  // optional int32 direction = 7;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebBuyDetail)
  return target;
}

int WebBuyDetail::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_shopid()) {
    // required int64 shopid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shopid());
  }

  if (has_count()) {
    // required int32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  if (has_indate()) {
    // required int32 indate = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->indate());
  }

  if (has_price()) {
    // required int32 price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  return total_size;
}
int WebBuyDetail::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 shopid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shopid());

    // required int32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

    // required int32 indate = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->indate());

    // required int32 price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 112) {
    // optional int32 posx = 5;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posy = 6;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 direction = 7;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebBuyDetail::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebBuyDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebBuyDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebBuyDetail::MergeFrom(const WebBuyDetail& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_indate()) {
      set_indate(from.indate());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebBuyDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebBuyDetail::CopyFrom(const WebBuyDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebBuyDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void WebBuyDetail::Swap(WebBuyDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebBuyDetail::InternalSwap(WebBuyDetail* other) {
  std::swap(shopid_, other->shopid_);
  std::swap(count_, other->count_);
  std::swap(indate_, other->indate_);
  std::swap(price_, other->price_);
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(direction_, other->direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebBuyDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebBuyDetail_descriptor_;
  metadata.reflection = WebBuyDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebBuyDetail

// required int64 shopid = 1;
 bool WebBuyDetail::has_shopid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebBuyDetail::set_has_shopid() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebBuyDetail::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebBuyDetail::clear_shopid() {
  shopid_ = GOOGLE_LONGLONG(0);
  clear_has_shopid();
}
 ::google::protobuf::int64 WebBuyDetail::shopid() const {
  // @@protoc_insertion_point(field_get:WebBuyDetail.shopid)
  return shopid_;
}
 void WebBuyDetail::set_shopid(::google::protobuf::int64 value) {
  set_has_shopid();
  shopid_ = value;
  // @@protoc_insertion_point(field_set:WebBuyDetail.shopid)
}

// required int32 count = 2;
 bool WebBuyDetail::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void WebBuyDetail::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
 void WebBuyDetail::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
 void WebBuyDetail::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 WebBuyDetail::count() const {
  // @@protoc_insertion_point(field_get:WebBuyDetail.count)
  return count_;
}
 void WebBuyDetail::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:WebBuyDetail.count)
}

// required int32 indate = 3;
 bool WebBuyDetail::has_indate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void WebBuyDetail::set_has_indate() {
  _has_bits_[0] |= 0x00000004u;
}
 void WebBuyDetail::clear_has_indate() {
  _has_bits_[0] &= ~0x00000004u;
}
 void WebBuyDetail::clear_indate() {
  indate_ = 0;
  clear_has_indate();
}
 ::google::protobuf::int32 WebBuyDetail::indate() const {
  // @@protoc_insertion_point(field_get:WebBuyDetail.indate)
  return indate_;
}
 void WebBuyDetail::set_indate(::google::protobuf::int32 value) {
  set_has_indate();
  indate_ = value;
  // @@protoc_insertion_point(field_set:WebBuyDetail.indate)
}

// required int32 price = 4;
 bool WebBuyDetail::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void WebBuyDetail::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
 void WebBuyDetail::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
 void WebBuyDetail::clear_price() {
  price_ = 0;
  clear_has_price();
}
 ::google::protobuf::int32 WebBuyDetail::price() const {
  // @@protoc_insertion_point(field_get:WebBuyDetail.price)
  return price_;
}
 void WebBuyDetail::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:WebBuyDetail.price)
}

// optional int32 posx = 5;
 bool WebBuyDetail::has_posx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void WebBuyDetail::set_has_posx() {
  _has_bits_[0] |= 0x00000010u;
}
 void WebBuyDetail::clear_has_posx() {
  _has_bits_[0] &= ~0x00000010u;
}
 void WebBuyDetail::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
 ::google::protobuf::int32 WebBuyDetail::posx() const {
  // @@protoc_insertion_point(field_get:WebBuyDetail.posx)
  return posx_;
}
 void WebBuyDetail::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:WebBuyDetail.posx)
}

// optional int32 posy = 6;
 bool WebBuyDetail::has_posy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void WebBuyDetail::set_has_posy() {
  _has_bits_[0] |= 0x00000020u;
}
 void WebBuyDetail::clear_has_posy() {
  _has_bits_[0] &= ~0x00000020u;
}
 void WebBuyDetail::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
 ::google::protobuf::int32 WebBuyDetail::posy() const {
  // @@protoc_insertion_point(field_get:WebBuyDetail.posy)
  return posy_;
}
 void WebBuyDetail::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:WebBuyDetail.posy)
}

// optional int32 direction = 7;
 bool WebBuyDetail::has_direction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void WebBuyDetail::set_has_direction() {
  _has_bits_[0] |= 0x00000040u;
}
 void WebBuyDetail::clear_has_direction() {
  _has_bits_[0] &= ~0x00000040u;
}
 void WebBuyDetail::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
 ::google::protobuf::int32 WebBuyDetail::direction() const {
  // @@protoc_insertion_point(field_get:WebBuyDetail.direction)
  return direction_;
}
 void WebBuyDetail::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:WebBuyDetail.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebBuy::kUidFieldNumber;
const int WebBuy::kLeftcoinFieldNumber;
const int WebBuy::kBandcoincostFieldNumber;
const int WebBuy::kItemsFieldNumber;
const int WebBuy::kSidFieldNumber;
const int WebBuy::kSuccFieldNumber;
const int WebBuy::kInfodetailFieldNumber;
const int WebBuy::kFdFieldNumber;
const int WebBuy::kKeyFieldNumber;
const int WebBuy::kDirectgiveFieldNumber;
const int WebBuy::kLimitedFieldNumber;
const int WebBuy::kOpenidFieldNumber;
const int WebBuy::kUseOpenidFieldNumber;
#endif  // !_MSC_VER

WebBuy::WebBuy()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebBuy)
}

void WebBuy::InitAsDefaultInstance() {
}

WebBuy::WebBuy(const WebBuy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebBuy)
}

void WebBuy::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  leftcoin_ = 0;
  bandcoincost_ = 0;
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  succ_ = false;
  infodetail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fd_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  directgive_ = false;
  limited_ = false;
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_openid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebBuy::~WebBuy() {
  // @@protoc_insertion_point(destructor:WebBuy)
  SharedDtor();
}

void WebBuy::SharedDtor() {
  sid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infodetail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WebBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebBuy_descriptor_;
}

const WebBuy& WebBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebBuy* WebBuy::default_instance_ = NULL;

WebBuy* WebBuy::New(::google::protobuf::Arena* arena) const {
  WebBuy* n = new WebBuy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebBuy::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WebBuy*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(uid_, bandcoincost_);
    ZR_(fd_, succ_);
    if (has_sid()) {
      sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_infodetail()) {
      infodetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(directgive_, use_openid_);
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebBuy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leftcoin;
        break;
      }

      // required int32 leftcoin = 2;
      case 2: {
        if (tag == 16) {
         parse_leftcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcoin_)));
          set_has_leftcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bandcoincost;
        break;
      }

      // required int32 bandcoincost = 3;
      case 3: {
        if (tag == 24) {
         parse_bandcoincost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bandcoincost_)));
          set_has_bandcoincost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .WebBuyDetail items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectTag(42)) goto parse_sid;
        break;
      }

      // required string sid = 5;
      case 5: {
        if (tag == 42) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebBuy.sid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_succ;
        break;
      }

      // optional bool succ = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_infodetail;
        break;
      }

      // optional string infodetail = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_infodetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infodetail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infodetail().data(), this->infodetail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebBuy.infodetail");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fd;
        break;
      }

      // required int32 fd = 8;
      case 8: {
        if (tag == 64) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_key;
        break;
      }

      // required string key = 9;
      case 9: {
        if (tag == 74) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebBuy.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_directgive;
        break;
      }

      // optional bool directgive = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_directgive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &directgive_)));
          set_has_directgive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_limited;
        break;
      }

      // optional bool limited = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_limited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &limited_)));
          set_has_limited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_openid;
        break;
      }

      // optional string openid = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebBuy.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_use_openid;
        break;
      }

      // optional bool use_openid = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_use_openid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_openid_)));
          set_has_use_openid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebBuy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebBuy)
  return false;
#undef DO_
}

void WebBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebBuy)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 leftcoin = 2;
  if (has_leftcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftcoin(), output);
  }

  // required int32 bandcoincost = 3;
  if (has_bandcoincost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bandcoincost(), output);
  }

  // repeated .WebBuyDetail items = 4;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  // required string sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy.sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sid(), output);
  }

  // optional bool succ = 6 [default = false];
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->succ(), output);
  }

  // optional string infodetail = 7 [default = ""];
  if (has_infodetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infodetail().data(), this->infodetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy.infodetail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->infodetail(), output);
  }

  // required int32 fd = 8;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fd(), output);
  }

  // required string key = 9;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->key(), output);
  }

  // optional bool directgive = 10 [default = false];
  if (has_directgive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->directgive(), output);
  }

  // optional bool limited = 11 [default = false];
  if (has_limited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->limited(), output);
  }

  // optional string openid = 12 [default = ""];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->openid(), output);
  }

  // optional bool use_openid = 13 [default = false];
  if (has_use_openid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->use_openid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebBuy)
}

::google::protobuf::uint8* WebBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebBuy)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 leftcoin = 2;
  if (has_leftcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftcoin(), target);
  }

  // required int32 bandcoincost = 3;
  if (has_bandcoincost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bandcoincost(), target);
  }

  // repeated .WebBuyDetail items = 4;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  // required string sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy.sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sid(), target);
  }

  // optional bool succ = 6 [default = false];
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->succ(), target);
  }

  // optional string infodetail = 7 [default = ""];
  if (has_infodetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infodetail().data(), this->infodetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy.infodetail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->infodetail(), target);
  }

  // required int32 fd = 8;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fd(), target);
  }

  // required string key = 9;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->key(), target);
  }

  // optional bool directgive = 10 [default = false];
  if (has_directgive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->directgive(), target);
  }

  // optional bool limited = 11 [default = false];
  if (has_limited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->limited(), target);
  }

  // optional string openid = 12 [default = ""];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->openid(), target);
  }

  // optional bool use_openid = 13 [default = false];
  if (has_use_openid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->use_openid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebBuy)
  return target;
}

int WebBuy::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_leftcoin()) {
    // required int32 leftcoin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leftcoin());
  }

  if (has_bandcoincost()) {
    // required int32 bandcoincost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bandcoincost());
  }

  if (has_sid()) {
    // required string sid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());
  }

  if (has_fd()) {
    // required int32 fd = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }

  if (has_key()) {
    // required string key = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  return total_size;
}
int WebBuy::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000197) ^ 0x00000197) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 leftcoin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leftcoin());

    // required int32 bandcoincost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bandcoincost());

    // required string sid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());

    // required int32 fd = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());

    // required string key = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96) {
    // optional bool succ = 6 [default = false];
    if (has_succ()) {
      total_size += 1 + 1;
    }

    // optional string infodetail = 7 [default = ""];
    if (has_infodetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infodetail());
    }

  }
  if (_has_bits_[9 / 32] & 7680) {
    // optional bool directgive = 10 [default = false];
    if (has_directgive()) {
      total_size += 1 + 1;
    }

    // optional bool limited = 11 [default = false];
    if (has_limited()) {
      total_size += 1 + 1;
    }

    // optional string openid = 12 [default = ""];
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional bool use_openid = 13 [default = false];
    if (has_use_openid()) {
      total_size += 1 + 1;
    }

  }
  // repeated .WebBuyDetail items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebBuy::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebBuy::MergeFrom(const WebBuy& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_leftcoin()) {
      set_leftcoin(from.leftcoin());
    }
    if (from.has_bandcoincost()) {
      set_bandcoincost(from.bandcoincost());
    }
    if (from.has_sid()) {
      set_has_sid();
      sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_infodetail()) {
      set_has_infodetail();
      infodetail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infodetail_);
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_directgive()) {
      set_directgive(from.directgive());
    }
    if (from.has_limited()) {
      set_limited(from.limited());
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_use_openid()) {
      set_use_openid(from.use_openid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebBuy::CopyFrom(const WebBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebBuy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000197) != 0x00000197) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void WebBuy::Swap(WebBuy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebBuy::InternalSwap(WebBuy* other) {
  std::swap(uid_, other->uid_);
  std::swap(leftcoin_, other->leftcoin_);
  std::swap(bandcoincost_, other->bandcoincost_);
  items_.UnsafeArenaSwap(&other->items_);
  sid_.Swap(&other->sid_);
  std::swap(succ_, other->succ_);
  infodetail_.Swap(&other->infodetail_);
  std::swap(fd_, other->fd_);
  key_.Swap(&other->key_);
  std::swap(directgive_, other->directgive_);
  std::swap(limited_, other->limited_);
  openid_.Swap(&other->openid_);
  std::swap(use_openid_, other->use_openid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebBuy_descriptor_;
  metadata.reflection = WebBuy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebBuy

// required int64 uid = 1;
 bool WebBuy::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebBuy::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebBuy::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebBuy::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 WebBuy::uid() const {
  // @@protoc_insertion_point(field_get:WebBuy.uid)
  return uid_;
}
 void WebBuy::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:WebBuy.uid)
}

// required int32 leftcoin = 2;
 bool WebBuy::has_leftcoin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void WebBuy::set_has_leftcoin() {
  _has_bits_[0] |= 0x00000002u;
}
 void WebBuy::clear_has_leftcoin() {
  _has_bits_[0] &= ~0x00000002u;
}
 void WebBuy::clear_leftcoin() {
  leftcoin_ = 0;
  clear_has_leftcoin();
}
 ::google::protobuf::int32 WebBuy::leftcoin() const {
  // @@protoc_insertion_point(field_get:WebBuy.leftcoin)
  return leftcoin_;
}
 void WebBuy::set_leftcoin(::google::protobuf::int32 value) {
  set_has_leftcoin();
  leftcoin_ = value;
  // @@protoc_insertion_point(field_set:WebBuy.leftcoin)
}

// required int32 bandcoincost = 3;
 bool WebBuy::has_bandcoincost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void WebBuy::set_has_bandcoincost() {
  _has_bits_[0] |= 0x00000004u;
}
 void WebBuy::clear_has_bandcoincost() {
  _has_bits_[0] &= ~0x00000004u;
}
 void WebBuy::clear_bandcoincost() {
  bandcoincost_ = 0;
  clear_has_bandcoincost();
}
 ::google::protobuf::int32 WebBuy::bandcoincost() const {
  // @@protoc_insertion_point(field_get:WebBuy.bandcoincost)
  return bandcoincost_;
}
 void WebBuy::set_bandcoincost(::google::protobuf::int32 value) {
  set_has_bandcoincost();
  bandcoincost_ = value;
  // @@protoc_insertion_point(field_set:WebBuy.bandcoincost)
}

// repeated .WebBuyDetail items = 4;
 int WebBuy::items_size() const {
  return items_.size();
}
 void WebBuy::clear_items() {
  items_.Clear();
}
 const ::WebBuyDetail& WebBuy::items(int index) const {
  // @@protoc_insertion_point(field_get:WebBuy.items)
  return items_.Get(index);
}
 ::WebBuyDetail* WebBuy::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:WebBuy.items)
  return items_.Mutable(index);
}
 ::WebBuyDetail* WebBuy::add_items() {
  // @@protoc_insertion_point(field_add:WebBuy.items)
  return items_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::WebBuyDetail >&
WebBuy::items() const {
  // @@protoc_insertion_point(field_list:WebBuy.items)
  return items_;
}
 ::google::protobuf::RepeatedPtrField< ::WebBuyDetail >*
WebBuy::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:WebBuy.items)
  return &items_;
}

// required string sid = 5;
 bool WebBuy::has_sid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void WebBuy::set_has_sid() {
  _has_bits_[0] |= 0x00000010u;
}
 void WebBuy::clear_has_sid() {
  _has_bits_[0] &= ~0x00000010u;
}
 void WebBuy::clear_sid() {
  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sid();
}
 const ::std::string& WebBuy::sid() const {
  // @@protoc_insertion_point(field_get:WebBuy.sid)
  return sid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy::set_sid(const ::std::string& value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebBuy.sid)
}
 void WebBuy::set_sid(const char* value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebBuy.sid)
}
 void WebBuy::set_sid(const char* value, size_t size) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebBuy.sid)
}
 ::std::string* WebBuy::mutable_sid() {
  set_has_sid();
  // @@protoc_insertion_point(field_mutable:WebBuy.sid)
  return sid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebBuy::release_sid() {
  clear_has_sid();
  return sid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy::set_allocated_sid(::std::string* sid) {
  if (sid != NULL) {
    set_has_sid();
  } else {
    clear_has_sid();
  }
  sid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:WebBuy.sid)
}

// optional bool succ = 6 [default = false];
 bool WebBuy::has_succ() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void WebBuy::set_has_succ() {
  _has_bits_[0] |= 0x00000020u;
}
 void WebBuy::clear_has_succ() {
  _has_bits_[0] &= ~0x00000020u;
}
 void WebBuy::clear_succ() {
  succ_ = false;
  clear_has_succ();
}
 bool WebBuy::succ() const {
  // @@protoc_insertion_point(field_get:WebBuy.succ)
  return succ_;
}
 void WebBuy::set_succ(bool value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:WebBuy.succ)
}

// optional string infodetail = 7 [default = ""];
 bool WebBuy::has_infodetail() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void WebBuy::set_has_infodetail() {
  _has_bits_[0] |= 0x00000040u;
}
 void WebBuy::clear_has_infodetail() {
  _has_bits_[0] &= ~0x00000040u;
}
 void WebBuy::clear_infodetail() {
  infodetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_infodetail();
}
 const ::std::string& WebBuy::infodetail() const {
  // @@protoc_insertion_point(field_get:WebBuy.infodetail)
  return infodetail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy::set_infodetail(const ::std::string& value) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebBuy.infodetail)
}
 void WebBuy::set_infodetail(const char* value) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebBuy.infodetail)
}
 void WebBuy::set_infodetail(const char* value, size_t size) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebBuy.infodetail)
}
 ::std::string* WebBuy::mutable_infodetail() {
  set_has_infodetail();
  // @@protoc_insertion_point(field_mutable:WebBuy.infodetail)
  return infodetail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebBuy::release_infodetail() {
  clear_has_infodetail();
  return infodetail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy::set_allocated_infodetail(::std::string* infodetail) {
  if (infodetail != NULL) {
    set_has_infodetail();
  } else {
    clear_has_infodetail();
  }
  infodetail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), infodetail);
  // @@protoc_insertion_point(field_set_allocated:WebBuy.infodetail)
}

// required int32 fd = 8;
 bool WebBuy::has_fd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void WebBuy::set_has_fd() {
  _has_bits_[0] |= 0x00000080u;
}
 void WebBuy::clear_has_fd() {
  _has_bits_[0] &= ~0x00000080u;
}
 void WebBuy::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 WebBuy::fd() const {
  // @@protoc_insertion_point(field_get:WebBuy.fd)
  return fd_;
}
 void WebBuy::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:WebBuy.fd)
}

// required string key = 9;
 bool WebBuy::has_key() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void WebBuy::set_has_key() {
  _has_bits_[0] |= 0x00000100u;
}
 void WebBuy::clear_has_key() {
  _has_bits_[0] &= ~0x00000100u;
}
 void WebBuy::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& WebBuy::key() const {
  // @@protoc_insertion_point(field_get:WebBuy.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebBuy.key)
}
 void WebBuy::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebBuy.key)
}
 void WebBuy::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebBuy.key)
}
 ::std::string* WebBuy::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:WebBuy.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebBuy::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:WebBuy.key)
}

// optional bool directgive = 10 [default = false];
 bool WebBuy::has_directgive() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void WebBuy::set_has_directgive() {
  _has_bits_[0] |= 0x00000200u;
}
 void WebBuy::clear_has_directgive() {
  _has_bits_[0] &= ~0x00000200u;
}
 void WebBuy::clear_directgive() {
  directgive_ = false;
  clear_has_directgive();
}
 bool WebBuy::directgive() const {
  // @@protoc_insertion_point(field_get:WebBuy.directgive)
  return directgive_;
}
 void WebBuy::set_directgive(bool value) {
  set_has_directgive();
  directgive_ = value;
  // @@protoc_insertion_point(field_set:WebBuy.directgive)
}

// optional bool limited = 11 [default = false];
 bool WebBuy::has_limited() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void WebBuy::set_has_limited() {
  _has_bits_[0] |= 0x00000400u;
}
 void WebBuy::clear_has_limited() {
  _has_bits_[0] &= ~0x00000400u;
}
 void WebBuy::clear_limited() {
  limited_ = false;
  clear_has_limited();
}
 bool WebBuy::limited() const {
  // @@protoc_insertion_point(field_get:WebBuy.limited)
  return limited_;
}
 void WebBuy::set_limited(bool value) {
  set_has_limited();
  limited_ = value;
  // @@protoc_insertion_point(field_set:WebBuy.limited)
}

// optional string openid = 12 [default = ""];
 bool WebBuy::has_openid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void WebBuy::set_has_openid() {
  _has_bits_[0] |= 0x00000800u;
}
 void WebBuy::clear_has_openid() {
  _has_bits_[0] &= ~0x00000800u;
}
 void WebBuy::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& WebBuy::openid() const {
  // @@protoc_insertion_point(field_get:WebBuy.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebBuy.openid)
}
 void WebBuy::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebBuy.openid)
}
 void WebBuy::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebBuy.openid)
}
 ::std::string* WebBuy::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:WebBuy.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebBuy::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:WebBuy.openid)
}

// optional bool use_openid = 13 [default = false];
 bool WebBuy::has_use_openid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void WebBuy::set_has_use_openid() {
  _has_bits_[0] |= 0x00001000u;
}
 void WebBuy::clear_has_use_openid() {
  _has_bits_[0] &= ~0x00001000u;
}
 void WebBuy::clear_use_openid() {
  use_openid_ = false;
  clear_has_use_openid();
}
 bool WebBuy::use_openid() const {
  // @@protoc_insertion_point(field_get:WebBuy.use_openid)
  return use_openid_;
}
 void WebBuy::set_use_openid(bool value) {
  set_has_use_openid();
  use_openid_ = value;
  // @@protoc_insertion_point(field_set:WebBuy.use_openid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebBuy3::kUidFieldNumber;
const int WebBuy3::kTypeFieldNumber;
const int WebBuy3::kValueAFieldNumber;
const int WebBuy3::kValueBFieldNumber;
const int WebBuy3::kSidFieldNumber;
const int WebBuy3::kFdFieldNumber;
const int WebBuy3::kSuccFieldNumber;
#endif  // !_MSC_VER

WebBuy3::WebBuy3()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebBuy3)
}

void WebBuy3::InitAsDefaultInstance() {
}

WebBuy3::WebBuy3(const WebBuy3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebBuy3)
}

void WebBuy3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  valuea_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valueb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fd_ = 0;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebBuy3::~WebBuy3() {
  // @@protoc_insertion_point(destructor:WebBuy3)
  SharedDtor();
}

void WebBuy3::SharedDtor() {
  valuea_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valueb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WebBuy3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebBuy3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebBuy3_descriptor_;
}

const WebBuy3& WebBuy3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebBuy3* WebBuy3::default_instance_ = NULL;

WebBuy3* WebBuy3::New(::google::protobuf::Arena* arena) const {
  WebBuy3* n = new WebBuy3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebBuy3::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WebBuy3*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(type_, fd_);
    uid_ = GOOGLE_LONGLONG(0);
    if (has_valuea()) {
      valuea_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_valueb()) {
      valueb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sid()) {
      sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    succ_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebBuy3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebBuy3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_valueA;
        break;
      }

      // required string valueA = 3;
      case 3: {
        if (tag == 26) {
         parse_valueA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valuea()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->valuea().data(), this->valuea().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebBuy3.valueA");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_valueB;
        break;
      }

      // required string valueB = 4;
      case 4: {
        if (tag == 34) {
         parse_valueB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valueb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->valueb().data(), this->valueb().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebBuy3.valueB");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sid;
        break;
      }

      // required string sid = 5;
      case 5: {
        if (tag == 42) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebBuy3.sid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fd;
        break;
      }

      // required int32 fd = 6;
      case 6: {
        if (tag == 48) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_succ;
        break;
      }

      // optional int32 succ = 7;
      case 7: {
        if (tag == 56) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebBuy3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebBuy3)
  return false;
#undef DO_
}

void WebBuy3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebBuy3)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required string valueA = 3;
  if (has_valuea()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->valuea().data(), this->valuea().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy3.valueA");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->valuea(), output);
  }

  // required string valueB = 4;
  if (has_valueb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->valueb().data(), this->valueb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy3.valueB");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->valueb(), output);
  }

  // required string sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy3.sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sid(), output);
  }

  // required int32 fd = 6;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fd(), output);
  }

  // optional int32 succ = 7;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebBuy3)
}

::google::protobuf::uint8* WebBuy3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebBuy3)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required string valueA = 3;
  if (has_valuea()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->valuea().data(), this->valuea().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy3.valueA");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->valuea(), target);
  }

  // required string valueB = 4;
  if (has_valueb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->valueb().data(), this->valueb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy3.valueB");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->valueb(), target);
  }

  // required string sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuy3.sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sid(), target);
  }

  // required int32 fd = 6;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fd(), target);
  }

  // optional int32 succ = 7;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebBuy3)
  return target;
}

int WebBuy3::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_valuea()) {
    // required string valueA = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->valuea());
  }

  if (has_valueb()) {
    // required string valueB = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->valueb());
  }

  if (has_sid()) {
    // required string sid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());
  }

  if (has_fd()) {
    // required int32 fd = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }

  return total_size;
}
int WebBuy3::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required string valueA = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->valuea());

    // required string valueB = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->valueb());

    // required string sid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());

    // required int32 fd = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 succ = 7;
  if (has_succ()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebBuy3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebBuy3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebBuy3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebBuy3::MergeFrom(const WebBuy3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_valuea()) {
      set_has_valuea();
      valuea_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valuea_);
    }
    if (from.has_valueb()) {
      set_has_valueb();
      valueb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valueb_);
    }
    if (from.has_sid()) {
      set_has_sid();
      sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebBuy3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebBuy3::CopyFrom(const WebBuy3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebBuy3::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void WebBuy3::Swap(WebBuy3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebBuy3::InternalSwap(WebBuy3* other) {
  std::swap(uid_, other->uid_);
  std::swap(type_, other->type_);
  valuea_.Swap(&other->valuea_);
  valueb_.Swap(&other->valueb_);
  sid_.Swap(&other->sid_);
  std::swap(fd_, other->fd_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebBuy3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebBuy3_descriptor_;
  metadata.reflection = WebBuy3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebBuy3

// required int64 uid = 1;
 bool WebBuy3::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebBuy3::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebBuy3::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebBuy3::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 WebBuy3::uid() const {
  // @@protoc_insertion_point(field_get:WebBuy3.uid)
  return uid_;
}
 void WebBuy3::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:WebBuy3.uid)
}

// required int32 type = 2;
 bool WebBuy3::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void WebBuy3::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
 void WebBuy3::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
 void WebBuy3::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 WebBuy3::type() const {
  // @@protoc_insertion_point(field_get:WebBuy3.type)
  return type_;
}
 void WebBuy3::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WebBuy3.type)
}

// required string valueA = 3;
 bool WebBuy3::has_valuea() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void WebBuy3::set_has_valuea() {
  _has_bits_[0] |= 0x00000004u;
}
 void WebBuy3::clear_has_valuea() {
  _has_bits_[0] &= ~0x00000004u;
}
 void WebBuy3::clear_valuea() {
  valuea_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_valuea();
}
 const ::std::string& WebBuy3::valuea() const {
  // @@protoc_insertion_point(field_get:WebBuy3.valueA)
  return valuea_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy3::set_valuea(const ::std::string& value) {
  set_has_valuea();
  valuea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebBuy3.valueA)
}
 void WebBuy3::set_valuea(const char* value) {
  set_has_valuea();
  valuea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebBuy3.valueA)
}
 void WebBuy3::set_valuea(const char* value, size_t size) {
  set_has_valuea();
  valuea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebBuy3.valueA)
}
 ::std::string* WebBuy3::mutable_valuea() {
  set_has_valuea();
  // @@protoc_insertion_point(field_mutable:WebBuy3.valueA)
  return valuea_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebBuy3::release_valuea() {
  clear_has_valuea();
  return valuea_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy3::set_allocated_valuea(::std::string* valuea) {
  if (valuea != NULL) {
    set_has_valuea();
  } else {
    clear_has_valuea();
  }
  valuea_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valuea);
  // @@protoc_insertion_point(field_set_allocated:WebBuy3.valueA)
}

// required string valueB = 4;
 bool WebBuy3::has_valueb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void WebBuy3::set_has_valueb() {
  _has_bits_[0] |= 0x00000008u;
}
 void WebBuy3::clear_has_valueb() {
  _has_bits_[0] &= ~0x00000008u;
}
 void WebBuy3::clear_valueb() {
  valueb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_valueb();
}
 const ::std::string& WebBuy3::valueb() const {
  // @@protoc_insertion_point(field_get:WebBuy3.valueB)
  return valueb_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy3::set_valueb(const ::std::string& value) {
  set_has_valueb();
  valueb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebBuy3.valueB)
}
 void WebBuy3::set_valueb(const char* value) {
  set_has_valueb();
  valueb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebBuy3.valueB)
}
 void WebBuy3::set_valueb(const char* value, size_t size) {
  set_has_valueb();
  valueb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebBuy3.valueB)
}
 ::std::string* WebBuy3::mutable_valueb() {
  set_has_valueb();
  // @@protoc_insertion_point(field_mutable:WebBuy3.valueB)
  return valueb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebBuy3::release_valueb() {
  clear_has_valueb();
  return valueb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy3::set_allocated_valueb(::std::string* valueb) {
  if (valueb != NULL) {
    set_has_valueb();
  } else {
    clear_has_valueb();
  }
  valueb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valueb);
  // @@protoc_insertion_point(field_set_allocated:WebBuy3.valueB)
}

// required string sid = 5;
 bool WebBuy3::has_sid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void WebBuy3::set_has_sid() {
  _has_bits_[0] |= 0x00000010u;
}
 void WebBuy3::clear_has_sid() {
  _has_bits_[0] &= ~0x00000010u;
}
 void WebBuy3::clear_sid() {
  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sid();
}
 const ::std::string& WebBuy3::sid() const {
  // @@protoc_insertion_point(field_get:WebBuy3.sid)
  return sid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy3::set_sid(const ::std::string& value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebBuy3.sid)
}
 void WebBuy3::set_sid(const char* value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebBuy3.sid)
}
 void WebBuy3::set_sid(const char* value, size_t size) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebBuy3.sid)
}
 ::std::string* WebBuy3::mutable_sid() {
  set_has_sid();
  // @@protoc_insertion_point(field_mutable:WebBuy3.sid)
  return sid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebBuy3::release_sid() {
  clear_has_sid();
  return sid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuy3::set_allocated_sid(::std::string* sid) {
  if (sid != NULL) {
    set_has_sid();
  } else {
    clear_has_sid();
  }
  sid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:WebBuy3.sid)
}

// required int32 fd = 6;
 bool WebBuy3::has_fd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void WebBuy3::set_has_fd() {
  _has_bits_[0] |= 0x00000020u;
}
 void WebBuy3::clear_has_fd() {
  _has_bits_[0] &= ~0x00000020u;
}
 void WebBuy3::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 WebBuy3::fd() const {
  // @@protoc_insertion_point(field_get:WebBuy3.fd)
  return fd_;
}
 void WebBuy3::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:WebBuy3.fd)
}

// optional int32 succ = 7;
 bool WebBuy3::has_succ() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void WebBuy3::set_has_succ() {
  _has_bits_[0] |= 0x00000040u;
}
 void WebBuy3::clear_has_succ() {
  _has_bits_[0] &= ~0x00000040u;
}
 void WebBuy3::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 WebBuy3::succ() const {
  // @@protoc_insertion_point(field_get:WebBuy3.succ)
  return succ_;
}
 void WebBuy3::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:WebBuy3.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebLengthenIndateDetail::kShopidFieldNumber;
const int WebLengthenIndateDetail::kBagposFieldNumber;
const int WebLengthenIndateDetail::kIdFieldNumber;
const int WebLengthenIndateDetail::kIndateFieldNumber;
#endif  // !_MSC_VER

WebLengthenIndateDetail::WebLengthenIndateDetail()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebLengthenIndateDetail)
}

void WebLengthenIndateDetail::InitAsDefaultInstance() {
}

WebLengthenIndateDetail::WebLengthenIndateDetail(const WebLengthenIndateDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebLengthenIndateDetail)
}

void WebLengthenIndateDetail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  shopid_ = GOOGLE_LONGLONG(0);
  bagpos_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebLengthenIndateDetail::~WebLengthenIndateDetail() {
  // @@protoc_insertion_point(destructor:WebLengthenIndateDetail)
  SharedDtor();
}

void WebLengthenIndateDetail::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WebLengthenIndateDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebLengthenIndateDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebLengthenIndateDetail_descriptor_;
}

const WebLengthenIndateDetail& WebLengthenIndateDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebLengthenIndateDetail* WebLengthenIndateDetail::default_instance_ = NULL;

WebLengthenIndateDetail* WebLengthenIndateDetail::New(::google::protobuf::Arena* arena) const {
  WebLengthenIndateDetail* n = new WebLengthenIndateDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebLengthenIndateDetail::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WebLengthenIndateDetail*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(bagpos_, indate_);
    shopid_ = GOOGLE_LONGLONG(0);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebLengthenIndateDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebLengthenIndateDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 shopid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bagpos;
        break;
      }

      // required int32 bagpos = 2;
      case 2: {
        if (tag == 16) {
         parse_bagpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagpos_)));
          set_has_bagpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // required string id = 3;
      case 3: {
        if (tag == 26) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebLengthenIndateDetail.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_indate;
        break;
      }

      // required int32 indate = 4;
      case 4: {
        if (tag == 32) {
         parse_indate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indate_)));
          set_has_indate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebLengthenIndateDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebLengthenIndateDetail)
  return false;
#undef DO_
}

void WebLengthenIndateDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebLengthenIndateDetail)
  // required int64 shopid = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->shopid(), output);
  }

  // required int32 bagpos = 2;
  if (has_bagpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bagpos(), output);
  }

  // required string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebLengthenIndateDetail.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // required int32 indate = 4;
  if (has_indate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->indate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebLengthenIndateDetail)
}

::google::protobuf::uint8* WebLengthenIndateDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebLengthenIndateDetail)
  // required int64 shopid = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->shopid(), target);
  }

  // required int32 bagpos = 2;
  if (has_bagpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bagpos(), target);
  }

  // required string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebLengthenIndateDetail.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // required int32 indate = 4;
  if (has_indate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->indate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebLengthenIndateDetail)
  return target;
}

int WebLengthenIndateDetail::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_shopid()) {
    // required int64 shopid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shopid());
  }

  if (has_bagpos()) {
    // required int32 bagpos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bagpos());
  }

  if (has_id()) {
    // required string id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_indate()) {
    // required int32 indate = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->indate());
  }

  return total_size;
}
int WebLengthenIndateDetail::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 shopid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shopid());

    // required int32 bagpos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bagpos());

    // required string id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required int32 indate = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->indate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebLengthenIndateDetail::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebLengthenIndateDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebLengthenIndateDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebLengthenIndateDetail::MergeFrom(const WebLengthenIndateDetail& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_bagpos()) {
      set_bagpos(from.bagpos());
    }
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_indate()) {
      set_indate(from.indate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebLengthenIndateDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebLengthenIndateDetail::CopyFrom(const WebLengthenIndateDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebLengthenIndateDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void WebLengthenIndateDetail::Swap(WebLengthenIndateDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebLengthenIndateDetail::InternalSwap(WebLengthenIndateDetail* other) {
  std::swap(shopid_, other->shopid_);
  std::swap(bagpos_, other->bagpos_);
  id_.Swap(&other->id_);
  std::swap(indate_, other->indate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebLengthenIndateDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebLengthenIndateDetail_descriptor_;
  metadata.reflection = WebLengthenIndateDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebLengthenIndateDetail

// required int64 shopid = 1;
 bool WebLengthenIndateDetail::has_shopid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebLengthenIndateDetail::set_has_shopid() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebLengthenIndateDetail::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebLengthenIndateDetail::clear_shopid() {
  shopid_ = GOOGLE_LONGLONG(0);
  clear_has_shopid();
}
 ::google::protobuf::int64 WebLengthenIndateDetail::shopid() const {
  // @@protoc_insertion_point(field_get:WebLengthenIndateDetail.shopid)
  return shopid_;
}
 void WebLengthenIndateDetail::set_shopid(::google::protobuf::int64 value) {
  set_has_shopid();
  shopid_ = value;
  // @@protoc_insertion_point(field_set:WebLengthenIndateDetail.shopid)
}

// required int32 bagpos = 2;
 bool WebLengthenIndateDetail::has_bagpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void WebLengthenIndateDetail::set_has_bagpos() {
  _has_bits_[0] |= 0x00000002u;
}
 void WebLengthenIndateDetail::clear_has_bagpos() {
  _has_bits_[0] &= ~0x00000002u;
}
 void WebLengthenIndateDetail::clear_bagpos() {
  bagpos_ = 0;
  clear_has_bagpos();
}
 ::google::protobuf::int32 WebLengthenIndateDetail::bagpos() const {
  // @@protoc_insertion_point(field_get:WebLengthenIndateDetail.bagpos)
  return bagpos_;
}
 void WebLengthenIndateDetail::set_bagpos(::google::protobuf::int32 value) {
  set_has_bagpos();
  bagpos_ = value;
  // @@protoc_insertion_point(field_set:WebLengthenIndateDetail.bagpos)
}

// required string id = 3;
 bool WebLengthenIndateDetail::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void WebLengthenIndateDetail::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
 void WebLengthenIndateDetail::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
 void WebLengthenIndateDetail::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& WebLengthenIndateDetail::id() const {
  // @@protoc_insertion_point(field_get:WebLengthenIndateDetail.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebLengthenIndateDetail::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebLengthenIndateDetail.id)
}
 void WebLengthenIndateDetail::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebLengthenIndateDetail.id)
}
 void WebLengthenIndateDetail::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebLengthenIndateDetail.id)
}
 ::std::string* WebLengthenIndateDetail::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:WebLengthenIndateDetail.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebLengthenIndateDetail::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebLengthenIndateDetail::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:WebLengthenIndateDetail.id)
}

// required int32 indate = 4;
 bool WebLengthenIndateDetail::has_indate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void WebLengthenIndateDetail::set_has_indate() {
  _has_bits_[0] |= 0x00000008u;
}
 void WebLengthenIndateDetail::clear_has_indate() {
  _has_bits_[0] &= ~0x00000008u;
}
 void WebLengthenIndateDetail::clear_indate() {
  indate_ = 0;
  clear_has_indate();
}
 ::google::protobuf::int32 WebLengthenIndateDetail::indate() const {
  // @@protoc_insertion_point(field_get:WebLengthenIndateDetail.indate)
  return indate_;
}
 void WebLengthenIndateDetail::set_indate(::google::protobuf::int32 value) {
  set_has_indate();
  indate_ = value;
  // @@protoc_insertion_point(field_set:WebLengthenIndateDetail.indate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebLengthenIndate::kUidFieldNumber;
const int WebLengthenIndate::kLeftcoinFieldNumber;
const int WebLengthenIndate::kBandcoincostFieldNumber;
const int WebLengthenIndate::kItemsFieldNumber;
const int WebLengthenIndate::kSidFieldNumber;
const int WebLengthenIndate::kSuccFieldNumber;
const int WebLengthenIndate::kInfodetailFieldNumber;
const int WebLengthenIndate::kFdFieldNumber;
#endif  // !_MSC_VER

WebLengthenIndate::WebLengthenIndate()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebLengthenIndate)
}

void WebLengthenIndate::InitAsDefaultInstance() {
}

WebLengthenIndate::WebLengthenIndate(const WebLengthenIndate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebLengthenIndate)
}

void WebLengthenIndate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  leftcoin_ = 0;
  bandcoincost_ = 0;
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  succ_ = false;
  infodetail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebLengthenIndate::~WebLengthenIndate() {
  // @@protoc_insertion_point(destructor:WebLengthenIndate)
  SharedDtor();
}

void WebLengthenIndate::SharedDtor() {
  sid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infodetail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WebLengthenIndate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebLengthenIndate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebLengthenIndate_descriptor_;
}

const WebLengthenIndate& WebLengthenIndate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebLengthenIndate* WebLengthenIndate::default_instance_ = NULL;

WebLengthenIndate* WebLengthenIndate::New(::google::protobuf::Arena* arena) const {
  WebLengthenIndate* n = new WebLengthenIndate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebLengthenIndate::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WebLengthenIndate*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(uid_, bandcoincost_);
    ZR_(succ_, fd_);
    if (has_sid()) {
      sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_infodetail()) {
      infodetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebLengthenIndate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebLengthenIndate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leftcoin;
        break;
      }

      // required int32 leftcoin = 2;
      case 2: {
        if (tag == 16) {
         parse_leftcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcoin_)));
          set_has_leftcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bandcoincost;
        break;
      }

      // required int32 bandcoincost = 3;
      case 3: {
        if (tag == 24) {
         parse_bandcoincost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bandcoincost_)));
          set_has_bandcoincost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .WebLengthenIndateDetail items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectTag(42)) goto parse_sid;
        break;
      }

      // required string sid = 5;
      case 5: {
        if (tag == 42) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebLengthenIndate.sid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_succ;
        break;
      }

      // optional bool succ = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_infodetail;
        break;
      }

      // optional string infodetail = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_infodetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infodetail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infodetail().data(), this->infodetail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebLengthenIndate.infodetail");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fd;
        break;
      }

      // required int32 fd = 8;
      case 8: {
        if (tag == 64) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebLengthenIndate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebLengthenIndate)
  return false;
#undef DO_
}

void WebLengthenIndate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebLengthenIndate)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 leftcoin = 2;
  if (has_leftcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftcoin(), output);
  }

  // required int32 bandcoincost = 3;
  if (has_bandcoincost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bandcoincost(), output);
  }

  // repeated .WebLengthenIndateDetail items = 4;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  // required string sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebLengthenIndate.sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sid(), output);
  }

  // optional bool succ = 6 [default = false];
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->succ(), output);
  }

  // optional string infodetail = 7 [default = ""];
  if (has_infodetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infodetail().data(), this->infodetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebLengthenIndate.infodetail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->infodetail(), output);
  }

  // required int32 fd = 8;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebLengthenIndate)
}

::google::protobuf::uint8* WebLengthenIndate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebLengthenIndate)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 leftcoin = 2;
  if (has_leftcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftcoin(), target);
  }

  // required int32 bandcoincost = 3;
  if (has_bandcoincost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bandcoincost(), target);
  }

  // repeated .WebLengthenIndateDetail items = 4;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  // required string sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebLengthenIndate.sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sid(), target);
  }

  // optional bool succ = 6 [default = false];
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->succ(), target);
  }

  // optional string infodetail = 7 [default = ""];
  if (has_infodetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infodetail().data(), this->infodetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebLengthenIndate.infodetail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->infodetail(), target);
  }

  // required int32 fd = 8;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebLengthenIndate)
  return target;
}

int WebLengthenIndate::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_leftcoin()) {
    // required int32 leftcoin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leftcoin());
  }

  if (has_bandcoincost()) {
    // required int32 bandcoincost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bandcoincost());
  }

  if (has_sid()) {
    // required string sid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());
  }

  if (has_fd()) {
    // required int32 fd = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }

  return total_size;
}
int WebLengthenIndate::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000097) ^ 0x00000097) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 leftcoin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leftcoin());

    // required int32 bandcoincost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bandcoincost());

    // required string sid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());

    // required int32 fd = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96) {
    // optional bool succ = 6 [default = false];
    if (has_succ()) {
      total_size += 1 + 1;
    }

    // optional string infodetail = 7 [default = ""];
    if (has_infodetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infodetail());
    }

  }
  // repeated .WebLengthenIndateDetail items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebLengthenIndate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebLengthenIndate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebLengthenIndate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebLengthenIndate::MergeFrom(const WebLengthenIndate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_leftcoin()) {
      set_leftcoin(from.leftcoin());
    }
    if (from.has_bandcoincost()) {
      set_bandcoincost(from.bandcoincost());
    }
    if (from.has_sid()) {
      set_has_sid();
      sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_infodetail()) {
      set_has_infodetail();
      infodetail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infodetail_);
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebLengthenIndate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebLengthenIndate::CopyFrom(const WebLengthenIndate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebLengthenIndate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000097) != 0x00000097) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void WebLengthenIndate::Swap(WebLengthenIndate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebLengthenIndate::InternalSwap(WebLengthenIndate* other) {
  std::swap(uid_, other->uid_);
  std::swap(leftcoin_, other->leftcoin_);
  std::swap(bandcoincost_, other->bandcoincost_);
  items_.UnsafeArenaSwap(&other->items_);
  sid_.Swap(&other->sid_);
  std::swap(succ_, other->succ_);
  infodetail_.Swap(&other->infodetail_);
  std::swap(fd_, other->fd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebLengthenIndate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebLengthenIndate_descriptor_;
  metadata.reflection = WebLengthenIndate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebLengthenIndate

// required int64 uid = 1;
 bool WebLengthenIndate::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebLengthenIndate::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebLengthenIndate::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebLengthenIndate::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 WebLengthenIndate::uid() const {
  // @@protoc_insertion_point(field_get:WebLengthenIndate.uid)
  return uid_;
}
 void WebLengthenIndate::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:WebLengthenIndate.uid)
}

// required int32 leftcoin = 2;
 bool WebLengthenIndate::has_leftcoin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void WebLengthenIndate::set_has_leftcoin() {
  _has_bits_[0] |= 0x00000002u;
}
 void WebLengthenIndate::clear_has_leftcoin() {
  _has_bits_[0] &= ~0x00000002u;
}
 void WebLengthenIndate::clear_leftcoin() {
  leftcoin_ = 0;
  clear_has_leftcoin();
}
 ::google::protobuf::int32 WebLengthenIndate::leftcoin() const {
  // @@protoc_insertion_point(field_get:WebLengthenIndate.leftcoin)
  return leftcoin_;
}
 void WebLengthenIndate::set_leftcoin(::google::protobuf::int32 value) {
  set_has_leftcoin();
  leftcoin_ = value;
  // @@protoc_insertion_point(field_set:WebLengthenIndate.leftcoin)
}

// required int32 bandcoincost = 3;
 bool WebLengthenIndate::has_bandcoincost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void WebLengthenIndate::set_has_bandcoincost() {
  _has_bits_[0] |= 0x00000004u;
}
 void WebLengthenIndate::clear_has_bandcoincost() {
  _has_bits_[0] &= ~0x00000004u;
}
 void WebLengthenIndate::clear_bandcoincost() {
  bandcoincost_ = 0;
  clear_has_bandcoincost();
}
 ::google::protobuf::int32 WebLengthenIndate::bandcoincost() const {
  // @@protoc_insertion_point(field_get:WebLengthenIndate.bandcoincost)
  return bandcoincost_;
}
 void WebLengthenIndate::set_bandcoincost(::google::protobuf::int32 value) {
  set_has_bandcoincost();
  bandcoincost_ = value;
  // @@protoc_insertion_point(field_set:WebLengthenIndate.bandcoincost)
}

// repeated .WebLengthenIndateDetail items = 4;
 int WebLengthenIndate::items_size() const {
  return items_.size();
}
 void WebLengthenIndate::clear_items() {
  items_.Clear();
}
 const ::WebLengthenIndateDetail& WebLengthenIndate::items(int index) const {
  // @@protoc_insertion_point(field_get:WebLengthenIndate.items)
  return items_.Get(index);
}
 ::WebLengthenIndateDetail* WebLengthenIndate::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:WebLengthenIndate.items)
  return items_.Mutable(index);
}
 ::WebLengthenIndateDetail* WebLengthenIndate::add_items() {
  // @@protoc_insertion_point(field_add:WebLengthenIndate.items)
  return items_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::WebLengthenIndateDetail >&
WebLengthenIndate::items() const {
  // @@protoc_insertion_point(field_list:WebLengthenIndate.items)
  return items_;
}
 ::google::protobuf::RepeatedPtrField< ::WebLengthenIndateDetail >*
WebLengthenIndate::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:WebLengthenIndate.items)
  return &items_;
}

// required string sid = 5;
 bool WebLengthenIndate::has_sid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void WebLengthenIndate::set_has_sid() {
  _has_bits_[0] |= 0x00000010u;
}
 void WebLengthenIndate::clear_has_sid() {
  _has_bits_[0] &= ~0x00000010u;
}
 void WebLengthenIndate::clear_sid() {
  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sid();
}
 const ::std::string& WebLengthenIndate::sid() const {
  // @@protoc_insertion_point(field_get:WebLengthenIndate.sid)
  return sid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebLengthenIndate::set_sid(const ::std::string& value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebLengthenIndate.sid)
}
 void WebLengthenIndate::set_sid(const char* value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebLengthenIndate.sid)
}
 void WebLengthenIndate::set_sid(const char* value, size_t size) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebLengthenIndate.sid)
}
 ::std::string* WebLengthenIndate::mutable_sid() {
  set_has_sid();
  // @@protoc_insertion_point(field_mutable:WebLengthenIndate.sid)
  return sid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebLengthenIndate::release_sid() {
  clear_has_sid();
  return sid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebLengthenIndate::set_allocated_sid(::std::string* sid) {
  if (sid != NULL) {
    set_has_sid();
  } else {
    clear_has_sid();
  }
  sid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:WebLengthenIndate.sid)
}

// optional bool succ = 6 [default = false];
 bool WebLengthenIndate::has_succ() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void WebLengthenIndate::set_has_succ() {
  _has_bits_[0] |= 0x00000020u;
}
 void WebLengthenIndate::clear_has_succ() {
  _has_bits_[0] &= ~0x00000020u;
}
 void WebLengthenIndate::clear_succ() {
  succ_ = false;
  clear_has_succ();
}
 bool WebLengthenIndate::succ() const {
  // @@protoc_insertion_point(field_get:WebLengthenIndate.succ)
  return succ_;
}
 void WebLengthenIndate::set_succ(bool value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:WebLengthenIndate.succ)
}

// optional string infodetail = 7 [default = ""];
 bool WebLengthenIndate::has_infodetail() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void WebLengthenIndate::set_has_infodetail() {
  _has_bits_[0] |= 0x00000040u;
}
 void WebLengthenIndate::clear_has_infodetail() {
  _has_bits_[0] &= ~0x00000040u;
}
 void WebLengthenIndate::clear_infodetail() {
  infodetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_infodetail();
}
 const ::std::string& WebLengthenIndate::infodetail() const {
  // @@protoc_insertion_point(field_get:WebLengthenIndate.infodetail)
  return infodetail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebLengthenIndate::set_infodetail(const ::std::string& value) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebLengthenIndate.infodetail)
}
 void WebLengthenIndate::set_infodetail(const char* value) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebLengthenIndate.infodetail)
}
 void WebLengthenIndate::set_infodetail(const char* value, size_t size) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebLengthenIndate.infodetail)
}
 ::std::string* WebLengthenIndate::mutable_infodetail() {
  set_has_infodetail();
  // @@protoc_insertion_point(field_mutable:WebLengthenIndate.infodetail)
  return infodetail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebLengthenIndate::release_infodetail() {
  clear_has_infodetail();
  return infodetail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebLengthenIndate::set_allocated_infodetail(::std::string* infodetail) {
  if (infodetail != NULL) {
    set_has_infodetail();
  } else {
    clear_has_infodetail();
  }
  infodetail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), infodetail);
  // @@protoc_insertion_point(field_set_allocated:WebLengthenIndate.infodetail)
}

// required int32 fd = 8;
 bool WebLengthenIndate::has_fd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void WebLengthenIndate::set_has_fd() {
  _has_bits_[0] |= 0x00000080u;
}
 void WebLengthenIndate::clear_has_fd() {
  _has_bits_[0] &= ~0x00000080u;
}
 void WebLengthenIndate::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 WebLengthenIndate::fd() const {
  // @@protoc_insertion_point(field_get:WebLengthenIndate.fd)
  return fd_;
}
 void WebLengthenIndate::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:WebLengthenIndate.fd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebCheckBandCoin::kOpenidFieldNumber;
const int WebCheckBandCoin::kValueFieldNumber;
const int WebCheckBandCoin::kFdFieldNumber;
const int WebCheckBandCoin::kSidFieldNumber;
#endif  // !_MSC_VER

WebCheckBandCoin::WebCheckBandCoin()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebCheckBandCoin)
}

void WebCheckBandCoin::InitAsDefaultInstance() {
}

WebCheckBandCoin::WebCheckBandCoin(const WebCheckBandCoin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebCheckBandCoin)
}

void WebCheckBandCoin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  fd_ = 0;
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebCheckBandCoin::~WebCheckBandCoin() {
  // @@protoc_insertion_point(destructor:WebCheckBandCoin)
  SharedDtor();
}

void WebCheckBandCoin::SharedDtor() {
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WebCheckBandCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebCheckBandCoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebCheckBandCoin_descriptor_;
}

const WebCheckBandCoin& WebCheckBandCoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebCheckBandCoin* WebCheckBandCoin::default_instance_ = NULL;

WebCheckBandCoin* WebCheckBandCoin::New(::google::protobuf::Arena* arena) const {
  WebCheckBandCoin* n = new WebCheckBandCoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebCheckBandCoin::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WebCheckBandCoin*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(value_, fd_);
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sid()) {
      sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebCheckBandCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebCheckBandCoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebCheckBandCoin.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fd;
        break;
      }

      // required int32 fd = 3;
      case 3: {
        if (tag == 24) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sid;
        break;
      }

      // required string sid = 4;
      case 4: {
        if (tag == 34) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebCheckBandCoin.sid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebCheckBandCoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebCheckBandCoin)
  return false;
#undef DO_
}

void WebCheckBandCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebCheckBandCoin)
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebCheckBandCoin.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->openid(), output);
  }

  // optional int32 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // required int32 fd = 3;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fd(), output);
  }

  // required string sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebCheckBandCoin.sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebCheckBandCoin)
}

::google::protobuf::uint8* WebCheckBandCoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebCheckBandCoin)
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebCheckBandCoin.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // optional int32 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // required int32 fd = 3;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fd(), target);
  }

  // required string sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebCheckBandCoin.sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebCheckBandCoin)
  return target;
}

int WebCheckBandCoin::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_openid()) {
    // required string openid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openid());
  }

  if (has_fd()) {
    // required int32 fd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }

  if (has_sid()) {
    // required string sid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());
  }

  return total_size;
}
int WebCheckBandCoin::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string openid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openid());

    // required int32 fd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());

    // required string sid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 value = 2 [default = 0];
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebCheckBandCoin::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebCheckBandCoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebCheckBandCoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebCheckBandCoin::MergeFrom(const WebCheckBandCoin& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_sid()) {
      set_has_sid();
      sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebCheckBandCoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebCheckBandCoin::CopyFrom(const WebCheckBandCoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebCheckBandCoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void WebCheckBandCoin::Swap(WebCheckBandCoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebCheckBandCoin::InternalSwap(WebCheckBandCoin* other) {
  openid_.Swap(&other->openid_);
  std::swap(value_, other->value_);
  std::swap(fd_, other->fd_);
  sid_.Swap(&other->sid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebCheckBandCoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebCheckBandCoin_descriptor_;
  metadata.reflection = WebCheckBandCoin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebCheckBandCoin

// required string openid = 1;
 bool WebCheckBandCoin::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebCheckBandCoin::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebCheckBandCoin::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebCheckBandCoin::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& WebCheckBandCoin::openid() const {
  // @@protoc_insertion_point(field_get:WebCheckBandCoin.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebCheckBandCoin::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebCheckBandCoin.openid)
}
 void WebCheckBandCoin::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebCheckBandCoin.openid)
}
 void WebCheckBandCoin::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebCheckBandCoin.openid)
}
 ::std::string* WebCheckBandCoin::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:WebCheckBandCoin.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebCheckBandCoin::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebCheckBandCoin::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:WebCheckBandCoin.openid)
}

// optional int32 value = 2 [default = 0];
 bool WebCheckBandCoin::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void WebCheckBandCoin::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
 void WebCheckBandCoin::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
 void WebCheckBandCoin::clear_value() {
  value_ = 0;
  clear_has_value();
}
 ::google::protobuf::int32 WebCheckBandCoin::value() const {
  // @@protoc_insertion_point(field_get:WebCheckBandCoin.value)
  return value_;
}
 void WebCheckBandCoin::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:WebCheckBandCoin.value)
}

// required int32 fd = 3;
 bool WebCheckBandCoin::has_fd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void WebCheckBandCoin::set_has_fd() {
  _has_bits_[0] |= 0x00000004u;
}
 void WebCheckBandCoin::clear_has_fd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void WebCheckBandCoin::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 WebCheckBandCoin::fd() const {
  // @@protoc_insertion_point(field_get:WebCheckBandCoin.fd)
  return fd_;
}
 void WebCheckBandCoin::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:WebCheckBandCoin.fd)
}

// required string sid = 4;
 bool WebCheckBandCoin::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void WebCheckBandCoin::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
 void WebCheckBandCoin::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void WebCheckBandCoin::clear_sid() {
  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sid();
}
 const ::std::string& WebCheckBandCoin::sid() const {
  // @@protoc_insertion_point(field_get:WebCheckBandCoin.sid)
  return sid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebCheckBandCoin::set_sid(const ::std::string& value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebCheckBandCoin.sid)
}
 void WebCheckBandCoin::set_sid(const char* value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebCheckBandCoin.sid)
}
 void WebCheckBandCoin::set_sid(const char* value, size_t size) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebCheckBandCoin.sid)
}
 ::std::string* WebCheckBandCoin::mutable_sid() {
  set_has_sid();
  // @@protoc_insertion_point(field_mutable:WebCheckBandCoin.sid)
  return sid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebCheckBandCoin::release_sid() {
  clear_has_sid();
  return sid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebCheckBandCoin::set_allocated_sid(::std::string* sid) {
  if (sid != NULL) {
    set_has_sid();
  } else {
    clear_has_sid();
  }
  sid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:WebCheckBandCoin.sid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WebBuyCfm::kUidFieldNumber;
const int WebBuyCfm::kSidFieldNumber;
const int WebBuyCfm::kSuccFieldNumber;
const int WebBuyCfm::kInfodetailFieldNumber;
const int WebBuyCfm::kFdFieldNumber;
const int WebBuyCfm::kKeyFieldNumber;
#endif  // !_MSC_VER

WebBuyCfm::WebBuyCfm()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebBuyCfm)
}

void WebBuyCfm::InitAsDefaultInstance() {
}

WebBuyCfm::WebBuyCfm(const WebBuyCfm& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WebBuyCfm)
}

void WebBuyCfm::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  succ_ = false;
  infodetail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fd_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebBuyCfm::~WebBuyCfm() {
  // @@protoc_insertion_point(destructor:WebBuyCfm)
  SharedDtor();
}

void WebBuyCfm::SharedDtor() {
  sid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infodetail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WebBuyCfm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebBuyCfm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebBuyCfm_descriptor_;
}

const WebBuyCfm& WebBuyCfm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

WebBuyCfm* WebBuyCfm::default_instance_ = NULL;

WebBuyCfm* WebBuyCfm::New(::google::protobuf::Arena* arena) const {
  WebBuyCfm* n = new WebBuyCfm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebBuyCfm::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WebBuyCfm*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(succ_, fd_);
    uid_ = GOOGLE_LONGLONG(0);
    if (has_sid()) {
      sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_infodetail()) {
      infodetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WebBuyCfm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebBuyCfm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sid;
        break;
      }

      // required string sid = 5;
      case 5: {
        if (tag == 42) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebBuyCfm.sid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_succ;
        break;
      }

      // optional bool succ = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_infodetail;
        break;
      }

      // optional string infodetail = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_infodetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infodetail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infodetail().data(), this->infodetail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebBuyCfm.infodetail");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fd;
        break;
      }

      // required int32 fd = 8;
      case 8: {
        if (tag == 64) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_key;
        break;
      }

      // required string key = 9;
      case 9: {
        if (tag == 74) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebBuyCfm.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebBuyCfm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebBuyCfm)
  return false;
#undef DO_
}

void WebBuyCfm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebBuyCfm)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required string sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuyCfm.sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sid(), output);
  }

  // optional bool succ = 6 [default = false];
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->succ(), output);
  }

  // optional string infodetail = 7 [default = ""];
  if (has_infodetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infodetail().data(), this->infodetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuyCfm.infodetail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->infodetail(), output);
  }

  // required int32 fd = 8;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fd(), output);
  }

  // required string key = 9;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuyCfm.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebBuyCfm)
}

::google::protobuf::uint8* WebBuyCfm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WebBuyCfm)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required string sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuyCfm.sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sid(), target);
  }

  // optional bool succ = 6 [default = false];
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->succ(), target);
  }

  // optional string infodetail = 7 [default = ""];
  if (has_infodetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infodetail().data(), this->infodetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuyCfm.infodetail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->infodetail(), target);
  }

  // required int32 fd = 8;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fd(), target);
  }

  // required string key = 9;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebBuyCfm.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebBuyCfm)
  return target;
}

int WebBuyCfm::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_sid()) {
    // required string sid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());
  }

  if (has_fd()) {
    // required int32 fd = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }

  if (has_key()) {
    // required string key = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  return total_size;
}
int WebBuyCfm::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000033) ^ 0x00000033) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required string sid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());

    // required int32 fd = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());

    // required string key = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12) {
    // optional bool succ = 6 [default = false];
    if (has_succ()) {
      total_size += 1 + 1;
    }

    // optional string infodetail = 7 [default = ""];
    if (has_infodetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infodetail());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebBuyCfm::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WebBuyCfm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebBuyCfm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebBuyCfm::MergeFrom(const WebBuyCfm& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sid()) {
      set_has_sid();
      sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_infodetail()) {
      set_has_infodetail();
      infodetail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infodetail_);
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WebBuyCfm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebBuyCfm::CopyFrom(const WebBuyCfm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebBuyCfm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;

  return true;
}

void WebBuyCfm::Swap(WebBuyCfm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebBuyCfm::InternalSwap(WebBuyCfm* other) {
  std::swap(uid_, other->uid_);
  sid_.Swap(&other->sid_);
  std::swap(succ_, other->succ_);
  infodetail_.Swap(&other->infodetail_);
  std::swap(fd_, other->fd_);
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebBuyCfm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebBuyCfm_descriptor_;
  metadata.reflection = WebBuyCfm_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebBuyCfm

// required int64 uid = 1;
 bool WebBuyCfm::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void WebBuyCfm::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void WebBuyCfm::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void WebBuyCfm::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 WebBuyCfm::uid() const {
  // @@protoc_insertion_point(field_get:WebBuyCfm.uid)
  return uid_;
}
 void WebBuyCfm::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:WebBuyCfm.uid)
}

// required string sid = 5;
 bool WebBuyCfm::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void WebBuyCfm::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
 void WebBuyCfm::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void WebBuyCfm::clear_sid() {
  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sid();
}
 const ::std::string& WebBuyCfm::sid() const {
  // @@protoc_insertion_point(field_get:WebBuyCfm.sid)
  return sid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuyCfm::set_sid(const ::std::string& value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebBuyCfm.sid)
}
 void WebBuyCfm::set_sid(const char* value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebBuyCfm.sid)
}
 void WebBuyCfm::set_sid(const char* value, size_t size) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebBuyCfm.sid)
}
 ::std::string* WebBuyCfm::mutable_sid() {
  set_has_sid();
  // @@protoc_insertion_point(field_mutable:WebBuyCfm.sid)
  return sid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebBuyCfm::release_sid() {
  clear_has_sid();
  return sid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuyCfm::set_allocated_sid(::std::string* sid) {
  if (sid != NULL) {
    set_has_sid();
  } else {
    clear_has_sid();
  }
  sid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:WebBuyCfm.sid)
}

// optional bool succ = 6 [default = false];
 bool WebBuyCfm::has_succ() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void WebBuyCfm::set_has_succ() {
  _has_bits_[0] |= 0x00000004u;
}
 void WebBuyCfm::clear_has_succ() {
  _has_bits_[0] &= ~0x00000004u;
}
 void WebBuyCfm::clear_succ() {
  succ_ = false;
  clear_has_succ();
}
 bool WebBuyCfm::succ() const {
  // @@protoc_insertion_point(field_get:WebBuyCfm.succ)
  return succ_;
}
 void WebBuyCfm::set_succ(bool value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:WebBuyCfm.succ)
}

// optional string infodetail = 7 [default = ""];
 bool WebBuyCfm::has_infodetail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void WebBuyCfm::set_has_infodetail() {
  _has_bits_[0] |= 0x00000008u;
}
 void WebBuyCfm::clear_has_infodetail() {
  _has_bits_[0] &= ~0x00000008u;
}
 void WebBuyCfm::clear_infodetail() {
  infodetail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_infodetail();
}
 const ::std::string& WebBuyCfm::infodetail() const {
  // @@protoc_insertion_point(field_get:WebBuyCfm.infodetail)
  return infodetail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuyCfm::set_infodetail(const ::std::string& value) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebBuyCfm.infodetail)
}
 void WebBuyCfm::set_infodetail(const char* value) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebBuyCfm.infodetail)
}
 void WebBuyCfm::set_infodetail(const char* value, size_t size) {
  set_has_infodetail();
  infodetail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebBuyCfm.infodetail)
}
 ::std::string* WebBuyCfm::mutable_infodetail() {
  set_has_infodetail();
  // @@protoc_insertion_point(field_mutable:WebBuyCfm.infodetail)
  return infodetail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebBuyCfm::release_infodetail() {
  clear_has_infodetail();
  return infodetail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuyCfm::set_allocated_infodetail(::std::string* infodetail) {
  if (infodetail != NULL) {
    set_has_infodetail();
  } else {
    clear_has_infodetail();
  }
  infodetail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), infodetail);
  // @@protoc_insertion_point(field_set_allocated:WebBuyCfm.infodetail)
}

// required int32 fd = 8;
 bool WebBuyCfm::has_fd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void WebBuyCfm::set_has_fd() {
  _has_bits_[0] |= 0x00000010u;
}
 void WebBuyCfm::clear_has_fd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void WebBuyCfm::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 WebBuyCfm::fd() const {
  // @@protoc_insertion_point(field_get:WebBuyCfm.fd)
  return fd_;
}
 void WebBuyCfm::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:WebBuyCfm.fd)
}

// required string key = 9;
 bool WebBuyCfm::has_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void WebBuyCfm::set_has_key() {
  _has_bits_[0] |= 0x00000020u;
}
 void WebBuyCfm::clear_has_key() {
  _has_bits_[0] &= ~0x00000020u;
}
 void WebBuyCfm::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& WebBuyCfm::key() const {
  // @@protoc_insertion_point(field_get:WebBuyCfm.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuyCfm::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebBuyCfm.key)
}
 void WebBuyCfm::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebBuyCfm.key)
}
 void WebBuyCfm::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebBuyCfm.key)
}
 ::std::string* WebBuyCfm::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:WebBuyCfm.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WebBuyCfm::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WebBuyCfm::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:WebBuyCfm.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_BanChat_Req::kUidFieldNumber;
const int Admin_BanChat_Req::kIsbanFieldNumber;
const int Admin_BanChat_Req::kTimeFieldNumber;
const int Admin_BanChat_Req::kGidFieldNumber;
const int Admin_BanChat_Req::kAdminfdFieldNumber;
const int Admin_BanChat_Req::kOpenidFieldNumber;
const int Admin_BanChat_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_BanChat_Req::Admin_BanChat_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_BanChat_Req)
}

void Admin_BanChat_Req::InitAsDefaultInstance() {
}

Admin_BanChat_Req::Admin_BanChat_Req(const Admin_BanChat_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_BanChat_Req)
}

void Admin_BanChat_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  isban_ = false;
  time_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BanChat_Req::~Admin_BanChat_Req() {
  // @@protoc_insertion_point(destructor:Admin_BanChat_Req)
  SharedDtor();
}

void Admin_BanChat_Req::SharedDtor() {
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Admin_BanChat_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_BanChat_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BanChat_Req_descriptor_;
}

const Admin_BanChat_Req& Admin_BanChat_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_BanChat_Req* Admin_BanChat_Req::default_instance_ = NULL;

Admin_BanChat_Req* Admin_BanChat_Req::New(::google::protobuf::Arena* arena) const {
  Admin_BanChat_Req* n = new Admin_BanChat_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_BanChat_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_BanChat_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, adminfd_);
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_BanChat_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_BanChat_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isban;
        break;
      }

      // required bool isban = 2;
      case 2: {
        if (tag == 16) {
         parse_isban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isban_)));
          set_has_isban();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }

      // required int32 gid = 4;
      case 4: {
        if (tag == 32) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 5;
      case 5: {
        if (tag == 40) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_openid;
        break;
      }

      // optional string openid = 6;
      case 6: {
        if (tag == 50) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_BanChat_Req.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_BanChat_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_BanChat_Req)
  return false;
#undef DO_
}

void Admin_BanChat_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_BanChat_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required bool isban = 2;
  if (has_isban()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isban(), output);
  }

  // required int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }

  // optional string openid = 6;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_BanChat_Req.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->openid(), output);
  }

  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_BanChat_Req)
}

::google::protobuf::uint8* Admin_BanChat_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_BanChat_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required bool isban = 2;
  if (has_isban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isban(), target);
  }

  // required int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }

  // optional string openid = 6;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_BanChat_Req.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->openid(), target);
  }

  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_BanChat_Req)
  return target;
}

int Admin_BanChat_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_isban()) {
    // required bool isban = 2;
    total_size += 1 + 1;
  }

  if (has_time()) {
    // required int32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  if (has_gid()) {
    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_BanChat_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required bool isban = 2;
    total_size += 1 + 1;

    // required int32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());

    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96) {
    // optional string openid = 6;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional bool fromweb = 7 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_BanChat_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_BanChat_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BanChat_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BanChat_Req::MergeFrom(const Admin_BanChat_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_isban()) {
      set_isban(from.isban());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_BanChat_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BanChat_Req::CopyFrom(const Admin_BanChat_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BanChat_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Admin_BanChat_Req::Swap(Admin_BanChat_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_BanChat_Req::InternalSwap(Admin_BanChat_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(isban_, other->isban_);
  std::swap(time_, other->time_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  openid_.Swap(&other->openid_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_BanChat_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BanChat_Req_descriptor_;
  metadata.reflection = Admin_BanChat_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_BanChat_Req

// required int64 uid = 1;
 bool Admin_BanChat_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_BanChat_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_BanChat_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_BanChat_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_BanChat_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Req.uid)
  return uid_;
}
 void Admin_BanChat_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Req.uid)
}

// required bool isban = 2;
 bool Admin_BanChat_Req::has_isban() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_BanChat_Req::set_has_isban() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_BanChat_Req::clear_has_isban() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_BanChat_Req::clear_isban() {
  isban_ = false;
  clear_has_isban();
}
 bool Admin_BanChat_Req::isban() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Req.isban)
  return isban_;
}
 void Admin_BanChat_Req::set_isban(bool value) {
  set_has_isban();
  isban_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Req.isban)
}

// required int32 time = 3;
 bool Admin_BanChat_Req::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_BanChat_Req::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_BanChat_Req::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_BanChat_Req::clear_time() {
  time_ = 0;
  clear_has_time();
}
 ::google::protobuf::int32 Admin_BanChat_Req::time() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Req.time)
  return time_;
}
 void Admin_BanChat_Req::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Req.time)
}

// required int32 gid = 4;
 bool Admin_BanChat_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_BanChat_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_BanChat_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_BanChat_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_BanChat_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Req.gid)
  return gid_;
}
 void Admin_BanChat_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Req.gid)
}

// required int32 adminfd = 5;
 bool Admin_BanChat_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_BanChat_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_BanChat_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_BanChat_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_BanChat_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Req.adminfd)
  return adminfd_;
}
 void Admin_BanChat_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Req.adminfd)
}

// optional string openid = 6;
 bool Admin_BanChat_Req::has_openid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_BanChat_Req::set_has_openid() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_BanChat_Req::clear_has_openid() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_BanChat_Req::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& Admin_BanChat_Req::openid() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Req.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_BanChat_Req::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_BanChat_Req.openid)
}
 void Admin_BanChat_Req::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_BanChat_Req.openid)
}
 void Admin_BanChat_Req::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_BanChat_Req.openid)
}
 ::std::string* Admin_BanChat_Req::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:Admin_BanChat_Req.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_BanChat_Req::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_BanChat_Req::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:Admin_BanChat_Req.openid)
}

// optional bool fromweb = 7 [default = false];
 bool Admin_BanChat_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_BanChat_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_BanChat_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_BanChat_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_BanChat_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Req.fromweb)
  return fromweb_;
}
 void Admin_BanChat_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_BanChat_Rsp::kUidFieldNumber;
const int Admin_BanChat_Rsp::kIsbanFieldNumber;
const int Admin_BanChat_Rsp::kTimeFieldNumber;
const int Admin_BanChat_Rsp::kGidFieldNumber;
const int Admin_BanChat_Rsp::kAdminfdFieldNumber;
const int Admin_BanChat_Rsp::kOpenidFieldNumber;
const int Admin_BanChat_Rsp::kFromwebFieldNumber;
const int Admin_BanChat_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_BanChat_Rsp::Admin_BanChat_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_BanChat_Rsp)
}

void Admin_BanChat_Rsp::InitAsDefaultInstance() {
}

Admin_BanChat_Rsp::Admin_BanChat_Rsp(const Admin_BanChat_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_BanChat_Rsp)
}

void Admin_BanChat_Rsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  isban_ = false;
  time_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BanChat_Rsp::~Admin_BanChat_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_BanChat_Rsp)
  SharedDtor();
}

void Admin_BanChat_Rsp::SharedDtor() {
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Admin_BanChat_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_BanChat_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BanChat_Rsp_descriptor_;
}

const Admin_BanChat_Rsp& Admin_BanChat_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_BanChat_Rsp* Admin_BanChat_Rsp::default_instance_ = NULL;

Admin_BanChat_Rsp* Admin_BanChat_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_BanChat_Rsp* n = new Admin_BanChat_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_BanChat_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_BanChat_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, adminfd_);
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    succ_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_BanChat_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_BanChat_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isban;
        break;
      }

      // required bool isban = 2;
      case 2: {
        if (tag == 16) {
         parse_isban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isban_)));
          set_has_isban();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }

      // required int32 gid = 4;
      case 4: {
        if (tag == 32) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 5;
      case 5: {
        if (tag == 40) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_openid;
        break;
      }

      // optional string openid = 6;
      case 6: {
        if (tag == 50) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_BanChat_Rsp.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_succ;
        break;
      }

      // required int32 succ = 8;
      case 8: {
        if (tag == 64) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_BanChat_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_BanChat_Rsp)
  return false;
#undef DO_
}

void Admin_BanChat_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_BanChat_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required bool isban = 2;
  if (has_isban()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isban(), output);
  }

  // required int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }

  // optional string openid = 6;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_BanChat_Rsp.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->openid(), output);
  }

  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }

  // required int32 succ = 8;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_BanChat_Rsp)
}

::google::protobuf::uint8* Admin_BanChat_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_BanChat_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required bool isban = 2;
  if (has_isban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isban(), target);
  }

  // required int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }

  // optional string openid = 6;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_BanChat_Rsp.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->openid(), target);
  }

  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }

  // required int32 succ = 8;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_BanChat_Rsp)
  return target;
}

int Admin_BanChat_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_isban()) {
    // required bool isban = 2;
    total_size += 1 + 1;
  }

  if (has_time()) {
    // required int32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  if (has_gid()) {
    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_BanChat_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000009f) ^ 0x0000009f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required bool isban = 2;
    total_size += 1 + 1;

    // required int32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());

    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96) {
    // optional string openid = 6;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional bool fromweb = 7 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_BanChat_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_BanChat_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BanChat_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BanChat_Rsp::MergeFrom(const Admin_BanChat_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_isban()) {
      set_isban(from.isban());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_BanChat_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BanChat_Rsp::CopyFrom(const Admin_BanChat_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BanChat_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009f) != 0x0000009f) return false;

  return true;
}

void Admin_BanChat_Rsp::Swap(Admin_BanChat_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_BanChat_Rsp::InternalSwap(Admin_BanChat_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(isban_, other->isban_);
  std::swap(time_, other->time_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  openid_.Swap(&other->openid_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_BanChat_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BanChat_Rsp_descriptor_;
  metadata.reflection = Admin_BanChat_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_BanChat_Rsp

// required int64 uid = 1;
 bool Admin_BanChat_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_BanChat_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_BanChat_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_BanChat_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_BanChat_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Rsp.uid)
  return uid_;
}
 void Admin_BanChat_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Rsp.uid)
}

// required bool isban = 2;
 bool Admin_BanChat_Rsp::has_isban() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_BanChat_Rsp::set_has_isban() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_BanChat_Rsp::clear_has_isban() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_BanChat_Rsp::clear_isban() {
  isban_ = false;
  clear_has_isban();
}
 bool Admin_BanChat_Rsp::isban() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Rsp.isban)
  return isban_;
}
 void Admin_BanChat_Rsp::set_isban(bool value) {
  set_has_isban();
  isban_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Rsp.isban)
}

// required int32 time = 3;
 bool Admin_BanChat_Rsp::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_BanChat_Rsp::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_BanChat_Rsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_BanChat_Rsp::clear_time() {
  time_ = 0;
  clear_has_time();
}
 ::google::protobuf::int32 Admin_BanChat_Rsp::time() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Rsp.time)
  return time_;
}
 void Admin_BanChat_Rsp::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Rsp.time)
}

// required int32 gid = 4;
 bool Admin_BanChat_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_BanChat_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_BanChat_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_BanChat_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_BanChat_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Rsp.gid)
  return gid_;
}
 void Admin_BanChat_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Rsp.gid)
}

// required int32 adminfd = 5;
 bool Admin_BanChat_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_BanChat_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_BanChat_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_BanChat_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_BanChat_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Rsp.adminfd)
  return adminfd_;
}
 void Admin_BanChat_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Rsp.adminfd)
}

// optional string openid = 6;
 bool Admin_BanChat_Rsp::has_openid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_BanChat_Rsp::set_has_openid() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_BanChat_Rsp::clear_has_openid() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_BanChat_Rsp::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& Admin_BanChat_Rsp::openid() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Rsp.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_BanChat_Rsp::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_BanChat_Rsp.openid)
}
 void Admin_BanChat_Rsp::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_BanChat_Rsp.openid)
}
 void Admin_BanChat_Rsp::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_BanChat_Rsp.openid)
}
 ::std::string* Admin_BanChat_Rsp::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:Admin_BanChat_Rsp.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_BanChat_Rsp::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_BanChat_Rsp::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:Admin_BanChat_Rsp.openid)
}

// optional bool fromweb = 7 [default = false];
 bool Admin_BanChat_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_BanChat_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_BanChat_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_BanChat_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_BanChat_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Rsp.fromweb)
  return fromweb_;
}
 void Admin_BanChat_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Rsp.fromweb)
}

// required int32 succ = 8;
 bool Admin_BanChat_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_BanChat_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_BanChat_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_BanChat_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_BanChat_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_BanChat_Rsp.succ)
  return succ_;
}
 void Admin_BanChat_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanChat_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_BanLogin_Req::kUidFieldNumber;
const int Admin_BanLogin_Req::kIsbanFieldNumber;
const int Admin_BanLogin_Req::kTimeFieldNumber;
const int Admin_BanLogin_Req::kGidFieldNumber;
const int Admin_BanLogin_Req::kAdminfdFieldNumber;
const int Admin_BanLogin_Req::kOpenidFieldNumber;
const int Admin_BanLogin_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_BanLogin_Req::Admin_BanLogin_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_BanLogin_Req)
}

void Admin_BanLogin_Req::InitAsDefaultInstance() {
}

Admin_BanLogin_Req::Admin_BanLogin_Req(const Admin_BanLogin_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_BanLogin_Req)
}

void Admin_BanLogin_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  isban_ = false;
  time_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BanLogin_Req::~Admin_BanLogin_Req() {
  // @@protoc_insertion_point(destructor:Admin_BanLogin_Req)
  SharedDtor();
}

void Admin_BanLogin_Req::SharedDtor() {
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Admin_BanLogin_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_BanLogin_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BanLogin_Req_descriptor_;
}

const Admin_BanLogin_Req& Admin_BanLogin_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_BanLogin_Req* Admin_BanLogin_Req::default_instance_ = NULL;

Admin_BanLogin_Req* Admin_BanLogin_Req::New(::google::protobuf::Arena* arena) const {
  Admin_BanLogin_Req* n = new Admin_BanLogin_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_BanLogin_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_BanLogin_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, adminfd_);
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_BanLogin_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_BanLogin_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isban;
        break;
      }

      // required bool isban = 2;
      case 2: {
        if (tag == 16) {
         parse_isban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isban_)));
          set_has_isban();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }

      // required int32 gid = 4;
      case 4: {
        if (tag == 32) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 5;
      case 5: {
        if (tag == 40) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_openid;
        break;
      }

      // optional string openid = 6;
      case 6: {
        if (tag == 50) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_BanLogin_Req.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_BanLogin_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_BanLogin_Req)
  return false;
#undef DO_
}

void Admin_BanLogin_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_BanLogin_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required bool isban = 2;
  if (has_isban()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isban(), output);
  }

  // required int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }

  // optional string openid = 6;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_BanLogin_Req.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->openid(), output);
  }

  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_BanLogin_Req)
}

::google::protobuf::uint8* Admin_BanLogin_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_BanLogin_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required bool isban = 2;
  if (has_isban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isban(), target);
  }

  // required int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }

  // optional string openid = 6;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_BanLogin_Req.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->openid(), target);
  }

  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_BanLogin_Req)
  return target;
}

int Admin_BanLogin_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_isban()) {
    // required bool isban = 2;
    total_size += 1 + 1;
  }

  if (has_time()) {
    // required int32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  if (has_gid()) {
    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_BanLogin_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required bool isban = 2;
    total_size += 1 + 1;

    // required int32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());

    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96) {
    // optional string openid = 6;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional bool fromweb = 7 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_BanLogin_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_BanLogin_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BanLogin_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BanLogin_Req::MergeFrom(const Admin_BanLogin_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_isban()) {
      set_isban(from.isban());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_BanLogin_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BanLogin_Req::CopyFrom(const Admin_BanLogin_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BanLogin_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Admin_BanLogin_Req::Swap(Admin_BanLogin_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_BanLogin_Req::InternalSwap(Admin_BanLogin_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(isban_, other->isban_);
  std::swap(time_, other->time_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  openid_.Swap(&other->openid_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_BanLogin_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BanLogin_Req_descriptor_;
  metadata.reflection = Admin_BanLogin_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_BanLogin_Req

// required int64 uid = 1;
 bool Admin_BanLogin_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_BanLogin_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_BanLogin_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_BanLogin_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_BanLogin_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Req.uid)
  return uid_;
}
 void Admin_BanLogin_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Req.uid)
}

// required bool isban = 2;
 bool Admin_BanLogin_Req::has_isban() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_BanLogin_Req::set_has_isban() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_BanLogin_Req::clear_has_isban() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_BanLogin_Req::clear_isban() {
  isban_ = false;
  clear_has_isban();
}
 bool Admin_BanLogin_Req::isban() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Req.isban)
  return isban_;
}
 void Admin_BanLogin_Req::set_isban(bool value) {
  set_has_isban();
  isban_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Req.isban)
}

// required int32 time = 3;
 bool Admin_BanLogin_Req::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_BanLogin_Req::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_BanLogin_Req::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_BanLogin_Req::clear_time() {
  time_ = 0;
  clear_has_time();
}
 ::google::protobuf::int32 Admin_BanLogin_Req::time() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Req.time)
  return time_;
}
 void Admin_BanLogin_Req::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Req.time)
}

// required int32 gid = 4;
 bool Admin_BanLogin_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_BanLogin_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_BanLogin_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_BanLogin_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_BanLogin_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Req.gid)
  return gid_;
}
 void Admin_BanLogin_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Req.gid)
}

// required int32 adminfd = 5;
 bool Admin_BanLogin_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_BanLogin_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_BanLogin_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_BanLogin_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_BanLogin_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Req.adminfd)
  return adminfd_;
}
 void Admin_BanLogin_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Req.adminfd)
}

// optional string openid = 6;
 bool Admin_BanLogin_Req::has_openid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_BanLogin_Req::set_has_openid() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_BanLogin_Req::clear_has_openid() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_BanLogin_Req::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& Admin_BanLogin_Req::openid() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Req.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_BanLogin_Req::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Req.openid)
}
 void Admin_BanLogin_Req::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_BanLogin_Req.openid)
}
 void Admin_BanLogin_Req::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_BanLogin_Req.openid)
}
 ::std::string* Admin_BanLogin_Req::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:Admin_BanLogin_Req.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_BanLogin_Req::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_BanLogin_Req::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:Admin_BanLogin_Req.openid)
}

// optional bool fromweb = 7 [default = false];
 bool Admin_BanLogin_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_BanLogin_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_BanLogin_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_BanLogin_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_BanLogin_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Req.fromweb)
  return fromweb_;
}
 void Admin_BanLogin_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_BanLogin_Rsp::kUidFieldNumber;
const int Admin_BanLogin_Rsp::kIsbanFieldNumber;
const int Admin_BanLogin_Rsp::kTimeFieldNumber;
const int Admin_BanLogin_Rsp::kGidFieldNumber;
const int Admin_BanLogin_Rsp::kAdminfdFieldNumber;
const int Admin_BanLogin_Rsp::kOpenidFieldNumber;
const int Admin_BanLogin_Rsp::kFromwebFieldNumber;
const int Admin_BanLogin_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_BanLogin_Rsp::Admin_BanLogin_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_BanLogin_Rsp)
}

void Admin_BanLogin_Rsp::InitAsDefaultInstance() {
}

Admin_BanLogin_Rsp::Admin_BanLogin_Rsp(const Admin_BanLogin_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_BanLogin_Rsp)
}

void Admin_BanLogin_Rsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  isban_ = false;
  time_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BanLogin_Rsp::~Admin_BanLogin_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_BanLogin_Rsp)
  SharedDtor();
}

void Admin_BanLogin_Rsp::SharedDtor() {
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Admin_BanLogin_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_BanLogin_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BanLogin_Rsp_descriptor_;
}

const Admin_BanLogin_Rsp& Admin_BanLogin_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_BanLogin_Rsp* Admin_BanLogin_Rsp::default_instance_ = NULL;

Admin_BanLogin_Rsp* Admin_BanLogin_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_BanLogin_Rsp* n = new Admin_BanLogin_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_BanLogin_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_BanLogin_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, adminfd_);
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    succ_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_BanLogin_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_BanLogin_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isban;
        break;
      }

      // required bool isban = 2;
      case 2: {
        if (tag == 16) {
         parse_isban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isban_)));
          set_has_isban();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }

      // required int32 gid = 4;
      case 4: {
        if (tag == 32) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 5;
      case 5: {
        if (tag == 40) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_openid;
        break;
      }

      // optional string openid = 6;
      case 6: {
        if (tag == 50) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Admin_BanLogin_Rsp.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_succ;
        break;
      }

      // required int32 succ = 8;
      case 8: {
        if (tag == 64) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_BanLogin_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_BanLogin_Rsp)
  return false;
#undef DO_
}

void Admin_BanLogin_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_BanLogin_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required bool isban = 2;
  if (has_isban()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isban(), output);
  }

  // required int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }

  // optional string openid = 6;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_BanLogin_Rsp.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->openid(), output);
  }

  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }

  // required int32 succ = 8;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_BanLogin_Rsp)
}

::google::protobuf::uint8* Admin_BanLogin_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_BanLogin_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required bool isban = 2;
  if (has_isban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isban(), target);
  }

  // required int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }

  // optional string openid = 6;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Admin_BanLogin_Rsp.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->openid(), target);
  }

  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }

  // required int32 succ = 8;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_BanLogin_Rsp)
  return target;
}

int Admin_BanLogin_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_isban()) {
    // required bool isban = 2;
    total_size += 1 + 1;
  }

  if (has_time()) {
    // required int32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  if (has_gid()) {
    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_BanLogin_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000009f) ^ 0x0000009f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required bool isban = 2;
    total_size += 1 + 1;

    // required int32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());

    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96) {
    // optional string openid = 6;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional bool fromweb = 7 [default = false];
    if (has_fromweb()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_BanLogin_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_BanLogin_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BanLogin_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BanLogin_Rsp::MergeFrom(const Admin_BanLogin_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_isban()) {
      set_isban(from.isban());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_BanLogin_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BanLogin_Rsp::CopyFrom(const Admin_BanLogin_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BanLogin_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009f) != 0x0000009f) return false;

  return true;
}

void Admin_BanLogin_Rsp::Swap(Admin_BanLogin_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_BanLogin_Rsp::InternalSwap(Admin_BanLogin_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(isban_, other->isban_);
  std::swap(time_, other->time_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  openid_.Swap(&other->openid_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_BanLogin_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BanLogin_Rsp_descriptor_;
  metadata.reflection = Admin_BanLogin_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_BanLogin_Rsp

// required int64 uid = 1;
 bool Admin_BanLogin_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_BanLogin_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_BanLogin_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_BanLogin_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_BanLogin_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Rsp.uid)
  return uid_;
}
 void Admin_BanLogin_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Rsp.uid)
}

// required bool isban = 2;
 bool Admin_BanLogin_Rsp::has_isban() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_BanLogin_Rsp::set_has_isban() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_BanLogin_Rsp::clear_has_isban() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_BanLogin_Rsp::clear_isban() {
  isban_ = false;
  clear_has_isban();
}
 bool Admin_BanLogin_Rsp::isban() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Rsp.isban)
  return isban_;
}
 void Admin_BanLogin_Rsp::set_isban(bool value) {
  set_has_isban();
  isban_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Rsp.isban)
}

// required int32 time = 3;
 bool Admin_BanLogin_Rsp::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_BanLogin_Rsp::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_BanLogin_Rsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_BanLogin_Rsp::clear_time() {
  time_ = 0;
  clear_has_time();
}
 ::google::protobuf::int32 Admin_BanLogin_Rsp::time() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Rsp.time)
  return time_;
}
 void Admin_BanLogin_Rsp::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Rsp.time)
}

// required int32 gid = 4;
 bool Admin_BanLogin_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_BanLogin_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_BanLogin_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_BanLogin_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_BanLogin_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Rsp.gid)
  return gid_;
}
 void Admin_BanLogin_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Rsp.gid)
}

// required int32 adminfd = 5;
 bool Admin_BanLogin_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_BanLogin_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_BanLogin_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_BanLogin_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_BanLogin_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Rsp.adminfd)
  return adminfd_;
}
 void Admin_BanLogin_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Rsp.adminfd)
}

// optional string openid = 6;
 bool Admin_BanLogin_Rsp::has_openid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_BanLogin_Rsp::set_has_openid() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_BanLogin_Rsp::clear_has_openid() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_BanLogin_Rsp::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& Admin_BanLogin_Rsp::openid() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Rsp.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_BanLogin_Rsp::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Rsp.openid)
}
 void Admin_BanLogin_Rsp::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Admin_BanLogin_Rsp.openid)
}
 void Admin_BanLogin_Rsp::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Admin_BanLogin_Rsp.openid)
}
 ::std::string* Admin_BanLogin_Rsp::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:Admin_BanLogin_Rsp.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Admin_BanLogin_Rsp::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Admin_BanLogin_Rsp::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:Admin_BanLogin_Rsp.openid)
}

// optional bool fromweb = 7 [default = false];
 bool Admin_BanLogin_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_BanLogin_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_BanLogin_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_BanLogin_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_BanLogin_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Rsp.fromweb)
  return fromweb_;
}
 void Admin_BanLogin_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Rsp.fromweb)
}

// required int32 succ = 8;
 bool Admin_BanLogin_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_BanLogin_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_BanLogin_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_BanLogin_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_BanLogin_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_BanLogin_Rsp.succ)
  return succ_;
}
 void Admin_BanLogin_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_BanLogin_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddPoint_Req::kUidFieldNumber;
const int Admin_AddPoint_Req::kPointFieldNumber;
const int Admin_AddPoint_Req::kGidFieldNumber;
const int Admin_AddPoint_Req::kAdminfdFieldNumber;
const int Admin_AddPoint_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AddPoint_Req::Admin_AddPoint_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddPoint_Req)
}

void Admin_AddPoint_Req::InitAsDefaultInstance() {
}

Admin_AddPoint_Req::Admin_AddPoint_Req(const Admin_AddPoint_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddPoint_Req)
}

void Admin_AddPoint_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  point_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddPoint_Req::~Admin_AddPoint_Req() {
  // @@protoc_insertion_point(destructor:Admin_AddPoint_Req)
  SharedDtor();
}

void Admin_AddPoint_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddPoint_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddPoint_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddPoint_Req_descriptor_;
}

const Admin_AddPoint_Req& Admin_AddPoint_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddPoint_Req* Admin_AddPoint_Req::default_instance_ = NULL;

Admin_AddPoint_Req* Admin_AddPoint_Req::New(::google::protobuf::Arena* arena) const {
  Admin_AddPoint_Req* n = new Admin_AddPoint_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddPoint_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddPoint_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, fromweb_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddPoint_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddPoint_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // required int32 point = 2;
      case 2: {
        if (tag == 16) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddPoint_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddPoint_Req)
  return false;
#undef DO_
}

void Admin_AddPoint_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddPoint_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddPoint_Req)
}

::google::protobuf::uint8* Admin_AddPoint_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddPoint_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddPoint_Req)
  return target;
}

int Admin_AddPoint_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_point()) {
    // required int32 point = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->point());
  }

  if (has_gid()) {
    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_AddPoint_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 point = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->point());

    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddPoint_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddPoint_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddPoint_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddPoint_Req::MergeFrom(const Admin_AddPoint_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddPoint_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddPoint_Req::CopyFrom(const Admin_AddPoint_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddPoint_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Admin_AddPoint_Req::Swap(Admin_AddPoint_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddPoint_Req::InternalSwap(Admin_AddPoint_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(point_, other->point_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddPoint_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddPoint_Req_descriptor_;
  metadata.reflection = Admin_AddPoint_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddPoint_Req

// required int64 uid = 1;
 bool Admin_AddPoint_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddPoint_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddPoint_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddPoint_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddPoint_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddPoint_Req.uid)
  return uid_;
}
 void Admin_AddPoint_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddPoint_Req.uid)
}

// required int32 point = 2;
 bool Admin_AddPoint_Req::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddPoint_Req::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddPoint_Req::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddPoint_Req::clear_point() {
  point_ = 0;
  clear_has_point();
}
 ::google::protobuf::int32 Admin_AddPoint_Req::point() const {
  // @@protoc_insertion_point(field_get:Admin_AddPoint_Req.point)
  return point_;
}
 void Admin_AddPoint_Req::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddPoint_Req.point)
}

// required int32 gid = 3;
 bool Admin_AddPoint_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddPoint_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddPoint_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddPoint_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddPoint_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddPoint_Req.gid)
  return gid_;
}
 void Admin_AddPoint_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddPoint_Req.gid)
}

// required int32 adminfd = 4;
 bool Admin_AddPoint_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddPoint_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddPoint_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddPoint_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddPoint_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddPoint_Req.adminfd)
  return adminfd_;
}
 void Admin_AddPoint_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddPoint_Req.adminfd)
}

// optional bool fromweb = 5 [default = false];
 bool Admin_AddPoint_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddPoint_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddPoint_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddPoint_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddPoint_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddPoint_Req.fromweb)
  return fromweb_;
}
 void Admin_AddPoint_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddPoint_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddPoint_Rsp::kUidFieldNumber;
const int Admin_AddPoint_Rsp::kOldpointFieldNumber;
const int Admin_AddPoint_Rsp::kNewpointFieldNumber;
const int Admin_AddPoint_Rsp::kGidFieldNumber;
const int Admin_AddPoint_Rsp::kAdminfdFieldNumber;
const int Admin_AddPoint_Rsp::kFromwebFieldNumber;
const int Admin_AddPoint_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_AddPoint_Rsp::Admin_AddPoint_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddPoint_Rsp)
}

void Admin_AddPoint_Rsp::InitAsDefaultInstance() {
}

Admin_AddPoint_Rsp::Admin_AddPoint_Rsp(const Admin_AddPoint_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddPoint_Rsp)
}

void Admin_AddPoint_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  oldpoint_ = 0;
  newpoint_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddPoint_Rsp::~Admin_AddPoint_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_AddPoint_Rsp)
  SharedDtor();
}

void Admin_AddPoint_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddPoint_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddPoint_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddPoint_Rsp_descriptor_;
}

const Admin_AddPoint_Rsp& Admin_AddPoint_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddPoint_Rsp* Admin_AddPoint_Rsp::default_instance_ = NULL;

Admin_AddPoint_Rsp* Admin_AddPoint_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_AddPoint_Rsp* n = new Admin_AddPoint_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddPoint_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddPoint_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, succ_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddPoint_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddPoint_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oldpoint;
        break;
      }

      // required int32 oldpoint = 2;
      case 2: {
        if (tag == 16) {
         parse_oldpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldpoint_)));
          set_has_oldpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_newpoint;
        break;
      }

      // required int32 newpoint = 3;
      case 3: {
        if (tag == 24) {
         parse_newpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newpoint_)));
          set_has_newpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }

      // required int32 gid = 4;
      case 4: {
        if (tag == 32) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 5;
      case 5: {
        if (tag == 40) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_succ;
        break;
      }

      // required int32 succ = 7;
      case 7: {
        if (tag == 56) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddPoint_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddPoint_Rsp)
  return false;
#undef DO_
}

void Admin_AddPoint_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddPoint_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 oldpoint = 2;
  if (has_oldpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oldpoint(), output);
  }

  // required int32 newpoint = 3;
  if (has_newpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->newpoint(), output);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fromweb(), output);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddPoint_Rsp)
}

::google::protobuf::uint8* Admin_AddPoint_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddPoint_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 oldpoint = 2;
  if (has_oldpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oldpoint(), target);
  }

  // required int32 newpoint = 3;
  if (has_newpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->newpoint(), target);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fromweb(), target);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddPoint_Rsp)
  return target;
}

int Admin_AddPoint_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_oldpoint()) {
    // required int32 oldpoint = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldpoint());
  }

  if (has_newpoint()) {
    // required int32 newpoint = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newpoint());
  }

  if (has_gid()) {
    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_AddPoint_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000005f) ^ 0x0000005f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 oldpoint = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldpoint());

    // required int32 newpoint = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newpoint());

    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddPoint_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddPoint_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddPoint_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddPoint_Rsp::MergeFrom(const Admin_AddPoint_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_oldpoint()) {
      set_oldpoint(from.oldpoint());
    }
    if (from.has_newpoint()) {
      set_newpoint(from.newpoint());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddPoint_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddPoint_Rsp::CopyFrom(const Admin_AddPoint_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddPoint_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void Admin_AddPoint_Rsp::Swap(Admin_AddPoint_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddPoint_Rsp::InternalSwap(Admin_AddPoint_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(oldpoint_, other->oldpoint_);
  std::swap(newpoint_, other->newpoint_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddPoint_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddPoint_Rsp_descriptor_;
  metadata.reflection = Admin_AddPoint_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddPoint_Rsp

// required int64 uid = 1;
 bool Admin_AddPoint_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddPoint_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddPoint_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddPoint_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddPoint_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddPoint_Rsp.uid)
  return uid_;
}
 void Admin_AddPoint_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddPoint_Rsp.uid)
}

// required int32 oldpoint = 2;
 bool Admin_AddPoint_Rsp::has_oldpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddPoint_Rsp::set_has_oldpoint() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddPoint_Rsp::clear_has_oldpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddPoint_Rsp::clear_oldpoint() {
  oldpoint_ = 0;
  clear_has_oldpoint();
}
 ::google::protobuf::int32 Admin_AddPoint_Rsp::oldpoint() const {
  // @@protoc_insertion_point(field_get:Admin_AddPoint_Rsp.oldpoint)
  return oldpoint_;
}
 void Admin_AddPoint_Rsp::set_oldpoint(::google::protobuf::int32 value) {
  set_has_oldpoint();
  oldpoint_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddPoint_Rsp.oldpoint)
}

// required int32 newpoint = 3;
 bool Admin_AddPoint_Rsp::has_newpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddPoint_Rsp::set_has_newpoint() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddPoint_Rsp::clear_has_newpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddPoint_Rsp::clear_newpoint() {
  newpoint_ = 0;
  clear_has_newpoint();
}
 ::google::protobuf::int32 Admin_AddPoint_Rsp::newpoint() const {
  // @@protoc_insertion_point(field_get:Admin_AddPoint_Rsp.newpoint)
  return newpoint_;
}
 void Admin_AddPoint_Rsp::set_newpoint(::google::protobuf::int32 value) {
  set_has_newpoint();
  newpoint_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddPoint_Rsp.newpoint)
}

// required int32 gid = 4;
 bool Admin_AddPoint_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddPoint_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddPoint_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddPoint_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddPoint_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddPoint_Rsp.gid)
  return gid_;
}
 void Admin_AddPoint_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddPoint_Rsp.gid)
}

// required int32 adminfd = 5;
 bool Admin_AddPoint_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddPoint_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddPoint_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddPoint_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddPoint_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddPoint_Rsp.adminfd)
  return adminfd_;
}
 void Admin_AddPoint_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddPoint_Rsp.adminfd)
}

// optional bool fromweb = 6 [default = false];
 bool Admin_AddPoint_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_AddPoint_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_AddPoint_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_AddPoint_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddPoint_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddPoint_Rsp.fromweb)
  return fromweb_;
}
 void Admin_AddPoint_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddPoint_Rsp.fromweb)
}

// required int32 succ = 7;
 bool Admin_AddPoint_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_AddPoint_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_AddPoint_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_AddPoint_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_AddPoint_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_AddPoint_Rsp.succ)
  return succ_;
}
 void Admin_AddPoint_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddPoint_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddIndate_Req::kUidFieldNumber;
const int Admin_AddIndate_Req::kInfoIDFieldNumber;
const int Admin_AddIndate_Req::kPositionFieldNumber;
const int Admin_AddIndate_Req::kHourFieldNumber;
const int Admin_AddIndate_Req::kGidFieldNumber;
const int Admin_AddIndate_Req::kAdminfdFieldNumber;
const int Admin_AddIndate_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AddIndate_Req::Admin_AddIndate_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddIndate_Req)
}

void Admin_AddIndate_Req::InitAsDefaultInstance() {
}

Admin_AddIndate_Req::Admin_AddIndate_Req(const Admin_AddIndate_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddIndate_Req)
}

void Admin_AddIndate_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  infoid_ = 0;
  position_ = 0;
  hour_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddIndate_Req::~Admin_AddIndate_Req() {
  // @@protoc_insertion_point(destructor:Admin_AddIndate_Req)
  SharedDtor();
}

void Admin_AddIndate_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddIndate_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddIndate_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddIndate_Req_descriptor_;
}

const Admin_AddIndate_Req& Admin_AddIndate_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddIndate_Req* Admin_AddIndate_Req::default_instance_ = NULL;

Admin_AddIndate_Req* Admin_AddIndate_Req::New(::google::protobuf::Arena* arena) const {
  Admin_AddIndate_Req* n = new Admin_AddIndate_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddIndate_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddIndate_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, fromweb_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddIndate_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddIndate_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_infoID;
        break;
      }

      // required int32 infoID = 2;
      case 2: {
        if (tag == 16) {
         parse_infoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infoid_)));
          set_has_infoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // required int32 position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hour;
        break;
      }

      // required int32 hour = 4;
      case 4: {
        if (tag == 32) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gid;
        break;
      }

      // required int32 gid = 5;
      case 5: {
        if (tag == 40) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 6;
      case 6: {
        if (tag == 48) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddIndate_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddIndate_Req)
  return false;
#undef DO_
}

void Admin_AddIndate_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddIndate_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 infoID = 2;
  if (has_infoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->infoid(), output);
  }

  // required int32 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position(), output);
  }

  // required int32 hour = 4;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hour(), output);
  }

  // required int32 gid = 5;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gid(), output);
  }

  // required int32 adminfd = 6;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->adminfd(), output);
  }

  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddIndate_Req)
}

::google::protobuf::uint8* Admin_AddIndate_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddIndate_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 infoID = 2;
  if (has_infoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->infoid(), target);
  }

  // required int32 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position(), target);
  }

  // required int32 hour = 4;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hour(), target);
  }

  // required int32 gid = 5;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gid(), target);
  }

  // required int32 adminfd = 6;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->adminfd(), target);
  }

  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddIndate_Req)
  return target;
}

int Admin_AddIndate_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_infoid()) {
    // required int32 infoID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infoid());
  }

  if (has_position()) {
    // required int32 position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  if (has_hour()) {
    // required int32 hour = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hour());
  }

  if (has_gid()) {
    // required int32 gid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_AddIndate_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 infoID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infoid());

    // required int32 position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());

    // required int32 hour = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hour());

    // required int32 gid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 7 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddIndate_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddIndate_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddIndate_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddIndate_Req::MergeFrom(const Admin_AddIndate_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_infoid()) {
      set_infoid(from.infoid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddIndate_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddIndate_Req::CopyFrom(const Admin_AddIndate_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddIndate_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Admin_AddIndate_Req::Swap(Admin_AddIndate_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddIndate_Req::InternalSwap(Admin_AddIndate_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(infoid_, other->infoid_);
  std::swap(position_, other->position_);
  std::swap(hour_, other->hour_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddIndate_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddIndate_Req_descriptor_;
  metadata.reflection = Admin_AddIndate_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddIndate_Req

// required int64 uid = 1;
 bool Admin_AddIndate_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddIndate_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddIndate_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddIndate_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddIndate_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Req.uid)
  return uid_;
}
 void Admin_AddIndate_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Req.uid)
}

// required int32 infoID = 2;
 bool Admin_AddIndate_Req::has_infoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddIndate_Req::set_has_infoid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddIndate_Req::clear_has_infoid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddIndate_Req::clear_infoid() {
  infoid_ = 0;
  clear_has_infoid();
}
 ::google::protobuf::int32 Admin_AddIndate_Req::infoid() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Req.infoID)
  return infoid_;
}
 void Admin_AddIndate_Req::set_infoid(::google::protobuf::int32 value) {
  set_has_infoid();
  infoid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Req.infoID)
}

// required int32 position = 3;
 bool Admin_AddIndate_Req::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddIndate_Req::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddIndate_Req::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddIndate_Req::clear_position() {
  position_ = 0;
  clear_has_position();
}
 ::google::protobuf::int32 Admin_AddIndate_Req::position() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Req.position)
  return position_;
}
 void Admin_AddIndate_Req::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Req.position)
}

// required int32 hour = 4;
 bool Admin_AddIndate_Req::has_hour() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddIndate_Req::set_has_hour() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddIndate_Req::clear_has_hour() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddIndate_Req::clear_hour() {
  hour_ = 0;
  clear_has_hour();
}
 ::google::protobuf::int32 Admin_AddIndate_Req::hour() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Req.hour)
  return hour_;
}
 void Admin_AddIndate_Req::set_hour(::google::protobuf::int32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Req.hour)
}

// required int32 gid = 5;
 bool Admin_AddIndate_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddIndate_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddIndate_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddIndate_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddIndate_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Req.gid)
  return gid_;
}
 void Admin_AddIndate_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Req.gid)
}

// required int32 adminfd = 6;
 bool Admin_AddIndate_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_AddIndate_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_AddIndate_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_AddIndate_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddIndate_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Req.adminfd)
  return adminfd_;
}
 void Admin_AddIndate_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Req.adminfd)
}

// optional bool fromweb = 7 [default = false];
 bool Admin_AddIndate_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_AddIndate_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_AddIndate_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_AddIndate_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddIndate_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Req.fromweb)
  return fromweb_;
}
 void Admin_AddIndate_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddIndate_Rsp::kUidFieldNumber;
const int Admin_AddIndate_Rsp::kItemIDFieldNumber;
const int Admin_AddIndate_Rsp::kInfoIDFieldNumber;
const int Admin_AddIndate_Rsp::kPositionFieldNumber;
const int Admin_AddIndate_Rsp::kOldindateFieldNumber;
const int Admin_AddIndate_Rsp::kNewindateFieldNumber;
const int Admin_AddIndate_Rsp::kGidFieldNumber;
const int Admin_AddIndate_Rsp::kAdminfdFieldNumber;
const int Admin_AddIndate_Rsp::kFromwebFieldNumber;
const int Admin_AddIndate_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_AddIndate_Rsp::Admin_AddIndate_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddIndate_Rsp)
}

void Admin_AddIndate_Rsp::InitAsDefaultInstance() {
}

Admin_AddIndate_Rsp::Admin_AddIndate_Rsp(const Admin_AddIndate_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddIndate_Rsp)
}

void Admin_AddIndate_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  itemid_ = GOOGLE_LONGLONG(0);
  infoid_ = 0;
  position_ = 0;
  oldindate_ = 0;
  newindate_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddIndate_Rsp::~Admin_AddIndate_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_AddIndate_Rsp)
  SharedDtor();
}

void Admin_AddIndate_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddIndate_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddIndate_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddIndate_Rsp_descriptor_;
}

const Admin_AddIndate_Rsp& Admin_AddIndate_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddIndate_Rsp* Admin_AddIndate_Rsp::default_instance_ = NULL;

Admin_AddIndate_Rsp* Admin_AddIndate_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_AddIndate_Rsp* n = new Admin_AddIndate_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddIndate_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddIndate_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, adminfd_);
  }
  ZR_(fromweb_, succ_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddIndate_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddIndate_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }

      // required int64 itemID = 2;
      case 2: {
        if (tag == 16) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_infoID;
        break;
      }

      // required int32 infoID = 3;
      case 3: {
        if (tag == 24) {
         parse_infoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infoid_)));
          set_has_infoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_position;
        break;
      }

      // required int32 position = 4;
      case 4: {
        if (tag == 32) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_oldindate;
        break;
      }

      // required int32 oldindate = 5;
      case 5: {
        if (tag == 40) {
         parse_oldindate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldindate_)));
          set_has_oldindate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_newindate;
        break;
      }

      // required int32 newindate = 6;
      case 6: {
        if (tag == 48) {
         parse_newindate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newindate_)));
          set_has_newindate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gid;
        break;
      }

      // required int32 gid = 7;
      case 7: {
        if (tag == 56) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 8;
      case 8: {
        if (tag == 64) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_succ;
        break;
      }

      // required int32 succ = 10;
      case 10: {
        if (tag == 80) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddIndate_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddIndate_Rsp)
  return false;
#undef DO_
}

void Admin_AddIndate_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddIndate_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int64 itemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // required int32 infoID = 3;
  if (has_infoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->infoid(), output);
  }

  // required int32 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->position(), output);
  }

  // required int32 oldindate = 5;
  if (has_oldindate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->oldindate(), output);
  }

  // required int32 newindate = 6;
  if (has_newindate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->newindate(), output);
  }

  // required int32 gid = 7;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gid(), output);
  }

  // required int32 adminfd = 8;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->adminfd(), output);
  }

  // optional bool fromweb = 9 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->fromweb(), output);
  }

  // required int32 succ = 10;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddIndate_Rsp)
}

::google::protobuf::uint8* Admin_AddIndate_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddIndate_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int64 itemID = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // required int32 infoID = 3;
  if (has_infoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->infoid(), target);
  }

  // required int32 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->position(), target);
  }

  // required int32 oldindate = 5;
  if (has_oldindate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->oldindate(), target);
  }

  // required int32 newindate = 6;
  if (has_newindate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->newindate(), target);
  }

  // required int32 gid = 7;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gid(), target);
  }

  // required int32 adminfd = 8;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->adminfd(), target);
  }

  // optional bool fromweb = 9 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->fromweb(), target);
  }

  // required int32 succ = 10;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddIndate_Rsp)
  return target;
}

int Admin_AddIndate_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_itemid()) {
    // required int64 itemID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->itemid());
  }

  if (has_infoid()) {
    // required int32 infoID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infoid());
  }

  if (has_position()) {
    // required int32 position = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  if (has_oldindate()) {
    // required int32 oldindate = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldindate());
  }

  if (has_newindate()) {
    // required int32 newindate = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newindate());
  }

  if (has_gid()) {
    // required int32 gid = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_AddIndate_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000002ff) ^ 0x000002ff) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int64 itemID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->itemid());

    // required int32 infoID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infoid());

    // required int32 position = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());

    // required int32 oldindate = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldindate());

    // required int32 newindate = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newindate());

    // required int32 gid = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 9 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddIndate_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddIndate_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddIndate_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddIndate_Rsp::MergeFrom(const Admin_AddIndate_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_infoid()) {
      set_infoid(from.infoid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_oldindate()) {
      set_oldindate(from.oldindate());
    }
    if (from.has_newindate()) {
      set_newindate(from.newindate());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddIndate_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddIndate_Rsp::CopyFrom(const Admin_AddIndate_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddIndate_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000002ff) != 0x000002ff) return false;

  return true;
}

void Admin_AddIndate_Rsp::Swap(Admin_AddIndate_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddIndate_Rsp::InternalSwap(Admin_AddIndate_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(itemid_, other->itemid_);
  std::swap(infoid_, other->infoid_);
  std::swap(position_, other->position_);
  std::swap(oldindate_, other->oldindate_);
  std::swap(newindate_, other->newindate_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddIndate_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddIndate_Rsp_descriptor_;
  metadata.reflection = Admin_AddIndate_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddIndate_Rsp

// required int64 uid = 1;
 bool Admin_AddIndate_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddIndate_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddIndate_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddIndate_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddIndate_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Rsp.uid)
  return uid_;
}
 void Admin_AddIndate_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Rsp.uid)
}

// required int64 itemID = 2;
 bool Admin_AddIndate_Rsp::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddIndate_Rsp::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddIndate_Rsp::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddIndate_Rsp::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
 ::google::protobuf::int64 Admin_AddIndate_Rsp::itemid() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Rsp.itemID)
  return itemid_;
}
 void Admin_AddIndate_Rsp::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Rsp.itemID)
}

// required int32 infoID = 3;
 bool Admin_AddIndate_Rsp::has_infoid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddIndate_Rsp::set_has_infoid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddIndate_Rsp::clear_has_infoid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddIndate_Rsp::clear_infoid() {
  infoid_ = 0;
  clear_has_infoid();
}
 ::google::protobuf::int32 Admin_AddIndate_Rsp::infoid() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Rsp.infoID)
  return infoid_;
}
 void Admin_AddIndate_Rsp::set_infoid(::google::protobuf::int32 value) {
  set_has_infoid();
  infoid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Rsp.infoID)
}

// required int32 position = 4;
 bool Admin_AddIndate_Rsp::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddIndate_Rsp::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddIndate_Rsp::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddIndate_Rsp::clear_position() {
  position_ = 0;
  clear_has_position();
}
 ::google::protobuf::int32 Admin_AddIndate_Rsp::position() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Rsp.position)
  return position_;
}
 void Admin_AddIndate_Rsp::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Rsp.position)
}

// required int32 oldindate = 5;
 bool Admin_AddIndate_Rsp::has_oldindate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddIndate_Rsp::set_has_oldindate() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddIndate_Rsp::clear_has_oldindate() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddIndate_Rsp::clear_oldindate() {
  oldindate_ = 0;
  clear_has_oldindate();
}
 ::google::protobuf::int32 Admin_AddIndate_Rsp::oldindate() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Rsp.oldindate)
  return oldindate_;
}
 void Admin_AddIndate_Rsp::set_oldindate(::google::protobuf::int32 value) {
  set_has_oldindate();
  oldindate_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Rsp.oldindate)
}

// required int32 newindate = 6;
 bool Admin_AddIndate_Rsp::has_newindate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_AddIndate_Rsp::set_has_newindate() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_AddIndate_Rsp::clear_has_newindate() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_AddIndate_Rsp::clear_newindate() {
  newindate_ = 0;
  clear_has_newindate();
}
 ::google::protobuf::int32 Admin_AddIndate_Rsp::newindate() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Rsp.newindate)
  return newindate_;
}
 void Admin_AddIndate_Rsp::set_newindate(::google::protobuf::int32 value) {
  set_has_newindate();
  newindate_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Rsp.newindate)
}

// required int32 gid = 7;
 bool Admin_AddIndate_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_AddIndate_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_AddIndate_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_AddIndate_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddIndate_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Rsp.gid)
  return gid_;
}
 void Admin_AddIndate_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Rsp.gid)
}

// required int32 adminfd = 8;
 bool Admin_AddIndate_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Admin_AddIndate_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000080u;
}
 void Admin_AddIndate_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Admin_AddIndate_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddIndate_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Rsp.adminfd)
  return adminfd_;
}
 void Admin_AddIndate_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Rsp.adminfd)
}

// optional bool fromweb = 9 [default = false];
 bool Admin_AddIndate_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Admin_AddIndate_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000100u;
}
 void Admin_AddIndate_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Admin_AddIndate_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddIndate_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Rsp.fromweb)
  return fromweb_;
}
 void Admin_AddIndate_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Rsp.fromweb)
}

// required int32 succ = 10;
 bool Admin_AddIndate_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void Admin_AddIndate_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000200u;
}
 void Admin_AddIndate_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000200u;
}
 void Admin_AddIndate_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_AddIndate_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_AddIndate_Rsp.succ)
  return succ_;
}
 void Admin_AddIndate_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddIndate_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_FreshUser_Req::kUidFieldNumber;
const int Admin_FreshUser_Req::kGidFieldNumber;
const int Admin_FreshUser_Req::kAdminfdFieldNumber;
const int Admin_FreshUser_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_FreshUser_Req::Admin_FreshUser_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_FreshUser_Req)
}

void Admin_FreshUser_Req::InitAsDefaultInstance() {
}

Admin_FreshUser_Req::Admin_FreshUser_Req(const Admin_FreshUser_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_FreshUser_Req)
}

void Admin_FreshUser_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_FreshUser_Req::~Admin_FreshUser_Req() {
  // @@protoc_insertion_point(destructor:Admin_FreshUser_Req)
  SharedDtor();
}

void Admin_FreshUser_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_FreshUser_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_FreshUser_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_FreshUser_Req_descriptor_;
}

const Admin_FreshUser_Req& Admin_FreshUser_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_FreshUser_Req* Admin_FreshUser_Req::default_instance_ = NULL;

Admin_FreshUser_Req* Admin_FreshUser_Req::New(::google::protobuf::Arena* arena) const {
  Admin_FreshUser_Req* n = new Admin_FreshUser_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_FreshUser_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_FreshUser_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, fromweb_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_FreshUser_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_FreshUser_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // required int32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 3;
      case 3: {
        if (tag == 24) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_FreshUser_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_FreshUser_Req)
  return false;
#undef DO_
}

void Admin_FreshUser_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_FreshUser_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gid(), output);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adminfd(), output);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_FreshUser_Req)
}

::google::protobuf::uint8* Admin_FreshUser_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_FreshUser_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gid(), target);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adminfd(), target);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_FreshUser_Req)
  return target;
}

int Admin_FreshUser_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_gid()) {
    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_FreshUser_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_FreshUser_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_FreshUser_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_FreshUser_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_FreshUser_Req::MergeFrom(const Admin_FreshUser_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_FreshUser_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_FreshUser_Req::CopyFrom(const Admin_FreshUser_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_FreshUser_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Admin_FreshUser_Req::Swap(Admin_FreshUser_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_FreshUser_Req::InternalSwap(Admin_FreshUser_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_FreshUser_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_FreshUser_Req_descriptor_;
  metadata.reflection = Admin_FreshUser_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_FreshUser_Req

// required int64 uid = 1;
 bool Admin_FreshUser_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_FreshUser_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_FreshUser_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_FreshUser_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_FreshUser_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_FreshUser_Req.uid)
  return uid_;
}
 void Admin_FreshUser_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_FreshUser_Req.uid)
}

// required int32 gid = 2;
 bool Admin_FreshUser_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_FreshUser_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_FreshUser_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_FreshUser_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_FreshUser_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_FreshUser_Req.gid)
  return gid_;
}
 void Admin_FreshUser_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_FreshUser_Req.gid)
}

// required int32 adminfd = 3;
 bool Admin_FreshUser_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_FreshUser_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_FreshUser_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_FreshUser_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_FreshUser_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_FreshUser_Req.adminfd)
  return adminfd_;
}
 void Admin_FreshUser_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_FreshUser_Req.adminfd)
}

// optional bool fromweb = 4 [default = false];
 bool Admin_FreshUser_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_FreshUser_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_FreshUser_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_FreshUser_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_FreshUser_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_FreshUser_Req.fromweb)
  return fromweb_;
}
 void Admin_FreshUser_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_FreshUser_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_FreshUser_Rsp::kUidFieldNumber;
const int Admin_FreshUser_Rsp::kGidFieldNumber;
const int Admin_FreshUser_Rsp::kAdminfdFieldNumber;
const int Admin_FreshUser_Rsp::kFromwebFieldNumber;
const int Admin_FreshUser_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_FreshUser_Rsp::Admin_FreshUser_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_FreshUser_Rsp)
}

void Admin_FreshUser_Rsp::InitAsDefaultInstance() {
}

Admin_FreshUser_Rsp::Admin_FreshUser_Rsp(const Admin_FreshUser_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_FreshUser_Rsp)
}

void Admin_FreshUser_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_FreshUser_Rsp::~Admin_FreshUser_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_FreshUser_Rsp)
  SharedDtor();
}

void Admin_FreshUser_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_FreshUser_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_FreshUser_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_FreshUser_Rsp_descriptor_;
}

const Admin_FreshUser_Rsp& Admin_FreshUser_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_FreshUser_Rsp* Admin_FreshUser_Rsp::default_instance_ = NULL;

Admin_FreshUser_Rsp* Admin_FreshUser_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_FreshUser_Rsp* n = new Admin_FreshUser_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_FreshUser_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_FreshUser_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, succ_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_FreshUser_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_FreshUser_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // required int32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 3;
      case 3: {
        if (tag == 24) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_succ;
        break;
      }

      // required int32 succ = 5;
      case 5: {
        if (tag == 40) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_FreshUser_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_FreshUser_Rsp)
  return false;
#undef DO_
}

void Admin_FreshUser_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_FreshUser_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gid(), output);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adminfd(), output);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }

  // required int32 succ = 5;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_FreshUser_Rsp)
}

::google::protobuf::uint8* Admin_FreshUser_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_FreshUser_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gid(), target);
  }

  // required int32 adminfd = 3;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adminfd(), target);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }

  // required int32 succ = 5;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_FreshUser_Rsp)
  return target;
}

int Admin_FreshUser_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_gid()) {
    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_FreshUser_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 gid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_FreshUser_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_FreshUser_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_FreshUser_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_FreshUser_Rsp::MergeFrom(const Admin_FreshUser_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_FreshUser_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_FreshUser_Rsp::CopyFrom(const Admin_FreshUser_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_FreshUser_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void Admin_FreshUser_Rsp::Swap(Admin_FreshUser_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_FreshUser_Rsp::InternalSwap(Admin_FreshUser_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_FreshUser_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_FreshUser_Rsp_descriptor_;
  metadata.reflection = Admin_FreshUser_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_FreshUser_Rsp

// required int64 uid = 1;
 bool Admin_FreshUser_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_FreshUser_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_FreshUser_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_FreshUser_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_FreshUser_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_FreshUser_Rsp.uid)
  return uid_;
}
 void Admin_FreshUser_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_FreshUser_Rsp.uid)
}

// required int32 gid = 2;
 bool Admin_FreshUser_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_FreshUser_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_FreshUser_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_FreshUser_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_FreshUser_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_FreshUser_Rsp.gid)
  return gid_;
}
 void Admin_FreshUser_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_FreshUser_Rsp.gid)
}

// required int32 adminfd = 3;
 bool Admin_FreshUser_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_FreshUser_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_FreshUser_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_FreshUser_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_FreshUser_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_FreshUser_Rsp.adminfd)
  return adminfd_;
}
 void Admin_FreshUser_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_FreshUser_Rsp.adminfd)
}

// optional bool fromweb = 4 [default = false];
 bool Admin_FreshUser_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_FreshUser_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_FreshUser_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_FreshUser_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_FreshUser_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_FreshUser_Rsp.fromweb)
  return fromweb_;
}
 void Admin_FreshUser_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_FreshUser_Rsp.fromweb)
}

// required int32 succ = 5;
 bool Admin_FreshUser_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_FreshUser_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_FreshUser_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_FreshUser_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_FreshUser_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_FreshUser_Rsp.succ)
  return succ_;
}
 void Admin_FreshUser_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_FreshUser_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddMedal_Req::kUidFieldNumber;
const int Admin_AddMedal_Req::kMedalFieldNumber;
const int Admin_AddMedal_Req::kGidFieldNumber;
const int Admin_AddMedal_Req::kAdminfdFieldNumber;
const int Admin_AddMedal_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_AddMedal_Req::Admin_AddMedal_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddMedal_Req)
}

void Admin_AddMedal_Req::InitAsDefaultInstance() {
}

Admin_AddMedal_Req::Admin_AddMedal_Req(const Admin_AddMedal_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddMedal_Req)
}

void Admin_AddMedal_Req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  medal_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddMedal_Req::~Admin_AddMedal_Req() {
  // @@protoc_insertion_point(destructor:Admin_AddMedal_Req)
  SharedDtor();
}

void Admin_AddMedal_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddMedal_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddMedal_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddMedal_Req_descriptor_;
}

const Admin_AddMedal_Req& Admin_AddMedal_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddMedal_Req* Admin_AddMedal_Req::default_instance_ = NULL;

Admin_AddMedal_Req* Admin_AddMedal_Req::New(::google::protobuf::Arena* arena) const {
  Admin_AddMedal_Req* n = new Admin_AddMedal_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddMedal_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddMedal_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, fromweb_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddMedal_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddMedal_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_medal;
        break;
      }

      // required int32 medal = 2;
      case 2: {
        if (tag == 16) {
         parse_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &medal_)));
          set_has_medal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 4;
      case 4: {
        if (tag == 32) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddMedal_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddMedal_Req)
  return false;
#undef DO_
}

void Admin_AddMedal_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddMedal_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 medal = 2;
  if (has_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->medal(), output);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adminfd(), output);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddMedal_Req)
}

::google::protobuf::uint8* Admin_AddMedal_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddMedal_Req)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 medal = 2;
  if (has_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->medal(), target);
  }

  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // required int32 adminfd = 4;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adminfd(), target);
  }

  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddMedal_Req)
  return target;
}

int Admin_AddMedal_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_medal()) {
    // required int32 medal = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->medal());
  }

  if (has_gid()) {
    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_AddMedal_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 medal = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->medal());

    // required int32 gid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 5 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddMedal_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddMedal_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddMedal_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddMedal_Req::MergeFrom(const Admin_AddMedal_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_medal()) {
      set_medal(from.medal());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddMedal_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddMedal_Req::CopyFrom(const Admin_AddMedal_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddMedal_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Admin_AddMedal_Req::Swap(Admin_AddMedal_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddMedal_Req::InternalSwap(Admin_AddMedal_Req* other) {
  std::swap(uid_, other->uid_);
  std::swap(medal_, other->medal_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddMedal_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddMedal_Req_descriptor_;
  metadata.reflection = Admin_AddMedal_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddMedal_Req

// required int64 uid = 1;
 bool Admin_AddMedal_Req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddMedal_Req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddMedal_Req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddMedal_Req::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddMedal_Req::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddMedal_Req.uid)
  return uid_;
}
 void Admin_AddMedal_Req::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddMedal_Req.uid)
}

// required int32 medal = 2;
 bool Admin_AddMedal_Req::has_medal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddMedal_Req::set_has_medal() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddMedal_Req::clear_has_medal() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddMedal_Req::clear_medal() {
  medal_ = 0;
  clear_has_medal();
}
 ::google::protobuf::int32 Admin_AddMedal_Req::medal() const {
  // @@protoc_insertion_point(field_get:Admin_AddMedal_Req.medal)
  return medal_;
}
 void Admin_AddMedal_Req::set_medal(::google::protobuf::int32 value) {
  set_has_medal();
  medal_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddMedal_Req.medal)
}

// required int32 gid = 3;
 bool Admin_AddMedal_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddMedal_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddMedal_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddMedal_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddMedal_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddMedal_Req.gid)
  return gid_;
}
 void Admin_AddMedal_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddMedal_Req.gid)
}

// required int32 adminfd = 4;
 bool Admin_AddMedal_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddMedal_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddMedal_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddMedal_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddMedal_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddMedal_Req.adminfd)
  return adminfd_;
}
 void Admin_AddMedal_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddMedal_Req.adminfd)
}

// optional bool fromweb = 5 [default = false];
 bool Admin_AddMedal_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddMedal_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddMedal_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddMedal_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddMedal_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddMedal_Req.fromweb)
  return fromweb_;
}
 void Admin_AddMedal_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddMedal_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_AddMedal_Rsp::kUidFieldNumber;
const int Admin_AddMedal_Rsp::kOldmedalFieldNumber;
const int Admin_AddMedal_Rsp::kNewmedalFieldNumber;
const int Admin_AddMedal_Rsp::kGidFieldNumber;
const int Admin_AddMedal_Rsp::kAdminfdFieldNumber;
const int Admin_AddMedal_Rsp::kFromwebFieldNumber;
const int Admin_AddMedal_Rsp::kSuccFieldNumber;
#endif  // !_MSC_VER

Admin_AddMedal_Rsp::Admin_AddMedal_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_AddMedal_Rsp)
}

void Admin_AddMedal_Rsp::InitAsDefaultInstance() {
}

Admin_AddMedal_Rsp::Admin_AddMedal_Rsp(const Admin_AddMedal_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_AddMedal_Rsp)
}

void Admin_AddMedal_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  oldmedal_ = 0;
  newmedal_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_AddMedal_Rsp::~Admin_AddMedal_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_AddMedal_Rsp)
  SharedDtor();
}

void Admin_AddMedal_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_AddMedal_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_AddMedal_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_AddMedal_Rsp_descriptor_;
}

const Admin_AddMedal_Rsp& Admin_AddMedal_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_AddMedal_Rsp* Admin_AddMedal_Rsp::default_instance_ = NULL;

Admin_AddMedal_Rsp* Admin_AddMedal_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_AddMedal_Rsp* n = new Admin_AddMedal_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_AddMedal_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_AddMedal_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, succ_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_AddMedal_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_AddMedal_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oldmedal;
        break;
      }

      // required int32 oldmedal = 2;
      case 2: {
        if (tag == 16) {
         parse_oldmedal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldmedal_)));
          set_has_oldmedal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_newmedal;
        break;
      }

      // required int32 newmedal = 3;
      case 3: {
        if (tag == 24) {
         parse_newmedal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newmedal_)));
          set_has_newmedal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }

      // required int32 gid = 4;
      case 4: {
        if (tag == 32) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 5;
      case 5: {
        if (tag == 40) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_succ;
        break;
      }

      // required int32 succ = 7;
      case 7: {
        if (tag == 56) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_AddMedal_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_AddMedal_Rsp)
  return false;
#undef DO_
}

void Admin_AddMedal_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_AddMedal_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 oldmedal = 2;
  if (has_oldmedal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oldmedal(), output);
  }

  // required int32 newmedal = 3;
  if (has_newmedal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->newmedal(), output);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adminfd(), output);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fromweb(), output);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_AddMedal_Rsp)
}

::google::protobuf::uint8* Admin_AddMedal_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_AddMedal_Rsp)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 oldmedal = 2;
  if (has_oldmedal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oldmedal(), target);
  }

  // required int32 newmedal = 3;
  if (has_newmedal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->newmedal(), target);
  }

  // required int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }

  // required int32 adminfd = 5;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adminfd(), target);
  }

  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fromweb(), target);
  }

  // required int32 succ = 7;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_AddMedal_Rsp)
  return target;
}

int Admin_AddMedal_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  if (has_oldmedal()) {
    // required int32 oldmedal = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldmedal());
  }

  if (has_newmedal()) {
    // required int32 newmedal = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newmedal());
  }

  if (has_gid()) {
    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_AddMedal_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000005f) ^ 0x0000005f) == 0) {  // All required fields are present.
    // required int64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());

    // required int32 oldmedal = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldmedal());

    // required int32 newmedal = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newmedal());

    // required int32 gid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 6 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_AddMedal_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_AddMedal_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_AddMedal_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_AddMedal_Rsp::MergeFrom(const Admin_AddMedal_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_oldmedal()) {
      set_oldmedal(from.oldmedal());
    }
    if (from.has_newmedal()) {
      set_newmedal(from.newmedal());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_AddMedal_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_AddMedal_Rsp::CopyFrom(const Admin_AddMedal_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_AddMedal_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void Admin_AddMedal_Rsp::Swap(Admin_AddMedal_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_AddMedal_Rsp::InternalSwap(Admin_AddMedal_Rsp* other) {
  std::swap(uid_, other->uid_);
  std::swap(oldmedal_, other->oldmedal_);
  std::swap(newmedal_, other->newmedal_);
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_AddMedal_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_AddMedal_Rsp_descriptor_;
  metadata.reflection = Admin_AddMedal_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_AddMedal_Rsp

// required int64 uid = 1;
 bool Admin_AddMedal_Rsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_AddMedal_Rsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_AddMedal_Rsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_AddMedal_Rsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Admin_AddMedal_Rsp::uid() const {
  // @@protoc_insertion_point(field_get:Admin_AddMedal_Rsp.uid)
  return uid_;
}
 void Admin_AddMedal_Rsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddMedal_Rsp.uid)
}

// required int32 oldmedal = 2;
 bool Admin_AddMedal_Rsp::has_oldmedal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_AddMedal_Rsp::set_has_oldmedal() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_AddMedal_Rsp::clear_has_oldmedal() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_AddMedal_Rsp::clear_oldmedal() {
  oldmedal_ = 0;
  clear_has_oldmedal();
}
 ::google::protobuf::int32 Admin_AddMedal_Rsp::oldmedal() const {
  // @@protoc_insertion_point(field_get:Admin_AddMedal_Rsp.oldmedal)
  return oldmedal_;
}
 void Admin_AddMedal_Rsp::set_oldmedal(::google::protobuf::int32 value) {
  set_has_oldmedal();
  oldmedal_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddMedal_Rsp.oldmedal)
}

// required int32 newmedal = 3;
 bool Admin_AddMedal_Rsp::has_newmedal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_AddMedal_Rsp::set_has_newmedal() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_AddMedal_Rsp::clear_has_newmedal() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_AddMedal_Rsp::clear_newmedal() {
  newmedal_ = 0;
  clear_has_newmedal();
}
 ::google::protobuf::int32 Admin_AddMedal_Rsp::newmedal() const {
  // @@protoc_insertion_point(field_get:Admin_AddMedal_Rsp.newmedal)
  return newmedal_;
}
 void Admin_AddMedal_Rsp::set_newmedal(::google::protobuf::int32 value) {
  set_has_newmedal();
  newmedal_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddMedal_Rsp.newmedal)
}

// required int32 gid = 4;
 bool Admin_AddMedal_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_AddMedal_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_AddMedal_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_AddMedal_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_AddMedal_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_AddMedal_Rsp.gid)
  return gid_;
}
 void Admin_AddMedal_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddMedal_Rsp.gid)
}

// required int32 adminfd = 5;
 bool Admin_AddMedal_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Admin_AddMedal_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000010u;
}
 void Admin_AddMedal_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Admin_AddMedal_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_AddMedal_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_AddMedal_Rsp.adminfd)
  return adminfd_;
}
 void Admin_AddMedal_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddMedal_Rsp.adminfd)
}

// optional bool fromweb = 6 [default = false];
 bool Admin_AddMedal_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Admin_AddMedal_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000020u;
}
 void Admin_AddMedal_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Admin_AddMedal_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_AddMedal_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_AddMedal_Rsp.fromweb)
  return fromweb_;
}
 void Admin_AddMedal_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddMedal_Rsp.fromweb)
}

// required int32 succ = 7;
 bool Admin_AddMedal_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Admin_AddMedal_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000040u;
}
 void Admin_AddMedal_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Admin_AddMedal_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_AddMedal_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_AddMedal_Rsp.succ)
  return succ_;
}
 void Admin_AddMedal_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_AddMedal_Rsp.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_Reload_Req::kGidFieldNumber;
const int Admin_Reload_Req::kAdminfdFieldNumber;
const int Admin_Reload_Req::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_Reload_Req::Admin_Reload_Req()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_Reload_Req)
}

void Admin_Reload_Req::InitAsDefaultInstance() {
}

Admin_Reload_Req::Admin_Reload_Req(const Admin_Reload_Req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_Reload_Req)
}

void Admin_Reload_Req::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_Reload_Req::~Admin_Reload_Req() {
  // @@protoc_insertion_point(destructor:Admin_Reload_Req)
  SharedDtor();
}

void Admin_Reload_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_Reload_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_Reload_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_Reload_Req_descriptor_;
}

const Admin_Reload_Req& Admin_Reload_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_Reload_Req* Admin_Reload_Req::default_instance_ = NULL;

Admin_Reload_Req* Admin_Reload_Req::New(::google::protobuf::Arena* arena) const {
  Admin_Reload_Req* n = new Admin_Reload_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_Reload_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_Reload_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gid_, fromweb_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_Reload_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_Reload_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 2;
      case 2: {
        if (tag == 16) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_Reload_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_Reload_Req)
  return false;
#undef DO_
}

void Admin_Reload_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_Reload_Req)
  // required int32 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }

  // required int32 adminfd = 2;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adminfd(), output);
  }

  // optional bool fromweb = 3 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_Reload_Req)
}

::google::protobuf::uint8* Admin_Reload_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_Reload_Req)
  // required int32 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }

  // required int32 adminfd = 2;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adminfd(), target);
  }

  // optional bool fromweb = 3 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_Reload_Req)
  return target;
}

int Admin_Reload_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_gid()) {
    // required int32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  return total_size;
}
int Admin_Reload_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 3 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_Reload_Req::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_Reload_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_Reload_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_Reload_Req::MergeFrom(const Admin_Reload_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_Reload_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_Reload_Req::CopyFrom(const Admin_Reload_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_Reload_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Admin_Reload_Req::Swap(Admin_Reload_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_Reload_Req::InternalSwap(Admin_Reload_Req* other) {
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_Reload_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_Reload_Req_descriptor_;
  metadata.reflection = Admin_Reload_Req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_Reload_Req

// required int32 gid = 1;
 bool Admin_Reload_Req::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_Reload_Req::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_Reload_Req::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_Reload_Req::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_Reload_Req::gid() const {
  // @@protoc_insertion_point(field_get:Admin_Reload_Req.gid)
  return gid_;
}
 void Admin_Reload_Req::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_Reload_Req.gid)
}

// required int32 adminfd = 2;
 bool Admin_Reload_Req::has_adminfd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_Reload_Req::set_has_adminfd() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_Reload_Req::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_Reload_Req::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_Reload_Req::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_Reload_Req.adminfd)
  return adminfd_;
}
 void Admin_Reload_Req::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_Reload_Req.adminfd)
}

// optional bool fromweb = 3 [default = false];
 bool Admin_Reload_Req::has_fromweb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_Reload_Req::set_has_fromweb() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_Reload_Req::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_Reload_Req::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_Reload_Req::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_Reload_Req.fromweb)
  return fromweb_;
}
 void Admin_Reload_Req::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_Reload_Req.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Admin_Reload_Rsp::kGidFieldNumber;
const int Admin_Reload_Rsp::kAdminfdFieldNumber;
const int Admin_Reload_Rsp::kSuccFieldNumber;
const int Admin_Reload_Rsp::kFromwebFieldNumber;
#endif  // !_MSC_VER

Admin_Reload_Rsp::Admin_Reload_Rsp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin_Reload_Rsp)
}

void Admin_Reload_Rsp::InitAsDefaultInstance() {
}

Admin_Reload_Rsp::Admin_Reload_Rsp(const Admin_Reload_Rsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin_Reload_Rsp)
}

void Admin_Reload_Rsp::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0;
  adminfd_ = 0;
  succ_ = 0;
  fromweb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_Reload_Rsp::~Admin_Reload_Rsp() {
  // @@protoc_insertion_point(destructor:Admin_Reload_Rsp)
  SharedDtor();
}

void Admin_Reload_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_Reload_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_Reload_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_Reload_Rsp_descriptor_;
}

const Admin_Reload_Rsp& Admin_Reload_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Admin_Reload_Rsp* Admin_Reload_Rsp::default_instance_ = NULL;

Admin_Reload_Rsp* Admin_Reload_Rsp::New(::google::protobuf::Arena* arena) const {
  Admin_Reload_Rsp* n = new Admin_Reload_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Admin_Reload_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Admin_Reload_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gid_, fromweb_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Admin_Reload_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin_Reload_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 2;
      case 2: {
        if (tag == 16) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_succ;
        break;
      }

      // required int32 succ = 3;
      case 3: {
        if (tag == 24) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fromweb;
        break;
      }

      // optional bool fromweb = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_fromweb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromweb_)));
          set_has_fromweb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin_Reload_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin_Reload_Rsp)
  return false;
#undef DO_
}

void Admin_Reload_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin_Reload_Rsp)
  // required int32 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }

  // required int32 adminfd = 2;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adminfd(), output);
  }

  // required int32 succ = 3;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->succ(), output);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fromweb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin_Reload_Rsp)
}

::google::protobuf::uint8* Admin_Reload_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin_Reload_Rsp)
  // required int32 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }

  // required int32 adminfd = 2;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adminfd(), target);
  }

  // required int32 succ = 3;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->succ(), target);
  }

  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fromweb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin_Reload_Rsp)
  return target;
}

int Admin_Reload_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_gid()) {
    // required int32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  if (has_adminfd()) {
    // required int32 adminfd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_succ()) {
    // required int32 succ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());
  }

  return total_size;
}
int Admin_Reload_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());

    // required int32 adminfd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int32 succ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->succ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fromweb = 4 [default = false];
  if (has_fromweb()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_Reload_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Admin_Reload_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_Reload_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_Reload_Rsp::MergeFrom(const Admin_Reload_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_fromweb()) {
      set_fromweb(from.fromweb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Admin_Reload_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_Reload_Rsp::CopyFrom(const Admin_Reload_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_Reload_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Admin_Reload_Rsp::Swap(Admin_Reload_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Admin_Reload_Rsp::InternalSwap(Admin_Reload_Rsp* other) {
  std::swap(gid_, other->gid_);
  std::swap(adminfd_, other->adminfd_);
  std::swap(succ_, other->succ_);
  std::swap(fromweb_, other->fromweb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Admin_Reload_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_Reload_Rsp_descriptor_;
  metadata.reflection = Admin_Reload_Rsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Admin_Reload_Rsp

// required int32 gid = 1;
 bool Admin_Reload_Rsp::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Admin_Reload_Rsp::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
 void Admin_Reload_Rsp::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Admin_Reload_Rsp::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
 ::google::protobuf::int32 Admin_Reload_Rsp::gid() const {
  // @@protoc_insertion_point(field_get:Admin_Reload_Rsp.gid)
  return gid_;
}
 void Admin_Reload_Rsp::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Admin_Reload_Rsp.gid)
}

// required int32 adminfd = 2;
 bool Admin_Reload_Rsp::has_adminfd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Admin_Reload_Rsp::set_has_adminfd() {
  _has_bits_[0] |= 0x00000002u;
}
 void Admin_Reload_Rsp::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Admin_Reload_Rsp::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 Admin_Reload_Rsp::adminfd() const {
  // @@protoc_insertion_point(field_get:Admin_Reload_Rsp.adminfd)
  return adminfd_;
}
 void Admin_Reload_Rsp::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:Admin_Reload_Rsp.adminfd)
}

// required int32 succ = 3;
 bool Admin_Reload_Rsp::has_succ() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Admin_Reload_Rsp::set_has_succ() {
  _has_bits_[0] |= 0x00000004u;
}
 void Admin_Reload_Rsp::clear_has_succ() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Admin_Reload_Rsp::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Admin_Reload_Rsp::succ() const {
  // @@protoc_insertion_point(field_get:Admin_Reload_Rsp.succ)
  return succ_;
}
 void Admin_Reload_Rsp::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Admin_Reload_Rsp.succ)
}

// optional bool fromweb = 4 [default = false];
 bool Admin_Reload_Rsp::has_fromweb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Admin_Reload_Rsp::set_has_fromweb() {
  _has_bits_[0] |= 0x00000008u;
}
 void Admin_Reload_Rsp::clear_has_fromweb() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Admin_Reload_Rsp::clear_fromweb() {
  fromweb_ = false;
  clear_has_fromweb();
}
 bool Admin_Reload_Rsp::fromweb() const {
  // @@protoc_insertion_point(field_get:Admin_Reload_Rsp.fromweb)
  return fromweb_;
}
 void Admin_Reload_Rsp::set_fromweb(bool value) {
  set_has_fromweb();
  fromweb_ = value;
  // @@protoc_insertion_point(field_set:Admin_Reload_Rsp.fromweb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UpdateGuestNumber::kUidFieldNumber;
const int UpdateGuestNumber::kGuestNumFieldNumber;
const int UpdateGuestNumber::kTimeFieldNumber;
#endif  // !_MSC_VER

UpdateGuestNumber::UpdateGuestNumber()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UpdateGuestNumber)
}

void UpdateGuestNumber::InitAsDefaultInstance() {
}

UpdateGuestNumber::UpdateGuestNumber(const UpdateGuestNumber& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UpdateGuestNumber)
}

void UpdateGuestNumber::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  guest_num_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGuestNumber::~UpdateGuestNumber() {
  // @@protoc_insertion_point(destructor:UpdateGuestNumber)
  SharedDtor();
}

void UpdateGuestNumber::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateGuestNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGuestNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGuestNumber_descriptor_;
}

const UpdateGuestNumber& UpdateGuestNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

UpdateGuestNumber* UpdateGuestNumber::default_instance_ = NULL;

UpdateGuestNumber* UpdateGuestNumber::New(::google::protobuf::Arena* arena) const {
  UpdateGuestNumber* n = new UpdateGuestNumber;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateGuestNumber::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UpdateGuestNumber*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, guest_num_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UpdateGuestNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UpdateGuestNumber)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guest_num;
        break;
      }

      // optional int32 guest_num = 2;
      case 2: {
        if (tag == 16) {
         parse_guest_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guest_num_)));
          set_has_guest_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UpdateGuestNumber)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UpdateGuestNumber)
  return false;
#undef DO_
}

void UpdateGuestNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UpdateGuestNumber)
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional int32 guest_num = 2;
  if (has_guest_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guest_num(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UpdateGuestNumber)
}

::google::protobuf::uint8* UpdateGuestNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateGuestNumber)
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional int32 guest_num = 2;
  if (has_guest_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guest_num(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateGuestNumber)
  return target;
}

int UpdateGuestNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 guest_num = 2;
    if (has_guest_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guest_num());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGuestNumber::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateGuestNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGuestNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGuestNumber::MergeFrom(const UpdateGuestNumber& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_guest_num()) {
      set_guest_num(from.guest_num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UpdateGuestNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGuestNumber::CopyFrom(const UpdateGuestNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGuestNumber::IsInitialized() const {

  return true;
}

void UpdateGuestNumber::Swap(UpdateGuestNumber* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGuestNumber::InternalSwap(UpdateGuestNumber* other) {
  std::swap(uid_, other->uid_);
  std::swap(guest_num_, other->guest_num_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateGuestNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGuestNumber_descriptor_;
  metadata.reflection = UpdateGuestNumber_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateGuestNumber

// optional int64 uid = 1;
 bool UpdateGuestNumber::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void UpdateGuestNumber::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void UpdateGuestNumber::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void UpdateGuestNumber::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 UpdateGuestNumber::uid() const {
  // @@protoc_insertion_point(field_get:UpdateGuestNumber.uid)
  return uid_;
}
 void UpdateGuestNumber::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:UpdateGuestNumber.uid)
}

// optional int32 guest_num = 2;
 bool UpdateGuestNumber::has_guest_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void UpdateGuestNumber::set_has_guest_num() {
  _has_bits_[0] |= 0x00000002u;
}
 void UpdateGuestNumber::clear_has_guest_num() {
  _has_bits_[0] &= ~0x00000002u;
}
 void UpdateGuestNumber::clear_guest_num() {
  guest_num_ = 0;
  clear_has_guest_num();
}
 ::google::protobuf::int32 UpdateGuestNumber::guest_num() const {
  // @@protoc_insertion_point(field_get:UpdateGuestNumber.guest_num)
  return guest_num_;
}
 void UpdateGuestNumber::set_guest_num(::google::protobuf::int32 value) {
  set_has_guest_num();
  guest_num_ = value;
  // @@protoc_insertion_point(field_set:UpdateGuestNumber.guest_num)
}

// optional int64 time = 3;
 bool UpdateGuestNumber::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void UpdateGuestNumber::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
 void UpdateGuestNumber::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
 void UpdateGuestNumber::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::int64 UpdateGuestNumber::time() const {
  // @@protoc_insertion_point(field_get:UpdateGuestNumber.time)
  return time_;
}
 void UpdateGuestNumber::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:UpdateGuestNumber.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QQUnionCheckKey::kAdminfdFieldNumber;
const int QQUnionCheckKey::kIdFieldNumber;
const int QQUnionCheckKey::kKeyFieldNumber;
const int QQUnionCheckKey::kSuccFieldNumber;
#endif  // !_MSC_VER

QQUnionCheckKey::QQUnionCheckKey()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QQUnionCheckKey)
}

void QQUnionCheckKey::InitAsDefaultInstance() {
}

QQUnionCheckKey::QQUnionCheckKey(const QQUnionCheckKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QQUnionCheckKey)
}

void QQUnionCheckKey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adminfd_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  succ_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QQUnionCheckKey::~QQUnionCheckKey() {
  // @@protoc_insertion_point(destructor:QQUnionCheckKey)
  SharedDtor();
}

void QQUnionCheckKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QQUnionCheckKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QQUnionCheckKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QQUnionCheckKey_descriptor_;
}

const QQUnionCheckKey& QQUnionCheckKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

QQUnionCheckKey* QQUnionCheckKey::default_instance_ = NULL;

QQUnionCheckKey* QQUnionCheckKey::New(::google::protobuf::Arena* arena) const {
  QQUnionCheckKey* n = new QQUnionCheckKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QQUnionCheckKey::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QQUnionCheckKey*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, succ_);
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QQUnionCheckKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QQUnionCheckKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 2;
      case 2: {
        if (tag == 16) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required string key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QQUnionCheckKey.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_succ;
        break;
      }

      // optional bool succ = 4;
      case 4: {
        if (tag == 32) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QQUnionCheckKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QQUnionCheckKey)
  return false;
#undef DO_
}

void QQUnionCheckKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QQUnionCheckKey)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 adminfd = 2;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adminfd(), output);
  }

  // required string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QQUnionCheckKey.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // optional bool succ = 4;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QQUnionCheckKey)
}

::google::protobuf::uint8* QQUnionCheckKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QQUnionCheckKey)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 adminfd = 2;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adminfd(), target);
  }

  // required string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QQUnionCheckKey.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional bool succ = 4;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QQUnionCheckKey)
  return target;
}

int QQUnionCheckKey::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_adminfd()) {
    // required int32 adminfd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_key()) {
    // required string key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  return total_size;
}
int QQUnionCheckKey::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 adminfd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required string key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool succ = 4;
  if (has_succ()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QQUnionCheckKey::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QQUnionCheckKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QQUnionCheckKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QQUnionCheckKey::MergeFrom(const QQUnionCheckKey& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QQUnionCheckKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QQUnionCheckKey::CopyFrom(const QQUnionCheckKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QQUnionCheckKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void QQUnionCheckKey::Swap(QQUnionCheckKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QQUnionCheckKey::InternalSwap(QQUnionCheckKey* other) {
  std::swap(adminfd_, other->adminfd_);
  std::swap(id_, other->id_);
  key_.Swap(&other->key_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QQUnionCheckKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QQUnionCheckKey_descriptor_;
  metadata.reflection = QQUnionCheckKey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QQUnionCheckKey

// required int32 adminfd = 2;
 bool QQUnionCheckKey::has_adminfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void QQUnionCheckKey::set_has_adminfd() {
  _has_bits_[0] |= 0x00000001u;
}
 void QQUnionCheckKey::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void QQUnionCheckKey::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 QQUnionCheckKey::adminfd() const {
  // @@protoc_insertion_point(field_get:QQUnionCheckKey.adminfd)
  return adminfd_;
}
 void QQUnionCheckKey::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:QQUnionCheckKey.adminfd)
}

// required int64 id = 1;
 bool QQUnionCheckKey::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void QQUnionCheckKey::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void QQUnionCheckKey::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void QQUnionCheckKey::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 QQUnionCheckKey::id() const {
  // @@protoc_insertion_point(field_get:QQUnionCheckKey.id)
  return id_;
}
 void QQUnionCheckKey::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:QQUnionCheckKey.id)
}

// required string key = 3;
 bool QQUnionCheckKey::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void QQUnionCheckKey::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
 void QQUnionCheckKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
 void QQUnionCheckKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& QQUnionCheckKey::key() const {
  // @@protoc_insertion_point(field_get:QQUnionCheckKey.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QQUnionCheckKey::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QQUnionCheckKey.key)
}
 void QQUnionCheckKey::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QQUnionCheckKey.key)
}
 void QQUnionCheckKey::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QQUnionCheckKey.key)
}
 ::std::string* QQUnionCheckKey::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:QQUnionCheckKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QQUnionCheckKey::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QQUnionCheckKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:QQUnionCheckKey.key)
}

// optional bool succ = 4;
 bool QQUnionCheckKey::has_succ() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void QQUnionCheckKey::set_has_succ() {
  _has_bits_[0] |= 0x00000008u;
}
 void QQUnionCheckKey::clear_has_succ() {
  _has_bits_[0] &= ~0x00000008u;
}
 void QQUnionCheckKey::clear_succ() {
  succ_ = false;
  clear_has_succ();
}
 bool QQUnionCheckKey::succ() const {
  // @@protoc_insertion_point(field_get:QQUnionCheckKey.succ)
  return succ_;
}
 void QQUnionCheckKey::set_succ(bool value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:QQUnionCheckKey.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QQUnionCheckOpenId::kAdminfdFieldNumber;
const int QQUnionCheckOpenId::kIdFieldNumber;
const int QQUnionCheckOpenId::kOpenidFieldNumber;
const int QQUnionCheckOpenId::kSuccFieldNumber;
#endif  // !_MSC_VER

QQUnionCheckOpenId::QQUnionCheckOpenId()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QQUnionCheckOpenId)
}

void QQUnionCheckOpenId::InitAsDefaultInstance() {
}

QQUnionCheckOpenId::QQUnionCheckOpenId(const QQUnionCheckOpenId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QQUnionCheckOpenId)
}

void QQUnionCheckOpenId::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adminfd_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  succ_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QQUnionCheckOpenId::~QQUnionCheckOpenId() {
  // @@protoc_insertion_point(destructor:QQUnionCheckOpenId)
  SharedDtor();
}

void QQUnionCheckOpenId::SharedDtor() {
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QQUnionCheckOpenId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QQUnionCheckOpenId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QQUnionCheckOpenId_descriptor_;
}

const QQUnionCheckOpenId& QQUnionCheckOpenId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

QQUnionCheckOpenId* QQUnionCheckOpenId::default_instance_ = NULL;

QQUnionCheckOpenId* QQUnionCheckOpenId::New(::google::protobuf::Arena* arena) const {
  QQUnionCheckOpenId* n = new QQUnionCheckOpenId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QQUnionCheckOpenId::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QQUnionCheckOpenId*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, succ_);
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QQUnionCheckOpenId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QQUnionCheckOpenId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 2;
      case 2: {
        if (tag == 16) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_openid;
        break;
      }

      // required string openid = 3;
      case 3: {
        if (tag == 26) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QQUnionCheckOpenId.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_succ;
        break;
      }

      // optional bool succ = 4;
      case 4: {
        if (tag == 32) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QQUnionCheckOpenId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QQUnionCheckOpenId)
  return false;
#undef DO_
}

void QQUnionCheckOpenId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QQUnionCheckOpenId)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 adminfd = 2;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adminfd(), output);
  }

  // required string openid = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QQUnionCheckOpenId.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->openid(), output);
  }

  // optional bool succ = 4;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QQUnionCheckOpenId)
}

::google::protobuf::uint8* QQUnionCheckOpenId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QQUnionCheckOpenId)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 adminfd = 2;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adminfd(), target);
  }

  // required string openid = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QQUnionCheckOpenId.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->openid(), target);
  }

  // optional bool succ = 4;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QQUnionCheckOpenId)
  return target;
}

int QQUnionCheckOpenId::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_adminfd()) {
    // required int32 adminfd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_openid()) {
    // required string openid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openid());
  }

  return total_size;
}
int QQUnionCheckOpenId::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 adminfd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required string openid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool succ = 4;
  if (has_succ()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QQUnionCheckOpenId::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QQUnionCheckOpenId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QQUnionCheckOpenId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QQUnionCheckOpenId::MergeFrom(const QQUnionCheckOpenId& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QQUnionCheckOpenId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QQUnionCheckOpenId::CopyFrom(const QQUnionCheckOpenId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QQUnionCheckOpenId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void QQUnionCheckOpenId::Swap(QQUnionCheckOpenId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QQUnionCheckOpenId::InternalSwap(QQUnionCheckOpenId* other) {
  std::swap(adminfd_, other->adminfd_);
  std::swap(id_, other->id_);
  openid_.Swap(&other->openid_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QQUnionCheckOpenId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QQUnionCheckOpenId_descriptor_;
  metadata.reflection = QQUnionCheckOpenId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QQUnionCheckOpenId

// required int32 adminfd = 2;
 bool QQUnionCheckOpenId::has_adminfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void QQUnionCheckOpenId::set_has_adminfd() {
  _has_bits_[0] |= 0x00000001u;
}
 void QQUnionCheckOpenId::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void QQUnionCheckOpenId::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 QQUnionCheckOpenId::adminfd() const {
  // @@protoc_insertion_point(field_get:QQUnionCheckOpenId.adminfd)
  return adminfd_;
}
 void QQUnionCheckOpenId::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:QQUnionCheckOpenId.adminfd)
}

// required int64 id = 1;
 bool QQUnionCheckOpenId::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void QQUnionCheckOpenId::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void QQUnionCheckOpenId::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void QQUnionCheckOpenId::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 QQUnionCheckOpenId::id() const {
  // @@protoc_insertion_point(field_get:QQUnionCheckOpenId.id)
  return id_;
}
 void QQUnionCheckOpenId::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:QQUnionCheckOpenId.id)
}

// required string openid = 3;
 bool QQUnionCheckOpenId::has_openid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void QQUnionCheckOpenId::set_has_openid() {
  _has_bits_[0] |= 0x00000004u;
}
 void QQUnionCheckOpenId::clear_has_openid() {
  _has_bits_[0] &= ~0x00000004u;
}
 void QQUnionCheckOpenId::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& QQUnionCheckOpenId::openid() const {
  // @@protoc_insertion_point(field_get:QQUnionCheckOpenId.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QQUnionCheckOpenId::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QQUnionCheckOpenId.openid)
}
 void QQUnionCheckOpenId::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QQUnionCheckOpenId.openid)
}
 void QQUnionCheckOpenId::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QQUnionCheckOpenId.openid)
}
 ::std::string* QQUnionCheckOpenId::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:QQUnionCheckOpenId.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QQUnionCheckOpenId::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QQUnionCheckOpenId::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:QQUnionCheckOpenId.openid)
}

// optional bool succ = 4;
 bool QQUnionCheckOpenId::has_succ() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void QQUnionCheckOpenId::set_has_succ() {
  _has_bits_[0] |= 0x00000008u;
}
 void QQUnionCheckOpenId::clear_has_succ() {
  _has_bits_[0] &= ~0x00000008u;
}
 void QQUnionCheckOpenId::clear_succ() {
  succ_ = false;
  clear_has_succ();
}
 bool QQUnionCheckOpenId::succ() const {
  // @@protoc_insertion_point(field_get:QQUnionCheckOpenId.succ)
  return succ_;
}
 void QQUnionCheckOpenId::set_succ(bool value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:QQUnionCheckOpenId.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QQUnionAddItem::kAdminfdFieldNumber;
const int QQUnionAddItem::kIdFieldNumber;
const int QQUnionAddItem::kTypeidFieldNumber;
const int QQUnionAddItem::kNumFieldNumber;
const int QQUnionAddItem::kKeyFieldNumber;
const int QQUnionAddItem::kSuccFieldNumber;
#endif  // !_MSC_VER

QQUnionAddItem::QQUnionAddItem()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QQUnionAddItem)
}

void QQUnionAddItem::InitAsDefaultInstance() {
}

QQUnionAddItem::QQUnionAddItem(const QQUnionAddItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QQUnionAddItem)
}

void QQUnionAddItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adminfd_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  typeid__ = 0;
  num_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  succ_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QQUnionAddItem::~QQUnionAddItem() {
  // @@protoc_insertion_point(destructor:QQUnionAddItem)
  SharedDtor();
}

void QQUnionAddItem::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QQUnionAddItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QQUnionAddItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QQUnionAddItem_descriptor_;
}

const QQUnionAddItem& QQUnionAddItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

QQUnionAddItem* QQUnionAddItem::default_instance_ = NULL;

QQUnionAddItem* QQUnionAddItem::New(::google::protobuf::Arena* arena) const {
  QQUnionAddItem* n = new QQUnionAddItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QQUnionAddItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QQUnionAddItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, typeid__);
    ZR_(num_, succ_);
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QQUnionAddItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QQUnionAddItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adminfd;
        break;
      }

      // required int32 adminfd = 2;
      case 2: {
        if (tag == 16) {
         parse_adminfd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adminfd_)));
          set_has_adminfd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_typeid;
        break;
      }

      // required int32 typeid = 4;
      case 4: {
        if (tag == 32) {
         parse_typeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // required int32 num = 5;
      case 5: {
        if (tag == 40) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_key;
        break;
      }

      // required string key = 6;
      case 6: {
        if (tag == 50) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QQUnionAddItem.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_succ;
        break;
      }

      // optional bool succ = 7;
      case 7: {
        if (tag == 56) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QQUnionAddItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QQUnionAddItem)
  return false;
#undef DO_
}

void QQUnionAddItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QQUnionAddItem)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 adminfd = 2;
  if (has_adminfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adminfd(), output);
  }

  // required int32 typeid = 4;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->typeid_(), output);
  }

  // required int32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num(), output);
  }

  // required string key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QQUnionAddItem.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->key(), output);
  }

  // optional bool succ = 7;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QQUnionAddItem)
}

::google::protobuf::uint8* QQUnionAddItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QQUnionAddItem)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 adminfd = 2;
  if (has_adminfd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adminfd(), target);
  }

  // required int32 typeid = 4;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->typeid_(), target);
  }

  // required int32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num(), target);
  }

  // required string key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QQUnionAddItem.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->key(), target);
  }

  // optional bool succ = 7;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QQUnionAddItem)
  return target;
}

int QQUnionAddItem::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_adminfd()) {
    // required int32 adminfd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());
  }

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_typeid_()) {
    // required int32 typeid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_num()) {
    // required int32 num = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  if (has_key()) {
    // required string key = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  return total_size;
}
int QQUnionAddItem::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 adminfd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adminfd());

    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int32 typeid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 num = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());

    // required string key = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool succ = 7;
  if (has_succ()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QQUnionAddItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QQUnionAddItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QQUnionAddItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QQUnionAddItem::MergeFrom(const QQUnionAddItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adminfd()) {
      set_adminfd(from.adminfd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QQUnionAddItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QQUnionAddItem::CopyFrom(const QQUnionAddItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QQUnionAddItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void QQUnionAddItem::Swap(QQUnionAddItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QQUnionAddItem::InternalSwap(QQUnionAddItem* other) {
  std::swap(adminfd_, other->adminfd_);
  std::swap(id_, other->id_);
  std::swap(typeid__, other->typeid__);
  std::swap(num_, other->num_);
  key_.Swap(&other->key_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QQUnionAddItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QQUnionAddItem_descriptor_;
  metadata.reflection = QQUnionAddItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QQUnionAddItem

// required int32 adminfd = 2;
 bool QQUnionAddItem::has_adminfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void QQUnionAddItem::set_has_adminfd() {
  _has_bits_[0] |= 0x00000001u;
}
 void QQUnionAddItem::clear_has_adminfd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void QQUnionAddItem::clear_adminfd() {
  adminfd_ = 0;
  clear_has_adminfd();
}
 ::google::protobuf::int32 QQUnionAddItem::adminfd() const {
  // @@protoc_insertion_point(field_get:QQUnionAddItem.adminfd)
  return adminfd_;
}
 void QQUnionAddItem::set_adminfd(::google::protobuf::int32 value) {
  set_has_adminfd();
  adminfd_ = value;
  // @@protoc_insertion_point(field_set:QQUnionAddItem.adminfd)
}

// required int64 id = 1;
 bool QQUnionAddItem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void QQUnionAddItem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
 void QQUnionAddItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
 void QQUnionAddItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 QQUnionAddItem::id() const {
  // @@protoc_insertion_point(field_get:QQUnionAddItem.id)
  return id_;
}
 void QQUnionAddItem::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:QQUnionAddItem.id)
}

// required int32 typeid = 4;
 bool QQUnionAddItem::has_typeid_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void QQUnionAddItem::set_has_typeid_() {
  _has_bits_[0] |= 0x00000004u;
}
 void QQUnionAddItem::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000004u;
}
 void QQUnionAddItem::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
 ::google::protobuf::int32 QQUnionAddItem::typeid_() const {
  // @@protoc_insertion_point(field_get:QQUnionAddItem.typeid)
  return typeid__;
}
 void QQUnionAddItem::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:QQUnionAddItem.typeid)
}

// required int32 num = 5;
 bool QQUnionAddItem::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void QQUnionAddItem::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
 void QQUnionAddItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
 void QQUnionAddItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
 ::google::protobuf::int32 QQUnionAddItem::num() const {
  // @@protoc_insertion_point(field_get:QQUnionAddItem.num)
  return num_;
}
 void QQUnionAddItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:QQUnionAddItem.num)
}

// required string key = 6;
 bool QQUnionAddItem::has_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void QQUnionAddItem::set_has_key() {
  _has_bits_[0] |= 0x00000010u;
}
 void QQUnionAddItem::clear_has_key() {
  _has_bits_[0] &= ~0x00000010u;
}
 void QQUnionAddItem::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& QQUnionAddItem::key() const {
  // @@protoc_insertion_point(field_get:QQUnionAddItem.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QQUnionAddItem::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QQUnionAddItem.key)
}
 void QQUnionAddItem::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QQUnionAddItem.key)
}
 void QQUnionAddItem::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QQUnionAddItem.key)
}
 ::std::string* QQUnionAddItem::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:QQUnionAddItem.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QQUnionAddItem::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QQUnionAddItem::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:QQUnionAddItem.key)
}

// optional bool succ = 7;
 bool QQUnionAddItem::has_succ() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void QQUnionAddItem::set_has_succ() {
  _has_bits_[0] |= 0x00000020u;
}
 void QQUnionAddItem::clear_has_succ() {
  _has_bits_[0] &= ~0x00000020u;
}
 void QQUnionAddItem::clear_succ() {
  succ_ = false;
  clear_has_succ();
}
 bool QQUnionAddItem::succ() const {
  // @@protoc_insertion_point(field_get:QQUnionAddItem.succ)
  return succ_;
}
 void QQUnionAddItem::set_succ(bool value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:QQUnionAddItem.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Wap_Str_Request::kFdFieldNumber;
const int Wap_Str_Request::kUidFieldNumber;
const int Wap_Str_Request::kSecretFieldNumber;
const int Wap_Str_Request::kCmdFieldNumber;
#endif  // !_MSC_VER

Wap_Str_Request::Wap_Str_Request()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Wap_Str_Request)
}

void Wap_Str_Request::InitAsDefaultInstance() {
}

Wap_Str_Request::Wap_Str_Request(const Wap_Str_Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Wap_Str_Request)
}

void Wap_Str_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fd_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  secret_ = GOOGLE_LONGLONG(0);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wap_Str_Request::~Wap_Str_Request() {
  // @@protoc_insertion_point(destructor:Wap_Str_Request)
  SharedDtor();
}

void Wap_Str_Request::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Wap_Str_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wap_Str_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wap_Str_Request_descriptor_;
}

const Wap_Str_Request& Wap_Str_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Wap_Str_Request* Wap_Str_Request::default_instance_ = NULL;

Wap_Str_Request* Wap_Str_Request::New(::google::protobuf::Arena* arena) const {
  Wap_Str_Request* n = new Wap_Str_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Wap_Str_Request::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Wap_Str_Request*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uid_, secret_);
    fd_ = 0;
    if (has_cmd()) {
      cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Wap_Str_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Wap_Str_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_secret;
        break;
      }

      // optional int64 secret = 3;
      case 3: {
        if (tag == 24) {
         parse_secret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &secret_)));
          set_has_secret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cmd;
        break;
      }

      // optional string cmd = 4;
      case 4: {
        if (tag == 34) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Wap_Str_Request.cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Wap_Str_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Wap_Str_Request)
  return false;
#undef DO_
}

void Wap_Str_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Wap_Str_Request)
  // optional int32 fd = 1;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fd(), output);
  }

  // optional int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // optional int64 secret = 3;
  if (has_secret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->secret(), output);
  }

  // optional string cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Wap_Str_Request.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Wap_Str_Request)
}

::google::protobuf::uint8* Wap_Str_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Wap_Str_Request)
  // optional int32 fd = 1;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fd(), target);
  }

  // optional int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // optional int64 secret = 3;
  if (has_secret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->secret(), target);
  }

  // optional string cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Wap_Str_Request.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Wap_Str_Request)
  return target;
}

int Wap_Str_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional int32 fd = 1;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int64 secret = 3;
    if (has_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->secret());
    }

    // optional string cmd = 4;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wap_Str_Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Wap_Str_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Wap_Str_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Wap_Str_Request::MergeFrom(const Wap_Str_Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_secret()) {
      set_secret(from.secret());
    }
    if (from.has_cmd()) {
      set_has_cmd();
      cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Wap_Str_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wap_Str_Request::CopyFrom(const Wap_Str_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wap_Str_Request::IsInitialized() const {

  return true;
}

void Wap_Str_Request::Swap(Wap_Str_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wap_Str_Request::InternalSwap(Wap_Str_Request* other) {
  std::swap(fd_, other->fd_);
  std::swap(uid_, other->uid_);
  std::swap(secret_, other->secret_);
  cmd_.Swap(&other->cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Wap_Str_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wap_Str_Request_descriptor_;
  metadata.reflection = Wap_Str_Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Wap_Str_Request

// optional int32 fd = 1;
 bool Wap_Str_Request::has_fd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Wap_Str_Request::set_has_fd() {
  _has_bits_[0] |= 0x00000001u;
}
 void Wap_Str_Request::clear_has_fd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Wap_Str_Request::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 Wap_Str_Request::fd() const {
  // @@protoc_insertion_point(field_get:Wap_Str_Request.fd)
  return fd_;
}
 void Wap_Str_Request::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:Wap_Str_Request.fd)
}

// optional int64 uid = 2;
 bool Wap_Str_Request::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Wap_Str_Request::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Wap_Str_Request::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Wap_Str_Request::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Wap_Str_Request::uid() const {
  // @@protoc_insertion_point(field_get:Wap_Str_Request.uid)
  return uid_;
}
 void Wap_Str_Request::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Wap_Str_Request.uid)
}

// optional int64 secret = 3;
 bool Wap_Str_Request::has_secret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Wap_Str_Request::set_has_secret() {
  _has_bits_[0] |= 0x00000004u;
}
 void Wap_Str_Request::clear_has_secret() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Wap_Str_Request::clear_secret() {
  secret_ = GOOGLE_LONGLONG(0);
  clear_has_secret();
}
 ::google::protobuf::int64 Wap_Str_Request::secret() const {
  // @@protoc_insertion_point(field_get:Wap_Str_Request.secret)
  return secret_;
}
 void Wap_Str_Request::set_secret(::google::protobuf::int64 value) {
  set_has_secret();
  secret_ = value;
  // @@protoc_insertion_point(field_set:Wap_Str_Request.secret)
}

// optional string cmd = 4;
 bool Wap_Str_Request::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Wap_Str_Request::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Wap_Str_Request::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Wap_Str_Request::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
 const ::std::string& Wap_Str_Request::cmd() const {
  // @@protoc_insertion_point(field_get:Wap_Str_Request.cmd)
  return cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Wap_Str_Request::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Wap_Str_Request.cmd)
}
 void Wap_Str_Request::set_cmd(const char* value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Wap_Str_Request.cmd)
}
 void Wap_Str_Request::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Wap_Str_Request.cmd)
}
 ::std::string* Wap_Str_Request::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:Wap_Str_Request.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Wap_Str_Request::release_cmd() {
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Wap_Str_Request::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:Wap_Str_Request.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Wap_Str_Response::kFdFieldNumber;
const int Wap_Str_Response::kUidFieldNumber;
const int Wap_Str_Response::kSecretFieldNumber;
const int Wap_Str_Response::kCmdFieldNumber;
const int Wap_Str_Response::kSuccFieldNumber;
#endif  // !_MSC_VER

Wap_Str_Response::Wap_Str_Response()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Wap_Str_Response)
}

void Wap_Str_Response::InitAsDefaultInstance() {
}

Wap_Str_Response::Wap_Str_Response(const Wap_Str_Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Wap_Str_Response)
}

void Wap_Str_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fd_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  secret_ = GOOGLE_LONGLONG(0);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wap_Str_Response::~Wap_Str_Response() {
  // @@protoc_insertion_point(destructor:Wap_Str_Response)
  SharedDtor();
}

void Wap_Str_Response::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Wap_Str_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wap_Str_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wap_Str_Response_descriptor_;
}

const Wap_Str_Response& Wap_Str_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Wap_Str_Response* Wap_Str_Response::default_instance_ = NULL;

Wap_Str_Response* Wap_Str_Response::New(::google::protobuf::Arena* arena) const {
  Wap_Str_Response* n = new Wap_Str_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Wap_Str_Response::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Wap_Str_Response*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, succ_);
    if (has_cmd()) {
      cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Wap_Str_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Wap_Str_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_secret;
        break;
      }

      // optional int64 secret = 3;
      case 3: {
        if (tag == 24) {
         parse_secret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &secret_)));
          set_has_secret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cmd;
        break;
      }

      // optional string cmd = 4;
      case 4: {
        if (tag == 34) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Wap_Str_Response.cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_succ;
        break;
      }

      // optional int32 succ = 5;
      case 5: {
        if (tag == 40) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Wap_Str_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Wap_Str_Response)
  return false;
#undef DO_
}

void Wap_Str_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Wap_Str_Response)
  // optional int32 fd = 1;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fd(), output);
  }

  // optional int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // optional int64 secret = 3;
  if (has_secret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->secret(), output);
  }

  // optional string cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Wap_Str_Response.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cmd(), output);
  }

  // optional int32 succ = 5;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Wap_Str_Response)
}

::google::protobuf::uint8* Wap_Str_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Wap_Str_Response)
  // optional int32 fd = 1;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fd(), target);
  }

  // optional int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // optional int64 secret = 3;
  if (has_secret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->secret(), target);
  }

  // optional string cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Wap_Str_Response.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cmd(), target);
  }

  // optional int32 succ = 5;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Wap_Str_Response)
  return target;
}

int Wap_Str_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional int32 fd = 1;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int64 secret = 3;
    if (has_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->secret());
    }

    // optional string cmd = 4;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

    // optional int32 succ = 5;
    if (has_succ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->succ());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wap_Str_Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Wap_Str_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Wap_Str_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Wap_Str_Response::MergeFrom(const Wap_Str_Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_secret()) {
      set_secret(from.secret());
    }
    if (from.has_cmd()) {
      set_has_cmd();
      cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Wap_Str_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wap_Str_Response::CopyFrom(const Wap_Str_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wap_Str_Response::IsInitialized() const {

  return true;
}

void Wap_Str_Response::Swap(Wap_Str_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wap_Str_Response::InternalSwap(Wap_Str_Response* other) {
  std::swap(fd_, other->fd_);
  std::swap(uid_, other->uid_);
  std::swap(secret_, other->secret_);
  cmd_.Swap(&other->cmd_);
  std::swap(succ_, other->succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Wap_Str_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wap_Str_Response_descriptor_;
  metadata.reflection = Wap_Str_Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Wap_Str_Response

// optional int32 fd = 1;
 bool Wap_Str_Response::has_fd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Wap_Str_Response::set_has_fd() {
  _has_bits_[0] |= 0x00000001u;
}
 void Wap_Str_Response::clear_has_fd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Wap_Str_Response::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 Wap_Str_Response::fd() const {
  // @@protoc_insertion_point(field_get:Wap_Str_Response.fd)
  return fd_;
}
 void Wap_Str_Response::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:Wap_Str_Response.fd)
}

// optional int64 uid = 2;
 bool Wap_Str_Response::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Wap_Str_Response::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
 void Wap_Str_Response::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Wap_Str_Response::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Wap_Str_Response::uid() const {
  // @@protoc_insertion_point(field_get:Wap_Str_Response.uid)
  return uid_;
}
 void Wap_Str_Response::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Wap_Str_Response.uid)
}

// optional int64 secret = 3;
 bool Wap_Str_Response::has_secret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Wap_Str_Response::set_has_secret() {
  _has_bits_[0] |= 0x00000004u;
}
 void Wap_Str_Response::clear_has_secret() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Wap_Str_Response::clear_secret() {
  secret_ = GOOGLE_LONGLONG(0);
  clear_has_secret();
}
 ::google::protobuf::int64 Wap_Str_Response::secret() const {
  // @@protoc_insertion_point(field_get:Wap_Str_Response.secret)
  return secret_;
}
 void Wap_Str_Response::set_secret(::google::protobuf::int64 value) {
  set_has_secret();
  secret_ = value;
  // @@protoc_insertion_point(field_set:Wap_Str_Response.secret)
}

// optional string cmd = 4;
 bool Wap_Str_Response::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Wap_Str_Response::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
 void Wap_Str_Response::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Wap_Str_Response::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
 const ::std::string& Wap_Str_Response::cmd() const {
  // @@protoc_insertion_point(field_get:Wap_Str_Response.cmd)
  return cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Wap_Str_Response::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Wap_Str_Response.cmd)
}
 void Wap_Str_Response::set_cmd(const char* value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Wap_Str_Response.cmd)
}
 void Wap_Str_Response::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Wap_Str_Response.cmd)
}
 ::std::string* Wap_Str_Response::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:Wap_Str_Response.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Wap_Str_Response::release_cmd() {
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Wap_Str_Response::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:Wap_Str_Response.cmd)
}

// optional int32 succ = 5;
 bool Wap_Str_Response::has_succ() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Wap_Str_Response::set_has_succ() {
  _has_bits_[0] |= 0x00000010u;
}
 void Wap_Str_Response::clear_has_succ() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Wap_Str_Response::clear_succ() {
  succ_ = 0;
  clear_has_succ();
}
 ::google::protobuf::int32 Wap_Str_Response::succ() const {
  // @@protoc_insertion_point(field_get:Wap_Str_Response.succ)
  return succ_;
}
 void Wap_Str_Response::set_succ(::google::protobuf::int32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:Wap_Str_Response.succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int HttpRequestV3::kUrlFieldNumber;
const int HttpRequestV3::kPostdataFieldNumber;
#endif  // !_MSC_VER

HttpRequestV3::HttpRequestV3()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HttpRequestV3)
}

void HttpRequestV3::InitAsDefaultInstance() {
}

HttpRequestV3::HttpRequestV3(const HttpRequestV3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HttpRequestV3)
}

void HttpRequestV3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpRequestV3::~HttpRequestV3() {
  // @@protoc_insertion_point(destructor:HttpRequestV3)
  SharedDtor();
}

void HttpRequestV3::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HttpRequestV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpRequestV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpRequestV3_descriptor_;
}

const HttpRequestV3& HttpRequestV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

HttpRequestV3* HttpRequestV3::default_instance_ = NULL;

HttpRequestV3* HttpRequestV3::New(::google::protobuf::Arena* arena) const {
  HttpRequestV3* n = new HttpRequestV3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpRequestV3::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_postdata()) {
      postdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HttpRequestV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HttpRequestV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HttpRequestV3.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_postdata;
        break;
      }

      // optional string postdata = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_postdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postdata().data(), this->postdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HttpRequestV3.postdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HttpRequestV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HttpRequestV3)
  return false;
#undef DO_
}

void HttpRequestV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HttpRequestV3)
  // optional string url = 1 [default = ""];
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpRequestV3.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string postdata = 2 [default = ""];
  if (has_postdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postdata().data(), this->postdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpRequestV3.postdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->postdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HttpRequestV3)
}

::google::protobuf::uint8* HttpRequestV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HttpRequestV3)
  // optional string url = 1 [default = ""];
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpRequestV3.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string postdata = 2 [default = ""];
  if (has_postdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postdata().data(), this->postdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpRequestV3.postdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->postdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HttpRequestV3)
  return target;
}

int HttpRequestV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional string url = 1 [default = ""];
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string postdata = 2 [default = ""];
    if (has_postdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postdata());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpRequestV3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HttpRequestV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpRequestV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpRequestV3::MergeFrom(const HttpRequestV3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_postdata()) {
      set_has_postdata();
      postdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postdata_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HttpRequestV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpRequestV3::CopyFrom(const HttpRequestV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRequestV3::IsInitialized() const {

  return true;
}

void HttpRequestV3::Swap(HttpRequestV3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpRequestV3::InternalSwap(HttpRequestV3* other) {
  url_.Swap(&other->url_);
  postdata_.Swap(&other->postdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpRequestV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpRequestV3_descriptor_;
  metadata.reflection = HttpRequestV3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpRequestV3

// optional string url = 1 [default = ""];
 bool HttpRequestV3::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void HttpRequestV3::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
 void HttpRequestV3::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
 void HttpRequestV3::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& HttpRequestV3::url() const {
  // @@protoc_insertion_point(field_get:HttpRequestV3.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRequestV3::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HttpRequestV3.url)
}
 void HttpRequestV3::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HttpRequestV3.url)
}
 void HttpRequestV3::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HttpRequestV3.url)
}
 ::std::string* HttpRequestV3::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:HttpRequestV3.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpRequestV3::release_url() {
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRequestV3::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:HttpRequestV3.url)
}

// optional string postdata = 2 [default = ""];
 bool HttpRequestV3::has_postdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void HttpRequestV3::set_has_postdata() {
  _has_bits_[0] |= 0x00000002u;
}
 void HttpRequestV3::clear_has_postdata() {
  _has_bits_[0] &= ~0x00000002u;
}
 void HttpRequestV3::clear_postdata() {
  postdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_postdata();
}
 const ::std::string& HttpRequestV3::postdata() const {
  // @@protoc_insertion_point(field_get:HttpRequestV3.postdata)
  return postdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRequestV3::set_postdata(const ::std::string& value) {
  set_has_postdata();
  postdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HttpRequestV3.postdata)
}
 void HttpRequestV3::set_postdata(const char* value) {
  set_has_postdata();
  postdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HttpRequestV3.postdata)
}
 void HttpRequestV3::set_postdata(const char* value, size_t size) {
  set_has_postdata();
  postdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HttpRequestV3.postdata)
}
 ::std::string* HttpRequestV3::mutable_postdata() {
  set_has_postdata();
  // @@protoc_insertion_point(field_mutable:HttpRequestV3.postdata)
  return postdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpRequestV3::release_postdata() {
  clear_has_postdata();
  return postdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRequestV3::set_allocated_postdata(::std::string* postdata) {
  if (postdata != NULL) {
    set_has_postdata();
  } else {
    clear_has_postdata();
  }
  postdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postdata);
  // @@protoc_insertion_point(field_set_allocated:HttpRequestV3.postdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SimpleMarkUser::kUidFieldNumber;
const int SimpleMarkUser::kOpenidFieldNumber;
const int SimpleMarkUser::kTypeFieldNumber;
const int SimpleMarkUser::kValueFieldNumber;
const int SimpleMarkUser::kSvalueFieldNumber;
#endif  // !_MSC_VER

SimpleMarkUser::SimpleMarkUser()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SimpleMarkUser)
}

void SimpleMarkUser::InitAsDefaultInstance() {
}

SimpleMarkUser::SimpleMarkUser(const SimpleMarkUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SimpleMarkUser)
}

void SimpleMarkUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  svalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleMarkUser::~SimpleMarkUser() {
  // @@protoc_insertion_point(destructor:SimpleMarkUser)
  SharedDtor();
}

void SimpleMarkUser::SharedDtor() {
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SimpleMarkUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleMarkUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleMarkUser_descriptor_;
}

const SimpleMarkUser& SimpleMarkUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

SimpleMarkUser* SimpleMarkUser::default_instance_ = NULL;

SimpleMarkUser* SimpleMarkUser::New(::google::protobuf::Arena* arena) const {
  SimpleMarkUser* n = new SimpleMarkUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleMarkUser::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    uid_ = GOOGLE_LONGLONG(0);
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 0;
    value_ = GOOGLE_LONGLONG(0);
    if (has_svalue()) {
      svalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SimpleMarkUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SimpleMarkUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SimpleMarkUser.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional int64 value = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_svalue;
        break;
      }

      // optional string svalue = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_svalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->svalue().data(), this->svalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SimpleMarkUser.svalue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SimpleMarkUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SimpleMarkUser)
  return false;
#undef DO_
}

void SimpleMarkUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SimpleMarkUser)
  // optional int64 uid = 1 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional string openid = 2 [default = ""];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SimpleMarkUser.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->openid(), output);
  }

  // optional int32 type = 3 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int64 value = 4 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->value(), output);
  }

  // optional string svalue = 5 [default = ""];
  if (has_svalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->svalue().data(), this->svalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SimpleMarkUser.svalue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->svalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SimpleMarkUser)
}

::google::protobuf::uint8* SimpleMarkUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimpleMarkUser)
  // optional int64 uid = 1 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional string openid = 2 [default = ""];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SimpleMarkUser.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // optional int32 type = 3 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int64 value = 4 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->value(), target);
  }

  // optional string svalue = 5 [default = ""];
  if (has_svalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->svalue().data(), this->svalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SimpleMarkUser.svalue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->svalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimpleMarkUser)
  return target;
}

int SimpleMarkUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional int64 uid = 1 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional string openid = 2 [default = ""];
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional int32 type = 3 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 value = 4 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional string svalue = 5 [default = ""];
    if (has_svalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svalue());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleMarkUser::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SimpleMarkUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleMarkUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleMarkUser::MergeFrom(const SimpleMarkUser& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_svalue()) {
      set_has_svalue();
      svalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.svalue_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SimpleMarkUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMarkUser::CopyFrom(const SimpleMarkUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMarkUser::IsInitialized() const {

  return true;
}

void SimpleMarkUser::Swap(SimpleMarkUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleMarkUser::InternalSwap(SimpleMarkUser* other) {
  std::swap(uid_, other->uid_);
  openid_.Swap(&other->openid_);
  std::swap(type_, other->type_);
  std::swap(value_, other->value_);
  svalue_.Swap(&other->svalue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleMarkUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleMarkUser_descriptor_;
  metadata.reflection = SimpleMarkUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleMarkUser

// optional int64 uid = 1 [default = 0];
 bool SimpleMarkUser::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void SimpleMarkUser::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void SimpleMarkUser::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void SimpleMarkUser::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 SimpleMarkUser::uid() const {
  // @@protoc_insertion_point(field_get:SimpleMarkUser.uid)
  return uid_;
}
 void SimpleMarkUser::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:SimpleMarkUser.uid)
}

// optional string openid = 2 [default = ""];
 bool SimpleMarkUser::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void SimpleMarkUser::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
 void SimpleMarkUser::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void SimpleMarkUser::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& SimpleMarkUser::openid() const {
  // @@protoc_insertion_point(field_get:SimpleMarkUser.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleMarkUser::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SimpleMarkUser.openid)
}
 void SimpleMarkUser::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SimpleMarkUser.openid)
}
 void SimpleMarkUser::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SimpleMarkUser.openid)
}
 ::std::string* SimpleMarkUser::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:SimpleMarkUser.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimpleMarkUser::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleMarkUser::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:SimpleMarkUser.openid)
}

// optional int32 type = 3 [default = 0];
 bool SimpleMarkUser::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void SimpleMarkUser::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
 void SimpleMarkUser::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
 void SimpleMarkUser::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 SimpleMarkUser::type() const {
  // @@protoc_insertion_point(field_get:SimpleMarkUser.type)
  return type_;
}
 void SimpleMarkUser::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SimpleMarkUser.type)
}

// optional int64 value = 4 [default = 0];
 bool SimpleMarkUser::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void SimpleMarkUser::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
 void SimpleMarkUser::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
 void SimpleMarkUser::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
 ::google::protobuf::int64 SimpleMarkUser::value() const {
  // @@protoc_insertion_point(field_get:SimpleMarkUser.value)
  return value_;
}
 void SimpleMarkUser::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:SimpleMarkUser.value)
}

// optional string svalue = 5 [default = ""];
 bool SimpleMarkUser::has_svalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void SimpleMarkUser::set_has_svalue() {
  _has_bits_[0] |= 0x00000010u;
}
 void SimpleMarkUser::clear_has_svalue() {
  _has_bits_[0] &= ~0x00000010u;
}
 void SimpleMarkUser::clear_svalue() {
  svalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_svalue();
}
 const ::std::string& SimpleMarkUser::svalue() const {
  // @@protoc_insertion_point(field_get:SimpleMarkUser.svalue)
  return svalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleMarkUser::set_svalue(const ::std::string& value) {
  set_has_svalue();
  svalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SimpleMarkUser.svalue)
}
 void SimpleMarkUser::set_svalue(const char* value) {
  set_has_svalue();
  svalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SimpleMarkUser.svalue)
}
 void SimpleMarkUser::set_svalue(const char* value, size_t size) {
  set_has_svalue();
  svalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SimpleMarkUser.svalue)
}
 ::std::string* SimpleMarkUser::mutable_svalue() {
  set_has_svalue();
  // @@protoc_insertion_point(field_mutable:SimpleMarkUser.svalue)
  return svalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimpleMarkUser::release_svalue() {
  clear_has_svalue();
  return svalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleMarkUser::set_allocated_svalue(::std::string* svalue) {
  if (svalue != NULL) {
    set_has_svalue();
  } else {
    clear_has_svalue();
  }
  svalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), svalue);
  // @@protoc_insertion_point(field_set_allocated:SimpleMarkUser.svalue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InviteFriendLvlSucc::kUidFieldNumber;
const int InviteFriendLvlSucc::kOpenidFieldNumber;
const int InviteFriendLvlSucc::kUrlFieldNumber;
const int InviteFriendLvlSucc::kLvlFieldNumber;
const int InviteFriendLvlSucc::kNowlogindayFieldNumber;
#endif  // !_MSC_VER

InviteFriendLvlSucc::InviteFriendLvlSucc()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InviteFriendLvlSucc)
}

void InviteFriendLvlSucc::InitAsDefaultInstance() {
}

InviteFriendLvlSucc::InviteFriendLvlSucc(const InviteFriendLvlSucc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InviteFriendLvlSucc)
}

void InviteFriendLvlSucc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lvl_ = 0;
  nowloginday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteFriendLvlSucc::~InviteFriendLvlSucc() {
  // @@protoc_insertion_point(destructor:InviteFriendLvlSucc)
  SharedDtor();
}

void InviteFriendLvlSucc::SharedDtor() {
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InviteFriendLvlSucc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteFriendLvlSucc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteFriendLvlSucc_descriptor_;
}

const InviteFriendLvlSucc& InviteFriendLvlSucc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

InviteFriendLvlSucc* InviteFriendLvlSucc::default_instance_ = NULL;

InviteFriendLvlSucc* InviteFriendLvlSucc::New(::google::protobuf::Arena* arena) const {
  InviteFriendLvlSucc* n = new InviteFriendLvlSucc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InviteFriendLvlSucc::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InviteFriendLvlSucc*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(lvl_, nowloginday_);
    uid_ = GOOGLE_LONGLONG(0);
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InviteFriendLvlSucc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InviteFriendLvlSucc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InviteFriendLvlSucc.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InviteFriendLvlSucc.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lvl;
        break;
      }

      // optional int32 lvl = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nowloginday;
        break;
      }

      // optional int32 nowloginday = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_nowloginday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nowloginday_)));
          set_has_nowloginday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InviteFriendLvlSucc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InviteFriendLvlSucc)
  return false;
#undef DO_
}

void InviteFriendLvlSucc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InviteFriendLvlSucc)
  // optional int64 uid = 1 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional string openid = 2 [default = ""];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InviteFriendLvlSucc.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->openid(), output);
  }

  // optional string url = 3 [default = ""];
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InviteFriendLvlSucc.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional int32 lvl = 4 [default = 0];
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lvl(), output);
  }

  // optional int32 nowloginday = 5 [default = 0];
  if (has_nowloginday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nowloginday(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InviteFriendLvlSucc)
}

::google::protobuf::uint8* InviteFriendLvlSucc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InviteFriendLvlSucc)
  // optional int64 uid = 1 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional string openid = 2 [default = ""];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InviteFriendLvlSucc.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // optional string url = 3 [default = ""];
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InviteFriendLvlSucc.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional int32 lvl = 4 [default = 0];
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lvl(), target);
  }

  // optional int32 nowloginday = 5 [default = 0];
  if (has_nowloginday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nowloginday(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InviteFriendLvlSucc)
  return target;
}

int InviteFriendLvlSucc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional int64 uid = 1 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional string openid = 2 [default = ""];
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string url = 3 [default = ""];
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 lvl = 4 [default = 0];
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvl());
    }

    // optional int32 nowloginday = 5 [default = 0];
    if (has_nowloginday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nowloginday());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteFriendLvlSucc::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InviteFriendLvlSucc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteFriendLvlSucc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteFriendLvlSucc::MergeFrom(const InviteFriendLvlSucc& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_nowloginday()) {
      set_nowloginday(from.nowloginday());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InviteFriendLvlSucc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteFriendLvlSucc::CopyFrom(const InviteFriendLvlSucc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteFriendLvlSucc::IsInitialized() const {

  return true;
}

void InviteFriendLvlSucc::Swap(InviteFriendLvlSucc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteFriendLvlSucc::InternalSwap(InviteFriendLvlSucc* other) {
  std::swap(uid_, other->uid_);
  openid_.Swap(&other->openid_);
  url_.Swap(&other->url_);
  std::swap(lvl_, other->lvl_);
  std::swap(nowloginday_, other->nowloginday_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InviteFriendLvlSucc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteFriendLvlSucc_descriptor_;
  metadata.reflection = InviteFriendLvlSucc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InviteFriendLvlSucc

// optional int64 uid = 1 [default = 0];
 bool InviteFriendLvlSucc::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void InviteFriendLvlSucc::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
 void InviteFriendLvlSucc::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void InviteFriendLvlSucc::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 InviteFriendLvlSucc::uid() const {
  // @@protoc_insertion_point(field_get:InviteFriendLvlSucc.uid)
  return uid_;
}
 void InviteFriendLvlSucc::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:InviteFriendLvlSucc.uid)
}

// optional string openid = 2 [default = ""];
 bool InviteFriendLvlSucc::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void InviteFriendLvlSucc::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
 void InviteFriendLvlSucc::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
 void InviteFriendLvlSucc::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& InviteFriendLvlSucc::openid() const {
  // @@protoc_insertion_point(field_get:InviteFriendLvlSucc.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InviteFriendLvlSucc::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InviteFriendLvlSucc.openid)
}
 void InviteFriendLvlSucc::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InviteFriendLvlSucc.openid)
}
 void InviteFriendLvlSucc::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InviteFriendLvlSucc.openid)
}
 ::std::string* InviteFriendLvlSucc::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:InviteFriendLvlSucc.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InviteFriendLvlSucc::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InviteFriendLvlSucc::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:InviteFriendLvlSucc.openid)
}

// optional string url = 3 [default = ""];
 bool InviteFriendLvlSucc::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void InviteFriendLvlSucc::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
 void InviteFriendLvlSucc::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
 void InviteFriendLvlSucc::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& InviteFriendLvlSucc::url() const {
  // @@protoc_insertion_point(field_get:InviteFriendLvlSucc.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InviteFriendLvlSucc::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InviteFriendLvlSucc.url)
}
 void InviteFriendLvlSucc::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InviteFriendLvlSucc.url)
}
 void InviteFriendLvlSucc::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InviteFriendLvlSucc.url)
}
 ::std::string* InviteFriendLvlSucc::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:InviteFriendLvlSucc.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InviteFriendLvlSucc::release_url() {
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InviteFriendLvlSucc::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:InviteFriendLvlSucc.url)
}

// optional int32 lvl = 4 [default = 0];
 bool InviteFriendLvlSucc::has_lvl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void InviteFriendLvlSucc::set_has_lvl() {
  _has_bits_[0] |= 0x00000008u;
}
 void InviteFriendLvlSucc::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000008u;
}
 void InviteFriendLvlSucc::clear_lvl() {
  lvl_ = 0;
  clear_has_lvl();
}
 ::google::protobuf::int32 InviteFriendLvlSucc::lvl() const {
  // @@protoc_insertion_point(field_get:InviteFriendLvlSucc.lvl)
  return lvl_;
}
 void InviteFriendLvlSucc::set_lvl(::google::protobuf::int32 value) {
  set_has_lvl();
  lvl_ = value;
  // @@protoc_insertion_point(field_set:InviteFriendLvlSucc.lvl)
}

// optional int32 nowloginday = 5 [default = 0];
 bool InviteFriendLvlSucc::has_nowloginday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void InviteFriendLvlSucc::set_has_nowloginday() {
  _has_bits_[0] |= 0x00000010u;
}
 void InviteFriendLvlSucc::clear_has_nowloginday() {
  _has_bits_[0] &= ~0x00000010u;
}
 void InviteFriendLvlSucc::clear_nowloginday() {
  nowloginday_ = 0;
  clear_has_nowloginday();
}
 ::google::protobuf::int32 InviteFriendLvlSucc::nowloginday() const {
  // @@protoc_insertion_point(field_get:InviteFriendLvlSucc.nowloginday)
  return nowloginday_;
}
 void InviteFriendLvlSucc::set_nowloginday(::google::protobuf::int32 value) {
  set_has_nowloginday();
  nowloginday_ = value;
  // @@protoc_insertion_point(field_set:InviteFriendLvlSucc.nowloginday)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Event::kCmdFieldNumber;
const int Event::kStateFieldNumber;
const int Event::kTimeFieldNumber;
const int Event::kUidFieldNumber;
const int Event::kFromworldFdFieldNumber;
const int Event::kHallSrvIDFieldNumber;
const int Event::kWorkingStatusReqFieldNumber;
const int Event::kUserLoginReqFieldNumber;
const int Event::kUserLoginRspFieldNumber;
const int Event::kUserAuthReqFieldNumber;
const int Event::kUserAuthRspFieldNumber;
const int Event::kSendRemoteUserReqFieldNumber;
const int Event::kHttpFieldNumber;
const int Event::kBeBeLotteryFieldNumber;
const int Event::kBeBeUpdateWinInfoFieldNumber;
const int Event::kBeBeUpdateExpFieldNumber;
const int Event::kBeBeUpdateToolFieldNumber;
const int Event::kDpDpNormalResultFieldNumber;
const int Event::kLotteryTimerFieldNumber;
const int Event::kBeBeUpdateBattleCntFieldNumber;
const int Event::kWgUserLeaveFieldNumber;
const int Event::kFriendinfoFieldNumber;
const int Event::kForwardinfoFieldNumber;
const int Event::kAdminAddExpReqFieldNumber;
const int Event::kAdminAddExpRspFieldNumber;
const int Event::kAdminAddGoldReqFieldNumber;
const int Event::kAdminAddGoldRspFieldNumber;
const int Event::kAdminSetLevelReqFieldNumber;
const int Event::kAdminSetLevelRspFieldNumber;
const int Event::kAdminAddPropReqFieldNumber;
const int Event::kAdminAddPropRspFieldNumber;
const int Event::kAdminSetEquipReqFieldNumber;
const int Event::kAdminSetEquipRspFieldNumber;
const int Event::kAdminUserInfoReqFieldNumber;
const int Event::kAdminUserInfoRspFieldNumber;
const int Event::kAdminDelPropReqFieldNumber;
const int Event::kAdminDelPropRspFieldNumber;
const int Event::kWebbuyFieldNumber;
const int Event::kAdminRunTaskReqFieldNumber;
const int Event::kAdminRunTaskRspFieldNumber;
const int Event::kAdminBanChatReqFieldNumber;
const int Event::kAdminBanChatRspFieldNumber;
const int Event::kAdminBanLoginReqFieldNumber;
const int Event::kAdminBanLoginRspFieldNumber;
const int Event::kAdminAddPointReqFieldNumber;
const int Event::kAdminAddPointRspFieldNumber;
const int Event::kAdminAddIndateReqFieldNumber;
const int Event::kAdminAddIndateRspFieldNumber;
const int Event::kAdminFreshUserReqFieldNumber;
const int Event::kAdminFreshUserRspFieldNumber;
const int Event::kAdminAddMedalReqFieldNumber;
const int Event::kAdminAddMedalRspFieldNumber;
const int Event::kWeblengthenindateFieldNumber;
const int Event::kWebcheckbandcoinFieldNumber;
const int Event::kAdminBroadCastReqFieldNumber;
const int Event::kAdminBroadCastRspFieldNumber;
const int Event::kAdminReloadReqFieldNumber;
const int Event::kAdminReloadRspFieldNumber;
const int Event::kUpdateGuestNumberFieldNumber;
const int Event::kAdminFluentPriceReqFieldNumber;
const int Event::kAdminFluentPriceRspFieldNumber;
const int Event::kWebunlockFieldNumber;
const int Event::kWebaddemployeeFieldNumber;
const int Event::kAdminAddGoodsReqFieldNumber;
const int Event::kAdminAddGoodsRspFieldNumber;
const int Event::kAdminSetPublicPraiseReqFieldNumber;
const int Event::kAdminSetPublicPraiseRspFieldNumber;
const int Event::kAdminAddGuestReqFieldNumber;
const int Event::kAdminAddGuestRspFieldNumber;
const int Event::kAdminDelGoodsReqFieldNumber;
const int Event::kAdminDelGoodsRspFieldNumber;
const int Event::kAdminClearReqFieldNumber;
const int Event::kAdminClearRspFieldNumber;
const int Event::kAdminOnLineNumReqFieldNumber;
const int Event::kAdminOnLineNumRspFieldNumber;
const int Event::kAdminKickPlayerReqFieldNumber;
const int Event::kAdminKickPlayerRspFieldNumber;
const int Event::kWebinviteFieldNumber;
const int Event::kInviteFieldNumber;
const int Event::kAdminstrReqFieldNumber;
const int Event::kAdminstrRspFieldNumber;
const int Event::kWebbugcfmFieldNumber;
const int Event::kAdminSetValReqFieldNumber;
const int Event::kAdminSetValRspFieldNumber;
const int Event::kSidFieldNumber;
const int Event::kWebAskFieldNumber;
const int Event::kWebGiveFieldNumber;
const int Event::kPushbackcntFieldNumber;
const int Event::kQqunionAdditemFieldNumber;
const int Event::kQqunionCheckopenidFieldNumber;
const int Event::kQqunionCheckkeyFieldNumber;
const int Event::kMultiLevelFriendPointFieldNumber;
const int Event::kAdminCommonReqFieldNumber;
const int Event::kAdminCommonRspFieldNumber;
const int Event::kTalentShowFieldNumber;
const int Event::kTalentShowListFieldNumber;
const int Event::kGameidFieldNumber;
const int Event::kWorldidFieldNumber;
const int Event::kRankKindFieldNumber;
const int Event::kFreegiftFieldNumber;
const int Event::kFriendSendGiftFieldNumber;
const int Event::kFortuneStealFieldNumber;
const int Event::kWapReqFieldNumber;
const int Event::kWapRspFieldNumber;
const int Event::kFriendRecallFieldNumber;
const int Event::kOpenidFieldNumber;
const int Event::kSimpleMareFieldNumber;
const int Event::kWebbuy3FieldNumber;
const int Event::kCenterLogicValueFieldNumber;
const int Event::kInviteFridDataFieldNumber;
const int Event::kMseMseAuthStateFieldNumber;
const int Event::kMseMseFuncSwichFieldNumber;
const int Event::kMceMceGatewayFunctionFieldNumber;
const int Event::kMseMseGatewayFunctionFieldNumber;
const int Event::kMseMseFriendListFieldNumber;
const int Event::kMceMceHeartbeatFieldNumber;
const int Event::kMceMceActionInfoFieldNumber;
const int Event::kMseMseActionInfoFieldNumber;
const int Event::kMseMseRankFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Event)
}

void Event::InitAsDefaultInstance() {
  workingstatus_req_ = const_cast< ::WorkingStatus_Req*>(&::WorkingStatus_Req::default_instance());
  userlogin_req_ = const_cast< ::UserLogin_Req*>(&::UserLogin_Req::default_instance());
  userlogin_rsp_ = const_cast< ::UserLogin_Rsp*>(&::UserLogin_Rsp::default_instance());
  userauth_req_ = const_cast< ::UserAuth_Req*>(&::UserAuth_Req::default_instance());
  userauth_rsp_ = const_cast< ::UserAuth_Rsp*>(&::UserAuth_Rsp::default_instance());
  sendremoteuser_req_ = const_cast< ::SendRemoteUser_Req*>(&::SendRemoteUser_Req::default_instance());
  http_ = const_cast< ::HttpRequestV3*>(&::HttpRequestV3::default_instance());
  be_belottery_ = const_cast< ::BeLottery*>(&::BeLottery::default_instance());
  be_beupdatewininfo_ = const_cast< ::BeUpdateWinInfo*>(&::BeUpdateWinInfo::default_instance());
  be_beupdateexp_ = const_cast< ::BeUpdateExp*>(&::BeUpdateExp::default_instance());
  be_beupdatetool_ = const_cast< ::BeUpdateTool*>(&::BeUpdateTool::default_instance());
  dp_dpnormalresult_ = const_cast< ::DpNormalResult*>(&::DpNormalResult::default_instance());
  lotterytimer_ = const_cast< ::LotteryTimer*>(&::LotteryTimer::default_instance());
  be_beupdatebattlecnt_ = const_cast< ::BeUpdateBattleCnt*>(&::BeUpdateBattleCnt::default_instance());
  wg_userleave_ = const_cast< ::WG_UserLeave*>(&::WG_UserLeave::default_instance());
  friendinfo_ = const_cast< ::GWG_FriendRequest*>(&::GWG_FriendRequest::default_instance());
  forwardinfo_ = const_cast< ::ForwardInfo*>(&::ForwardInfo::default_instance());
  adminaddexp_req_ = const_cast< ::Admin_AddExp_Req*>(&::Admin_AddExp_Req::default_instance());
  adminaddexp_rsp_ = const_cast< ::Admin_AddExp_Rsp*>(&::Admin_AddExp_Rsp::default_instance());
  adminaddgold_req_ = const_cast< ::Admin_AddGold_Req*>(&::Admin_AddGold_Req::default_instance());
  adminaddgold_rsp_ = const_cast< ::Admin_AddGold_Rsp*>(&::Admin_AddGold_Rsp::default_instance());
  adminsetlevel_req_ = const_cast< ::Admin_SetLevel_Req*>(&::Admin_SetLevel_Req::default_instance());
  adminsetlevel_rsp_ = const_cast< ::Admin_SetLevel_Rsp*>(&::Admin_SetLevel_Rsp::default_instance());
  adminaddprop_req_ = const_cast< ::Admin_AddProp_Req*>(&::Admin_AddProp_Req::default_instance());
  adminaddprop_rsp_ = const_cast< ::Admin_AddProp_Rsp*>(&::Admin_AddProp_Rsp::default_instance());
  adminsetequip_req_ = const_cast< ::Admin_SetEquip_Req*>(&::Admin_SetEquip_Req::default_instance());
  adminsetequip_rsp_ = const_cast< ::Admin_SetEquip_Rsp*>(&::Admin_SetEquip_Rsp::default_instance());
  adminuserinfo_req_ = const_cast< ::Admin_UserInfo_Req*>(&::Admin_UserInfo_Req::default_instance());
  adminuserinfo_rsp_ = const_cast< ::Admin_UserInfo_Rsp*>(&::Admin_UserInfo_Rsp::default_instance());
  admindelprop_req_ = const_cast< ::Admin_DelProp_Req*>(&::Admin_DelProp_Req::default_instance());
  admindelprop_rsp_ = const_cast< ::Admin_DelProp_Rsp*>(&::Admin_DelProp_Rsp::default_instance());
  webbuy_ = const_cast< ::WebBuy*>(&::WebBuy::default_instance());
  adminruntask_req_ = const_cast< ::Admin_RunTask_Req*>(&::Admin_RunTask_Req::default_instance());
  adminruntask_rsp_ = const_cast< ::Admin_RunTask_Rsp*>(&::Admin_RunTask_Rsp::default_instance());
  adminbanchat_req_ = const_cast< ::Admin_BanChat_Req*>(&::Admin_BanChat_Req::default_instance());
  adminbanchat_rsp_ = const_cast< ::Admin_BanChat_Rsp*>(&::Admin_BanChat_Rsp::default_instance());
  adminbanlogin_req_ = const_cast< ::Admin_BanLogin_Req*>(&::Admin_BanLogin_Req::default_instance());
  adminbanlogin_rsp_ = const_cast< ::Admin_BanLogin_Rsp*>(&::Admin_BanLogin_Rsp::default_instance());
  adminaddpoint_req_ = const_cast< ::Admin_AddPoint_Req*>(&::Admin_AddPoint_Req::default_instance());
  adminaddpoint_rsp_ = const_cast< ::Admin_AddPoint_Rsp*>(&::Admin_AddPoint_Rsp::default_instance());
  adminaddindate_req_ = const_cast< ::Admin_AddIndate_Req*>(&::Admin_AddIndate_Req::default_instance());
  adminaddindate_rsp_ = const_cast< ::Admin_AddIndate_Rsp*>(&::Admin_AddIndate_Rsp::default_instance());
  adminfreshuser_req_ = const_cast< ::Admin_FreshUser_Req*>(&::Admin_FreshUser_Req::default_instance());
  adminfreshuser_rsp_ = const_cast< ::Admin_FreshUser_Rsp*>(&::Admin_FreshUser_Rsp::default_instance());
  adminaddmedal_req_ = const_cast< ::Admin_AddMedal_Req*>(&::Admin_AddMedal_Req::default_instance());
  adminaddmedal_rsp_ = const_cast< ::Admin_AddMedal_Rsp*>(&::Admin_AddMedal_Rsp::default_instance());
  weblengthenindate_ = const_cast< ::WebLengthenIndate*>(&::WebLengthenIndate::default_instance());
  webcheckbandcoin_ = const_cast< ::WebCheckBandCoin*>(&::WebCheckBandCoin::default_instance());
  adminbroadcast_req_ = const_cast< ::Admin_BroadCast_Req*>(&::Admin_BroadCast_Req::default_instance());
  adminbroadcast_rsp_ = const_cast< ::Admin_BroadCast_Rsp*>(&::Admin_BroadCast_Rsp::default_instance());
  adminreload_req_ = const_cast< ::Admin_Reload_Req*>(&::Admin_Reload_Req::default_instance());
  adminreload_rsp_ = const_cast< ::Admin_Reload_Rsp*>(&::Admin_Reload_Rsp::default_instance());
  update_guest_number_ = const_cast< ::UpdateGuestNumber*>(&::UpdateGuestNumber::default_instance());
  adminfluentprice_req_ = const_cast< ::Admin_FluentPrice_Req*>(&::Admin_FluentPrice_Req::default_instance());
  adminfluentprice_rsp_ = const_cast< ::Admin_FluentPrice_Rsp*>(&::Admin_FluentPrice_Rsp::default_instance());
  webunlock_ = const_cast< ::WebUnlock*>(&::WebUnlock::default_instance());
  webaddemployee_ = const_cast< ::WebAddEmployee*>(&::WebAddEmployee::default_instance());
  adminaddgoods_req_ = const_cast< ::Admin_AddGoods_Req*>(&::Admin_AddGoods_Req::default_instance());
  adminaddgoods_rsp_ = const_cast< ::Admin_AddGoods_Rsp*>(&::Admin_AddGoods_Rsp::default_instance());
  adminsetpublicpraise_req_ = const_cast< ::Admin_SetPublicPraise_Req*>(&::Admin_SetPublicPraise_Req::default_instance());
  adminsetpublicpraise_rsp_ = const_cast< ::Admin_SetPublicPraise_Rsp*>(&::Admin_SetPublicPraise_Rsp::default_instance());
  adminaddguest_req_ = const_cast< ::Admin_AddGuest_Req*>(&::Admin_AddGuest_Req::default_instance());
  adminaddguest_rsp_ = const_cast< ::Admin_AddGuest_Rsp*>(&::Admin_AddGuest_Rsp::default_instance());
  admindelgoods_req_ = const_cast< ::Admin_DelGoods_Req*>(&::Admin_DelGoods_Req::default_instance());
  admindelgoods_rsp_ = const_cast< ::Admin_DelGoods_Rsp*>(&::Admin_DelGoods_Rsp::default_instance());
  adminclear_req_ = const_cast< ::Admin_Clear_Req*>(&::Admin_Clear_Req::default_instance());
  adminclear_rsp_ = const_cast< ::Admin_Clear_Rsp*>(&::Admin_Clear_Rsp::default_instance());
  adminonlinenum_req_ = const_cast< ::Admin_StatisticsOnLinePeople_Req*>(&::Admin_StatisticsOnLinePeople_Req::default_instance());
  adminonlinenum_rsp_ = const_cast< ::Admin_StatisticsOnLinePeople_Rsp*>(&::Admin_StatisticsOnLinePeople_Rsp::default_instance());
  adminkickplayer_req_ = const_cast< ::Admin_KickPlayer_Req*>(&::Admin_KickPlayer_Req::default_instance());
  adminkickplayer_rsp_ = const_cast< ::Admin_KickPlayer_Rsp*>(&::Admin_KickPlayer_Rsp::default_instance());
  webinvite_ = const_cast< ::WebInvite*>(&::WebInvite::default_instance());
  invite_ = const_cast< ::Invite*>(&::Invite::default_instance());
  adminstr_req_ = const_cast< ::Admin_STR_Req*>(&::Admin_STR_Req::default_instance());
  adminstr_rsp_ = const_cast< ::Admin_STR_Rsp*>(&::Admin_STR_Rsp::default_instance());
  webbugcfm_ = const_cast< ::WebBuyCfm*>(&::WebBuyCfm::default_instance());
  adminsetval_req_ = const_cast< ::Admin_SetVal_Req*>(&::Admin_SetVal_Req::default_instance());
  adminsetval_rsp_ = const_cast< ::Admin_SetVal_Rsp*>(&::Admin_SetVal_Rsp::default_instance());
  webask_ = const_cast< ::WebAskFor*>(&::WebAskFor::default_instance());
  webgive_ = const_cast< ::WebGiveFor*>(&::WebGiveFor::default_instance());
  qqunion_additem_ = const_cast< ::QQUnionAddItem*>(&::QQUnionAddItem::default_instance());
  qqunion_checkopenid_ = const_cast< ::QQUnionCheckOpenId*>(&::QQUnionCheckOpenId::default_instance());
  qqunion_checkkey_ = const_cast< ::QQUnionCheckKey*>(&::QQUnionCheckKey::default_instance());
  multi_level_friend_point_ = const_cast< ::MultiLevelFriendPoint*>(&::MultiLevelFriendPoint::default_instance());
  admin_common_req_ = const_cast< ::Admin_Common_Req*>(&::Admin_Common_Req::default_instance());
  admin_common_rsp_ = const_cast< ::Admin_Common_Rsp*>(&::Admin_Common_Rsp::default_instance());
  talent_show_ = const_cast< ::TalentShow*>(&::TalentShow::default_instance());
  talent_show_list_ = const_cast< ::TalentShowList*>(&::TalentShowList::default_instance());
  freegift_ = const_cast< ::WebFreeGift*>(&::WebFreeGift::default_instance());
  friend_send_gift_ = const_cast< ::FriendSendGift*>(&::FriendSendGift::default_instance());
  fortune_steal_ = const_cast< ::FortuneSteal*>(&::FortuneSteal::default_instance());
  wap_req_ = const_cast< ::Wap_Str_Request*>(&::Wap_Str_Request::default_instance());
  wap_rsp_ = const_cast< ::Wap_Str_Response*>(&::Wap_Str_Response::default_instance());
  friend_recall_ = const_cast< ::FriendRecallMsg*>(&::FriendRecallMsg::default_instance());
  webbuy3_ = const_cast< ::WebBuy3*>(&::WebBuy3::default_instance());
  center_logic_value_ = const_cast< ::CenterLogicValue*>(&::CenterLogicValue::default_instance());
  invitefriddata_ = const_cast< ::InviteFriendLvlSucc*>(&::InviteFriendLvlSucc::default_instance());
  mse_mseauthstate_ = const_cast< ::MseAuthState*>(&::MseAuthState::default_instance());
  mse_msefuncswich_ = const_cast< ::MseFuncSwich*>(&::MseFuncSwich::default_instance());
  mce_mcegatewayfunction_ = const_cast< ::MceGatewayFunction*>(&::MceGatewayFunction::default_instance());
  mse_msegatewayfunction_ = const_cast< ::MseGatewayFunction*>(&::MseGatewayFunction::default_instance());
  mse_msefriendlist_ = const_cast< ::MseFriendList*>(&::MseFriendList::default_instance());
  mce_mceheartbeat_ = const_cast< ::MceHeartbeat*>(&::MceHeartbeat::default_instance());
  mce_mceactioninfo_ = const_cast< ::MceActionInfo*>(&::MceActionInfo::default_instance());
  mse_mseactioninfo_ = const_cast< ::MseActionInfo*>(&::MseActionInfo::default_instance());
  mse_mserank_ = const_cast< ::MseRank*>(&::MseRank::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Event)
}

void Event::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 0;
  state_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  uid_ = GOOGLE_LONGLONG(0);
  fromworld_fd_ = 0;
  hallsrvid_ = 0;
  workingstatus_req_ = NULL;
  userlogin_req_ = NULL;
  userlogin_rsp_ = NULL;
  userauth_req_ = NULL;
  userauth_rsp_ = NULL;
  sendremoteuser_req_ = NULL;
  http_ = NULL;
  be_belottery_ = NULL;
  be_beupdatewininfo_ = NULL;
  be_beupdateexp_ = NULL;
  be_beupdatetool_ = NULL;
  dp_dpnormalresult_ = NULL;
  lotterytimer_ = NULL;
  be_beupdatebattlecnt_ = NULL;
  wg_userleave_ = NULL;
  friendinfo_ = NULL;
  forwardinfo_ = NULL;
  adminaddexp_req_ = NULL;
  adminaddexp_rsp_ = NULL;
  adminaddgold_req_ = NULL;
  adminaddgold_rsp_ = NULL;
  adminsetlevel_req_ = NULL;
  adminsetlevel_rsp_ = NULL;
  adminaddprop_req_ = NULL;
  adminaddprop_rsp_ = NULL;
  adminsetequip_req_ = NULL;
  adminsetequip_rsp_ = NULL;
  adminuserinfo_req_ = NULL;
  adminuserinfo_rsp_ = NULL;
  admindelprop_req_ = NULL;
  admindelprop_rsp_ = NULL;
  webbuy_ = NULL;
  adminruntask_req_ = NULL;
  adminruntask_rsp_ = NULL;
  adminbanchat_req_ = NULL;
  adminbanchat_rsp_ = NULL;
  adminbanlogin_req_ = NULL;
  adminbanlogin_rsp_ = NULL;
  adminaddpoint_req_ = NULL;
  adminaddpoint_rsp_ = NULL;
  adminaddindate_req_ = NULL;
  adminaddindate_rsp_ = NULL;
  adminfreshuser_req_ = NULL;
  adminfreshuser_rsp_ = NULL;
  adminaddmedal_req_ = NULL;
  adminaddmedal_rsp_ = NULL;
  weblengthenindate_ = NULL;
  webcheckbandcoin_ = NULL;
  adminbroadcast_req_ = NULL;
  adminbroadcast_rsp_ = NULL;
  adminreload_req_ = NULL;
  adminreload_rsp_ = NULL;
  update_guest_number_ = NULL;
  adminfluentprice_req_ = NULL;
  adminfluentprice_rsp_ = NULL;
  webunlock_ = NULL;
  webaddemployee_ = NULL;
  adminaddgoods_req_ = NULL;
  adminaddgoods_rsp_ = NULL;
  adminsetpublicpraise_req_ = NULL;
  adminsetpublicpraise_rsp_ = NULL;
  adminaddguest_req_ = NULL;
  adminaddguest_rsp_ = NULL;
  admindelgoods_req_ = NULL;
  admindelgoods_rsp_ = NULL;
  adminclear_req_ = NULL;
  adminclear_rsp_ = NULL;
  adminonlinenum_req_ = NULL;
  adminonlinenum_rsp_ = NULL;
  adminkickplayer_req_ = NULL;
  adminkickplayer_rsp_ = NULL;
  webinvite_ = NULL;
  invite_ = NULL;
  adminstr_req_ = NULL;
  adminstr_rsp_ = NULL;
  webbugcfm_ = NULL;
  adminsetval_req_ = NULL;
  adminsetval_rsp_ = NULL;
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webask_ = NULL;
  webgive_ = NULL;
  pushbackcnt_ = 0;
  qqunion_additem_ = NULL;
  qqunion_checkopenid_ = NULL;
  qqunion_checkkey_ = NULL;
  multi_level_friend_point_ = NULL;
  admin_common_req_ = NULL;
  admin_common_rsp_ = NULL;
  talent_show_ = NULL;
  talent_show_list_ = NULL;
  gameid_ = 0;
  worldid_ = 0;
  rankkind_ = 0;
  freegift_ = NULL;
  friend_send_gift_ = NULL;
  fortune_steal_ = NULL;
  wap_req_ = NULL;
  wap_rsp_ = NULL;
  friend_recall_ = NULL;
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webbuy3_ = NULL;
  center_logic_value_ = NULL;
  invitefriddata_ = NULL;
  mse_mseauthstate_ = NULL;
  mse_msefuncswich_ = NULL;
  mce_mcegatewayfunction_ = NULL;
  mse_msegatewayfunction_ = NULL;
  mse_msefriendlist_ = NULL;
  mce_mceheartbeat_ = NULL;
  mce_mceactioninfo_ = NULL;
  mse_mseactioninfo_ = NULL;
  mse_mserank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:Event)
  SharedDtor();
}

void Event::SharedDtor() {
  sid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete workingstatus_req_;
    delete userlogin_req_;
    delete userlogin_rsp_;
    delete userauth_req_;
    delete userauth_rsp_;
    delete sendremoteuser_req_;
    delete http_;
    delete be_belottery_;
    delete be_beupdatewininfo_;
    delete be_beupdateexp_;
    delete be_beupdatetool_;
    delete dp_dpnormalresult_;
    delete lotterytimer_;
    delete be_beupdatebattlecnt_;
    delete wg_userleave_;
    delete friendinfo_;
    delete forwardinfo_;
    delete adminaddexp_req_;
    delete adminaddexp_rsp_;
    delete adminaddgold_req_;
    delete adminaddgold_rsp_;
    delete adminsetlevel_req_;
    delete adminsetlevel_rsp_;
    delete adminaddprop_req_;
    delete adminaddprop_rsp_;
    delete adminsetequip_req_;
    delete adminsetequip_rsp_;
    delete adminuserinfo_req_;
    delete adminuserinfo_rsp_;
    delete admindelprop_req_;
    delete admindelprop_rsp_;
    delete webbuy_;
    delete adminruntask_req_;
    delete adminruntask_rsp_;
    delete adminbanchat_req_;
    delete adminbanchat_rsp_;
    delete adminbanlogin_req_;
    delete adminbanlogin_rsp_;
    delete adminaddpoint_req_;
    delete adminaddpoint_rsp_;
    delete adminaddindate_req_;
    delete adminaddindate_rsp_;
    delete adminfreshuser_req_;
    delete adminfreshuser_rsp_;
    delete adminaddmedal_req_;
    delete adminaddmedal_rsp_;
    delete weblengthenindate_;
    delete webcheckbandcoin_;
    delete adminbroadcast_req_;
    delete adminbroadcast_rsp_;
    delete adminreload_req_;
    delete adminreload_rsp_;
    delete update_guest_number_;
    delete adminfluentprice_req_;
    delete adminfluentprice_rsp_;
    delete webunlock_;
    delete webaddemployee_;
    delete adminaddgoods_req_;
    delete adminaddgoods_rsp_;
    delete adminsetpublicpraise_req_;
    delete adminsetpublicpraise_rsp_;
    delete adminaddguest_req_;
    delete adminaddguest_rsp_;
    delete admindelgoods_req_;
    delete admindelgoods_rsp_;
    delete adminclear_req_;
    delete adminclear_rsp_;
    delete adminonlinenum_req_;
    delete adminonlinenum_rsp_;
    delete adminkickplayer_req_;
    delete adminkickplayer_rsp_;
    delete webinvite_;
    delete invite_;
    delete adminstr_req_;
    delete adminstr_rsp_;
    delete webbugcfm_;
    delete adminsetval_req_;
    delete adminsetval_rsp_;
    delete webask_;
    delete webgive_;
    delete qqunion_additem_;
    delete qqunion_checkopenid_;
    delete qqunion_checkkey_;
    delete multi_level_friend_point_;
    delete admin_common_req_;
    delete admin_common_rsp_;
    delete talent_show_;
    delete talent_show_list_;
    delete freegift_;
    delete friend_send_gift_;
    delete fortune_steal_;
    delete wap_req_;
    delete wap_rsp_;
    delete friend_recall_;
    delete webbuy3_;
    delete center_logic_value_;
    delete invitefriddata_;
    delete mse_mseauthstate_;
    delete mse_msefuncswich_;
    delete mce_mcegatewayfunction_;
    delete mse_msegatewayfunction_;
    delete mse_msefriendlist_;
    delete mce_mceheartbeat_;
    delete mce_mceactioninfo_;
    delete mse_mseactioninfo_;
    delete mse_mserank_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Event*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cmd_, hallsrvid_);
    if (has_workingstatus_req()) {
      if (workingstatus_req_ != NULL) workingstatus_req_->::WorkingStatus_Req::Clear();
    }
    if (has_userlogin_req()) {
      if (userlogin_req_ != NULL) userlogin_req_->::UserLogin_Req::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_userlogin_rsp()) {
      if (userlogin_rsp_ != NULL) userlogin_rsp_->::UserLogin_Rsp::Clear();
    }
    if (has_userauth_req()) {
      if (userauth_req_ != NULL) userauth_req_->::UserAuth_Req::Clear();
    }
    if (has_userauth_rsp()) {
      if (userauth_rsp_ != NULL) userauth_rsp_->::UserAuth_Rsp::Clear();
    }
    if (has_sendremoteuser_req()) {
      if (sendremoteuser_req_ != NULL) sendremoteuser_req_->::SendRemoteUser_Req::Clear();
    }
    if (has_http()) {
      if (http_ != NULL) http_->::HttpRequestV3::Clear();
    }
    if (has_be_belottery()) {
      if (be_belottery_ != NULL) be_belottery_->::BeLottery::Clear();
    }
    if (has_be_beupdatewininfo()) {
      if (be_beupdatewininfo_ != NULL) be_beupdatewininfo_->::BeUpdateWinInfo::Clear();
    }
    if (has_be_beupdateexp()) {
      if (be_beupdateexp_ != NULL) be_beupdateexp_->::BeUpdateExp::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_be_beupdatetool()) {
      if (be_beupdatetool_ != NULL) be_beupdatetool_->::BeUpdateTool::Clear();
    }
    if (has_dp_dpnormalresult()) {
      if (dp_dpnormalresult_ != NULL) dp_dpnormalresult_->::DpNormalResult::Clear();
    }
    if (has_lotterytimer()) {
      if (lotterytimer_ != NULL) lotterytimer_->::LotteryTimer::Clear();
    }
    if (has_be_beupdatebattlecnt()) {
      if (be_beupdatebattlecnt_ != NULL) be_beupdatebattlecnt_->::BeUpdateBattleCnt::Clear();
    }
    if (has_wg_userleave()) {
      if (wg_userleave_ != NULL) wg_userleave_->::WG_UserLeave::Clear();
    }
    if (has_friendinfo()) {
      if (friendinfo_ != NULL) friendinfo_->::GWG_FriendRequest::Clear();
    }
    if (has_forwardinfo()) {
      if (forwardinfo_ != NULL) forwardinfo_->::ForwardInfo::Clear();
    }
    if (has_adminaddexp_req()) {
      if (adminaddexp_req_ != NULL) adminaddexp_req_->::Admin_AddExp_Req::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_adminaddexp_rsp()) {
      if (adminaddexp_rsp_ != NULL) adminaddexp_rsp_->::Admin_AddExp_Rsp::Clear();
    }
    if (has_adminaddgold_req()) {
      if (adminaddgold_req_ != NULL) adminaddgold_req_->::Admin_AddGold_Req::Clear();
    }
    if (has_adminaddgold_rsp()) {
      if (adminaddgold_rsp_ != NULL) adminaddgold_rsp_->::Admin_AddGold_Rsp::Clear();
    }
    if (has_adminsetlevel_req()) {
      if (adminsetlevel_req_ != NULL) adminsetlevel_req_->::Admin_SetLevel_Req::Clear();
    }
    if (has_adminsetlevel_rsp()) {
      if (adminsetlevel_rsp_ != NULL) adminsetlevel_rsp_->::Admin_SetLevel_Rsp::Clear();
    }
    if (has_adminaddprop_req()) {
      if (adminaddprop_req_ != NULL) adminaddprop_req_->::Admin_AddProp_Req::Clear();
    }
    if (has_adminaddprop_rsp()) {
      if (adminaddprop_rsp_ != NULL) adminaddprop_rsp_->::Admin_AddProp_Rsp::Clear();
    }
    if (has_adminsetequip_req()) {
      if (adminsetequip_req_ != NULL) adminsetequip_req_->::Admin_SetEquip_Req::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_adminsetequip_rsp()) {
      if (adminsetequip_rsp_ != NULL) adminsetequip_rsp_->::Admin_SetEquip_Rsp::Clear();
    }
    if (has_adminuserinfo_req()) {
      if (adminuserinfo_req_ != NULL) adminuserinfo_req_->::Admin_UserInfo_Req::Clear();
    }
    if (has_adminuserinfo_rsp()) {
      if (adminuserinfo_rsp_ != NULL) adminuserinfo_rsp_->::Admin_UserInfo_Rsp::Clear();
    }
    if (has_admindelprop_req()) {
      if (admindelprop_req_ != NULL) admindelprop_req_->::Admin_DelProp_Req::Clear();
    }
    if (has_admindelprop_rsp()) {
      if (admindelprop_rsp_ != NULL) admindelprop_rsp_->::Admin_DelProp_Rsp::Clear();
    }
    if (has_webbuy()) {
      if (webbuy_ != NULL) webbuy_->::WebBuy::Clear();
    }
    if (has_adminruntask_req()) {
      if (adminruntask_req_ != NULL) adminruntask_req_->::Admin_RunTask_Req::Clear();
    }
    if (has_adminruntask_rsp()) {
      if (adminruntask_rsp_ != NULL) adminruntask_rsp_->::Admin_RunTask_Rsp::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    if (has_adminbanchat_req()) {
      if (adminbanchat_req_ != NULL) adminbanchat_req_->::Admin_BanChat_Req::Clear();
    }
    if (has_adminbanchat_rsp()) {
      if (adminbanchat_rsp_ != NULL) adminbanchat_rsp_->::Admin_BanChat_Rsp::Clear();
    }
    if (has_adminbanlogin_req()) {
      if (adminbanlogin_req_ != NULL) adminbanlogin_req_->::Admin_BanLogin_Req::Clear();
    }
    if (has_adminbanlogin_rsp()) {
      if (adminbanlogin_rsp_ != NULL) adminbanlogin_rsp_->::Admin_BanLogin_Rsp::Clear();
    }
    if (has_adminaddpoint_req()) {
      if (adminaddpoint_req_ != NULL) adminaddpoint_req_->::Admin_AddPoint_Req::Clear();
    }
    if (has_adminaddpoint_rsp()) {
      if (adminaddpoint_rsp_ != NULL) adminaddpoint_rsp_->::Admin_AddPoint_Rsp::Clear();
    }
    if (has_adminaddindate_req()) {
      if (adminaddindate_req_ != NULL) adminaddindate_req_->::Admin_AddIndate_Req::Clear();
    }
    if (has_adminaddindate_rsp()) {
      if (adminaddindate_rsp_ != NULL) adminaddindate_rsp_->::Admin_AddIndate_Rsp::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    if (has_adminfreshuser_req()) {
      if (adminfreshuser_req_ != NULL) adminfreshuser_req_->::Admin_FreshUser_Req::Clear();
    }
    if (has_adminfreshuser_rsp()) {
      if (adminfreshuser_rsp_ != NULL) adminfreshuser_rsp_->::Admin_FreshUser_Rsp::Clear();
    }
    if (has_adminaddmedal_req()) {
      if (adminaddmedal_req_ != NULL) adminaddmedal_req_->::Admin_AddMedal_Req::Clear();
    }
    if (has_adminaddmedal_rsp()) {
      if (adminaddmedal_rsp_ != NULL) adminaddmedal_rsp_->::Admin_AddMedal_Rsp::Clear();
    }
    if (has_weblengthenindate()) {
      if (weblengthenindate_ != NULL) weblengthenindate_->::WebLengthenIndate::Clear();
    }
    if (has_webcheckbandcoin()) {
      if (webcheckbandcoin_ != NULL) webcheckbandcoin_->::WebCheckBandCoin::Clear();
    }
    if (has_adminbroadcast_req()) {
      if (adminbroadcast_req_ != NULL) adminbroadcast_req_->::Admin_BroadCast_Req::Clear();
    }
    if (has_adminbroadcast_rsp()) {
      if (adminbroadcast_rsp_ != NULL) adminbroadcast_rsp_->::Admin_BroadCast_Rsp::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    if (has_adminreload_req()) {
      if (adminreload_req_ != NULL) adminreload_req_->::Admin_Reload_Req::Clear();
    }
    if (has_adminreload_rsp()) {
      if (adminreload_rsp_ != NULL) adminreload_rsp_->::Admin_Reload_Rsp::Clear();
    }
    if (has_update_guest_number()) {
      if (update_guest_number_ != NULL) update_guest_number_->::UpdateGuestNumber::Clear();
    }
    if (has_adminfluentprice_req()) {
      if (adminfluentprice_req_ != NULL) adminfluentprice_req_->::Admin_FluentPrice_Req::Clear();
    }
    if (has_adminfluentprice_rsp()) {
      if (adminfluentprice_rsp_ != NULL) adminfluentprice_rsp_->::Admin_FluentPrice_Rsp::Clear();
    }
    if (has_webunlock()) {
      if (webunlock_ != NULL) webunlock_->::WebUnlock::Clear();
    }
    if (has_webaddemployee()) {
      if (webaddemployee_ != NULL) webaddemployee_->::WebAddEmployee::Clear();
    }
    if (has_adminaddgoods_req()) {
      if (adminaddgoods_req_ != NULL) adminaddgoods_req_->::Admin_AddGoods_Req::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 255) {
    if (has_adminaddgoods_rsp()) {
      if (adminaddgoods_rsp_ != NULL) adminaddgoods_rsp_->::Admin_AddGoods_Rsp::Clear();
    }
    if (has_adminsetpublicpraise_req()) {
      if (adminsetpublicpraise_req_ != NULL) adminsetpublicpraise_req_->::Admin_SetPublicPraise_Req::Clear();
    }
    if (has_adminsetpublicpraise_rsp()) {
      if (adminsetpublicpraise_rsp_ != NULL) adminsetpublicpraise_rsp_->::Admin_SetPublicPraise_Rsp::Clear();
    }
    if (has_adminaddguest_req()) {
      if (adminaddguest_req_ != NULL) adminaddguest_req_->::Admin_AddGuest_Req::Clear();
    }
    if (has_adminaddguest_rsp()) {
      if (adminaddguest_rsp_ != NULL) adminaddguest_rsp_->::Admin_AddGuest_Rsp::Clear();
    }
    if (has_admindelgoods_req()) {
      if (admindelgoods_req_ != NULL) admindelgoods_req_->::Admin_DelGoods_Req::Clear();
    }
    if (has_admindelgoods_rsp()) {
      if (admindelgoods_rsp_ != NULL) admindelgoods_rsp_->::Admin_DelGoods_Rsp::Clear();
    }
    if (has_adminclear_req()) {
      if (adminclear_req_ != NULL) adminclear_req_->::Admin_Clear_Req::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280) {
    if (has_adminclear_rsp()) {
      if (adminclear_rsp_ != NULL) adminclear_rsp_->::Admin_Clear_Rsp::Clear();
    }
    if (has_adminonlinenum_req()) {
      if (adminonlinenum_req_ != NULL) adminonlinenum_req_->::Admin_StatisticsOnLinePeople_Req::Clear();
    }
    if (has_adminonlinenum_rsp()) {
      if (adminonlinenum_rsp_ != NULL) adminonlinenum_rsp_->::Admin_StatisticsOnLinePeople_Rsp::Clear();
    }
    if (has_adminkickplayer_req()) {
      if (adminkickplayer_req_ != NULL) adminkickplayer_req_->::Admin_KickPlayer_Req::Clear();
    }
    if (has_adminkickplayer_rsp()) {
      if (adminkickplayer_rsp_ != NULL) adminkickplayer_rsp_->::Admin_KickPlayer_Rsp::Clear();
    }
    if (has_webinvite()) {
      if (webinvite_ != NULL) webinvite_->::WebInvite::Clear();
    }
    if (has_invite()) {
      if (invite_ != NULL) invite_->::Invite::Clear();
    }
    if (has_adminstr_req()) {
      if (adminstr_req_ != NULL) adminstr_req_->::Admin_STR_Req::Clear();
    }
  }
  if (_has_bits_[80 / 32] & 16711680) {
    if (has_adminstr_rsp()) {
      if (adminstr_rsp_ != NULL) adminstr_rsp_->::Admin_STR_Rsp::Clear();
    }
    if (has_webbugcfm()) {
      if (webbugcfm_ != NULL) webbugcfm_->::WebBuyCfm::Clear();
    }
    if (has_adminsetval_req()) {
      if (adminsetval_req_ != NULL) adminsetval_req_->::Admin_SetVal_Req::Clear();
    }
    if (has_adminsetval_rsp()) {
      if (adminsetval_rsp_ != NULL) adminsetval_rsp_->::Admin_SetVal_Rsp::Clear();
    }
    if (has_sid()) {
      sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_webask()) {
      if (webask_ != NULL) webask_->::WebAskFor::Clear();
    }
    if (has_webgive()) {
      if (webgive_ != NULL) webgive_->::WebGiveFor::Clear();
    }
    pushbackcnt_ = 0;
  }
  if (_has_bits_[88 / 32] & 4278190080) {
    if (has_qqunion_additem()) {
      if (qqunion_additem_ != NULL) qqunion_additem_->::QQUnionAddItem::Clear();
    }
    if (has_qqunion_checkopenid()) {
      if (qqunion_checkopenid_ != NULL) qqunion_checkopenid_->::QQUnionCheckOpenId::Clear();
    }
    if (has_qqunion_checkkey()) {
      if (qqunion_checkkey_ != NULL) qqunion_checkkey_->::QQUnionCheckKey::Clear();
    }
    if (has_multi_level_friend_point()) {
      if (multi_level_friend_point_ != NULL) multi_level_friend_point_->::MultiLevelFriendPoint::Clear();
    }
    if (has_admin_common_req()) {
      if (admin_common_req_ != NULL) admin_common_req_->::Admin_Common_Req::Clear();
    }
    if (has_admin_common_rsp()) {
      if (admin_common_rsp_ != NULL) admin_common_rsp_->::Admin_Common_Rsp::Clear();
    }
    if (has_talent_show()) {
      if (talent_show_ != NULL) talent_show_->::TalentShow::Clear();
    }
    if (has_talent_show_list()) {
      if (talent_show_list_ != NULL) talent_show_list_->::TalentShowList::Clear();
    }
  }
  if (_has_bits_[96 / 32] & 255) {
    ZR_(worldid_, rankkind_);
    gameid_ = 0;
    if (has_freegift()) {
      if (freegift_ != NULL) freegift_->::WebFreeGift::Clear();
    }
    if (has_friend_send_gift()) {
      if (friend_send_gift_ != NULL) friend_send_gift_->::FriendSendGift::Clear();
    }
    if (has_fortune_steal()) {
      if (fortune_steal_ != NULL) fortune_steal_->::FortuneSteal::Clear();
    }
    if (has_wap_req()) {
      if (wap_req_ != NULL) wap_req_->::Wap_Str_Request::Clear();
    }
    if (has_wap_rsp()) {
      if (wap_rsp_ != NULL) wap_rsp_->::Wap_Str_Response::Clear();
    }
  }
  if (_has_bits_[104 / 32] & 64256) {
    if (has_friend_recall()) {
      if (friend_recall_ != NULL) friend_recall_->::FriendRecallMsg::Clear();
    }
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_webbuy3()) {
      if (webbuy3_ != NULL) webbuy3_->::WebBuy3::Clear();
    }
    if (has_center_logic_value()) {
      if (center_logic_value_ != NULL) center_logic_value_->::CenterLogicValue::Clear();
    }
    if (has_invitefriddata()) {
      if (invitefriddata_ != NULL) invitefriddata_->::InviteFriendLvlSucc::Clear();
    }
    if (has_mse_mseauthstate()) {
      if (mse_mseauthstate_ != NULL) mse_mseauthstate_->::MseAuthState::Clear();
    }
    if (has_mse_msefuncswich()) {
      if (mse_msefuncswich_ != NULL) mse_msefuncswich_->::MseFuncSwich::Clear();
    }
  }
  if (_has_bits_[112 / 32] & 8323072) {
    if (has_mce_mcegatewayfunction()) {
      if (mce_mcegatewayfunction_ != NULL) mce_mcegatewayfunction_->::MceGatewayFunction::Clear();
    }
    if (has_mse_msegatewayfunction()) {
      if (mse_msegatewayfunction_ != NULL) mse_msegatewayfunction_->::MseGatewayFunction::Clear();
    }
    if (has_mse_msefriendlist()) {
      if (mse_msefriendlist_ != NULL) mse_msefriendlist_->::MseFriendList::Clear();
    }
    if (has_mce_mceheartbeat()) {
      if (mce_mceheartbeat_ != NULL) mce_mceheartbeat_->::MceHeartbeat::Clear();
    }
    if (has_mce_mceactioninfo()) {
      if (mce_mceactioninfo_ != NULL) mce_mceactioninfo_->::MceActionInfo::Clear();
    }
    if (has_mse_mseactioninfo()) {
      if (mse_mseactioninfo_ != NULL) mse_mseactioninfo_->::MseActionInfo::Clear();
    }
    if (has_mse_mserank()) {
      if (mse_mserank_ != NULL) mse_mserank_->::MseRank::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  simplemare_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // optional int64 uid = 4;
      case 4: {
        if (tag == 32) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromworld_fd;
        break;
      }

      // optional int32 fromworld_fd = 5;
      case 5: {
        if (tag == 40) {
         parse_fromworld_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromworld_fd_)));
          set_has_fromworld_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hallSrvID;
        break;
      }

      // optional int32 hallSrvID = 6;
      case 6: {
        if (tag == 48) {
         parse_hallSrvID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hallsrvid_)));
          set_has_hallsrvid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_workingStatus_req;
        break;
      }

      // optional .WorkingStatus_Req workingStatus_req = 7;
      case 7: {
        if (tag == 58) {
         parse_workingStatus_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_workingstatus_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_userLogin_req;
        break;
      }

      // optional .UserLogin_Req userLogin_req = 8;
      case 8: {
        if (tag == 66) {
         parse_userLogin_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userlogin_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_userLogin_rsp;
        break;
      }

      // optional .UserLogin_Rsp userLogin_rsp = 9;
      case 9: {
        if (tag == 74) {
         parse_userLogin_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userlogin_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_userAuth_req;
        break;
      }

      // optional .UserAuth_Req userAuth_req = 10;
      case 10: {
        if (tag == 82) {
         parse_userAuth_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userauth_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_userAuth_rsp;
        break;
      }

      // optional .UserAuth_Rsp userAuth_rsp = 11;
      case 11: {
        if (tag == 90) {
         parse_userAuth_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userauth_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sendRemoteUser_req;
        break;
      }

      // optional .SendRemoteUser_Req sendRemoteUser_req = 12;
      case 12: {
        if (tag == 98) {
         parse_sendRemoteUser_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendremoteuser_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_http;
        break;
      }

      // optional .HttpRequestV3 http = 13;
      case 13: {
        if (tag == 106) {
         parse_http:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_be_BeLottery;
        break;
      }

      // optional .BeLottery be_BeLottery = 14;
      case 14: {
        if (tag == 114) {
         parse_be_BeLottery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_be_belottery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_be_BeUpdateWinInfo;
        break;
      }

      // optional .BeUpdateWinInfo be_BeUpdateWinInfo = 15;
      case 15: {
        if (tag == 122) {
         parse_be_BeUpdateWinInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_be_beupdatewininfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_be_BeUpdateExp;
        break;
      }

      // optional .BeUpdateExp be_BeUpdateExp = 16;
      case 16: {
        if (tag == 130) {
         parse_be_BeUpdateExp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_be_beupdateexp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_be_BeUpdateTool;
        break;
      }

      // optional .BeUpdateTool be_BeUpdateTool = 17;
      case 17: {
        if (tag == 138) {
         parse_be_BeUpdateTool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_be_beupdatetool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_dp_DpNormalResult;
        break;
      }

      // optional .DpNormalResult dp_DpNormalResult = 18;
      case 18: {
        if (tag == 146) {
         parse_dp_DpNormalResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dp_dpnormalresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_lotteryTimer;
        break;
      }

      // optional .LotteryTimer lotteryTimer = 19;
      case 19: {
        if (tag == 154) {
         parse_lotteryTimer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lotterytimer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_be_BeUpdateBattleCnt;
        break;
      }

      // optional .BeUpdateBattleCnt be_BeUpdateBattleCnt = 20;
      case 20: {
        if (tag == 162) {
         parse_be_BeUpdateBattleCnt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_be_beupdatebattlecnt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_wg_UserLeave;
        break;
      }

      // optional .WG_UserLeave wg_UserLeave = 21;
      case 21: {
        if (tag == 170) {
         parse_wg_UserLeave:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wg_userleave()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_friendinfo;
        break;
      }

      // optional .GWG_FriendRequest friendinfo = 22;
      case 22: {
        if (tag == 178) {
         parse_friendinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_forwardinfo;
        break;
      }

      // optional .ForwardInfo forwardinfo = 23;
      case 23: {
        if (tag == 186) {
         parse_forwardinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forwardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_adminAddExp_req;
        break;
      }

      // optional .Admin_AddExp_Req adminAddExp_req = 33;
      case 33: {
        if (tag == 266) {
         parse_adminAddExp_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddexp_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_adminAddExp_rsp;
        break;
      }

      // optional .Admin_AddExp_Rsp adminAddExp_rsp = 34;
      case 34: {
        if (tag == 274) {
         parse_adminAddExp_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddexp_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_adminAddGold_req;
        break;
      }

      // optional .Admin_AddGold_Req adminAddGold_req = 35;
      case 35: {
        if (tag == 282) {
         parse_adminAddGold_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddgold_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_adminAddGold_rsp;
        break;
      }

      // optional .Admin_AddGold_Rsp adminAddGold_rsp = 36;
      case 36: {
        if (tag == 290) {
         parse_adminAddGold_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddgold_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_adminSetLevel_req;
        break;
      }

      // optional .Admin_SetLevel_Req adminSetLevel_req = 37;
      case 37: {
        if (tag == 298) {
         parse_adminSetLevel_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminsetlevel_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_adminSetLevel_rsp;
        break;
      }

      // optional .Admin_SetLevel_Rsp adminSetLevel_rsp = 38;
      case 38: {
        if (tag == 306) {
         parse_adminSetLevel_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminsetlevel_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_adminAddProp_req;
        break;
      }

      // optional .Admin_AddProp_Req adminAddProp_req = 39;
      case 39: {
        if (tag == 314) {
         parse_adminAddProp_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddprop_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_adminAddProp_rsp;
        break;
      }

      // optional .Admin_AddProp_Rsp adminAddProp_rsp = 40;
      case 40: {
        if (tag == 322) {
         parse_adminAddProp_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddprop_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_adminSetEquip_req;
        break;
      }

      // optional .Admin_SetEquip_Req adminSetEquip_req = 41;
      case 41: {
        if (tag == 330) {
         parse_adminSetEquip_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminsetequip_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_adminSetEquip_rsp;
        break;
      }

      // optional .Admin_SetEquip_Rsp adminSetEquip_rsp = 42;
      case 42: {
        if (tag == 338) {
         parse_adminSetEquip_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminsetequip_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_adminUserInfo_req;
        break;
      }

      // optional .Admin_UserInfo_Req adminUserInfo_req = 43;
      case 43: {
        if (tag == 346) {
         parse_adminUserInfo_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminuserinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_adminUserInfo_rsp;
        break;
      }

      // optional .Admin_UserInfo_Rsp adminUserInfo_rsp = 44;
      case 44: {
        if (tag == 354) {
         parse_adminUserInfo_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminuserinfo_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_adminDelProp_req;
        break;
      }

      // optional .Admin_DelProp_Req adminDelProp_req = 45;
      case 45: {
        if (tag == 362) {
         parse_adminDelProp_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admindelprop_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_adminDelProp_rsp;
        break;
      }

      // optional .Admin_DelProp_Rsp adminDelProp_rsp = 46;
      case 46: {
        if (tag == 370) {
         parse_adminDelProp_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admindelprop_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_webbuy;
        break;
      }

      // optional .WebBuy webbuy = 47;
      case 47: {
        if (tag == 378) {
         parse_webbuy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_webbuy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_adminRunTask_req;
        break;
      }

      // optional .Admin_RunTask_Req adminRunTask_req = 48;
      case 48: {
        if (tag == 386) {
         parse_adminRunTask_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminruntask_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_adminRunTask_rsp;
        break;
      }

      // optional .Admin_RunTask_Rsp adminRunTask_rsp = 49;
      case 49: {
        if (tag == 394) {
         parse_adminRunTask_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminruntask_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_adminBanChat_req;
        break;
      }

      // optional .Admin_BanChat_Req adminBanChat_req = 50;
      case 50: {
        if (tag == 402) {
         parse_adminBanChat_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminbanchat_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_adminBanChat_rsp;
        break;
      }

      // optional .Admin_BanChat_Rsp adminBanChat_rsp = 51;
      case 51: {
        if (tag == 410) {
         parse_adminBanChat_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminbanchat_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_adminBanLogin_req;
        break;
      }

      // optional .Admin_BanLogin_Req adminBanLogin_req = 52;
      case 52: {
        if (tag == 418) {
         parse_adminBanLogin_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminbanlogin_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_adminBanLogin_rsp;
        break;
      }

      // optional .Admin_BanLogin_Rsp adminBanLogin_rsp = 53;
      case 53: {
        if (tag == 426) {
         parse_adminBanLogin_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminbanlogin_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_adminAddPoint_req;
        break;
      }

      // optional .Admin_AddPoint_Req adminAddPoint_req = 54;
      case 54: {
        if (tag == 434) {
         parse_adminAddPoint_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddpoint_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_adminAddPoint_rsp;
        break;
      }

      // optional .Admin_AddPoint_Rsp adminAddPoint_rsp = 55;
      case 55: {
        if (tag == 442) {
         parse_adminAddPoint_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddpoint_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_adminAddIndate_req;
        break;
      }

      // optional .Admin_AddIndate_Req adminAddIndate_req = 56;
      case 56: {
        if (tag == 450) {
         parse_adminAddIndate_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddindate_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_adminAddIndate_rsp;
        break;
      }

      // optional .Admin_AddIndate_Rsp adminAddIndate_rsp = 57;
      case 57: {
        if (tag == 458) {
         parse_adminAddIndate_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddindate_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_adminFreshUser_req;
        break;
      }

      // optional .Admin_FreshUser_Req adminFreshUser_req = 58;
      case 58: {
        if (tag == 466) {
         parse_adminFreshUser_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminfreshuser_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_adminFreshUser_rsp;
        break;
      }

      // optional .Admin_FreshUser_Rsp adminFreshUser_rsp = 59;
      case 59: {
        if (tag == 474) {
         parse_adminFreshUser_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminfreshuser_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_adminAddMedal_req;
        break;
      }

      // optional .Admin_AddMedal_Req adminAddMedal_req = 60;
      case 60: {
        if (tag == 482) {
         parse_adminAddMedal_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddmedal_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_adminAddMedal_rsp;
        break;
      }

      // optional .Admin_AddMedal_Rsp adminAddMedal_rsp = 61;
      case 61: {
        if (tag == 490) {
         parse_adminAddMedal_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddmedal_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_weblengthenindate;
        break;
      }

      // optional .WebLengthenIndate weblengthenindate = 62;
      case 62: {
        if (tag == 498) {
         parse_weblengthenindate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weblengthenindate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_webcheckbandcoin;
        break;
      }

      // optional .WebCheckBandCoin webcheckbandcoin = 63;
      case 63: {
        if (tag == 506) {
         parse_webcheckbandcoin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_webcheckbandcoin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_adminBroadCast_req;
        break;
      }

      // optional .Admin_BroadCast_Req adminBroadCast_req = 64;
      case 64: {
        if (tag == 514) {
         parse_adminBroadCast_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminbroadcast_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(522)) goto parse_adminBroadCast_rsp;
        break;
      }

      // optional .Admin_BroadCast_Rsp adminBroadCast_rsp = 65;
      case 65: {
        if (tag == 522) {
         parse_adminBroadCast_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminbroadcast_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(530)) goto parse_adminReload_req;
        break;
      }

      // optional .Admin_Reload_Req adminReload_req = 66;
      case 66: {
        if (tag == 530) {
         parse_adminReload_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminreload_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_adminReload_rsp;
        break;
      }

      // optional .Admin_Reload_Rsp adminReload_rsp = 67;
      case 67: {
        if (tag == 538) {
         parse_adminReload_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminreload_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_update_guest_number;
        break;
      }

      // optional .UpdateGuestNumber update_guest_number = 68;
      case 68: {
        if (tag == 546) {
         parse_update_guest_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_guest_number()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(554)) goto parse_adminFluentPrice_req;
        break;
      }

      // optional .Admin_FluentPrice_Req adminFluentPrice_req = 69;
      case 69: {
        if (tag == 554) {
         parse_adminFluentPrice_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminfluentprice_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_adminFluentPrice_rsp;
        break;
      }

      // optional .Admin_FluentPrice_Rsp adminFluentPrice_rsp = 70;
      case 70: {
        if (tag == 562) {
         parse_adminFluentPrice_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminfluentprice_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(570)) goto parse_webunlock;
        break;
      }

      // optional .WebUnlock webunlock = 71;
      case 71: {
        if (tag == 570) {
         parse_webunlock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_webunlock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_webaddemployee;
        break;
      }

      // optional .WebAddEmployee webaddemployee = 72;
      case 72: {
        if (tag == 578) {
         parse_webaddemployee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_webaddemployee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_adminAddGoods_req;
        break;
      }

      // optional .Admin_AddGoods_Req adminAddGoods_req = 73;
      case 73: {
        if (tag == 586) {
         parse_adminAddGoods_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddgoods_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(594)) goto parse_adminAddGoods_rsp;
        break;
      }

      // optional .Admin_AddGoods_Rsp adminAddGoods_rsp = 74;
      case 74: {
        if (tag == 594) {
         parse_adminAddGoods_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddgoods_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(602)) goto parse_adminSetPublicPraise_req;
        break;
      }

      // optional .Admin_SetPublicPraise_Req adminSetPublicPraise_req = 75;
      case 75: {
        if (tag == 602) {
         parse_adminSetPublicPraise_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminsetpublicpraise_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(610)) goto parse_adminSetPublicPraise_rsp;
        break;
      }

      // optional .Admin_SetPublicPraise_Rsp adminSetPublicPraise_rsp = 76;
      case 76: {
        if (tag == 610) {
         parse_adminSetPublicPraise_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminsetpublicpraise_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(618)) goto parse_adminAddGuest_req;
        break;
      }

      // optional .Admin_AddGuest_Req adminAddGuest_req = 77;
      case 77: {
        if (tag == 618) {
         parse_adminAddGuest_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddguest_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(626)) goto parse_adminAddGuest_rsp;
        break;
      }

      // optional .Admin_AddGuest_Rsp adminAddGuest_rsp = 78;
      case 78: {
        if (tag == 626) {
         parse_adminAddGuest_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminaddguest_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(634)) goto parse_adminDelGoods_req;
        break;
      }

      // optional .Admin_DelGoods_Req adminDelGoods_req = 79;
      case 79: {
        if (tag == 634) {
         parse_adminDelGoods_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admindelgoods_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_adminDelGoods_rsp;
        break;
      }

      // optional .Admin_DelGoods_Rsp adminDelGoods_rsp = 80;
      case 80: {
        if (tag == 642) {
         parse_adminDelGoods_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admindelgoods_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(650)) goto parse_adminClear_req;
        break;
      }

      // optional .Admin_Clear_Req adminClear_req = 81;
      case 81: {
        if (tag == 650) {
         parse_adminClear_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminclear_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(658)) goto parse_adminClear_rsp;
        break;
      }

      // optional .Admin_Clear_Rsp adminClear_rsp = 82;
      case 82: {
        if (tag == 658) {
         parse_adminClear_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminclear_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(666)) goto parse_adminOnLineNum_req;
        break;
      }

      // optional .Admin_StatisticsOnLinePeople_Req adminOnLineNum_req = 83;
      case 83: {
        if (tag == 666) {
         parse_adminOnLineNum_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminonlinenum_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(674)) goto parse_adminOnLineNum_rsp;
        break;
      }

      // optional .Admin_StatisticsOnLinePeople_Rsp adminOnLineNum_rsp = 84;
      case 84: {
        if (tag == 674) {
         parse_adminOnLineNum_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminonlinenum_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(682)) goto parse_adminKickPlayer_req;
        break;
      }

      // optional .Admin_KickPlayer_Req adminKickPlayer_req = 85;
      case 85: {
        if (tag == 682) {
         parse_adminKickPlayer_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminkickplayer_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(690)) goto parse_adminKickPlayer_rsp;
        break;
      }

      // optional .Admin_KickPlayer_Rsp adminKickPlayer_rsp = 86;
      case 86: {
        if (tag == 690) {
         parse_adminKickPlayer_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminkickplayer_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(698)) goto parse_webinvite;
        break;
      }

      // optional .WebInvite webinvite = 87;
      case 87: {
        if (tag == 698) {
         parse_webinvite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_webinvite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(706)) goto parse_invite;
        break;
      }

      // optional .Invite invite = 88;
      case 88: {
        if (tag == 706) {
         parse_invite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(714)) goto parse_adminstr_req;
        break;
      }

      // optional .Admin_STR_Req adminstr_req = 89;
      case 89: {
        if (tag == 714) {
         parse_adminstr_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminstr_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(722)) goto parse_adminstr_rsp;
        break;
      }

      // optional .Admin_STR_Rsp adminstr_rsp = 90;
      case 90: {
        if (tag == 722) {
         parse_adminstr_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminstr_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(730)) goto parse_webbugcfm;
        break;
      }

      // optional .WebBuyCfm webbugcfm = 91;
      case 91: {
        if (tag == 730) {
         parse_webbugcfm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_webbugcfm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(738)) goto parse_adminSetVal_req;
        break;
      }

      // optional .Admin_SetVal_Req adminSetVal_req = 92;
      case 92: {
        if (tag == 738) {
         parse_adminSetVal_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminsetval_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(746)) goto parse_adminSetVal_rsp;
        break;
      }

      // optional .Admin_SetVal_Rsp adminSetVal_rsp = 93;
      case 93: {
        if (tag == 746) {
         parse_adminSetVal_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminsetval_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(754)) goto parse_sid;
        break;
      }

      // optional string sid = 94;
      case 94: {
        if (tag == 754) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Event.sid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(762)) goto parse_webAsk;
        break;
      }

      // optional .WebAskFor webAsk = 95;
      case 95: {
        if (tag == 762) {
         parse_webAsk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_webask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(770)) goto parse_webGive;
        break;
      }

      // optional .WebGiveFor webGive = 96;
      case 96: {
        if (tag == 770) {
         parse_webGive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_webgive()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_pushbackcnt;
        break;
      }

      // optional int32 pushbackcnt = 97 [default = 0];
      case 97: {
        if (tag == 776) {
         parse_pushbackcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pushbackcnt_)));
          set_has_pushbackcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(786)) goto parse_qqunion_additem;
        break;
      }

      // optional .QQUnionAddItem qqunion_additem = 98;
      case 98: {
        if (tag == 786) {
         parse_qqunion_additem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qqunion_additem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(794)) goto parse_qqunion_checkopenid;
        break;
      }

      // optional .QQUnionCheckOpenId qqunion_checkopenid = 99;
      case 99: {
        if (tag == 794) {
         parse_qqunion_checkopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qqunion_checkopenid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_qqunion_checkkey;
        break;
      }

      // optional .QQUnionCheckKey qqunion_checkkey = 100;
      case 100: {
        if (tag == 802) {
         parse_qqunion_checkkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qqunion_checkkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_multi_level_friend_point;
        break;
      }

      // optional .MultiLevelFriendPoint multi_level_friend_point = 101;
      case 101: {
        if (tag == 810) {
         parse_multi_level_friend_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multi_level_friend_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_admin_common_req;
        break;
      }

      // optional .Admin_Common_Req admin_common_req = 102;
      case 102: {
        if (tag == 818) {
         parse_admin_common_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admin_common_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_admin_common_rsp;
        break;
      }

      // optional .Admin_Common_Rsp admin_common_rsp = 103;
      case 103: {
        if (tag == 826) {
         parse_admin_common_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admin_common_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_talent_show;
        break;
      }

      // optional .TalentShow talent_show = 104;
      case 104: {
        if (tag == 834) {
         parse_talent_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_talent_show()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_talent_show_list;
        break;
      }

      // optional .TalentShowList talent_show_list = 105;
      case 105: {
        if (tag == 842) {
         parse_talent_show_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_talent_show_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(848)) goto parse_gameid;
        break;
      }

      // optional int32 gameid = 106;
      case 106: {
        if (tag == 848) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(856)) goto parse_worldid;
        break;
      }

      // optional int32 worldid = 107;
      case 107: {
        if (tag == 856) {
         parse_worldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(864)) goto parse_rankKind;
        break;
      }

      // optional int32 rankKind = 108;
      case 108: {
        if (tag == 864) {
         parse_rankKind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankkind_)));
          set_has_rankkind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(874)) goto parse_freegift;
        break;
      }

      // optional .WebFreeGift freegift = 109;
      case 109: {
        if (tag == 874) {
         parse_freegift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freegift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(882)) goto parse_friend_send_gift;
        break;
      }

      // optional .FriendSendGift friend_send_gift = 110;
      case 110: {
        if (tag == 882) {
         parse_friend_send_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_send_gift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(890)) goto parse_fortune_steal;
        break;
      }

      // optional .FortuneSteal fortune_steal = 111;
      case 111: {
        if (tag == 890) {
         parse_fortune_steal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fortune_steal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(898)) goto parse_wap_req;
        break;
      }

      // optional .Wap_Str_Request wap_req = 112;
      case 112: {
        if (tag == 898) {
         parse_wap_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wap_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(906)) goto parse_wap_rsp;
        break;
      }

      // optional .Wap_Str_Response wap_rsp = 113;
      case 113: {
        if (tag == 906) {
         parse_wap_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wap_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(914)) goto parse_friend_recall;
        break;
      }

      // optional .FriendRecallMsg friend_recall = 114;
      case 114: {
        if (tag == 914) {
         parse_friend_recall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_recall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(922)) goto parse_openid;
        break;
      }

      // optional string openid = 115;
      case 115: {
        if (tag == 922) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Event.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(930)) goto parse_SimpleMare;
        break;
      }

      // repeated .SimpleMarkUser SimpleMare = 116;
      case 116: {
        if (tag == 930) {
         parse_SimpleMare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simplemare()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(930)) goto parse_SimpleMare;
        if (input->ExpectTag(938)) goto parse_webbuy3;
        break;
      }

      // optional .WebBuy3 webbuy3 = 117;
      case 117: {
        if (tag == 938) {
         parse_webbuy3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_webbuy3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(946)) goto parse_center_logic_value;
        break;
      }

      // optional .CenterLogicValue center_logic_value = 118;
      case 118: {
        if (tag == 946) {
         parse_center_logic_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center_logic_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(954)) goto parse_inviteFridData;
        break;
      }

      // optional .InviteFriendLvlSucc inviteFridData = 119;
      case 119: {
        if (tag == 954) {
         parse_inviteFridData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitefriddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1034)) goto parse_Mse_MseAuthState;
        break;
      }

      // optional .MseAuthState Mse_MseAuthState = 129;
      case 129: {
        if (tag == 1034) {
         parse_Mse_MseAuthState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mse_mseauthstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1042)) goto parse_Mse_MseFuncSwich;
        break;
      }

      // optional .MseFuncSwich Mse_MseFuncSwich = 130;
      case 130: {
        if (tag == 1042) {
         parse_Mse_MseFuncSwich:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mse_msefuncswich()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1050)) goto parse_Mce_MceGatewayFunction;
        break;
      }

      // optional .MceGatewayFunction Mce_MceGatewayFunction = 131;
      case 131: {
        if (tag == 1050) {
         parse_Mce_MceGatewayFunction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mce_mcegatewayfunction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1058)) goto parse_Mse_MseGatewayFunction;
        break;
      }

      // optional .MseGatewayFunction Mse_MseGatewayFunction = 132;
      case 132: {
        if (tag == 1058) {
         parse_Mse_MseGatewayFunction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mse_msegatewayfunction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1066)) goto parse_Mse_MseFriendList;
        break;
      }

      // optional .MseFriendList Mse_MseFriendList = 133;
      case 133: {
        if (tag == 1066) {
         parse_Mse_MseFriendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mse_msefriendlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1074)) goto parse_Mce_MceHeartbeat;
        break;
      }

      // optional .MceHeartbeat Mce_MceHeartbeat = 134;
      case 134: {
        if (tag == 1074) {
         parse_Mce_MceHeartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mce_mceheartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1082)) goto parse_Mce_MceActionInfo;
        break;
      }

      // optional .MceActionInfo Mce_MceActionInfo = 135;
      case 135: {
        if (tag == 1082) {
         parse_Mce_MceActionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mce_mceactioninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1090)) goto parse_Mse_MseActionInfo;
        break;
      }

      // optional .MseActionInfo Mse_MseActionInfo = 136;
      case 136: {
        if (tag == 1090) {
         parse_Mse_MseActionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mse_mseactioninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1098)) goto parse_Mse_MseRank;
        break;
      }

      // optional .MseRank Mse_MseRank = 137;
      case 137: {
        if (tag == 1098) {
         parse_Mse_MseRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mse_mserank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Event)
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // required int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // required int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // optional int64 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->uid(), output);
  }

  // optional int32 fromworld_fd = 5;
  if (has_fromworld_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fromworld_fd(), output);
  }

  // optional int32 hallSrvID = 6;
  if (has_hallsrvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hallsrvid(), output);
  }

  // optional .WorkingStatus_Req workingStatus_req = 7;
  if (has_workingstatus_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->workingstatus_req_, output);
  }

  // optional .UserLogin_Req userLogin_req = 8;
  if (has_userlogin_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->userlogin_req_, output);
  }

  // optional .UserLogin_Rsp userLogin_rsp = 9;
  if (has_userlogin_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->userlogin_rsp_, output);
  }

  // optional .UserAuth_Req userAuth_req = 10;
  if (has_userauth_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->userauth_req_, output);
  }

  // optional .UserAuth_Rsp userAuth_rsp = 11;
  if (has_userauth_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->userauth_rsp_, output);
  }

  // optional .SendRemoteUser_Req sendRemoteUser_req = 12;
  if (has_sendremoteuser_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->sendremoteuser_req_, output);
  }

  // optional .HttpRequestV3 http = 13;
  if (has_http()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->http_, output);
  }

  // optional .BeLottery be_BeLottery = 14;
  if (has_be_belottery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->be_belottery_, output);
  }

  // optional .BeUpdateWinInfo be_BeUpdateWinInfo = 15;
  if (has_be_beupdatewininfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->be_beupdatewininfo_, output);
  }

  // optional .BeUpdateExp be_BeUpdateExp = 16;
  if (has_be_beupdateexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->be_beupdateexp_, output);
  }

  // optional .BeUpdateTool be_BeUpdateTool = 17;
  if (has_be_beupdatetool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->be_beupdatetool_, output);
  }

  // optional .DpNormalResult dp_DpNormalResult = 18;
  if (has_dp_dpnormalresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->dp_dpnormalresult_, output);
  }

  // optional .LotteryTimer lotteryTimer = 19;
  if (has_lotterytimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->lotterytimer_, output);
  }

  // optional .BeUpdateBattleCnt be_BeUpdateBattleCnt = 20;
  if (has_be_beupdatebattlecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->be_beupdatebattlecnt_, output);
  }

  // optional .WG_UserLeave wg_UserLeave = 21;
  if (has_wg_userleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->wg_userleave_, output);
  }

  // optional .GWG_FriendRequest friendinfo = 22;
  if (has_friendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->friendinfo_, output);
  }

  // optional .ForwardInfo forwardinfo = 23;
  if (has_forwardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->forwardinfo_, output);
  }

  // optional .Admin_AddExp_Req adminAddExp_req = 33;
  if (has_adminaddexp_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->adminaddexp_req_, output);
  }

  // optional .Admin_AddExp_Rsp adminAddExp_rsp = 34;
  if (has_adminaddexp_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->adminaddexp_rsp_, output);
  }

  // optional .Admin_AddGold_Req adminAddGold_req = 35;
  if (has_adminaddgold_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->adminaddgold_req_, output);
  }

  // optional .Admin_AddGold_Rsp adminAddGold_rsp = 36;
  if (has_adminaddgold_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->adminaddgold_rsp_, output);
  }

  // optional .Admin_SetLevel_Req adminSetLevel_req = 37;
  if (has_adminsetlevel_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->adminsetlevel_req_, output);
  }

  // optional .Admin_SetLevel_Rsp adminSetLevel_rsp = 38;
  if (has_adminsetlevel_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->adminsetlevel_rsp_, output);
  }

  // optional .Admin_AddProp_Req adminAddProp_req = 39;
  if (has_adminaddprop_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->adminaddprop_req_, output);
  }

  // optional .Admin_AddProp_Rsp adminAddProp_rsp = 40;
  if (has_adminaddprop_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->adminaddprop_rsp_, output);
  }

  // optional .Admin_SetEquip_Req adminSetEquip_req = 41;
  if (has_adminsetequip_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->adminsetequip_req_, output);
  }

  // optional .Admin_SetEquip_Rsp adminSetEquip_rsp = 42;
  if (has_adminsetequip_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->adminsetequip_rsp_, output);
  }

  // optional .Admin_UserInfo_Req adminUserInfo_req = 43;
  if (has_adminuserinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *this->adminuserinfo_req_, output);
  }

  // optional .Admin_UserInfo_Rsp adminUserInfo_rsp = 44;
  if (has_adminuserinfo_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, *this->adminuserinfo_rsp_, output);
  }

  // optional .Admin_DelProp_Req adminDelProp_req = 45;
  if (has_admindelprop_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, *this->admindelprop_req_, output);
  }

  // optional .Admin_DelProp_Rsp adminDelProp_rsp = 46;
  if (has_admindelprop_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *this->admindelprop_rsp_, output);
  }

  // optional .WebBuy webbuy = 47;
  if (has_webbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, *this->webbuy_, output);
  }

  // optional .Admin_RunTask_Req adminRunTask_req = 48;
  if (has_adminruntask_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, *this->adminruntask_req_, output);
  }

  // optional .Admin_RunTask_Rsp adminRunTask_rsp = 49;
  if (has_adminruntask_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, *this->adminruntask_rsp_, output);
  }

  // optional .Admin_BanChat_Req adminBanChat_req = 50;
  if (has_adminbanchat_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->adminbanchat_req_, output);
  }

  // optional .Admin_BanChat_Rsp adminBanChat_rsp = 51;
  if (has_adminbanchat_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *this->adminbanchat_rsp_, output);
  }

  // optional .Admin_BanLogin_Req adminBanLogin_req = 52;
  if (has_adminbanlogin_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, *this->adminbanlogin_req_, output);
  }

  // optional .Admin_BanLogin_Rsp adminBanLogin_rsp = 53;
  if (has_adminbanlogin_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, *this->adminbanlogin_rsp_, output);
  }

  // optional .Admin_AddPoint_Req adminAddPoint_req = 54;
  if (has_adminaddpoint_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, *this->adminaddpoint_req_, output);
  }

  // optional .Admin_AddPoint_Rsp adminAddPoint_rsp = 55;
  if (has_adminaddpoint_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, *this->adminaddpoint_rsp_, output);
  }

  // optional .Admin_AddIndate_Req adminAddIndate_req = 56;
  if (has_adminaddindate_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, *this->adminaddindate_req_, output);
  }

  // optional .Admin_AddIndate_Rsp adminAddIndate_rsp = 57;
  if (has_adminaddindate_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, *this->adminaddindate_rsp_, output);
  }

  // optional .Admin_FreshUser_Req adminFreshUser_req = 58;
  if (has_adminfreshuser_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, *this->adminfreshuser_req_, output);
  }

  // optional .Admin_FreshUser_Rsp adminFreshUser_rsp = 59;
  if (has_adminfreshuser_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, *this->adminfreshuser_rsp_, output);
  }

  // optional .Admin_AddMedal_Req adminAddMedal_req = 60;
  if (has_adminaddmedal_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, *this->adminaddmedal_req_, output);
  }

  // optional .Admin_AddMedal_Rsp adminAddMedal_rsp = 61;
  if (has_adminaddmedal_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, *this->adminaddmedal_rsp_, output);
  }

  // optional .WebLengthenIndate weblengthenindate = 62;
  if (has_weblengthenindate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, *this->weblengthenindate_, output);
  }

  // optional .WebCheckBandCoin webcheckbandcoin = 63;
  if (has_webcheckbandcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, *this->webcheckbandcoin_, output);
  }

  // optional .Admin_BroadCast_Req adminBroadCast_req = 64;
  if (has_adminbroadcast_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, *this->adminbroadcast_req_, output);
  }

  // optional .Admin_BroadCast_Rsp adminBroadCast_rsp = 65;
  if (has_adminbroadcast_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, *this->adminbroadcast_rsp_, output);
  }

  // optional .Admin_Reload_Req adminReload_req = 66;
  if (has_adminreload_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, *this->adminreload_req_, output);
  }

  // optional .Admin_Reload_Rsp adminReload_rsp = 67;
  if (has_adminreload_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, *this->adminreload_rsp_, output);
  }

  // optional .UpdateGuestNumber update_guest_number = 68;
  if (has_update_guest_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, *this->update_guest_number_, output);
  }

  // optional .Admin_FluentPrice_Req adminFluentPrice_req = 69;
  if (has_adminfluentprice_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, *this->adminfluentprice_req_, output);
  }

  // optional .Admin_FluentPrice_Rsp adminFluentPrice_rsp = 70;
  if (has_adminfluentprice_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, *this->adminfluentprice_rsp_, output);
  }

  // optional .WebUnlock webunlock = 71;
  if (has_webunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, *this->webunlock_, output);
  }

  // optional .WebAddEmployee webaddemployee = 72;
  if (has_webaddemployee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, *this->webaddemployee_, output);
  }

  // optional .Admin_AddGoods_Req adminAddGoods_req = 73;
  if (has_adminaddgoods_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, *this->adminaddgoods_req_, output);
  }

  // optional .Admin_AddGoods_Rsp adminAddGoods_rsp = 74;
  if (has_adminaddgoods_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74, *this->adminaddgoods_rsp_, output);
  }

  // optional .Admin_SetPublicPraise_Req adminSetPublicPraise_req = 75;
  if (has_adminsetpublicpraise_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      75, *this->adminsetpublicpraise_req_, output);
  }

  // optional .Admin_SetPublicPraise_Rsp adminSetPublicPraise_rsp = 76;
  if (has_adminsetpublicpraise_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76, *this->adminsetpublicpraise_rsp_, output);
  }

  // optional .Admin_AddGuest_Req adminAddGuest_req = 77;
  if (has_adminaddguest_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      77, *this->adminaddguest_req_, output);
  }

  // optional .Admin_AddGuest_Rsp adminAddGuest_rsp = 78;
  if (has_adminaddguest_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      78, *this->adminaddguest_rsp_, output);
  }

  // optional .Admin_DelGoods_Req adminDelGoods_req = 79;
  if (has_admindelgoods_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      79, *this->admindelgoods_req_, output);
  }

  // optional .Admin_DelGoods_Rsp adminDelGoods_rsp = 80;
  if (has_admindelgoods_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, *this->admindelgoods_rsp_, output);
  }

  // optional .Admin_Clear_Req adminClear_req = 81;
  if (has_adminclear_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      81, *this->adminclear_req_, output);
  }

  // optional .Admin_Clear_Rsp adminClear_rsp = 82;
  if (has_adminclear_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      82, *this->adminclear_rsp_, output);
  }

  // optional .Admin_StatisticsOnLinePeople_Req adminOnLineNum_req = 83;
  if (has_adminonlinenum_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      83, *this->adminonlinenum_req_, output);
  }

  // optional .Admin_StatisticsOnLinePeople_Rsp adminOnLineNum_rsp = 84;
  if (has_adminonlinenum_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      84, *this->adminonlinenum_rsp_, output);
  }

  // optional .Admin_KickPlayer_Req adminKickPlayer_req = 85;
  if (has_adminkickplayer_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      85, *this->adminkickplayer_req_, output);
  }

  // optional .Admin_KickPlayer_Rsp adminKickPlayer_rsp = 86;
  if (has_adminkickplayer_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      86, *this->adminkickplayer_rsp_, output);
  }

  // optional .WebInvite webinvite = 87;
  if (has_webinvite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      87, *this->webinvite_, output);
  }

  // optional .Invite invite = 88;
  if (has_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      88, *this->invite_, output);
  }

  // optional .Admin_STR_Req adminstr_req = 89;
  if (has_adminstr_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      89, *this->adminstr_req_, output);
  }

  // optional .Admin_STR_Rsp adminstr_rsp = 90;
  if (has_adminstr_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90, *this->adminstr_rsp_, output);
  }

  // optional .WebBuyCfm webbugcfm = 91;
  if (has_webbugcfm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      91, *this->webbugcfm_, output);
  }

  // optional .Admin_SetVal_Req adminSetVal_req = 92;
  if (has_adminsetval_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      92, *this->adminsetval_req_, output);
  }

  // optional .Admin_SetVal_Rsp adminSetVal_rsp = 93;
  if (has_adminsetval_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      93, *this->adminsetval_rsp_, output);
  }

  // optional string sid = 94;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Event.sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      94, this->sid(), output);
  }

  // optional .WebAskFor webAsk = 95;
  if (has_webask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      95, *this->webask_, output);
  }

  // optional .WebGiveFor webGive = 96;
  if (has_webgive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      96, *this->webgive_, output);
  }

  // optional int32 pushbackcnt = 97 [default = 0];
  if (has_pushbackcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->pushbackcnt(), output);
  }

  // optional .QQUnionAddItem qqunion_additem = 98;
  if (has_qqunion_additem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      98, *this->qqunion_additem_, output);
  }

  // optional .QQUnionCheckOpenId qqunion_checkopenid = 99;
  if (has_qqunion_checkopenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      99, *this->qqunion_checkopenid_, output);
  }

  // optional .QQUnionCheckKey qqunion_checkkey = 100;
  if (has_qqunion_checkkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->qqunion_checkkey_, output);
  }

  // optional .MultiLevelFriendPoint multi_level_friend_point = 101;
  if (has_multi_level_friend_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->multi_level_friend_point_, output);
  }

  // optional .Admin_Common_Req admin_common_req = 102;
  if (has_admin_common_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->admin_common_req_, output);
  }

  // optional .Admin_Common_Rsp admin_common_rsp = 103;
  if (has_admin_common_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->admin_common_rsp_, output);
  }

  // optional .TalentShow talent_show = 104;
  if (has_talent_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, *this->talent_show_, output);
  }

  // optional .TalentShowList talent_show_list = 105;
  if (has_talent_show_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, *this->talent_show_list_, output);
  }

  // optional int32 gameid = 106;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(106, this->gameid(), output);
  }

  // optional int32 worldid = 107;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(107, this->worldid(), output);
  }

  // optional int32 rankKind = 108;
  if (has_rankkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(108, this->rankkind(), output);
  }

  // optional .WebFreeGift freegift = 109;
  if (has_freegift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, *this->freegift_, output);
  }

  // optional .FriendSendGift friend_send_gift = 110;
  if (has_friend_send_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, *this->friend_send_gift_, output);
  }

  // optional .FortuneSteal fortune_steal = 111;
  if (has_fortune_steal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, *this->fortune_steal_, output);
  }

  // optional .Wap_Str_Request wap_req = 112;
  if (has_wap_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, *this->wap_req_, output);
  }

  // optional .Wap_Str_Response wap_rsp = 113;
  if (has_wap_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      113, *this->wap_rsp_, output);
  }

  // optional .FriendRecallMsg friend_recall = 114;
  if (has_friend_recall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114, *this->friend_recall_, output);
  }

  // optional string openid = 115;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Event.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      115, this->openid(), output);
  }

  // repeated .SimpleMarkUser SimpleMare = 116;
  for (unsigned int i = 0, n = this->simplemare_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, this->simplemare(i), output);
  }

  // optional .WebBuy3 webbuy3 = 117;
  if (has_webbuy3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, *this->webbuy3_, output);
  }

  // optional .CenterLogicValue center_logic_value = 118;
  if (has_center_logic_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, *this->center_logic_value_, output);
  }

  // optional .InviteFriendLvlSucc inviteFridData = 119;
  if (has_invitefriddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119, *this->invitefriddata_, output);
  }

  // optional .MseAuthState Mse_MseAuthState = 129;
  if (has_mse_mseauthstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      129, *this->mse_mseauthstate_, output);
  }

  // optional .MseFuncSwich Mse_MseFuncSwich = 130;
  if (has_mse_msefuncswich()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, *this->mse_msefuncswich_, output);
  }

  // optional .MceGatewayFunction Mce_MceGatewayFunction = 131;
  if (has_mce_mcegatewayfunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131, *this->mce_mcegatewayfunction_, output);
  }

  // optional .MseGatewayFunction Mse_MseGatewayFunction = 132;
  if (has_mse_msegatewayfunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132, *this->mse_msegatewayfunction_, output);
  }

  // optional .MseFriendList Mse_MseFriendList = 133;
  if (has_mse_msefriendlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      133, *this->mse_msefriendlist_, output);
  }

  // optional .MceHeartbeat Mce_MceHeartbeat = 134;
  if (has_mce_mceheartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      134, *this->mce_mceheartbeat_, output);
  }

  // optional .MceActionInfo Mce_MceActionInfo = 135;
  if (has_mce_mceactioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      135, *this->mce_mceactioninfo_, output);
  }

  // optional .MseActionInfo Mse_MseActionInfo = 136;
  if (has_mse_mseactioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      136, *this->mse_mseactioninfo_, output);
  }

  // optional .MseRank Mse_MseRank = 137;
  if (has_mse_mserank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      137, *this->mse_mserank_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Event)
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Event)
  // required int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  // required int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // required int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // optional int64 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->uid(), target);
  }

  // optional int32 fromworld_fd = 5;
  if (has_fromworld_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fromworld_fd(), target);
  }

  // optional int32 hallSrvID = 6;
  if (has_hallsrvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hallsrvid(), target);
  }

  // optional .WorkingStatus_Req workingStatus_req = 7;
  if (has_workingstatus_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->workingstatus_req_, target);
  }

  // optional .UserLogin_Req userLogin_req = 8;
  if (has_userlogin_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->userlogin_req_, target);
  }

  // optional .UserLogin_Rsp userLogin_rsp = 9;
  if (has_userlogin_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->userlogin_rsp_, target);
  }

  // optional .UserAuth_Req userAuth_req = 10;
  if (has_userauth_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->userauth_req_, target);
  }

  // optional .UserAuth_Rsp userAuth_rsp = 11;
  if (has_userauth_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->userauth_rsp_, target);
  }

  // optional .SendRemoteUser_Req sendRemoteUser_req = 12;
  if (has_sendremoteuser_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->sendremoteuser_req_, target);
  }

  // optional .HttpRequestV3 http = 13;
  if (has_http()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->http_, target);
  }

  // optional .BeLottery be_BeLottery = 14;
  if (has_be_belottery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->be_belottery_, target);
  }

  // optional .BeUpdateWinInfo be_BeUpdateWinInfo = 15;
  if (has_be_beupdatewininfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->be_beupdatewininfo_, target);
  }

  // optional .BeUpdateExp be_BeUpdateExp = 16;
  if (has_be_beupdateexp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, *this->be_beupdateexp_, target);
  }

  // optional .BeUpdateTool be_BeUpdateTool = 17;
  if (has_be_beupdatetool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, *this->be_beupdatetool_, target);
  }

  // optional .DpNormalResult dp_DpNormalResult = 18;
  if (has_dp_dpnormalresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, *this->dp_dpnormalresult_, target);
  }

  // optional .LotteryTimer lotteryTimer = 19;
  if (has_lotterytimer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, *this->lotterytimer_, target);
  }

  // optional .BeUpdateBattleCnt be_BeUpdateBattleCnt = 20;
  if (has_be_beupdatebattlecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, *this->be_beupdatebattlecnt_, target);
  }

  // optional .WG_UserLeave wg_UserLeave = 21;
  if (has_wg_userleave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, *this->wg_userleave_, target);
  }

  // optional .GWG_FriendRequest friendinfo = 22;
  if (has_friendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, *this->friendinfo_, target);
  }

  // optional .ForwardInfo forwardinfo = 23;
  if (has_forwardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, *this->forwardinfo_, target);
  }

  // optional .Admin_AddExp_Req adminAddExp_req = 33;
  if (has_adminaddexp_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, *this->adminaddexp_req_, target);
  }

  // optional .Admin_AddExp_Rsp adminAddExp_rsp = 34;
  if (has_adminaddexp_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, *this->adminaddexp_rsp_, target);
  }

  // optional .Admin_AddGold_Req adminAddGold_req = 35;
  if (has_adminaddgold_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, *this->adminaddgold_req_, target);
  }

  // optional .Admin_AddGold_Rsp adminAddGold_rsp = 36;
  if (has_adminaddgold_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, *this->adminaddgold_rsp_, target);
  }

  // optional .Admin_SetLevel_Req adminSetLevel_req = 37;
  if (has_adminsetlevel_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, *this->adminsetlevel_req_, target);
  }

  // optional .Admin_SetLevel_Rsp adminSetLevel_rsp = 38;
  if (has_adminsetlevel_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, *this->adminsetlevel_rsp_, target);
  }

  // optional .Admin_AddProp_Req adminAddProp_req = 39;
  if (has_adminaddprop_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, *this->adminaddprop_req_, target);
  }

  // optional .Admin_AddProp_Rsp adminAddProp_rsp = 40;
  if (has_adminaddprop_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, *this->adminaddprop_rsp_, target);
  }

  // optional .Admin_SetEquip_Req adminSetEquip_req = 41;
  if (has_adminsetequip_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, *this->adminsetequip_req_, target);
  }

  // optional .Admin_SetEquip_Rsp adminSetEquip_rsp = 42;
  if (has_adminsetequip_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, *this->adminsetequip_rsp_, target);
  }

  // optional .Admin_UserInfo_Req adminUserInfo_req = 43;
  if (has_adminuserinfo_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, *this->adminuserinfo_req_, target);
  }

  // optional .Admin_UserInfo_Rsp adminUserInfo_rsp = 44;
  if (has_adminuserinfo_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, *this->adminuserinfo_rsp_, target);
  }

  // optional .Admin_DelProp_Req adminDelProp_req = 45;
  if (has_admindelprop_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, *this->admindelprop_req_, target);
  }

  // optional .Admin_DelProp_Rsp adminDelProp_rsp = 46;
  if (has_admindelprop_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, *this->admindelprop_rsp_, target);
  }

  // optional .WebBuy webbuy = 47;
  if (has_webbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, *this->webbuy_, target);
  }

  // optional .Admin_RunTask_Req adminRunTask_req = 48;
  if (has_adminruntask_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, *this->adminruntask_req_, target);
  }

  // optional .Admin_RunTask_Rsp adminRunTask_rsp = 49;
  if (has_adminruntask_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, *this->adminruntask_rsp_, target);
  }

  // optional .Admin_BanChat_Req adminBanChat_req = 50;
  if (has_adminbanchat_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, *this->adminbanchat_req_, target);
  }

  // optional .Admin_BanChat_Rsp adminBanChat_rsp = 51;
  if (has_adminbanchat_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, *this->adminbanchat_rsp_, target);
  }

  // optional .Admin_BanLogin_Req adminBanLogin_req = 52;
  if (has_adminbanlogin_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, *this->adminbanlogin_req_, target);
  }

  // optional .Admin_BanLogin_Rsp adminBanLogin_rsp = 53;
  if (has_adminbanlogin_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, *this->adminbanlogin_rsp_, target);
  }

  // optional .Admin_AddPoint_Req adminAddPoint_req = 54;
  if (has_adminaddpoint_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, *this->adminaddpoint_req_, target);
  }

  // optional .Admin_AddPoint_Rsp adminAddPoint_rsp = 55;
  if (has_adminaddpoint_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, *this->adminaddpoint_rsp_, target);
  }

  // optional .Admin_AddIndate_Req adminAddIndate_req = 56;
  if (has_adminaddindate_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, *this->adminaddindate_req_, target);
  }

  // optional .Admin_AddIndate_Rsp adminAddIndate_rsp = 57;
  if (has_adminaddindate_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, *this->adminaddindate_rsp_, target);
  }

  // optional .Admin_FreshUser_Req adminFreshUser_req = 58;
  if (has_adminfreshuser_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, *this->adminfreshuser_req_, target);
  }

  // optional .Admin_FreshUser_Rsp adminFreshUser_rsp = 59;
  if (has_adminfreshuser_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, *this->adminfreshuser_rsp_, target);
  }

  // optional .Admin_AddMedal_Req adminAddMedal_req = 60;
  if (has_adminaddmedal_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, *this->adminaddmedal_req_, target);
  }

  // optional .Admin_AddMedal_Rsp adminAddMedal_rsp = 61;
  if (has_adminaddmedal_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, *this->adminaddmedal_rsp_, target);
  }

  // optional .WebLengthenIndate weblengthenindate = 62;
  if (has_weblengthenindate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, *this->weblengthenindate_, target);
  }

  // optional .WebCheckBandCoin webcheckbandcoin = 63;
  if (has_webcheckbandcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, *this->webcheckbandcoin_, target);
  }

  // optional .Admin_BroadCast_Req adminBroadCast_req = 64;
  if (has_adminbroadcast_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, *this->adminbroadcast_req_, target);
  }

  // optional .Admin_BroadCast_Rsp adminBroadCast_rsp = 65;
  if (has_adminbroadcast_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, *this->adminbroadcast_rsp_, target);
  }

  // optional .Admin_Reload_Req adminReload_req = 66;
  if (has_adminreload_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, *this->adminreload_req_, target);
  }

  // optional .Admin_Reload_Rsp adminReload_rsp = 67;
  if (has_adminreload_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, *this->adminreload_rsp_, target);
  }

  // optional .UpdateGuestNumber update_guest_number = 68;
  if (has_update_guest_number()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, *this->update_guest_number_, target);
  }

  // optional .Admin_FluentPrice_Req adminFluentPrice_req = 69;
  if (has_adminfluentprice_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, *this->adminfluentprice_req_, target);
  }

  // optional .Admin_FluentPrice_Rsp adminFluentPrice_rsp = 70;
  if (has_adminfluentprice_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, *this->adminfluentprice_rsp_, target);
  }

  // optional .WebUnlock webunlock = 71;
  if (has_webunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, *this->webunlock_, target);
  }

  // optional .WebAddEmployee webaddemployee = 72;
  if (has_webaddemployee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, *this->webaddemployee_, target);
  }

  // optional .Admin_AddGoods_Req adminAddGoods_req = 73;
  if (has_adminaddgoods_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, *this->adminaddgoods_req_, target);
  }

  // optional .Admin_AddGoods_Rsp adminAddGoods_rsp = 74;
  if (has_adminaddgoods_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        74, *this->adminaddgoods_rsp_, target);
  }

  // optional .Admin_SetPublicPraise_Req adminSetPublicPraise_req = 75;
  if (has_adminsetpublicpraise_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        75, *this->adminsetpublicpraise_req_, target);
  }

  // optional .Admin_SetPublicPraise_Rsp adminSetPublicPraise_rsp = 76;
  if (has_adminsetpublicpraise_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        76, *this->adminsetpublicpraise_rsp_, target);
  }

  // optional .Admin_AddGuest_Req adminAddGuest_req = 77;
  if (has_adminaddguest_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        77, *this->adminaddguest_req_, target);
  }

  // optional .Admin_AddGuest_Rsp adminAddGuest_rsp = 78;
  if (has_adminaddguest_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        78, *this->adminaddguest_rsp_, target);
  }

  // optional .Admin_DelGoods_Req adminDelGoods_req = 79;
  if (has_admindelgoods_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        79, *this->admindelgoods_req_, target);
  }

  // optional .Admin_DelGoods_Rsp adminDelGoods_rsp = 80;
  if (has_admindelgoods_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, *this->admindelgoods_rsp_, target);
  }

  // optional .Admin_Clear_Req adminClear_req = 81;
  if (has_adminclear_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        81, *this->adminclear_req_, target);
  }

  // optional .Admin_Clear_Rsp adminClear_rsp = 82;
  if (has_adminclear_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        82, *this->adminclear_rsp_, target);
  }

  // optional .Admin_StatisticsOnLinePeople_Req adminOnLineNum_req = 83;
  if (has_adminonlinenum_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        83, *this->adminonlinenum_req_, target);
  }

  // optional .Admin_StatisticsOnLinePeople_Rsp adminOnLineNum_rsp = 84;
  if (has_adminonlinenum_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        84, *this->adminonlinenum_rsp_, target);
  }

  // optional .Admin_KickPlayer_Req adminKickPlayer_req = 85;
  if (has_adminkickplayer_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        85, *this->adminkickplayer_req_, target);
  }

  // optional .Admin_KickPlayer_Rsp adminKickPlayer_rsp = 86;
  if (has_adminkickplayer_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        86, *this->adminkickplayer_rsp_, target);
  }

  // optional .WebInvite webinvite = 87;
  if (has_webinvite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        87, *this->webinvite_, target);
  }

  // optional .Invite invite = 88;
  if (has_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        88, *this->invite_, target);
  }

  // optional .Admin_STR_Req adminstr_req = 89;
  if (has_adminstr_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        89, *this->adminstr_req_, target);
  }

  // optional .Admin_STR_Rsp adminstr_rsp = 90;
  if (has_adminstr_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        90, *this->adminstr_rsp_, target);
  }

  // optional .WebBuyCfm webbugcfm = 91;
  if (has_webbugcfm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        91, *this->webbugcfm_, target);
  }

  // optional .Admin_SetVal_Req adminSetVal_req = 92;
  if (has_adminsetval_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        92, *this->adminsetval_req_, target);
  }

  // optional .Admin_SetVal_Rsp adminSetVal_rsp = 93;
  if (has_adminsetval_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        93, *this->adminsetval_rsp_, target);
  }

  // optional string sid = 94;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Event.sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        94, this->sid(), target);
  }

  // optional .WebAskFor webAsk = 95;
  if (has_webask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        95, *this->webask_, target);
  }

  // optional .WebGiveFor webGive = 96;
  if (has_webgive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        96, *this->webgive_, target);
  }

  // optional int32 pushbackcnt = 97 [default = 0];
  if (has_pushbackcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(97, this->pushbackcnt(), target);
  }

  // optional .QQUnionAddItem qqunion_additem = 98;
  if (has_qqunion_additem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        98, *this->qqunion_additem_, target);
  }

  // optional .QQUnionCheckOpenId qqunion_checkopenid = 99;
  if (has_qqunion_checkopenid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        99, *this->qqunion_checkopenid_, target);
  }

  // optional .QQUnionCheckKey qqunion_checkkey = 100;
  if (has_qqunion_checkkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, *this->qqunion_checkkey_, target);
  }

  // optional .MultiLevelFriendPoint multi_level_friend_point = 101;
  if (has_multi_level_friend_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, *this->multi_level_friend_point_, target);
  }

  // optional .Admin_Common_Req admin_common_req = 102;
  if (has_admin_common_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, *this->admin_common_req_, target);
  }

  // optional .Admin_Common_Rsp admin_common_rsp = 103;
  if (has_admin_common_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, *this->admin_common_rsp_, target);
  }

  // optional .TalentShow talent_show = 104;
  if (has_talent_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, *this->talent_show_, target);
  }

  // optional .TalentShowList talent_show_list = 105;
  if (has_talent_show_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, *this->talent_show_list_, target);
  }

  // optional int32 gameid = 106;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(106, this->gameid(), target);
  }

  // optional int32 worldid = 107;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(107, this->worldid(), target);
  }

  // optional int32 rankKind = 108;
  if (has_rankkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(108, this->rankkind(), target);
  }

  // optional .WebFreeGift freegift = 109;
  if (has_freegift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, *this->freegift_, target);
  }

  // optional .FriendSendGift friend_send_gift = 110;
  if (has_friend_send_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, *this->friend_send_gift_, target);
  }

  // optional .FortuneSteal fortune_steal = 111;
  if (has_fortune_steal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, *this->fortune_steal_, target);
  }

  // optional .Wap_Str_Request wap_req = 112;
  if (has_wap_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        112, *this->wap_req_, target);
  }

  // optional .Wap_Str_Response wap_rsp = 113;
  if (has_wap_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        113, *this->wap_rsp_, target);
  }

  // optional .FriendRecallMsg friend_recall = 114;
  if (has_friend_recall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        114, *this->friend_recall_, target);
  }

  // optional string openid = 115;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Event.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        115, this->openid(), target);
  }

  // repeated .SimpleMarkUser SimpleMare = 116;
  for (unsigned int i = 0, n = this->simplemare_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        116, this->simplemare(i), target);
  }

  // optional .WebBuy3 webbuy3 = 117;
  if (has_webbuy3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        117, *this->webbuy3_, target);
  }

  // optional .CenterLogicValue center_logic_value = 118;
  if (has_center_logic_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        118, *this->center_logic_value_, target);
  }

  // optional .InviteFriendLvlSucc inviteFridData = 119;
  if (has_invitefriddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        119, *this->invitefriddata_, target);
  }

  // optional .MseAuthState Mse_MseAuthState = 129;
  if (has_mse_mseauthstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        129, *this->mse_mseauthstate_, target);
  }

  // optional .MseFuncSwich Mse_MseFuncSwich = 130;
  if (has_mse_msefuncswich()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        130, *this->mse_msefuncswich_, target);
  }

  // optional .MceGatewayFunction Mce_MceGatewayFunction = 131;
  if (has_mce_mcegatewayfunction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        131, *this->mce_mcegatewayfunction_, target);
  }

  // optional .MseGatewayFunction Mse_MseGatewayFunction = 132;
  if (has_mse_msegatewayfunction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        132, *this->mse_msegatewayfunction_, target);
  }

  // optional .MseFriendList Mse_MseFriendList = 133;
  if (has_mse_msefriendlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        133, *this->mse_msefriendlist_, target);
  }

  // optional .MceHeartbeat Mce_MceHeartbeat = 134;
  if (has_mce_mceheartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        134, *this->mce_mceheartbeat_, target);
  }

  // optional .MceActionInfo Mce_MceActionInfo = 135;
  if (has_mce_mceactioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        135, *this->mce_mceactioninfo_, target);
  }

  // optional .MseActionInfo Mse_MseActionInfo = 136;
  if (has_mse_mseactioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        136, *this->mse_mseactioninfo_, target);
  }

  // optional .MseRank Mse_MseRank = 137;
  if (has_mse_mserank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        137, *this->mse_mserank_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Event)
  return target;
}

int Event::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_cmd()) {
    // required int32 cmd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_time()) {
    // required int64 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  return total_size;
}
int Event::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 cmd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int64 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248) {
    // optional int64 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 fromworld_fd = 5;
    if (has_fromworld_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromworld_fd());
    }

    // optional int32 hallSrvID = 6;
    if (has_hallsrvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hallsrvid());
    }

    // optional .WorkingStatus_Req workingStatus_req = 7;
    if (has_workingstatus_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->workingstatus_req_);
    }

    // optional .UserLogin_Req userLogin_req = 8;
    if (has_userlogin_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->userlogin_req_);
    }

  }
  if (_has_bits_[8 / 32] & 65280) {
    // optional .UserLogin_Rsp userLogin_rsp = 9;
    if (has_userlogin_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->userlogin_rsp_);
    }

    // optional .UserAuth_Req userAuth_req = 10;
    if (has_userauth_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->userauth_req_);
    }

    // optional .UserAuth_Rsp userAuth_rsp = 11;
    if (has_userauth_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->userauth_rsp_);
    }

    // optional .SendRemoteUser_Req sendRemoteUser_req = 12;
    if (has_sendremoteuser_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sendremoteuser_req_);
    }

    // optional .HttpRequestV3 http = 13;
    if (has_http()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->http_);
    }

    // optional .BeLottery be_BeLottery = 14;
    if (has_be_belottery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->be_belottery_);
    }

    // optional .BeUpdateWinInfo be_BeUpdateWinInfo = 15;
    if (has_be_beupdatewininfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->be_beupdatewininfo_);
    }

    // optional .BeUpdateExp be_BeUpdateExp = 16;
    if (has_be_beupdateexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->be_beupdateexp_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680) {
    // optional .BeUpdateTool be_BeUpdateTool = 17;
    if (has_be_beupdatetool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->be_beupdatetool_);
    }

    // optional .DpNormalResult dp_DpNormalResult = 18;
    if (has_dp_dpnormalresult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dp_dpnormalresult_);
    }

    // optional .LotteryTimer lotteryTimer = 19;
    if (has_lotterytimer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lotterytimer_);
    }

    // optional .BeUpdateBattleCnt be_BeUpdateBattleCnt = 20;
    if (has_be_beupdatebattlecnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->be_beupdatebattlecnt_);
    }

    // optional .WG_UserLeave wg_UserLeave = 21;
    if (has_wg_userleave()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wg_userleave_);
    }

    // optional .GWG_FriendRequest friendinfo = 22;
    if (has_friendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->friendinfo_);
    }

    // optional .ForwardInfo forwardinfo = 23;
    if (has_forwardinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->forwardinfo_);
    }

    // optional .Admin_AddExp_Req adminAddExp_req = 33;
    if (has_adminaddexp_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddexp_req_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080) {
    // optional .Admin_AddExp_Rsp adminAddExp_rsp = 34;
    if (has_adminaddexp_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddexp_rsp_);
    }

    // optional .Admin_AddGold_Req adminAddGold_req = 35;
    if (has_adminaddgold_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddgold_req_);
    }

    // optional .Admin_AddGold_Rsp adminAddGold_rsp = 36;
    if (has_adminaddgold_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddgold_rsp_);
    }

    // optional .Admin_SetLevel_Req adminSetLevel_req = 37;
    if (has_adminsetlevel_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminsetlevel_req_);
    }

    // optional .Admin_SetLevel_Rsp adminSetLevel_rsp = 38;
    if (has_adminsetlevel_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminsetlevel_rsp_);
    }

    // optional .Admin_AddProp_Req adminAddProp_req = 39;
    if (has_adminaddprop_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddprop_req_);
    }

    // optional .Admin_AddProp_Rsp adminAddProp_rsp = 40;
    if (has_adminaddprop_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddprop_rsp_);
    }

    // optional .Admin_SetEquip_Req adminSetEquip_req = 41;
    if (has_adminsetequip_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminsetequip_req_);
    }

  }
  if (_has_bits_[32 / 32] & 255) {
    // optional .Admin_SetEquip_Rsp adminSetEquip_rsp = 42;
    if (has_adminsetequip_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminsetequip_rsp_);
    }

    // optional .Admin_UserInfo_Req adminUserInfo_req = 43;
    if (has_adminuserinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminuserinfo_req_);
    }

    // optional .Admin_UserInfo_Rsp adminUserInfo_rsp = 44;
    if (has_adminuserinfo_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminuserinfo_rsp_);
    }

    // optional .Admin_DelProp_Req adminDelProp_req = 45;
    if (has_admindelprop_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->admindelprop_req_);
    }

    // optional .Admin_DelProp_Rsp adminDelProp_rsp = 46;
    if (has_admindelprop_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->admindelprop_rsp_);
    }

    // optional .WebBuy webbuy = 47;
    if (has_webbuy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->webbuy_);
    }

    // optional .Admin_RunTask_Req adminRunTask_req = 48;
    if (has_adminruntask_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminruntask_req_);
    }

    // optional .Admin_RunTask_Rsp adminRunTask_rsp = 49;
    if (has_adminruntask_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminruntask_rsp_);
    }

  }
  if (_has_bits_[40 / 32] & 65280) {
    // optional .Admin_BanChat_Req adminBanChat_req = 50;
    if (has_adminbanchat_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminbanchat_req_);
    }

    // optional .Admin_BanChat_Rsp adminBanChat_rsp = 51;
    if (has_adminbanchat_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminbanchat_rsp_);
    }

    // optional .Admin_BanLogin_Req adminBanLogin_req = 52;
    if (has_adminbanlogin_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminbanlogin_req_);
    }

    // optional .Admin_BanLogin_Rsp adminBanLogin_rsp = 53;
    if (has_adminbanlogin_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminbanlogin_rsp_);
    }

    // optional .Admin_AddPoint_Req adminAddPoint_req = 54;
    if (has_adminaddpoint_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddpoint_req_);
    }

    // optional .Admin_AddPoint_Rsp adminAddPoint_rsp = 55;
    if (has_adminaddpoint_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddpoint_rsp_);
    }

    // optional .Admin_AddIndate_Req adminAddIndate_req = 56;
    if (has_adminaddindate_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddindate_req_);
    }

    // optional .Admin_AddIndate_Rsp adminAddIndate_rsp = 57;
    if (has_adminaddindate_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddindate_rsp_);
    }

  }
  if (_has_bits_[48 / 32] & 16711680) {
    // optional .Admin_FreshUser_Req adminFreshUser_req = 58;
    if (has_adminfreshuser_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminfreshuser_req_);
    }

    // optional .Admin_FreshUser_Rsp adminFreshUser_rsp = 59;
    if (has_adminfreshuser_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminfreshuser_rsp_);
    }

    // optional .Admin_AddMedal_Req adminAddMedal_req = 60;
    if (has_adminaddmedal_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddmedal_req_);
    }

    // optional .Admin_AddMedal_Rsp adminAddMedal_rsp = 61;
    if (has_adminaddmedal_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddmedal_rsp_);
    }

    // optional .WebLengthenIndate weblengthenindate = 62;
    if (has_weblengthenindate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weblengthenindate_);
    }

    // optional .WebCheckBandCoin webcheckbandcoin = 63;
    if (has_webcheckbandcoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->webcheckbandcoin_);
    }

    // optional .Admin_BroadCast_Req adminBroadCast_req = 64;
    if (has_adminbroadcast_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminbroadcast_req_);
    }

    // optional .Admin_BroadCast_Rsp adminBroadCast_rsp = 65;
    if (has_adminbroadcast_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminbroadcast_rsp_);
    }

  }
  if (_has_bits_[56 / 32] & 4278190080) {
    // optional .Admin_Reload_Req adminReload_req = 66;
    if (has_adminreload_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminreload_req_);
    }

    // optional .Admin_Reload_Rsp adminReload_rsp = 67;
    if (has_adminreload_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminreload_rsp_);
    }

    // optional .UpdateGuestNumber update_guest_number = 68;
    if (has_update_guest_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_guest_number_);
    }

    // optional .Admin_FluentPrice_Req adminFluentPrice_req = 69;
    if (has_adminfluentprice_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminfluentprice_req_);
    }

    // optional .Admin_FluentPrice_Rsp adminFluentPrice_rsp = 70;
    if (has_adminfluentprice_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminfluentprice_rsp_);
    }

    // optional .WebUnlock webunlock = 71;
    if (has_webunlock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->webunlock_);
    }

    // optional .WebAddEmployee webaddemployee = 72;
    if (has_webaddemployee()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->webaddemployee_);
    }

    // optional .Admin_AddGoods_Req adminAddGoods_req = 73;
    if (has_adminaddgoods_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddgoods_req_);
    }

  }
  if (_has_bits_[64 / 32] & 255) {
    // optional .Admin_AddGoods_Rsp adminAddGoods_rsp = 74;
    if (has_adminaddgoods_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddgoods_rsp_);
    }

    // optional .Admin_SetPublicPraise_Req adminSetPublicPraise_req = 75;
    if (has_adminsetpublicpraise_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminsetpublicpraise_req_);
    }

    // optional .Admin_SetPublicPraise_Rsp adminSetPublicPraise_rsp = 76;
    if (has_adminsetpublicpraise_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminsetpublicpraise_rsp_);
    }

    // optional .Admin_AddGuest_Req adminAddGuest_req = 77;
    if (has_adminaddguest_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddguest_req_);
    }

    // optional .Admin_AddGuest_Rsp adminAddGuest_rsp = 78;
    if (has_adminaddguest_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminaddguest_rsp_);
    }

    // optional .Admin_DelGoods_Req adminDelGoods_req = 79;
    if (has_admindelgoods_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->admindelgoods_req_);
    }

    // optional .Admin_DelGoods_Rsp adminDelGoods_rsp = 80;
    if (has_admindelgoods_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->admindelgoods_rsp_);
    }

    // optional .Admin_Clear_Req adminClear_req = 81;
    if (has_adminclear_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminclear_req_);
    }

  }
  if (_has_bits_[72 / 32] & 65280) {
    // optional .Admin_Clear_Rsp adminClear_rsp = 82;
    if (has_adminclear_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminclear_rsp_);
    }

    // optional .Admin_StatisticsOnLinePeople_Req adminOnLineNum_req = 83;
    if (has_adminonlinenum_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminonlinenum_req_);
    }

    // optional .Admin_StatisticsOnLinePeople_Rsp adminOnLineNum_rsp = 84;
    if (has_adminonlinenum_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminonlinenum_rsp_);
    }

    // optional .Admin_KickPlayer_Req adminKickPlayer_req = 85;
    if (has_adminkickplayer_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminkickplayer_req_);
    }

    // optional .Admin_KickPlayer_Rsp adminKickPlayer_rsp = 86;
    if (has_adminkickplayer_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminkickplayer_rsp_);
    }

    // optional .WebInvite webinvite = 87;
    if (has_webinvite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->webinvite_);
    }

    // optional .Invite invite = 88;
    if (has_invite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->invite_);
    }

    // optional .Admin_STR_Req adminstr_req = 89;
    if (has_adminstr_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminstr_req_);
    }

  }
  if (_has_bits_[80 / 32] & 16711680) {
    // optional .Admin_STR_Rsp adminstr_rsp = 90;
    if (has_adminstr_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminstr_rsp_);
    }

    // optional .WebBuyCfm webbugcfm = 91;
    if (has_webbugcfm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->webbugcfm_);
    }

    // optional .Admin_SetVal_Req adminSetVal_req = 92;
    if (has_adminsetval_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminsetval_req_);
    }

    // optional .Admin_SetVal_Rsp adminSetVal_rsp = 93;
    if (has_adminsetval_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminsetval_rsp_);
    }

    // optional string sid = 94;
    if (has_sid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // optional .WebAskFor webAsk = 95;
    if (has_webask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->webask_);
    }

    // optional .WebGiveFor webGive = 96;
    if (has_webgive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->webgive_);
    }

    // optional int32 pushbackcnt = 97 [default = 0];
    if (has_pushbackcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pushbackcnt());
    }

  }
  if (_has_bits_[88 / 32] & 4278190080) {
    // optional .QQUnionAddItem qqunion_additem = 98;
    if (has_qqunion_additem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qqunion_additem_);
    }

    // optional .QQUnionCheckOpenId qqunion_checkopenid = 99;
    if (has_qqunion_checkopenid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qqunion_checkopenid_);
    }

    // optional .QQUnionCheckKey qqunion_checkkey = 100;
    if (has_qqunion_checkkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qqunion_checkkey_);
    }

    // optional .MultiLevelFriendPoint multi_level_friend_point = 101;
    if (has_multi_level_friend_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->multi_level_friend_point_);
    }

    // optional .Admin_Common_Req admin_common_req = 102;
    if (has_admin_common_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->admin_common_req_);
    }

    // optional .Admin_Common_Rsp admin_common_rsp = 103;
    if (has_admin_common_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->admin_common_rsp_);
    }

    // optional .TalentShow talent_show = 104;
    if (has_talent_show()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->talent_show_);
    }

    // optional .TalentShowList talent_show_list = 105;
    if (has_talent_show_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->talent_show_list_);
    }

  }
  if (_has_bits_[96 / 32] & 255) {
    // optional int32 gameid = 106;
    if (has_gameid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 worldid = 107;
    if (has_worldid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worldid());
    }

    // optional int32 rankKind = 108;
    if (has_rankkind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankkind());
    }

    // optional .WebFreeGift freegift = 109;
    if (has_freegift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->freegift_);
    }

    // optional .FriendSendGift friend_send_gift = 110;
    if (has_friend_send_gift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->friend_send_gift_);
    }

    // optional .FortuneSteal fortune_steal = 111;
    if (has_fortune_steal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fortune_steal_);
    }

    // optional .Wap_Str_Request wap_req = 112;
    if (has_wap_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wap_req_);
    }

    // optional .Wap_Str_Response wap_rsp = 113;
    if (has_wap_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wap_rsp_);
    }

  }
  if (_has_bits_[104 / 32] & 64256) {
    // optional .FriendRecallMsg friend_recall = 114;
    if (has_friend_recall()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->friend_recall_);
    }

    // optional string openid = 115;
    if (has_openid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional .WebBuy3 webbuy3 = 117;
    if (has_webbuy3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->webbuy3_);
    }

    // optional .CenterLogicValue center_logic_value = 118;
    if (has_center_logic_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->center_logic_value_);
    }

    // optional .InviteFriendLvlSucc inviteFridData = 119;
    if (has_invitefriddata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->invitefriddata_);
    }

    // optional .MseAuthState Mse_MseAuthState = 129;
    if (has_mse_mseauthstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mse_mseauthstate_);
    }

    // optional .MseFuncSwich Mse_MseFuncSwich = 130;
    if (has_mse_msefuncswich()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mse_msefuncswich_);
    }

  }
  if (_has_bits_[112 / 32] & 8323072) {
    // optional .MceGatewayFunction Mce_MceGatewayFunction = 131;
    if (has_mce_mcegatewayfunction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mce_mcegatewayfunction_);
    }

    // optional .MseGatewayFunction Mse_MseGatewayFunction = 132;
    if (has_mse_msegatewayfunction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mse_msegatewayfunction_);
    }

    // optional .MseFriendList Mse_MseFriendList = 133;
    if (has_mse_msefriendlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mse_msefriendlist_);
    }

    // optional .MceHeartbeat Mce_MceHeartbeat = 134;
    if (has_mce_mceheartbeat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mce_mceheartbeat_);
    }

    // optional .MceActionInfo Mce_MceActionInfo = 135;
    if (has_mce_mceactioninfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mce_mceactioninfo_);
    }

    // optional .MseActionInfo Mse_MseActionInfo = 136;
    if (has_mse_mseactioninfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mse_mseactioninfo_);
    }

    // optional .MseRank Mse_MseRank = 137;
    if (has_mse_mserank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mse_mserank_);
    }

  }
  // repeated .SimpleMarkUser SimpleMare = 116;
  total_size += 2 * this->simplemare_size();
  for (int i = 0; i < this->simplemare_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simplemare(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  simplemare_.MergeFrom(from.simplemare_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_fromworld_fd()) {
      set_fromworld_fd(from.fromworld_fd());
    }
    if (from.has_hallsrvid()) {
      set_hallsrvid(from.hallsrvid());
    }
    if (from.has_workingstatus_req()) {
      mutable_workingstatus_req()->::WorkingStatus_Req::MergeFrom(from.workingstatus_req());
    }
    if (from.has_userlogin_req()) {
      mutable_userlogin_req()->::UserLogin_Req::MergeFrom(from.userlogin_req());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_userlogin_rsp()) {
      mutable_userlogin_rsp()->::UserLogin_Rsp::MergeFrom(from.userlogin_rsp());
    }
    if (from.has_userauth_req()) {
      mutable_userauth_req()->::UserAuth_Req::MergeFrom(from.userauth_req());
    }
    if (from.has_userauth_rsp()) {
      mutable_userauth_rsp()->::UserAuth_Rsp::MergeFrom(from.userauth_rsp());
    }
    if (from.has_sendremoteuser_req()) {
      mutable_sendremoteuser_req()->::SendRemoteUser_Req::MergeFrom(from.sendremoteuser_req());
    }
    if (from.has_http()) {
      mutable_http()->::HttpRequestV3::MergeFrom(from.http());
    }
    if (from.has_be_belottery()) {
      mutable_be_belottery()->::BeLottery::MergeFrom(from.be_belottery());
    }
    if (from.has_be_beupdatewininfo()) {
      mutable_be_beupdatewininfo()->::BeUpdateWinInfo::MergeFrom(from.be_beupdatewininfo());
    }
    if (from.has_be_beupdateexp()) {
      mutable_be_beupdateexp()->::BeUpdateExp::MergeFrom(from.be_beupdateexp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_be_beupdatetool()) {
      mutable_be_beupdatetool()->::BeUpdateTool::MergeFrom(from.be_beupdatetool());
    }
    if (from.has_dp_dpnormalresult()) {
      mutable_dp_dpnormalresult()->::DpNormalResult::MergeFrom(from.dp_dpnormalresult());
    }
    if (from.has_lotterytimer()) {
      mutable_lotterytimer()->::LotteryTimer::MergeFrom(from.lotterytimer());
    }
    if (from.has_be_beupdatebattlecnt()) {
      mutable_be_beupdatebattlecnt()->::BeUpdateBattleCnt::MergeFrom(from.be_beupdatebattlecnt());
    }
    if (from.has_wg_userleave()) {
      mutable_wg_userleave()->::WG_UserLeave::MergeFrom(from.wg_userleave());
    }
    if (from.has_friendinfo()) {
      mutable_friendinfo()->::GWG_FriendRequest::MergeFrom(from.friendinfo());
    }
    if (from.has_forwardinfo()) {
      mutable_forwardinfo()->::ForwardInfo::MergeFrom(from.forwardinfo());
    }
    if (from.has_adminaddexp_req()) {
      mutable_adminaddexp_req()->::Admin_AddExp_Req::MergeFrom(from.adminaddexp_req());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_adminaddexp_rsp()) {
      mutable_adminaddexp_rsp()->::Admin_AddExp_Rsp::MergeFrom(from.adminaddexp_rsp());
    }
    if (from.has_adminaddgold_req()) {
      mutable_adminaddgold_req()->::Admin_AddGold_Req::MergeFrom(from.adminaddgold_req());
    }
    if (from.has_adminaddgold_rsp()) {
      mutable_adminaddgold_rsp()->::Admin_AddGold_Rsp::MergeFrom(from.adminaddgold_rsp());
    }
    if (from.has_adminsetlevel_req()) {
      mutable_adminsetlevel_req()->::Admin_SetLevel_Req::MergeFrom(from.adminsetlevel_req());
    }
    if (from.has_adminsetlevel_rsp()) {
      mutable_adminsetlevel_rsp()->::Admin_SetLevel_Rsp::MergeFrom(from.adminsetlevel_rsp());
    }
    if (from.has_adminaddprop_req()) {
      mutable_adminaddprop_req()->::Admin_AddProp_Req::MergeFrom(from.adminaddprop_req());
    }
    if (from.has_adminaddprop_rsp()) {
      mutable_adminaddprop_rsp()->::Admin_AddProp_Rsp::MergeFrom(from.adminaddprop_rsp());
    }
    if (from.has_adminsetequip_req()) {
      mutable_adminsetequip_req()->::Admin_SetEquip_Req::MergeFrom(from.adminsetequip_req());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_adminsetequip_rsp()) {
      mutable_adminsetequip_rsp()->::Admin_SetEquip_Rsp::MergeFrom(from.adminsetequip_rsp());
    }
    if (from.has_adminuserinfo_req()) {
      mutable_adminuserinfo_req()->::Admin_UserInfo_Req::MergeFrom(from.adminuserinfo_req());
    }
    if (from.has_adminuserinfo_rsp()) {
      mutable_adminuserinfo_rsp()->::Admin_UserInfo_Rsp::MergeFrom(from.adminuserinfo_rsp());
    }
    if (from.has_admindelprop_req()) {
      mutable_admindelprop_req()->::Admin_DelProp_Req::MergeFrom(from.admindelprop_req());
    }
    if (from.has_admindelprop_rsp()) {
      mutable_admindelprop_rsp()->::Admin_DelProp_Rsp::MergeFrom(from.admindelprop_rsp());
    }
    if (from.has_webbuy()) {
      mutable_webbuy()->::WebBuy::MergeFrom(from.webbuy());
    }
    if (from.has_adminruntask_req()) {
      mutable_adminruntask_req()->::Admin_RunTask_Req::MergeFrom(from.adminruntask_req());
    }
    if (from.has_adminruntask_rsp()) {
      mutable_adminruntask_rsp()->::Admin_RunTask_Rsp::MergeFrom(from.adminruntask_rsp());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_adminbanchat_req()) {
      mutable_adminbanchat_req()->::Admin_BanChat_Req::MergeFrom(from.adminbanchat_req());
    }
    if (from.has_adminbanchat_rsp()) {
      mutable_adminbanchat_rsp()->::Admin_BanChat_Rsp::MergeFrom(from.adminbanchat_rsp());
    }
    if (from.has_adminbanlogin_req()) {
      mutable_adminbanlogin_req()->::Admin_BanLogin_Req::MergeFrom(from.adminbanlogin_req());
    }
    if (from.has_adminbanlogin_rsp()) {
      mutable_adminbanlogin_rsp()->::Admin_BanLogin_Rsp::MergeFrom(from.adminbanlogin_rsp());
    }
    if (from.has_adminaddpoint_req()) {
      mutable_adminaddpoint_req()->::Admin_AddPoint_Req::MergeFrom(from.adminaddpoint_req());
    }
    if (from.has_adminaddpoint_rsp()) {
      mutable_adminaddpoint_rsp()->::Admin_AddPoint_Rsp::MergeFrom(from.adminaddpoint_rsp());
    }
    if (from.has_adminaddindate_req()) {
      mutable_adminaddindate_req()->::Admin_AddIndate_Req::MergeFrom(from.adminaddindate_req());
    }
    if (from.has_adminaddindate_rsp()) {
      mutable_adminaddindate_rsp()->::Admin_AddIndate_Rsp::MergeFrom(from.adminaddindate_rsp());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_adminfreshuser_req()) {
      mutable_adminfreshuser_req()->::Admin_FreshUser_Req::MergeFrom(from.adminfreshuser_req());
    }
    if (from.has_adminfreshuser_rsp()) {
      mutable_adminfreshuser_rsp()->::Admin_FreshUser_Rsp::MergeFrom(from.adminfreshuser_rsp());
    }
    if (from.has_adminaddmedal_req()) {
      mutable_adminaddmedal_req()->::Admin_AddMedal_Req::MergeFrom(from.adminaddmedal_req());
    }
    if (from.has_adminaddmedal_rsp()) {
      mutable_adminaddmedal_rsp()->::Admin_AddMedal_Rsp::MergeFrom(from.adminaddmedal_rsp());
    }
    if (from.has_weblengthenindate()) {
      mutable_weblengthenindate()->::WebLengthenIndate::MergeFrom(from.weblengthenindate());
    }
    if (from.has_webcheckbandcoin()) {
      mutable_webcheckbandcoin()->::WebCheckBandCoin::MergeFrom(from.webcheckbandcoin());
    }
    if (from.has_adminbroadcast_req()) {
      mutable_adminbroadcast_req()->::Admin_BroadCast_Req::MergeFrom(from.adminbroadcast_req());
    }
    if (from.has_adminbroadcast_rsp()) {
      mutable_adminbroadcast_rsp()->::Admin_BroadCast_Rsp::MergeFrom(from.adminbroadcast_rsp());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_adminreload_req()) {
      mutable_adminreload_req()->::Admin_Reload_Req::MergeFrom(from.adminreload_req());
    }
    if (from.has_adminreload_rsp()) {
      mutable_adminreload_rsp()->::Admin_Reload_Rsp::MergeFrom(from.adminreload_rsp());
    }
    if (from.has_update_guest_number()) {
      mutable_update_guest_number()->::UpdateGuestNumber::MergeFrom(from.update_guest_number());
    }
    if (from.has_adminfluentprice_req()) {
      mutable_adminfluentprice_req()->::Admin_FluentPrice_Req::MergeFrom(from.adminfluentprice_req());
    }
    if (from.has_adminfluentprice_rsp()) {
      mutable_adminfluentprice_rsp()->::Admin_FluentPrice_Rsp::MergeFrom(from.adminfluentprice_rsp());
    }
    if (from.has_webunlock()) {
      mutable_webunlock()->::WebUnlock::MergeFrom(from.webunlock());
    }
    if (from.has_webaddemployee()) {
      mutable_webaddemployee()->::WebAddEmployee::MergeFrom(from.webaddemployee());
    }
    if (from.has_adminaddgoods_req()) {
      mutable_adminaddgoods_req()->::Admin_AddGoods_Req::MergeFrom(from.adminaddgoods_req());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_adminaddgoods_rsp()) {
      mutable_adminaddgoods_rsp()->::Admin_AddGoods_Rsp::MergeFrom(from.adminaddgoods_rsp());
    }
    if (from.has_adminsetpublicpraise_req()) {
      mutable_adminsetpublicpraise_req()->::Admin_SetPublicPraise_Req::MergeFrom(from.adminsetpublicpraise_req());
    }
    if (from.has_adminsetpublicpraise_rsp()) {
      mutable_adminsetpublicpraise_rsp()->::Admin_SetPublicPraise_Rsp::MergeFrom(from.adminsetpublicpraise_rsp());
    }
    if (from.has_adminaddguest_req()) {
      mutable_adminaddguest_req()->::Admin_AddGuest_Req::MergeFrom(from.adminaddguest_req());
    }
    if (from.has_adminaddguest_rsp()) {
      mutable_adminaddguest_rsp()->::Admin_AddGuest_Rsp::MergeFrom(from.adminaddguest_rsp());
    }
    if (from.has_admindelgoods_req()) {
      mutable_admindelgoods_req()->::Admin_DelGoods_Req::MergeFrom(from.admindelgoods_req());
    }
    if (from.has_admindelgoods_rsp()) {
      mutable_admindelgoods_rsp()->::Admin_DelGoods_Rsp::MergeFrom(from.admindelgoods_rsp());
    }
    if (from.has_adminclear_req()) {
      mutable_adminclear_req()->::Admin_Clear_Req::MergeFrom(from.adminclear_req());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_adminclear_rsp()) {
      mutable_adminclear_rsp()->::Admin_Clear_Rsp::MergeFrom(from.adminclear_rsp());
    }
    if (from.has_adminonlinenum_req()) {
      mutable_adminonlinenum_req()->::Admin_StatisticsOnLinePeople_Req::MergeFrom(from.adminonlinenum_req());
    }
    if (from.has_adminonlinenum_rsp()) {
      mutable_adminonlinenum_rsp()->::Admin_StatisticsOnLinePeople_Rsp::MergeFrom(from.adminonlinenum_rsp());
    }
    if (from.has_adminkickplayer_req()) {
      mutable_adminkickplayer_req()->::Admin_KickPlayer_Req::MergeFrom(from.adminkickplayer_req());
    }
    if (from.has_adminkickplayer_rsp()) {
      mutable_adminkickplayer_rsp()->::Admin_KickPlayer_Rsp::MergeFrom(from.adminkickplayer_rsp());
    }
    if (from.has_webinvite()) {
      mutable_webinvite()->::WebInvite::MergeFrom(from.webinvite());
    }
    if (from.has_invite()) {
      mutable_invite()->::Invite::MergeFrom(from.invite());
    }
    if (from.has_adminstr_req()) {
      mutable_adminstr_req()->::Admin_STR_Req::MergeFrom(from.adminstr_req());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_adminstr_rsp()) {
      mutable_adminstr_rsp()->::Admin_STR_Rsp::MergeFrom(from.adminstr_rsp());
    }
    if (from.has_webbugcfm()) {
      mutable_webbugcfm()->::WebBuyCfm::MergeFrom(from.webbugcfm());
    }
    if (from.has_adminsetval_req()) {
      mutable_adminsetval_req()->::Admin_SetVal_Req::MergeFrom(from.adminsetval_req());
    }
    if (from.has_adminsetval_rsp()) {
      mutable_adminsetval_rsp()->::Admin_SetVal_Rsp::MergeFrom(from.adminsetval_rsp());
    }
    if (from.has_sid()) {
      set_has_sid();
      sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
    }
    if (from.has_webask()) {
      mutable_webask()->::WebAskFor::MergeFrom(from.webask());
    }
    if (from.has_webgive()) {
      mutable_webgive()->::WebGiveFor::MergeFrom(from.webgive());
    }
    if (from.has_pushbackcnt()) {
      set_pushbackcnt(from.pushbackcnt());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_qqunion_additem()) {
      mutable_qqunion_additem()->::QQUnionAddItem::MergeFrom(from.qqunion_additem());
    }
    if (from.has_qqunion_checkopenid()) {
      mutable_qqunion_checkopenid()->::QQUnionCheckOpenId::MergeFrom(from.qqunion_checkopenid());
    }
    if (from.has_qqunion_checkkey()) {
      mutable_qqunion_checkkey()->::QQUnionCheckKey::MergeFrom(from.qqunion_checkkey());
    }
    if (from.has_multi_level_friend_point()) {
      mutable_multi_level_friend_point()->::MultiLevelFriendPoint::MergeFrom(from.multi_level_friend_point());
    }
    if (from.has_admin_common_req()) {
      mutable_admin_common_req()->::Admin_Common_Req::MergeFrom(from.admin_common_req());
    }
    if (from.has_admin_common_rsp()) {
      mutable_admin_common_rsp()->::Admin_Common_Rsp::MergeFrom(from.admin_common_rsp());
    }
    if (from.has_talent_show()) {
      mutable_talent_show()->::TalentShow::MergeFrom(from.talent_show());
    }
    if (from.has_talent_show_list()) {
      mutable_talent_show_list()->::TalentShowList::MergeFrom(from.talent_show_list());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_rankkind()) {
      set_rankkind(from.rankkind());
    }
    if (from.has_freegift()) {
      mutable_freegift()->::WebFreeGift::MergeFrom(from.freegift());
    }
    if (from.has_friend_send_gift()) {
      mutable_friend_send_gift()->::FriendSendGift::MergeFrom(from.friend_send_gift());
    }
    if (from.has_fortune_steal()) {
      mutable_fortune_steal()->::FortuneSteal::MergeFrom(from.fortune_steal());
    }
    if (from.has_wap_req()) {
      mutable_wap_req()->::Wap_Str_Request::MergeFrom(from.wap_req());
    }
    if (from.has_wap_rsp()) {
      mutable_wap_rsp()->::Wap_Str_Response::MergeFrom(from.wap_rsp());
    }
  }
  if (from._has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    if (from.has_friend_recall()) {
      mutable_friend_recall()->::FriendRecallMsg::MergeFrom(from.friend_recall());
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_webbuy3()) {
      mutable_webbuy3()->::WebBuy3::MergeFrom(from.webbuy3());
    }
    if (from.has_center_logic_value()) {
      mutable_center_logic_value()->::CenterLogicValue::MergeFrom(from.center_logic_value());
    }
    if (from.has_invitefriddata()) {
      mutable_invitefriddata()->::InviteFriendLvlSucc::MergeFrom(from.invitefriddata());
    }
    if (from.has_mse_mseauthstate()) {
      mutable_mse_mseauthstate()->::MseAuthState::MergeFrom(from.mse_mseauthstate());
    }
    if (from.has_mse_msefuncswich()) {
      mutable_mse_msefuncswich()->::MseFuncSwich::MergeFrom(from.mse_msefuncswich());
    }
  }
  if (from._has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    if (from.has_mce_mcegatewayfunction()) {
      mutable_mce_mcegatewayfunction()->::MceGatewayFunction::MergeFrom(from.mce_mcegatewayfunction());
    }
    if (from.has_mse_msegatewayfunction()) {
      mutable_mse_msegatewayfunction()->::MseGatewayFunction::MergeFrom(from.mse_msegatewayfunction());
    }
    if (from.has_mse_msefriendlist()) {
      mutable_mse_msefriendlist()->::MseFriendList::MergeFrom(from.mse_msefriendlist());
    }
    if (from.has_mce_mceheartbeat()) {
      mutable_mce_mceheartbeat()->::MceHeartbeat::MergeFrom(from.mce_mceheartbeat());
    }
    if (from.has_mce_mceactioninfo()) {
      mutable_mce_mceactioninfo()->::MceActionInfo::MergeFrom(from.mce_mceactioninfo());
    }
    if (from.has_mse_mseactioninfo()) {
      mutable_mse_mseactioninfo()->::MseActionInfo::MergeFrom(from.mse_mseactioninfo());
    }
    if (from.has_mse_mserank()) {
      mutable_mse_mserank()->::MseRank::MergeFrom(from.mse_mserank());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_workingstatus_req()) {
    if (!this->workingstatus_req_->IsInitialized()) return false;
  }
  if (has_userlogin_req()) {
    if (!this->userlogin_req_->IsInitialized()) return false;
  }
  if (has_userlogin_rsp()) {
    if (!this->userlogin_rsp_->IsInitialized()) return false;
  }
  if (has_userauth_req()) {
    if (!this->userauth_req_->IsInitialized()) return false;
  }
  if (has_userauth_rsp()) {
    if (!this->userauth_rsp_->IsInitialized()) return false;
  }
  if (has_sendremoteuser_req()) {
    if (!this->sendremoteuser_req_->IsInitialized()) return false;
  }
  if (has_be_belottery()) {
    if (!this->be_belottery_->IsInitialized()) return false;
  }
  if (has_be_beupdatewininfo()) {
    if (!this->be_beupdatewininfo_->IsInitialized()) return false;
  }
  if (has_be_beupdateexp()) {
    if (!this->be_beupdateexp_->IsInitialized()) return false;
  }
  if (has_be_beupdatetool()) {
    if (!this->be_beupdatetool_->IsInitialized()) return false;
  }
  if (has_dp_dpnormalresult()) {
    if (!this->dp_dpnormalresult_->IsInitialized()) return false;
  }
  if (has_lotterytimer()) {
    if (!this->lotterytimer_->IsInitialized()) return false;
  }
  if (has_be_beupdatebattlecnt()) {
    if (!this->be_beupdatebattlecnt_->IsInitialized()) return false;
  }
  if (has_wg_userleave()) {
    if (!this->wg_userleave_->IsInitialized()) return false;
  }
  if (has_friendinfo()) {
    if (!this->friendinfo_->IsInitialized()) return false;
  }
  if (has_adminaddexp_req()) {
    if (!this->adminaddexp_req_->IsInitialized()) return false;
  }
  if (has_adminaddexp_rsp()) {
    if (!this->adminaddexp_rsp_->IsInitialized()) return false;
  }
  if (has_adminaddgold_req()) {
    if (!this->adminaddgold_req_->IsInitialized()) return false;
  }
  if (has_adminaddgold_rsp()) {
    if (!this->adminaddgold_rsp_->IsInitialized()) return false;
  }
  if (has_adminsetlevel_req()) {
    if (!this->adminsetlevel_req_->IsInitialized()) return false;
  }
  if (has_adminsetlevel_rsp()) {
    if (!this->adminsetlevel_rsp_->IsInitialized()) return false;
  }
  if (has_adminaddprop_req()) {
    if (!this->adminaddprop_req_->IsInitialized()) return false;
  }
  if (has_adminaddprop_rsp()) {
    if (!this->adminaddprop_rsp_->IsInitialized()) return false;
  }
  if (has_adminsetequip_req()) {
    if (!this->adminsetequip_req_->IsInitialized()) return false;
  }
  if (has_adminsetequip_rsp()) {
    if (!this->adminsetequip_rsp_->IsInitialized()) return false;
  }
  if (has_adminuserinfo_req()) {
    if (!this->adminuserinfo_req_->IsInitialized()) return false;
  }
  if (has_adminuserinfo_rsp()) {
    if (!this->adminuserinfo_rsp_->IsInitialized()) return false;
  }
  if (has_admindelprop_req()) {
    if (!this->admindelprop_req_->IsInitialized()) return false;
  }
  if (has_admindelprop_rsp()) {
    if (!this->admindelprop_rsp_->IsInitialized()) return false;
  }
  if (has_webbuy()) {
    if (!this->webbuy_->IsInitialized()) return false;
  }
  if (has_adminruntask_req()) {
    if (!this->adminruntask_req_->IsInitialized()) return false;
  }
  if (has_adminruntask_rsp()) {
    if (!this->adminruntask_rsp_->IsInitialized()) return false;
  }
  if (has_adminbanchat_req()) {
    if (!this->adminbanchat_req_->IsInitialized()) return false;
  }
  if (has_adminbanchat_rsp()) {
    if (!this->adminbanchat_rsp_->IsInitialized()) return false;
  }
  if (has_adminbanlogin_req()) {
    if (!this->adminbanlogin_req_->IsInitialized()) return false;
  }
  if (has_adminbanlogin_rsp()) {
    if (!this->adminbanlogin_rsp_->IsInitialized()) return false;
  }
  if (has_adminaddpoint_req()) {
    if (!this->adminaddpoint_req_->IsInitialized()) return false;
  }
  if (has_adminaddpoint_rsp()) {
    if (!this->adminaddpoint_rsp_->IsInitialized()) return false;
  }
  if (has_adminaddindate_req()) {
    if (!this->adminaddindate_req_->IsInitialized()) return false;
  }
  if (has_adminaddindate_rsp()) {
    if (!this->adminaddindate_rsp_->IsInitialized()) return false;
  }
  if (has_adminfreshuser_req()) {
    if (!this->adminfreshuser_req_->IsInitialized()) return false;
  }
  if (has_adminfreshuser_rsp()) {
    if (!this->adminfreshuser_rsp_->IsInitialized()) return false;
  }
  if (has_adminaddmedal_req()) {
    if (!this->adminaddmedal_req_->IsInitialized()) return false;
  }
  if (has_adminaddmedal_rsp()) {
    if (!this->adminaddmedal_rsp_->IsInitialized()) return false;
  }
  if (has_weblengthenindate()) {
    if (!this->weblengthenindate_->IsInitialized()) return false;
  }
  if (has_webcheckbandcoin()) {
    if (!this->webcheckbandcoin_->IsInitialized()) return false;
  }
  if (has_adminbroadcast_req()) {
    if (!this->adminbroadcast_req_->IsInitialized()) return false;
  }
  if (has_adminbroadcast_rsp()) {
    if (!this->adminbroadcast_rsp_->IsInitialized()) return false;
  }
  if (has_adminreload_req()) {
    if (!this->adminreload_req_->IsInitialized()) return false;
  }
  if (has_adminreload_rsp()) {
    if (!this->adminreload_rsp_->IsInitialized()) return false;
  }
  if (has_adminfluentprice_req()) {
    if (!this->adminfluentprice_req_->IsInitialized()) return false;
  }
  if (has_adminfluentprice_rsp()) {
    if (!this->adminfluentprice_rsp_->IsInitialized()) return false;
  }
  if (has_webunlock()) {
    if (!this->webunlock_->IsInitialized()) return false;
  }
  if (has_webaddemployee()) {
    if (!this->webaddemployee_->IsInitialized()) return false;
  }
  if (has_adminaddgoods_req()) {
    if (!this->adminaddgoods_req_->IsInitialized()) return false;
  }
  if (has_adminaddgoods_rsp()) {
    if (!this->adminaddgoods_rsp_->IsInitialized()) return false;
  }
  if (has_adminsetpublicpraise_req()) {
    if (!this->adminsetpublicpraise_req_->IsInitialized()) return false;
  }
  if (has_adminsetpublicpraise_rsp()) {
    if (!this->adminsetpublicpraise_rsp_->IsInitialized()) return false;
  }
  if (has_adminaddguest_req()) {
    if (!this->adminaddguest_req_->IsInitialized()) return false;
  }
  if (has_adminaddguest_rsp()) {
    if (!this->adminaddguest_rsp_->IsInitialized()) return false;
  }
  if (has_admindelgoods_req()) {
    if (!this->admindelgoods_req_->IsInitialized()) return false;
  }
  if (has_admindelgoods_rsp()) {
    if (!this->admindelgoods_rsp_->IsInitialized()) return false;
  }
  if (has_adminclear_req()) {
    if (!this->adminclear_req_->IsInitialized()) return false;
  }
  if (has_adminclear_rsp()) {
    if (!this->adminclear_rsp_->IsInitialized()) return false;
  }
  if (has_adminonlinenum_req()) {
    if (!this->adminonlinenum_req_->IsInitialized()) return false;
  }
  if (has_adminonlinenum_rsp()) {
    if (!this->adminonlinenum_rsp_->IsInitialized()) return false;
  }
  if (has_adminkickplayer_req()) {
    if (!this->adminkickplayer_req_->IsInitialized()) return false;
  }
  if (has_adminkickplayer_rsp()) {
    if (!this->adminkickplayer_rsp_->IsInitialized()) return false;
  }
  if (has_webinvite()) {
    if (!this->webinvite_->IsInitialized()) return false;
  }
  if (has_invite()) {
    if (!this->invite_->IsInitialized()) return false;
  }
  if (has_adminstr_req()) {
    if (!this->adminstr_req_->IsInitialized()) return false;
  }
  if (has_adminstr_rsp()) {
    if (!this->adminstr_rsp_->IsInitialized()) return false;
  }
  if (has_webbugcfm()) {
    if (!this->webbugcfm_->IsInitialized()) return false;
  }
  if (has_adminsetval_req()) {
    if (!this->adminsetval_req_->IsInitialized()) return false;
  }
  if (has_adminsetval_rsp()) {
    if (!this->adminsetval_rsp_->IsInitialized()) return false;
  }
  if (has_webask()) {
    if (!this->webask_->IsInitialized()) return false;
  }
  if (has_webgive()) {
    if (!this->webgive_->IsInitialized()) return false;
  }
  if (has_qqunion_additem()) {
    if (!this->qqunion_additem_->IsInitialized()) return false;
  }
  if (has_qqunion_checkopenid()) {
    if (!this->qqunion_checkopenid_->IsInitialized()) return false;
  }
  if (has_qqunion_checkkey()) {
    if (!this->qqunion_checkkey_->IsInitialized()) return false;
  }
  if (has_multi_level_friend_point()) {
    if (!this->multi_level_friend_point_->IsInitialized()) return false;
  }
  if (has_admin_common_req()) {
    if (!this->admin_common_req_->IsInitialized()) return false;
  }
  if (has_admin_common_rsp()) {
    if (!this->admin_common_rsp_->IsInitialized()) return false;
  }
  if (has_talent_show()) {
    if (!this->talent_show_->IsInitialized()) return false;
  }
  if (has_talent_show_list()) {
    if (!this->talent_show_list_->IsInitialized()) return false;
  }
  if (has_friend_send_gift()) {
    if (!this->friend_send_gift_->IsInitialized()) return false;
  }
  if (has_fortune_steal()) {
    if (!this->fortune_steal_->IsInitialized()) return false;
  }
  if (has_friend_recall()) {
    if (!this->friend_recall_->IsInitialized()) return false;
  }
  if (has_webbuy3()) {
    if (!this->webbuy3_->IsInitialized()) return false;
  }
  if (has_mse_mseauthstate()) {
    if (!this->mse_mseauthstate_->IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  std::swap(cmd_, other->cmd_);
  std::swap(state_, other->state_);
  std::swap(time_, other->time_);
  std::swap(uid_, other->uid_);
  std::swap(fromworld_fd_, other->fromworld_fd_);
  std::swap(hallsrvid_, other->hallsrvid_);
  std::swap(workingstatus_req_, other->workingstatus_req_);
  std::swap(userlogin_req_, other->userlogin_req_);
  std::swap(userlogin_rsp_, other->userlogin_rsp_);
  std::swap(userauth_req_, other->userauth_req_);
  std::swap(userauth_rsp_, other->userauth_rsp_);
  std::swap(sendremoteuser_req_, other->sendremoteuser_req_);
  std::swap(http_, other->http_);
  std::swap(be_belottery_, other->be_belottery_);
  std::swap(be_beupdatewininfo_, other->be_beupdatewininfo_);
  std::swap(be_beupdateexp_, other->be_beupdateexp_);
  std::swap(be_beupdatetool_, other->be_beupdatetool_);
  std::swap(dp_dpnormalresult_, other->dp_dpnormalresult_);
  std::swap(lotterytimer_, other->lotterytimer_);
  std::swap(be_beupdatebattlecnt_, other->be_beupdatebattlecnt_);
  std::swap(wg_userleave_, other->wg_userleave_);
  std::swap(friendinfo_, other->friendinfo_);
  std::swap(forwardinfo_, other->forwardinfo_);
  std::swap(adminaddexp_req_, other->adminaddexp_req_);
  std::swap(adminaddexp_rsp_, other->adminaddexp_rsp_);
  std::swap(adminaddgold_req_, other->adminaddgold_req_);
  std::swap(adminaddgold_rsp_, other->adminaddgold_rsp_);
  std::swap(adminsetlevel_req_, other->adminsetlevel_req_);
  std::swap(adminsetlevel_rsp_, other->adminsetlevel_rsp_);
  std::swap(adminaddprop_req_, other->adminaddprop_req_);
  std::swap(adminaddprop_rsp_, other->adminaddprop_rsp_);
  std::swap(adminsetequip_req_, other->adminsetequip_req_);
  std::swap(adminsetequip_rsp_, other->adminsetequip_rsp_);
  std::swap(adminuserinfo_req_, other->adminuserinfo_req_);
  std::swap(adminuserinfo_rsp_, other->adminuserinfo_rsp_);
  std::swap(admindelprop_req_, other->admindelprop_req_);
  std::swap(admindelprop_rsp_, other->admindelprop_rsp_);
  std::swap(webbuy_, other->webbuy_);
  std::swap(adminruntask_req_, other->adminruntask_req_);
  std::swap(adminruntask_rsp_, other->adminruntask_rsp_);
  std::swap(adminbanchat_req_, other->adminbanchat_req_);
  std::swap(adminbanchat_rsp_, other->adminbanchat_rsp_);
  std::swap(adminbanlogin_req_, other->adminbanlogin_req_);
  std::swap(adminbanlogin_rsp_, other->adminbanlogin_rsp_);
  std::swap(adminaddpoint_req_, other->adminaddpoint_req_);
  std::swap(adminaddpoint_rsp_, other->adminaddpoint_rsp_);
  std::swap(adminaddindate_req_, other->adminaddindate_req_);
  std::swap(adminaddindate_rsp_, other->adminaddindate_rsp_);
  std::swap(adminfreshuser_req_, other->adminfreshuser_req_);
  std::swap(adminfreshuser_rsp_, other->adminfreshuser_rsp_);
  std::swap(adminaddmedal_req_, other->adminaddmedal_req_);
  std::swap(adminaddmedal_rsp_, other->adminaddmedal_rsp_);
  std::swap(weblengthenindate_, other->weblengthenindate_);
  std::swap(webcheckbandcoin_, other->webcheckbandcoin_);
  std::swap(adminbroadcast_req_, other->adminbroadcast_req_);
  std::swap(adminbroadcast_rsp_, other->adminbroadcast_rsp_);
  std::swap(adminreload_req_, other->adminreload_req_);
  std::swap(adminreload_rsp_, other->adminreload_rsp_);
  std::swap(update_guest_number_, other->update_guest_number_);
  std::swap(adminfluentprice_req_, other->adminfluentprice_req_);
  std::swap(adminfluentprice_rsp_, other->adminfluentprice_rsp_);
  std::swap(webunlock_, other->webunlock_);
  std::swap(webaddemployee_, other->webaddemployee_);
  std::swap(adminaddgoods_req_, other->adminaddgoods_req_);
  std::swap(adminaddgoods_rsp_, other->adminaddgoods_rsp_);
  std::swap(adminsetpublicpraise_req_, other->adminsetpublicpraise_req_);
  std::swap(adminsetpublicpraise_rsp_, other->adminsetpublicpraise_rsp_);
  std::swap(adminaddguest_req_, other->adminaddguest_req_);
  std::swap(adminaddguest_rsp_, other->adminaddguest_rsp_);
  std::swap(admindelgoods_req_, other->admindelgoods_req_);
  std::swap(admindelgoods_rsp_, other->admindelgoods_rsp_);
  std::swap(adminclear_req_, other->adminclear_req_);
  std::swap(adminclear_rsp_, other->adminclear_rsp_);
  std::swap(adminonlinenum_req_, other->adminonlinenum_req_);
  std::swap(adminonlinenum_rsp_, other->adminonlinenum_rsp_);
  std::swap(adminkickplayer_req_, other->adminkickplayer_req_);
  std::swap(adminkickplayer_rsp_, other->adminkickplayer_rsp_);
  std::swap(webinvite_, other->webinvite_);
  std::swap(invite_, other->invite_);
  std::swap(adminstr_req_, other->adminstr_req_);
  std::swap(adminstr_rsp_, other->adminstr_rsp_);
  std::swap(webbugcfm_, other->webbugcfm_);
  std::swap(adminsetval_req_, other->adminsetval_req_);
  std::swap(adminsetval_rsp_, other->adminsetval_rsp_);
  sid_.Swap(&other->sid_);
  std::swap(webask_, other->webask_);
  std::swap(webgive_, other->webgive_);
  std::swap(pushbackcnt_, other->pushbackcnt_);
  std::swap(qqunion_additem_, other->qqunion_additem_);
  std::swap(qqunion_checkopenid_, other->qqunion_checkopenid_);
  std::swap(qqunion_checkkey_, other->qqunion_checkkey_);
  std::swap(multi_level_friend_point_, other->multi_level_friend_point_);
  std::swap(admin_common_req_, other->admin_common_req_);
  std::swap(admin_common_rsp_, other->admin_common_rsp_);
  std::swap(talent_show_, other->talent_show_);
  std::swap(talent_show_list_, other->talent_show_list_);
  std::swap(gameid_, other->gameid_);
  std::swap(worldid_, other->worldid_);
  std::swap(rankkind_, other->rankkind_);
  std::swap(freegift_, other->freegift_);
  std::swap(friend_send_gift_, other->friend_send_gift_);
  std::swap(fortune_steal_, other->fortune_steal_);
  std::swap(wap_req_, other->wap_req_);
  std::swap(wap_rsp_, other->wap_rsp_);
  std::swap(friend_recall_, other->friend_recall_);
  openid_.Swap(&other->openid_);
  simplemare_.UnsafeArenaSwap(&other->simplemare_);
  std::swap(webbuy3_, other->webbuy3_);
  std::swap(center_logic_value_, other->center_logic_value_);
  std::swap(invitefriddata_, other->invitefriddata_);
  std::swap(mse_mseauthstate_, other->mse_mseauthstate_);
  std::swap(mse_msefuncswich_, other->mse_msefuncswich_);
  std::swap(mce_mcegatewayfunction_, other->mce_mcegatewayfunction_);
  std::swap(mse_msegatewayfunction_, other->mse_msegatewayfunction_);
  std::swap(mse_msefriendlist_, other->mse_msefriendlist_);
  std::swap(mce_mceheartbeat_, other->mce_mceheartbeat_);
  std::swap(mce_mceactioninfo_, other->mce_mceactioninfo_);
  std::swap(mse_mseactioninfo_, other->mse_mseactioninfo_);
  std::swap(mse_mserank_, other->mse_mserank_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  std::swap(_has_bits_[2], other->_has_bits_[2]);
  std::swap(_has_bits_[3], other->_has_bits_[3]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// required int32 cmd = 1;
 bool Event::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Event::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
 void Event::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Event::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
 ::google::protobuf::int32 Event::cmd() const {
  // @@protoc_insertion_point(field_get:Event.cmd)
  return cmd_;
}
 void Event::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Event.cmd)
}

// required int32 state = 2;
 bool Event::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Event::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
 void Event::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Event::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::google::protobuf::int32 Event::state() const {
  // @@protoc_insertion_point(field_get:Event.state)
  return state_;
}
 void Event::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Event.state)
}

// required int64 time = 3;
 bool Event::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Event::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
 void Event::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Event::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::int64 Event::time() const {
  // @@protoc_insertion_point(field_get:Event.time)
  return time_;
}
 void Event::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Event.time)
}

// optional int64 uid = 4;
 bool Event::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Event::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
 void Event::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Event::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Event::uid() const {
  // @@protoc_insertion_point(field_get:Event.uid)
  return uid_;
}
 void Event::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Event.uid)
}

// optional int32 fromworld_fd = 5;
 bool Event::has_fromworld_fd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Event::set_has_fromworld_fd() {
  _has_bits_[0] |= 0x00000010u;
}
 void Event::clear_has_fromworld_fd() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Event::clear_fromworld_fd() {
  fromworld_fd_ = 0;
  clear_has_fromworld_fd();
}
 ::google::protobuf::int32 Event::fromworld_fd() const {
  // @@protoc_insertion_point(field_get:Event.fromworld_fd)
  return fromworld_fd_;
}
 void Event::set_fromworld_fd(::google::protobuf::int32 value) {
  set_has_fromworld_fd();
  fromworld_fd_ = value;
  // @@protoc_insertion_point(field_set:Event.fromworld_fd)
}

// optional int32 hallSrvID = 6;
 bool Event::has_hallsrvid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Event::set_has_hallsrvid() {
  _has_bits_[0] |= 0x00000020u;
}
 void Event::clear_has_hallsrvid() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Event::clear_hallsrvid() {
  hallsrvid_ = 0;
  clear_has_hallsrvid();
}
 ::google::protobuf::int32 Event::hallsrvid() const {
  // @@protoc_insertion_point(field_get:Event.hallSrvID)
  return hallsrvid_;
}
 void Event::set_hallsrvid(::google::protobuf::int32 value) {
  set_has_hallsrvid();
  hallsrvid_ = value;
  // @@protoc_insertion_point(field_set:Event.hallSrvID)
}

// optional .WorkingStatus_Req workingStatus_req = 7;
 bool Event::has_workingstatus_req() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Event::set_has_workingstatus_req() {
  _has_bits_[0] |= 0x00000040u;
}
 void Event::clear_has_workingstatus_req() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Event::clear_workingstatus_req() {
  if (workingstatus_req_ != NULL) workingstatus_req_->::WorkingStatus_Req::Clear();
  clear_has_workingstatus_req();
}
 const ::WorkingStatus_Req& Event::workingstatus_req() const {
  // @@protoc_insertion_point(field_get:Event.workingStatus_req)
  return workingstatus_req_ != NULL ? *workingstatus_req_ : *default_instance_->workingstatus_req_;
}
 ::WorkingStatus_Req* Event::mutable_workingstatus_req() {
  set_has_workingstatus_req();
  if (workingstatus_req_ == NULL) {
    workingstatus_req_ = new ::WorkingStatus_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.workingStatus_req)
  return workingstatus_req_;
}
 ::WorkingStatus_Req* Event::release_workingstatus_req() {
  clear_has_workingstatus_req();
  ::WorkingStatus_Req* temp = workingstatus_req_;
  workingstatus_req_ = NULL;
  return temp;
}
 void Event::set_allocated_workingstatus_req(::WorkingStatus_Req* workingstatus_req) {
  delete workingstatus_req_;
  workingstatus_req_ = workingstatus_req;
  if (workingstatus_req) {
    set_has_workingstatus_req();
  } else {
    clear_has_workingstatus_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.workingStatus_req)
}

// optional .UserLogin_Req userLogin_req = 8;
 bool Event::has_userlogin_req() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Event::set_has_userlogin_req() {
  _has_bits_[0] |= 0x00000080u;
}
 void Event::clear_has_userlogin_req() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Event::clear_userlogin_req() {
  if (userlogin_req_ != NULL) userlogin_req_->::UserLogin_Req::Clear();
  clear_has_userlogin_req();
}
 const ::UserLogin_Req& Event::userlogin_req() const {
  // @@protoc_insertion_point(field_get:Event.userLogin_req)
  return userlogin_req_ != NULL ? *userlogin_req_ : *default_instance_->userlogin_req_;
}
 ::UserLogin_Req* Event::mutable_userlogin_req() {
  set_has_userlogin_req();
  if (userlogin_req_ == NULL) {
    userlogin_req_ = new ::UserLogin_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.userLogin_req)
  return userlogin_req_;
}
 ::UserLogin_Req* Event::release_userlogin_req() {
  clear_has_userlogin_req();
  ::UserLogin_Req* temp = userlogin_req_;
  userlogin_req_ = NULL;
  return temp;
}
 void Event::set_allocated_userlogin_req(::UserLogin_Req* userlogin_req) {
  delete userlogin_req_;
  userlogin_req_ = userlogin_req;
  if (userlogin_req) {
    set_has_userlogin_req();
  } else {
    clear_has_userlogin_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.userLogin_req)
}

// optional .UserLogin_Rsp userLogin_rsp = 9;
 bool Event::has_userlogin_rsp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Event::set_has_userlogin_rsp() {
  _has_bits_[0] |= 0x00000100u;
}
 void Event::clear_has_userlogin_rsp() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Event::clear_userlogin_rsp() {
  if (userlogin_rsp_ != NULL) userlogin_rsp_->::UserLogin_Rsp::Clear();
  clear_has_userlogin_rsp();
}
 const ::UserLogin_Rsp& Event::userlogin_rsp() const {
  // @@protoc_insertion_point(field_get:Event.userLogin_rsp)
  return userlogin_rsp_ != NULL ? *userlogin_rsp_ : *default_instance_->userlogin_rsp_;
}
 ::UserLogin_Rsp* Event::mutable_userlogin_rsp() {
  set_has_userlogin_rsp();
  if (userlogin_rsp_ == NULL) {
    userlogin_rsp_ = new ::UserLogin_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.userLogin_rsp)
  return userlogin_rsp_;
}
 ::UserLogin_Rsp* Event::release_userlogin_rsp() {
  clear_has_userlogin_rsp();
  ::UserLogin_Rsp* temp = userlogin_rsp_;
  userlogin_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_userlogin_rsp(::UserLogin_Rsp* userlogin_rsp) {
  delete userlogin_rsp_;
  userlogin_rsp_ = userlogin_rsp;
  if (userlogin_rsp) {
    set_has_userlogin_rsp();
  } else {
    clear_has_userlogin_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.userLogin_rsp)
}

// optional .UserAuth_Req userAuth_req = 10;
 bool Event::has_userauth_req() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void Event::set_has_userauth_req() {
  _has_bits_[0] |= 0x00000200u;
}
 void Event::clear_has_userauth_req() {
  _has_bits_[0] &= ~0x00000200u;
}
 void Event::clear_userauth_req() {
  if (userauth_req_ != NULL) userauth_req_->::UserAuth_Req::Clear();
  clear_has_userauth_req();
}
 const ::UserAuth_Req& Event::userauth_req() const {
  // @@protoc_insertion_point(field_get:Event.userAuth_req)
  return userauth_req_ != NULL ? *userauth_req_ : *default_instance_->userauth_req_;
}
 ::UserAuth_Req* Event::mutable_userauth_req() {
  set_has_userauth_req();
  if (userauth_req_ == NULL) {
    userauth_req_ = new ::UserAuth_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.userAuth_req)
  return userauth_req_;
}
 ::UserAuth_Req* Event::release_userauth_req() {
  clear_has_userauth_req();
  ::UserAuth_Req* temp = userauth_req_;
  userauth_req_ = NULL;
  return temp;
}
 void Event::set_allocated_userauth_req(::UserAuth_Req* userauth_req) {
  delete userauth_req_;
  userauth_req_ = userauth_req;
  if (userauth_req) {
    set_has_userauth_req();
  } else {
    clear_has_userauth_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.userAuth_req)
}

// optional .UserAuth_Rsp userAuth_rsp = 11;
 bool Event::has_userauth_rsp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void Event::set_has_userauth_rsp() {
  _has_bits_[0] |= 0x00000400u;
}
 void Event::clear_has_userauth_rsp() {
  _has_bits_[0] &= ~0x00000400u;
}
 void Event::clear_userauth_rsp() {
  if (userauth_rsp_ != NULL) userauth_rsp_->::UserAuth_Rsp::Clear();
  clear_has_userauth_rsp();
}
 const ::UserAuth_Rsp& Event::userauth_rsp() const {
  // @@protoc_insertion_point(field_get:Event.userAuth_rsp)
  return userauth_rsp_ != NULL ? *userauth_rsp_ : *default_instance_->userauth_rsp_;
}
 ::UserAuth_Rsp* Event::mutable_userauth_rsp() {
  set_has_userauth_rsp();
  if (userauth_rsp_ == NULL) {
    userauth_rsp_ = new ::UserAuth_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.userAuth_rsp)
  return userauth_rsp_;
}
 ::UserAuth_Rsp* Event::release_userauth_rsp() {
  clear_has_userauth_rsp();
  ::UserAuth_Rsp* temp = userauth_rsp_;
  userauth_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_userauth_rsp(::UserAuth_Rsp* userauth_rsp) {
  delete userauth_rsp_;
  userauth_rsp_ = userauth_rsp;
  if (userauth_rsp) {
    set_has_userauth_rsp();
  } else {
    clear_has_userauth_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.userAuth_rsp)
}

// optional .SendRemoteUser_Req sendRemoteUser_req = 12;
 bool Event::has_sendremoteuser_req() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void Event::set_has_sendremoteuser_req() {
  _has_bits_[0] |= 0x00000800u;
}
 void Event::clear_has_sendremoteuser_req() {
  _has_bits_[0] &= ~0x00000800u;
}
 void Event::clear_sendremoteuser_req() {
  if (sendremoteuser_req_ != NULL) sendremoteuser_req_->::SendRemoteUser_Req::Clear();
  clear_has_sendremoteuser_req();
}
 const ::SendRemoteUser_Req& Event::sendremoteuser_req() const {
  // @@protoc_insertion_point(field_get:Event.sendRemoteUser_req)
  return sendremoteuser_req_ != NULL ? *sendremoteuser_req_ : *default_instance_->sendremoteuser_req_;
}
 ::SendRemoteUser_Req* Event::mutable_sendremoteuser_req() {
  set_has_sendremoteuser_req();
  if (sendremoteuser_req_ == NULL) {
    sendremoteuser_req_ = new ::SendRemoteUser_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.sendRemoteUser_req)
  return sendremoteuser_req_;
}
 ::SendRemoteUser_Req* Event::release_sendremoteuser_req() {
  clear_has_sendremoteuser_req();
  ::SendRemoteUser_Req* temp = sendremoteuser_req_;
  sendremoteuser_req_ = NULL;
  return temp;
}
 void Event::set_allocated_sendremoteuser_req(::SendRemoteUser_Req* sendremoteuser_req) {
  delete sendremoteuser_req_;
  sendremoteuser_req_ = sendremoteuser_req;
  if (sendremoteuser_req) {
    set_has_sendremoteuser_req();
  } else {
    clear_has_sendremoteuser_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.sendRemoteUser_req)
}

// optional .HttpRequestV3 http = 13;
 bool Event::has_http() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void Event::set_has_http() {
  _has_bits_[0] |= 0x00001000u;
}
 void Event::clear_has_http() {
  _has_bits_[0] &= ~0x00001000u;
}
 void Event::clear_http() {
  if (http_ != NULL) http_->::HttpRequestV3::Clear();
  clear_has_http();
}
 const ::HttpRequestV3& Event::http() const {
  // @@protoc_insertion_point(field_get:Event.http)
  return http_ != NULL ? *http_ : *default_instance_->http_;
}
 ::HttpRequestV3* Event::mutable_http() {
  set_has_http();
  if (http_ == NULL) {
    http_ = new ::HttpRequestV3;
  }
  // @@protoc_insertion_point(field_mutable:Event.http)
  return http_;
}
 ::HttpRequestV3* Event::release_http() {
  clear_has_http();
  ::HttpRequestV3* temp = http_;
  http_ = NULL;
  return temp;
}
 void Event::set_allocated_http(::HttpRequestV3* http) {
  delete http_;
  http_ = http;
  if (http) {
    set_has_http();
  } else {
    clear_has_http();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.http)
}

// optional .BeLottery be_BeLottery = 14;
 bool Event::has_be_belottery() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
 void Event::set_has_be_belottery() {
  _has_bits_[0] |= 0x00002000u;
}
 void Event::clear_has_be_belottery() {
  _has_bits_[0] &= ~0x00002000u;
}
 void Event::clear_be_belottery() {
  if (be_belottery_ != NULL) be_belottery_->::BeLottery::Clear();
  clear_has_be_belottery();
}
 const ::BeLottery& Event::be_belottery() const {
  // @@protoc_insertion_point(field_get:Event.be_BeLottery)
  return be_belottery_ != NULL ? *be_belottery_ : *default_instance_->be_belottery_;
}
 ::BeLottery* Event::mutable_be_belottery() {
  set_has_be_belottery();
  if (be_belottery_ == NULL) {
    be_belottery_ = new ::BeLottery;
  }
  // @@protoc_insertion_point(field_mutable:Event.be_BeLottery)
  return be_belottery_;
}
 ::BeLottery* Event::release_be_belottery() {
  clear_has_be_belottery();
  ::BeLottery* temp = be_belottery_;
  be_belottery_ = NULL;
  return temp;
}
 void Event::set_allocated_be_belottery(::BeLottery* be_belottery) {
  delete be_belottery_;
  be_belottery_ = be_belottery;
  if (be_belottery) {
    set_has_be_belottery();
  } else {
    clear_has_be_belottery();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.be_BeLottery)
}

// optional .BeUpdateWinInfo be_BeUpdateWinInfo = 15;
 bool Event::has_be_beupdatewininfo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
 void Event::set_has_be_beupdatewininfo() {
  _has_bits_[0] |= 0x00004000u;
}
 void Event::clear_has_be_beupdatewininfo() {
  _has_bits_[0] &= ~0x00004000u;
}
 void Event::clear_be_beupdatewininfo() {
  if (be_beupdatewininfo_ != NULL) be_beupdatewininfo_->::BeUpdateWinInfo::Clear();
  clear_has_be_beupdatewininfo();
}
 const ::BeUpdateWinInfo& Event::be_beupdatewininfo() const {
  // @@protoc_insertion_point(field_get:Event.be_BeUpdateWinInfo)
  return be_beupdatewininfo_ != NULL ? *be_beupdatewininfo_ : *default_instance_->be_beupdatewininfo_;
}
 ::BeUpdateWinInfo* Event::mutable_be_beupdatewininfo() {
  set_has_be_beupdatewininfo();
  if (be_beupdatewininfo_ == NULL) {
    be_beupdatewininfo_ = new ::BeUpdateWinInfo;
  }
  // @@protoc_insertion_point(field_mutable:Event.be_BeUpdateWinInfo)
  return be_beupdatewininfo_;
}
 ::BeUpdateWinInfo* Event::release_be_beupdatewininfo() {
  clear_has_be_beupdatewininfo();
  ::BeUpdateWinInfo* temp = be_beupdatewininfo_;
  be_beupdatewininfo_ = NULL;
  return temp;
}
 void Event::set_allocated_be_beupdatewininfo(::BeUpdateWinInfo* be_beupdatewininfo) {
  delete be_beupdatewininfo_;
  be_beupdatewininfo_ = be_beupdatewininfo;
  if (be_beupdatewininfo) {
    set_has_be_beupdatewininfo();
  } else {
    clear_has_be_beupdatewininfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.be_BeUpdateWinInfo)
}

// optional .BeUpdateExp be_BeUpdateExp = 16;
 bool Event::has_be_beupdateexp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
 void Event::set_has_be_beupdateexp() {
  _has_bits_[0] |= 0x00008000u;
}
 void Event::clear_has_be_beupdateexp() {
  _has_bits_[0] &= ~0x00008000u;
}
 void Event::clear_be_beupdateexp() {
  if (be_beupdateexp_ != NULL) be_beupdateexp_->::BeUpdateExp::Clear();
  clear_has_be_beupdateexp();
}
 const ::BeUpdateExp& Event::be_beupdateexp() const {
  // @@protoc_insertion_point(field_get:Event.be_BeUpdateExp)
  return be_beupdateexp_ != NULL ? *be_beupdateexp_ : *default_instance_->be_beupdateexp_;
}
 ::BeUpdateExp* Event::mutable_be_beupdateexp() {
  set_has_be_beupdateexp();
  if (be_beupdateexp_ == NULL) {
    be_beupdateexp_ = new ::BeUpdateExp;
  }
  // @@protoc_insertion_point(field_mutable:Event.be_BeUpdateExp)
  return be_beupdateexp_;
}
 ::BeUpdateExp* Event::release_be_beupdateexp() {
  clear_has_be_beupdateexp();
  ::BeUpdateExp* temp = be_beupdateexp_;
  be_beupdateexp_ = NULL;
  return temp;
}
 void Event::set_allocated_be_beupdateexp(::BeUpdateExp* be_beupdateexp) {
  delete be_beupdateexp_;
  be_beupdateexp_ = be_beupdateexp;
  if (be_beupdateexp) {
    set_has_be_beupdateexp();
  } else {
    clear_has_be_beupdateexp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.be_BeUpdateExp)
}

// optional .BeUpdateTool be_BeUpdateTool = 17;
 bool Event::has_be_beupdatetool() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
 void Event::set_has_be_beupdatetool() {
  _has_bits_[0] |= 0x00010000u;
}
 void Event::clear_has_be_beupdatetool() {
  _has_bits_[0] &= ~0x00010000u;
}
 void Event::clear_be_beupdatetool() {
  if (be_beupdatetool_ != NULL) be_beupdatetool_->::BeUpdateTool::Clear();
  clear_has_be_beupdatetool();
}
 const ::BeUpdateTool& Event::be_beupdatetool() const {
  // @@protoc_insertion_point(field_get:Event.be_BeUpdateTool)
  return be_beupdatetool_ != NULL ? *be_beupdatetool_ : *default_instance_->be_beupdatetool_;
}
 ::BeUpdateTool* Event::mutable_be_beupdatetool() {
  set_has_be_beupdatetool();
  if (be_beupdatetool_ == NULL) {
    be_beupdatetool_ = new ::BeUpdateTool;
  }
  // @@protoc_insertion_point(field_mutable:Event.be_BeUpdateTool)
  return be_beupdatetool_;
}
 ::BeUpdateTool* Event::release_be_beupdatetool() {
  clear_has_be_beupdatetool();
  ::BeUpdateTool* temp = be_beupdatetool_;
  be_beupdatetool_ = NULL;
  return temp;
}
 void Event::set_allocated_be_beupdatetool(::BeUpdateTool* be_beupdatetool) {
  delete be_beupdatetool_;
  be_beupdatetool_ = be_beupdatetool;
  if (be_beupdatetool) {
    set_has_be_beupdatetool();
  } else {
    clear_has_be_beupdatetool();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.be_BeUpdateTool)
}

// optional .DpNormalResult dp_DpNormalResult = 18;
 bool Event::has_dp_dpnormalresult() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
 void Event::set_has_dp_dpnormalresult() {
  _has_bits_[0] |= 0x00020000u;
}
 void Event::clear_has_dp_dpnormalresult() {
  _has_bits_[0] &= ~0x00020000u;
}
 void Event::clear_dp_dpnormalresult() {
  if (dp_dpnormalresult_ != NULL) dp_dpnormalresult_->::DpNormalResult::Clear();
  clear_has_dp_dpnormalresult();
}
 const ::DpNormalResult& Event::dp_dpnormalresult() const {
  // @@protoc_insertion_point(field_get:Event.dp_DpNormalResult)
  return dp_dpnormalresult_ != NULL ? *dp_dpnormalresult_ : *default_instance_->dp_dpnormalresult_;
}
 ::DpNormalResult* Event::mutable_dp_dpnormalresult() {
  set_has_dp_dpnormalresult();
  if (dp_dpnormalresult_ == NULL) {
    dp_dpnormalresult_ = new ::DpNormalResult;
  }
  // @@protoc_insertion_point(field_mutable:Event.dp_DpNormalResult)
  return dp_dpnormalresult_;
}
 ::DpNormalResult* Event::release_dp_dpnormalresult() {
  clear_has_dp_dpnormalresult();
  ::DpNormalResult* temp = dp_dpnormalresult_;
  dp_dpnormalresult_ = NULL;
  return temp;
}
 void Event::set_allocated_dp_dpnormalresult(::DpNormalResult* dp_dpnormalresult) {
  delete dp_dpnormalresult_;
  dp_dpnormalresult_ = dp_dpnormalresult;
  if (dp_dpnormalresult) {
    set_has_dp_dpnormalresult();
  } else {
    clear_has_dp_dpnormalresult();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.dp_DpNormalResult)
}

// optional .LotteryTimer lotteryTimer = 19;
 bool Event::has_lotterytimer() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
 void Event::set_has_lotterytimer() {
  _has_bits_[0] |= 0x00040000u;
}
 void Event::clear_has_lotterytimer() {
  _has_bits_[0] &= ~0x00040000u;
}
 void Event::clear_lotterytimer() {
  if (lotterytimer_ != NULL) lotterytimer_->::LotteryTimer::Clear();
  clear_has_lotterytimer();
}
 const ::LotteryTimer& Event::lotterytimer() const {
  // @@protoc_insertion_point(field_get:Event.lotteryTimer)
  return lotterytimer_ != NULL ? *lotterytimer_ : *default_instance_->lotterytimer_;
}
 ::LotteryTimer* Event::mutable_lotterytimer() {
  set_has_lotterytimer();
  if (lotterytimer_ == NULL) {
    lotterytimer_ = new ::LotteryTimer;
  }
  // @@protoc_insertion_point(field_mutable:Event.lotteryTimer)
  return lotterytimer_;
}
 ::LotteryTimer* Event::release_lotterytimer() {
  clear_has_lotterytimer();
  ::LotteryTimer* temp = lotterytimer_;
  lotterytimer_ = NULL;
  return temp;
}
 void Event::set_allocated_lotterytimer(::LotteryTimer* lotterytimer) {
  delete lotterytimer_;
  lotterytimer_ = lotterytimer;
  if (lotterytimer) {
    set_has_lotterytimer();
  } else {
    clear_has_lotterytimer();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.lotteryTimer)
}

// optional .BeUpdateBattleCnt be_BeUpdateBattleCnt = 20;
 bool Event::has_be_beupdatebattlecnt() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
 void Event::set_has_be_beupdatebattlecnt() {
  _has_bits_[0] |= 0x00080000u;
}
 void Event::clear_has_be_beupdatebattlecnt() {
  _has_bits_[0] &= ~0x00080000u;
}
 void Event::clear_be_beupdatebattlecnt() {
  if (be_beupdatebattlecnt_ != NULL) be_beupdatebattlecnt_->::BeUpdateBattleCnt::Clear();
  clear_has_be_beupdatebattlecnt();
}
 const ::BeUpdateBattleCnt& Event::be_beupdatebattlecnt() const {
  // @@protoc_insertion_point(field_get:Event.be_BeUpdateBattleCnt)
  return be_beupdatebattlecnt_ != NULL ? *be_beupdatebattlecnt_ : *default_instance_->be_beupdatebattlecnt_;
}
 ::BeUpdateBattleCnt* Event::mutable_be_beupdatebattlecnt() {
  set_has_be_beupdatebattlecnt();
  if (be_beupdatebattlecnt_ == NULL) {
    be_beupdatebattlecnt_ = new ::BeUpdateBattleCnt;
  }
  // @@protoc_insertion_point(field_mutable:Event.be_BeUpdateBattleCnt)
  return be_beupdatebattlecnt_;
}
 ::BeUpdateBattleCnt* Event::release_be_beupdatebattlecnt() {
  clear_has_be_beupdatebattlecnt();
  ::BeUpdateBattleCnt* temp = be_beupdatebattlecnt_;
  be_beupdatebattlecnt_ = NULL;
  return temp;
}
 void Event::set_allocated_be_beupdatebattlecnt(::BeUpdateBattleCnt* be_beupdatebattlecnt) {
  delete be_beupdatebattlecnt_;
  be_beupdatebattlecnt_ = be_beupdatebattlecnt;
  if (be_beupdatebattlecnt) {
    set_has_be_beupdatebattlecnt();
  } else {
    clear_has_be_beupdatebattlecnt();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.be_BeUpdateBattleCnt)
}

// optional .WG_UserLeave wg_UserLeave = 21;
 bool Event::has_wg_userleave() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
 void Event::set_has_wg_userleave() {
  _has_bits_[0] |= 0x00100000u;
}
 void Event::clear_has_wg_userleave() {
  _has_bits_[0] &= ~0x00100000u;
}
 void Event::clear_wg_userleave() {
  if (wg_userleave_ != NULL) wg_userleave_->::WG_UserLeave::Clear();
  clear_has_wg_userleave();
}
 const ::WG_UserLeave& Event::wg_userleave() const {
  // @@protoc_insertion_point(field_get:Event.wg_UserLeave)
  return wg_userleave_ != NULL ? *wg_userleave_ : *default_instance_->wg_userleave_;
}
 ::WG_UserLeave* Event::mutable_wg_userleave() {
  set_has_wg_userleave();
  if (wg_userleave_ == NULL) {
    wg_userleave_ = new ::WG_UserLeave;
  }
  // @@protoc_insertion_point(field_mutable:Event.wg_UserLeave)
  return wg_userleave_;
}
 ::WG_UserLeave* Event::release_wg_userleave() {
  clear_has_wg_userleave();
  ::WG_UserLeave* temp = wg_userleave_;
  wg_userleave_ = NULL;
  return temp;
}
 void Event::set_allocated_wg_userleave(::WG_UserLeave* wg_userleave) {
  delete wg_userleave_;
  wg_userleave_ = wg_userleave;
  if (wg_userleave) {
    set_has_wg_userleave();
  } else {
    clear_has_wg_userleave();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.wg_UserLeave)
}

// optional .GWG_FriendRequest friendinfo = 22;
 bool Event::has_friendinfo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
 void Event::set_has_friendinfo() {
  _has_bits_[0] |= 0x00200000u;
}
 void Event::clear_has_friendinfo() {
  _has_bits_[0] &= ~0x00200000u;
}
 void Event::clear_friendinfo() {
  if (friendinfo_ != NULL) friendinfo_->::GWG_FriendRequest::Clear();
  clear_has_friendinfo();
}
 const ::GWG_FriendRequest& Event::friendinfo() const {
  // @@protoc_insertion_point(field_get:Event.friendinfo)
  return friendinfo_ != NULL ? *friendinfo_ : *default_instance_->friendinfo_;
}
 ::GWG_FriendRequest* Event::mutable_friendinfo() {
  set_has_friendinfo();
  if (friendinfo_ == NULL) {
    friendinfo_ = new ::GWG_FriendRequest;
  }
  // @@protoc_insertion_point(field_mutable:Event.friendinfo)
  return friendinfo_;
}
 ::GWG_FriendRequest* Event::release_friendinfo() {
  clear_has_friendinfo();
  ::GWG_FriendRequest* temp = friendinfo_;
  friendinfo_ = NULL;
  return temp;
}
 void Event::set_allocated_friendinfo(::GWG_FriendRequest* friendinfo) {
  delete friendinfo_;
  friendinfo_ = friendinfo;
  if (friendinfo) {
    set_has_friendinfo();
  } else {
    clear_has_friendinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.friendinfo)
}

// optional .ForwardInfo forwardinfo = 23;
 bool Event::has_forwardinfo() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
 void Event::set_has_forwardinfo() {
  _has_bits_[0] |= 0x00400000u;
}
 void Event::clear_has_forwardinfo() {
  _has_bits_[0] &= ~0x00400000u;
}
 void Event::clear_forwardinfo() {
  if (forwardinfo_ != NULL) forwardinfo_->::ForwardInfo::Clear();
  clear_has_forwardinfo();
}
 const ::ForwardInfo& Event::forwardinfo() const {
  // @@protoc_insertion_point(field_get:Event.forwardinfo)
  return forwardinfo_ != NULL ? *forwardinfo_ : *default_instance_->forwardinfo_;
}
 ::ForwardInfo* Event::mutable_forwardinfo() {
  set_has_forwardinfo();
  if (forwardinfo_ == NULL) {
    forwardinfo_ = new ::ForwardInfo;
  }
  // @@protoc_insertion_point(field_mutable:Event.forwardinfo)
  return forwardinfo_;
}
 ::ForwardInfo* Event::release_forwardinfo() {
  clear_has_forwardinfo();
  ::ForwardInfo* temp = forwardinfo_;
  forwardinfo_ = NULL;
  return temp;
}
 void Event::set_allocated_forwardinfo(::ForwardInfo* forwardinfo) {
  delete forwardinfo_;
  forwardinfo_ = forwardinfo;
  if (forwardinfo) {
    set_has_forwardinfo();
  } else {
    clear_has_forwardinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.forwardinfo)
}

// optional .Admin_AddExp_Req adminAddExp_req = 33;
 bool Event::has_adminaddexp_req() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
 void Event::set_has_adminaddexp_req() {
  _has_bits_[0] |= 0x00800000u;
}
 void Event::clear_has_adminaddexp_req() {
  _has_bits_[0] &= ~0x00800000u;
}
 void Event::clear_adminaddexp_req() {
  if (adminaddexp_req_ != NULL) adminaddexp_req_->::Admin_AddExp_Req::Clear();
  clear_has_adminaddexp_req();
}
 const ::Admin_AddExp_Req& Event::adminaddexp_req() const {
  // @@protoc_insertion_point(field_get:Event.adminAddExp_req)
  return adminaddexp_req_ != NULL ? *adminaddexp_req_ : *default_instance_->adminaddexp_req_;
}
 ::Admin_AddExp_Req* Event::mutable_adminaddexp_req() {
  set_has_adminaddexp_req();
  if (adminaddexp_req_ == NULL) {
    adminaddexp_req_ = new ::Admin_AddExp_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddExp_req)
  return adminaddexp_req_;
}
 ::Admin_AddExp_Req* Event::release_adminaddexp_req() {
  clear_has_adminaddexp_req();
  ::Admin_AddExp_Req* temp = adminaddexp_req_;
  adminaddexp_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddexp_req(::Admin_AddExp_Req* adminaddexp_req) {
  delete adminaddexp_req_;
  adminaddexp_req_ = adminaddexp_req;
  if (adminaddexp_req) {
    set_has_adminaddexp_req();
  } else {
    clear_has_adminaddexp_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddExp_req)
}

// optional .Admin_AddExp_Rsp adminAddExp_rsp = 34;
 bool Event::has_adminaddexp_rsp() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
 void Event::set_has_adminaddexp_rsp() {
  _has_bits_[0] |= 0x01000000u;
}
 void Event::clear_has_adminaddexp_rsp() {
  _has_bits_[0] &= ~0x01000000u;
}
 void Event::clear_adminaddexp_rsp() {
  if (adminaddexp_rsp_ != NULL) adminaddexp_rsp_->::Admin_AddExp_Rsp::Clear();
  clear_has_adminaddexp_rsp();
}
 const ::Admin_AddExp_Rsp& Event::adminaddexp_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminAddExp_rsp)
  return adminaddexp_rsp_ != NULL ? *adminaddexp_rsp_ : *default_instance_->adminaddexp_rsp_;
}
 ::Admin_AddExp_Rsp* Event::mutable_adminaddexp_rsp() {
  set_has_adminaddexp_rsp();
  if (adminaddexp_rsp_ == NULL) {
    adminaddexp_rsp_ = new ::Admin_AddExp_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddExp_rsp)
  return adminaddexp_rsp_;
}
 ::Admin_AddExp_Rsp* Event::release_adminaddexp_rsp() {
  clear_has_adminaddexp_rsp();
  ::Admin_AddExp_Rsp* temp = adminaddexp_rsp_;
  adminaddexp_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddexp_rsp(::Admin_AddExp_Rsp* adminaddexp_rsp) {
  delete adminaddexp_rsp_;
  adminaddexp_rsp_ = adminaddexp_rsp;
  if (adminaddexp_rsp) {
    set_has_adminaddexp_rsp();
  } else {
    clear_has_adminaddexp_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddExp_rsp)
}

// optional .Admin_AddGold_Req adminAddGold_req = 35;
 bool Event::has_adminaddgold_req() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
 void Event::set_has_adminaddgold_req() {
  _has_bits_[0] |= 0x02000000u;
}
 void Event::clear_has_adminaddgold_req() {
  _has_bits_[0] &= ~0x02000000u;
}
 void Event::clear_adminaddgold_req() {
  if (adminaddgold_req_ != NULL) adminaddgold_req_->::Admin_AddGold_Req::Clear();
  clear_has_adminaddgold_req();
}
 const ::Admin_AddGold_Req& Event::adminaddgold_req() const {
  // @@protoc_insertion_point(field_get:Event.adminAddGold_req)
  return adminaddgold_req_ != NULL ? *adminaddgold_req_ : *default_instance_->adminaddgold_req_;
}
 ::Admin_AddGold_Req* Event::mutable_adminaddgold_req() {
  set_has_adminaddgold_req();
  if (adminaddgold_req_ == NULL) {
    adminaddgold_req_ = new ::Admin_AddGold_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddGold_req)
  return adminaddgold_req_;
}
 ::Admin_AddGold_Req* Event::release_adminaddgold_req() {
  clear_has_adminaddgold_req();
  ::Admin_AddGold_Req* temp = adminaddgold_req_;
  adminaddgold_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddgold_req(::Admin_AddGold_Req* adminaddgold_req) {
  delete adminaddgold_req_;
  adminaddgold_req_ = adminaddgold_req;
  if (adminaddgold_req) {
    set_has_adminaddgold_req();
  } else {
    clear_has_adminaddgold_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddGold_req)
}

// optional .Admin_AddGold_Rsp adminAddGold_rsp = 36;
 bool Event::has_adminaddgold_rsp() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
 void Event::set_has_adminaddgold_rsp() {
  _has_bits_[0] |= 0x04000000u;
}
 void Event::clear_has_adminaddgold_rsp() {
  _has_bits_[0] &= ~0x04000000u;
}
 void Event::clear_adminaddgold_rsp() {
  if (adminaddgold_rsp_ != NULL) adminaddgold_rsp_->::Admin_AddGold_Rsp::Clear();
  clear_has_adminaddgold_rsp();
}
 const ::Admin_AddGold_Rsp& Event::adminaddgold_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminAddGold_rsp)
  return adminaddgold_rsp_ != NULL ? *adminaddgold_rsp_ : *default_instance_->adminaddgold_rsp_;
}
 ::Admin_AddGold_Rsp* Event::mutable_adminaddgold_rsp() {
  set_has_adminaddgold_rsp();
  if (adminaddgold_rsp_ == NULL) {
    adminaddgold_rsp_ = new ::Admin_AddGold_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddGold_rsp)
  return adminaddgold_rsp_;
}
 ::Admin_AddGold_Rsp* Event::release_adminaddgold_rsp() {
  clear_has_adminaddgold_rsp();
  ::Admin_AddGold_Rsp* temp = adminaddgold_rsp_;
  adminaddgold_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddgold_rsp(::Admin_AddGold_Rsp* adminaddgold_rsp) {
  delete adminaddgold_rsp_;
  adminaddgold_rsp_ = adminaddgold_rsp;
  if (adminaddgold_rsp) {
    set_has_adminaddgold_rsp();
  } else {
    clear_has_adminaddgold_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddGold_rsp)
}

// optional .Admin_SetLevel_Req adminSetLevel_req = 37;
 bool Event::has_adminsetlevel_req() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
 void Event::set_has_adminsetlevel_req() {
  _has_bits_[0] |= 0x08000000u;
}
 void Event::clear_has_adminsetlevel_req() {
  _has_bits_[0] &= ~0x08000000u;
}
 void Event::clear_adminsetlevel_req() {
  if (adminsetlevel_req_ != NULL) adminsetlevel_req_->::Admin_SetLevel_Req::Clear();
  clear_has_adminsetlevel_req();
}
 const ::Admin_SetLevel_Req& Event::adminsetlevel_req() const {
  // @@protoc_insertion_point(field_get:Event.adminSetLevel_req)
  return adminsetlevel_req_ != NULL ? *adminsetlevel_req_ : *default_instance_->adminsetlevel_req_;
}
 ::Admin_SetLevel_Req* Event::mutable_adminsetlevel_req() {
  set_has_adminsetlevel_req();
  if (adminsetlevel_req_ == NULL) {
    adminsetlevel_req_ = new ::Admin_SetLevel_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminSetLevel_req)
  return adminsetlevel_req_;
}
 ::Admin_SetLevel_Req* Event::release_adminsetlevel_req() {
  clear_has_adminsetlevel_req();
  ::Admin_SetLevel_Req* temp = adminsetlevel_req_;
  adminsetlevel_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminsetlevel_req(::Admin_SetLevel_Req* adminsetlevel_req) {
  delete adminsetlevel_req_;
  adminsetlevel_req_ = adminsetlevel_req;
  if (adminsetlevel_req) {
    set_has_adminsetlevel_req();
  } else {
    clear_has_adminsetlevel_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminSetLevel_req)
}

// optional .Admin_SetLevel_Rsp adminSetLevel_rsp = 38;
 bool Event::has_adminsetlevel_rsp() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
 void Event::set_has_adminsetlevel_rsp() {
  _has_bits_[0] |= 0x10000000u;
}
 void Event::clear_has_adminsetlevel_rsp() {
  _has_bits_[0] &= ~0x10000000u;
}
 void Event::clear_adminsetlevel_rsp() {
  if (adminsetlevel_rsp_ != NULL) adminsetlevel_rsp_->::Admin_SetLevel_Rsp::Clear();
  clear_has_adminsetlevel_rsp();
}
 const ::Admin_SetLevel_Rsp& Event::adminsetlevel_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminSetLevel_rsp)
  return adminsetlevel_rsp_ != NULL ? *adminsetlevel_rsp_ : *default_instance_->adminsetlevel_rsp_;
}
 ::Admin_SetLevel_Rsp* Event::mutable_adminsetlevel_rsp() {
  set_has_adminsetlevel_rsp();
  if (adminsetlevel_rsp_ == NULL) {
    adminsetlevel_rsp_ = new ::Admin_SetLevel_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminSetLevel_rsp)
  return adminsetlevel_rsp_;
}
 ::Admin_SetLevel_Rsp* Event::release_adminsetlevel_rsp() {
  clear_has_adminsetlevel_rsp();
  ::Admin_SetLevel_Rsp* temp = adminsetlevel_rsp_;
  adminsetlevel_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminsetlevel_rsp(::Admin_SetLevel_Rsp* adminsetlevel_rsp) {
  delete adminsetlevel_rsp_;
  adminsetlevel_rsp_ = adminsetlevel_rsp;
  if (adminsetlevel_rsp) {
    set_has_adminsetlevel_rsp();
  } else {
    clear_has_adminsetlevel_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminSetLevel_rsp)
}

// optional .Admin_AddProp_Req adminAddProp_req = 39;
 bool Event::has_adminaddprop_req() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
 void Event::set_has_adminaddprop_req() {
  _has_bits_[0] |= 0x20000000u;
}
 void Event::clear_has_adminaddprop_req() {
  _has_bits_[0] &= ~0x20000000u;
}
 void Event::clear_adminaddprop_req() {
  if (adminaddprop_req_ != NULL) adminaddprop_req_->::Admin_AddProp_Req::Clear();
  clear_has_adminaddprop_req();
}
 const ::Admin_AddProp_Req& Event::adminaddprop_req() const {
  // @@protoc_insertion_point(field_get:Event.adminAddProp_req)
  return adminaddprop_req_ != NULL ? *adminaddprop_req_ : *default_instance_->adminaddprop_req_;
}
 ::Admin_AddProp_Req* Event::mutable_adminaddprop_req() {
  set_has_adminaddprop_req();
  if (adminaddprop_req_ == NULL) {
    adminaddprop_req_ = new ::Admin_AddProp_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddProp_req)
  return adminaddprop_req_;
}
 ::Admin_AddProp_Req* Event::release_adminaddprop_req() {
  clear_has_adminaddprop_req();
  ::Admin_AddProp_Req* temp = adminaddprop_req_;
  adminaddprop_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddprop_req(::Admin_AddProp_Req* adminaddprop_req) {
  delete adminaddprop_req_;
  adminaddprop_req_ = adminaddprop_req;
  if (adminaddprop_req) {
    set_has_adminaddprop_req();
  } else {
    clear_has_adminaddprop_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddProp_req)
}

// optional .Admin_AddProp_Rsp adminAddProp_rsp = 40;
 bool Event::has_adminaddprop_rsp() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
 void Event::set_has_adminaddprop_rsp() {
  _has_bits_[0] |= 0x40000000u;
}
 void Event::clear_has_adminaddprop_rsp() {
  _has_bits_[0] &= ~0x40000000u;
}
 void Event::clear_adminaddprop_rsp() {
  if (adminaddprop_rsp_ != NULL) adminaddprop_rsp_->::Admin_AddProp_Rsp::Clear();
  clear_has_adminaddprop_rsp();
}
 const ::Admin_AddProp_Rsp& Event::adminaddprop_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminAddProp_rsp)
  return adminaddprop_rsp_ != NULL ? *adminaddprop_rsp_ : *default_instance_->adminaddprop_rsp_;
}
 ::Admin_AddProp_Rsp* Event::mutable_adminaddprop_rsp() {
  set_has_adminaddprop_rsp();
  if (adminaddprop_rsp_ == NULL) {
    adminaddprop_rsp_ = new ::Admin_AddProp_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddProp_rsp)
  return adminaddprop_rsp_;
}
 ::Admin_AddProp_Rsp* Event::release_adminaddprop_rsp() {
  clear_has_adminaddprop_rsp();
  ::Admin_AddProp_Rsp* temp = adminaddprop_rsp_;
  adminaddprop_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddprop_rsp(::Admin_AddProp_Rsp* adminaddprop_rsp) {
  delete adminaddprop_rsp_;
  adminaddprop_rsp_ = adminaddprop_rsp;
  if (adminaddprop_rsp) {
    set_has_adminaddprop_rsp();
  } else {
    clear_has_adminaddprop_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddProp_rsp)
}

// optional .Admin_SetEquip_Req adminSetEquip_req = 41;
 bool Event::has_adminsetequip_req() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
 void Event::set_has_adminsetequip_req() {
  _has_bits_[0] |= 0x80000000u;
}
 void Event::clear_has_adminsetequip_req() {
  _has_bits_[0] &= ~0x80000000u;
}
 void Event::clear_adminsetequip_req() {
  if (adminsetequip_req_ != NULL) adminsetequip_req_->::Admin_SetEquip_Req::Clear();
  clear_has_adminsetequip_req();
}
 const ::Admin_SetEquip_Req& Event::adminsetequip_req() const {
  // @@protoc_insertion_point(field_get:Event.adminSetEquip_req)
  return adminsetequip_req_ != NULL ? *adminsetequip_req_ : *default_instance_->adminsetequip_req_;
}
 ::Admin_SetEquip_Req* Event::mutable_adminsetequip_req() {
  set_has_adminsetequip_req();
  if (adminsetequip_req_ == NULL) {
    adminsetequip_req_ = new ::Admin_SetEquip_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminSetEquip_req)
  return adminsetequip_req_;
}
 ::Admin_SetEquip_Req* Event::release_adminsetequip_req() {
  clear_has_adminsetequip_req();
  ::Admin_SetEquip_Req* temp = adminsetequip_req_;
  adminsetequip_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminsetequip_req(::Admin_SetEquip_Req* adminsetequip_req) {
  delete adminsetequip_req_;
  adminsetequip_req_ = adminsetequip_req;
  if (adminsetequip_req) {
    set_has_adminsetequip_req();
  } else {
    clear_has_adminsetequip_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminSetEquip_req)
}

// optional .Admin_SetEquip_Rsp adminSetEquip_rsp = 42;
 bool Event::has_adminsetequip_rsp() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
 void Event::set_has_adminsetequip_rsp() {
  _has_bits_[1] |= 0x00000001u;
}
 void Event::clear_has_adminsetequip_rsp() {
  _has_bits_[1] &= ~0x00000001u;
}
 void Event::clear_adminsetequip_rsp() {
  if (adminsetequip_rsp_ != NULL) adminsetequip_rsp_->::Admin_SetEquip_Rsp::Clear();
  clear_has_adminsetequip_rsp();
}
 const ::Admin_SetEquip_Rsp& Event::adminsetequip_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminSetEquip_rsp)
  return adminsetequip_rsp_ != NULL ? *adminsetequip_rsp_ : *default_instance_->adminsetequip_rsp_;
}
 ::Admin_SetEquip_Rsp* Event::mutable_adminsetequip_rsp() {
  set_has_adminsetequip_rsp();
  if (adminsetequip_rsp_ == NULL) {
    adminsetequip_rsp_ = new ::Admin_SetEquip_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminSetEquip_rsp)
  return adminsetequip_rsp_;
}
 ::Admin_SetEquip_Rsp* Event::release_adminsetequip_rsp() {
  clear_has_adminsetequip_rsp();
  ::Admin_SetEquip_Rsp* temp = adminsetequip_rsp_;
  adminsetequip_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminsetequip_rsp(::Admin_SetEquip_Rsp* adminsetequip_rsp) {
  delete adminsetequip_rsp_;
  adminsetequip_rsp_ = adminsetequip_rsp;
  if (adminsetequip_rsp) {
    set_has_adminsetequip_rsp();
  } else {
    clear_has_adminsetequip_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminSetEquip_rsp)
}

// optional .Admin_UserInfo_Req adminUserInfo_req = 43;
 bool Event::has_adminuserinfo_req() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
 void Event::set_has_adminuserinfo_req() {
  _has_bits_[1] |= 0x00000002u;
}
 void Event::clear_has_adminuserinfo_req() {
  _has_bits_[1] &= ~0x00000002u;
}
 void Event::clear_adminuserinfo_req() {
  if (adminuserinfo_req_ != NULL) adminuserinfo_req_->::Admin_UserInfo_Req::Clear();
  clear_has_adminuserinfo_req();
}
 const ::Admin_UserInfo_Req& Event::adminuserinfo_req() const {
  // @@protoc_insertion_point(field_get:Event.adminUserInfo_req)
  return adminuserinfo_req_ != NULL ? *adminuserinfo_req_ : *default_instance_->adminuserinfo_req_;
}
 ::Admin_UserInfo_Req* Event::mutable_adminuserinfo_req() {
  set_has_adminuserinfo_req();
  if (adminuserinfo_req_ == NULL) {
    adminuserinfo_req_ = new ::Admin_UserInfo_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminUserInfo_req)
  return adminuserinfo_req_;
}
 ::Admin_UserInfo_Req* Event::release_adminuserinfo_req() {
  clear_has_adminuserinfo_req();
  ::Admin_UserInfo_Req* temp = adminuserinfo_req_;
  adminuserinfo_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminuserinfo_req(::Admin_UserInfo_Req* adminuserinfo_req) {
  delete adminuserinfo_req_;
  adminuserinfo_req_ = adminuserinfo_req;
  if (adminuserinfo_req) {
    set_has_adminuserinfo_req();
  } else {
    clear_has_adminuserinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminUserInfo_req)
}

// optional .Admin_UserInfo_Rsp adminUserInfo_rsp = 44;
 bool Event::has_adminuserinfo_rsp() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
 void Event::set_has_adminuserinfo_rsp() {
  _has_bits_[1] |= 0x00000004u;
}
 void Event::clear_has_adminuserinfo_rsp() {
  _has_bits_[1] &= ~0x00000004u;
}
 void Event::clear_adminuserinfo_rsp() {
  if (adminuserinfo_rsp_ != NULL) adminuserinfo_rsp_->::Admin_UserInfo_Rsp::Clear();
  clear_has_adminuserinfo_rsp();
}
 const ::Admin_UserInfo_Rsp& Event::adminuserinfo_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminUserInfo_rsp)
  return adminuserinfo_rsp_ != NULL ? *adminuserinfo_rsp_ : *default_instance_->adminuserinfo_rsp_;
}
 ::Admin_UserInfo_Rsp* Event::mutable_adminuserinfo_rsp() {
  set_has_adminuserinfo_rsp();
  if (adminuserinfo_rsp_ == NULL) {
    adminuserinfo_rsp_ = new ::Admin_UserInfo_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminUserInfo_rsp)
  return adminuserinfo_rsp_;
}
 ::Admin_UserInfo_Rsp* Event::release_adminuserinfo_rsp() {
  clear_has_adminuserinfo_rsp();
  ::Admin_UserInfo_Rsp* temp = adminuserinfo_rsp_;
  adminuserinfo_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminuserinfo_rsp(::Admin_UserInfo_Rsp* adminuserinfo_rsp) {
  delete adminuserinfo_rsp_;
  adminuserinfo_rsp_ = adminuserinfo_rsp;
  if (adminuserinfo_rsp) {
    set_has_adminuserinfo_rsp();
  } else {
    clear_has_adminuserinfo_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminUserInfo_rsp)
}

// optional .Admin_DelProp_Req adminDelProp_req = 45;
 bool Event::has_admindelprop_req() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
 void Event::set_has_admindelprop_req() {
  _has_bits_[1] |= 0x00000008u;
}
 void Event::clear_has_admindelprop_req() {
  _has_bits_[1] &= ~0x00000008u;
}
 void Event::clear_admindelprop_req() {
  if (admindelprop_req_ != NULL) admindelprop_req_->::Admin_DelProp_Req::Clear();
  clear_has_admindelprop_req();
}
 const ::Admin_DelProp_Req& Event::admindelprop_req() const {
  // @@protoc_insertion_point(field_get:Event.adminDelProp_req)
  return admindelprop_req_ != NULL ? *admindelprop_req_ : *default_instance_->admindelprop_req_;
}
 ::Admin_DelProp_Req* Event::mutable_admindelprop_req() {
  set_has_admindelprop_req();
  if (admindelprop_req_ == NULL) {
    admindelprop_req_ = new ::Admin_DelProp_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminDelProp_req)
  return admindelprop_req_;
}
 ::Admin_DelProp_Req* Event::release_admindelprop_req() {
  clear_has_admindelprop_req();
  ::Admin_DelProp_Req* temp = admindelprop_req_;
  admindelprop_req_ = NULL;
  return temp;
}
 void Event::set_allocated_admindelprop_req(::Admin_DelProp_Req* admindelprop_req) {
  delete admindelprop_req_;
  admindelprop_req_ = admindelprop_req;
  if (admindelprop_req) {
    set_has_admindelprop_req();
  } else {
    clear_has_admindelprop_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminDelProp_req)
}

// optional .Admin_DelProp_Rsp adminDelProp_rsp = 46;
 bool Event::has_admindelprop_rsp() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
 void Event::set_has_admindelprop_rsp() {
  _has_bits_[1] |= 0x00000010u;
}
 void Event::clear_has_admindelprop_rsp() {
  _has_bits_[1] &= ~0x00000010u;
}
 void Event::clear_admindelprop_rsp() {
  if (admindelprop_rsp_ != NULL) admindelprop_rsp_->::Admin_DelProp_Rsp::Clear();
  clear_has_admindelprop_rsp();
}
 const ::Admin_DelProp_Rsp& Event::admindelprop_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminDelProp_rsp)
  return admindelprop_rsp_ != NULL ? *admindelprop_rsp_ : *default_instance_->admindelprop_rsp_;
}
 ::Admin_DelProp_Rsp* Event::mutable_admindelprop_rsp() {
  set_has_admindelprop_rsp();
  if (admindelprop_rsp_ == NULL) {
    admindelprop_rsp_ = new ::Admin_DelProp_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminDelProp_rsp)
  return admindelprop_rsp_;
}
 ::Admin_DelProp_Rsp* Event::release_admindelprop_rsp() {
  clear_has_admindelprop_rsp();
  ::Admin_DelProp_Rsp* temp = admindelprop_rsp_;
  admindelprop_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_admindelprop_rsp(::Admin_DelProp_Rsp* admindelprop_rsp) {
  delete admindelprop_rsp_;
  admindelprop_rsp_ = admindelprop_rsp;
  if (admindelprop_rsp) {
    set_has_admindelprop_rsp();
  } else {
    clear_has_admindelprop_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminDelProp_rsp)
}

// optional .WebBuy webbuy = 47;
 bool Event::has_webbuy() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
 void Event::set_has_webbuy() {
  _has_bits_[1] |= 0x00000020u;
}
 void Event::clear_has_webbuy() {
  _has_bits_[1] &= ~0x00000020u;
}
 void Event::clear_webbuy() {
  if (webbuy_ != NULL) webbuy_->::WebBuy::Clear();
  clear_has_webbuy();
}
 const ::WebBuy& Event::webbuy() const {
  // @@protoc_insertion_point(field_get:Event.webbuy)
  return webbuy_ != NULL ? *webbuy_ : *default_instance_->webbuy_;
}
 ::WebBuy* Event::mutable_webbuy() {
  set_has_webbuy();
  if (webbuy_ == NULL) {
    webbuy_ = new ::WebBuy;
  }
  // @@protoc_insertion_point(field_mutable:Event.webbuy)
  return webbuy_;
}
 ::WebBuy* Event::release_webbuy() {
  clear_has_webbuy();
  ::WebBuy* temp = webbuy_;
  webbuy_ = NULL;
  return temp;
}
 void Event::set_allocated_webbuy(::WebBuy* webbuy) {
  delete webbuy_;
  webbuy_ = webbuy;
  if (webbuy) {
    set_has_webbuy();
  } else {
    clear_has_webbuy();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.webbuy)
}

// optional .Admin_RunTask_Req adminRunTask_req = 48;
 bool Event::has_adminruntask_req() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
 void Event::set_has_adminruntask_req() {
  _has_bits_[1] |= 0x00000040u;
}
 void Event::clear_has_adminruntask_req() {
  _has_bits_[1] &= ~0x00000040u;
}
 void Event::clear_adminruntask_req() {
  if (adminruntask_req_ != NULL) adminruntask_req_->::Admin_RunTask_Req::Clear();
  clear_has_adminruntask_req();
}
 const ::Admin_RunTask_Req& Event::adminruntask_req() const {
  // @@protoc_insertion_point(field_get:Event.adminRunTask_req)
  return adminruntask_req_ != NULL ? *adminruntask_req_ : *default_instance_->adminruntask_req_;
}
 ::Admin_RunTask_Req* Event::mutable_adminruntask_req() {
  set_has_adminruntask_req();
  if (adminruntask_req_ == NULL) {
    adminruntask_req_ = new ::Admin_RunTask_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminRunTask_req)
  return adminruntask_req_;
}
 ::Admin_RunTask_Req* Event::release_adminruntask_req() {
  clear_has_adminruntask_req();
  ::Admin_RunTask_Req* temp = adminruntask_req_;
  adminruntask_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminruntask_req(::Admin_RunTask_Req* adminruntask_req) {
  delete adminruntask_req_;
  adminruntask_req_ = adminruntask_req;
  if (adminruntask_req) {
    set_has_adminruntask_req();
  } else {
    clear_has_adminruntask_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminRunTask_req)
}

// optional .Admin_RunTask_Rsp adminRunTask_rsp = 49;
 bool Event::has_adminruntask_rsp() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
 void Event::set_has_adminruntask_rsp() {
  _has_bits_[1] |= 0x00000080u;
}
 void Event::clear_has_adminruntask_rsp() {
  _has_bits_[1] &= ~0x00000080u;
}
 void Event::clear_adminruntask_rsp() {
  if (adminruntask_rsp_ != NULL) adminruntask_rsp_->::Admin_RunTask_Rsp::Clear();
  clear_has_adminruntask_rsp();
}
 const ::Admin_RunTask_Rsp& Event::adminruntask_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminRunTask_rsp)
  return adminruntask_rsp_ != NULL ? *adminruntask_rsp_ : *default_instance_->adminruntask_rsp_;
}
 ::Admin_RunTask_Rsp* Event::mutable_adminruntask_rsp() {
  set_has_adminruntask_rsp();
  if (adminruntask_rsp_ == NULL) {
    adminruntask_rsp_ = new ::Admin_RunTask_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminRunTask_rsp)
  return adminruntask_rsp_;
}
 ::Admin_RunTask_Rsp* Event::release_adminruntask_rsp() {
  clear_has_adminruntask_rsp();
  ::Admin_RunTask_Rsp* temp = adminruntask_rsp_;
  adminruntask_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminruntask_rsp(::Admin_RunTask_Rsp* adminruntask_rsp) {
  delete adminruntask_rsp_;
  adminruntask_rsp_ = adminruntask_rsp;
  if (adminruntask_rsp) {
    set_has_adminruntask_rsp();
  } else {
    clear_has_adminruntask_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminRunTask_rsp)
}

// optional .Admin_BanChat_Req adminBanChat_req = 50;
 bool Event::has_adminbanchat_req() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
 void Event::set_has_adminbanchat_req() {
  _has_bits_[1] |= 0x00000100u;
}
 void Event::clear_has_adminbanchat_req() {
  _has_bits_[1] &= ~0x00000100u;
}
 void Event::clear_adminbanchat_req() {
  if (adminbanchat_req_ != NULL) adminbanchat_req_->::Admin_BanChat_Req::Clear();
  clear_has_adminbanchat_req();
}
 const ::Admin_BanChat_Req& Event::adminbanchat_req() const {
  // @@protoc_insertion_point(field_get:Event.adminBanChat_req)
  return adminbanchat_req_ != NULL ? *adminbanchat_req_ : *default_instance_->adminbanchat_req_;
}
 ::Admin_BanChat_Req* Event::mutable_adminbanchat_req() {
  set_has_adminbanchat_req();
  if (adminbanchat_req_ == NULL) {
    adminbanchat_req_ = new ::Admin_BanChat_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminBanChat_req)
  return adminbanchat_req_;
}
 ::Admin_BanChat_Req* Event::release_adminbanchat_req() {
  clear_has_adminbanchat_req();
  ::Admin_BanChat_Req* temp = adminbanchat_req_;
  adminbanchat_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminbanchat_req(::Admin_BanChat_Req* adminbanchat_req) {
  delete adminbanchat_req_;
  adminbanchat_req_ = adminbanchat_req;
  if (adminbanchat_req) {
    set_has_adminbanchat_req();
  } else {
    clear_has_adminbanchat_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminBanChat_req)
}

// optional .Admin_BanChat_Rsp adminBanChat_rsp = 51;
 bool Event::has_adminbanchat_rsp() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
 void Event::set_has_adminbanchat_rsp() {
  _has_bits_[1] |= 0x00000200u;
}
 void Event::clear_has_adminbanchat_rsp() {
  _has_bits_[1] &= ~0x00000200u;
}
 void Event::clear_adminbanchat_rsp() {
  if (adminbanchat_rsp_ != NULL) adminbanchat_rsp_->::Admin_BanChat_Rsp::Clear();
  clear_has_adminbanchat_rsp();
}
 const ::Admin_BanChat_Rsp& Event::adminbanchat_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminBanChat_rsp)
  return adminbanchat_rsp_ != NULL ? *adminbanchat_rsp_ : *default_instance_->adminbanchat_rsp_;
}
 ::Admin_BanChat_Rsp* Event::mutable_adminbanchat_rsp() {
  set_has_adminbanchat_rsp();
  if (adminbanchat_rsp_ == NULL) {
    adminbanchat_rsp_ = new ::Admin_BanChat_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminBanChat_rsp)
  return adminbanchat_rsp_;
}
 ::Admin_BanChat_Rsp* Event::release_adminbanchat_rsp() {
  clear_has_adminbanchat_rsp();
  ::Admin_BanChat_Rsp* temp = adminbanchat_rsp_;
  adminbanchat_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminbanchat_rsp(::Admin_BanChat_Rsp* adminbanchat_rsp) {
  delete adminbanchat_rsp_;
  adminbanchat_rsp_ = adminbanchat_rsp;
  if (adminbanchat_rsp) {
    set_has_adminbanchat_rsp();
  } else {
    clear_has_adminbanchat_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminBanChat_rsp)
}

// optional .Admin_BanLogin_Req adminBanLogin_req = 52;
 bool Event::has_adminbanlogin_req() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
 void Event::set_has_adminbanlogin_req() {
  _has_bits_[1] |= 0x00000400u;
}
 void Event::clear_has_adminbanlogin_req() {
  _has_bits_[1] &= ~0x00000400u;
}
 void Event::clear_adminbanlogin_req() {
  if (adminbanlogin_req_ != NULL) adminbanlogin_req_->::Admin_BanLogin_Req::Clear();
  clear_has_adminbanlogin_req();
}
 const ::Admin_BanLogin_Req& Event::adminbanlogin_req() const {
  // @@protoc_insertion_point(field_get:Event.adminBanLogin_req)
  return adminbanlogin_req_ != NULL ? *adminbanlogin_req_ : *default_instance_->adminbanlogin_req_;
}
 ::Admin_BanLogin_Req* Event::mutable_adminbanlogin_req() {
  set_has_adminbanlogin_req();
  if (adminbanlogin_req_ == NULL) {
    adminbanlogin_req_ = new ::Admin_BanLogin_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminBanLogin_req)
  return adminbanlogin_req_;
}
 ::Admin_BanLogin_Req* Event::release_adminbanlogin_req() {
  clear_has_adminbanlogin_req();
  ::Admin_BanLogin_Req* temp = adminbanlogin_req_;
  adminbanlogin_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminbanlogin_req(::Admin_BanLogin_Req* adminbanlogin_req) {
  delete adminbanlogin_req_;
  adminbanlogin_req_ = adminbanlogin_req;
  if (adminbanlogin_req) {
    set_has_adminbanlogin_req();
  } else {
    clear_has_adminbanlogin_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminBanLogin_req)
}

// optional .Admin_BanLogin_Rsp adminBanLogin_rsp = 53;
 bool Event::has_adminbanlogin_rsp() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
 void Event::set_has_adminbanlogin_rsp() {
  _has_bits_[1] |= 0x00000800u;
}
 void Event::clear_has_adminbanlogin_rsp() {
  _has_bits_[1] &= ~0x00000800u;
}
 void Event::clear_adminbanlogin_rsp() {
  if (adminbanlogin_rsp_ != NULL) adminbanlogin_rsp_->::Admin_BanLogin_Rsp::Clear();
  clear_has_adminbanlogin_rsp();
}
 const ::Admin_BanLogin_Rsp& Event::adminbanlogin_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminBanLogin_rsp)
  return adminbanlogin_rsp_ != NULL ? *adminbanlogin_rsp_ : *default_instance_->adminbanlogin_rsp_;
}
 ::Admin_BanLogin_Rsp* Event::mutable_adminbanlogin_rsp() {
  set_has_adminbanlogin_rsp();
  if (adminbanlogin_rsp_ == NULL) {
    adminbanlogin_rsp_ = new ::Admin_BanLogin_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminBanLogin_rsp)
  return adminbanlogin_rsp_;
}
 ::Admin_BanLogin_Rsp* Event::release_adminbanlogin_rsp() {
  clear_has_adminbanlogin_rsp();
  ::Admin_BanLogin_Rsp* temp = adminbanlogin_rsp_;
  adminbanlogin_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminbanlogin_rsp(::Admin_BanLogin_Rsp* adminbanlogin_rsp) {
  delete adminbanlogin_rsp_;
  adminbanlogin_rsp_ = adminbanlogin_rsp;
  if (adminbanlogin_rsp) {
    set_has_adminbanlogin_rsp();
  } else {
    clear_has_adminbanlogin_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminBanLogin_rsp)
}

// optional .Admin_AddPoint_Req adminAddPoint_req = 54;
 bool Event::has_adminaddpoint_req() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
 void Event::set_has_adminaddpoint_req() {
  _has_bits_[1] |= 0x00001000u;
}
 void Event::clear_has_adminaddpoint_req() {
  _has_bits_[1] &= ~0x00001000u;
}
 void Event::clear_adminaddpoint_req() {
  if (adminaddpoint_req_ != NULL) adminaddpoint_req_->::Admin_AddPoint_Req::Clear();
  clear_has_adminaddpoint_req();
}
 const ::Admin_AddPoint_Req& Event::adminaddpoint_req() const {
  // @@protoc_insertion_point(field_get:Event.adminAddPoint_req)
  return adminaddpoint_req_ != NULL ? *adminaddpoint_req_ : *default_instance_->adminaddpoint_req_;
}
 ::Admin_AddPoint_Req* Event::mutable_adminaddpoint_req() {
  set_has_adminaddpoint_req();
  if (adminaddpoint_req_ == NULL) {
    adminaddpoint_req_ = new ::Admin_AddPoint_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddPoint_req)
  return adminaddpoint_req_;
}
 ::Admin_AddPoint_Req* Event::release_adminaddpoint_req() {
  clear_has_adminaddpoint_req();
  ::Admin_AddPoint_Req* temp = adminaddpoint_req_;
  adminaddpoint_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddpoint_req(::Admin_AddPoint_Req* adminaddpoint_req) {
  delete adminaddpoint_req_;
  adminaddpoint_req_ = adminaddpoint_req;
  if (adminaddpoint_req) {
    set_has_adminaddpoint_req();
  } else {
    clear_has_adminaddpoint_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddPoint_req)
}

// optional .Admin_AddPoint_Rsp adminAddPoint_rsp = 55;
 bool Event::has_adminaddpoint_rsp() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
 void Event::set_has_adminaddpoint_rsp() {
  _has_bits_[1] |= 0x00002000u;
}
 void Event::clear_has_adminaddpoint_rsp() {
  _has_bits_[1] &= ~0x00002000u;
}
 void Event::clear_adminaddpoint_rsp() {
  if (adminaddpoint_rsp_ != NULL) adminaddpoint_rsp_->::Admin_AddPoint_Rsp::Clear();
  clear_has_adminaddpoint_rsp();
}
 const ::Admin_AddPoint_Rsp& Event::adminaddpoint_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminAddPoint_rsp)
  return adminaddpoint_rsp_ != NULL ? *adminaddpoint_rsp_ : *default_instance_->adminaddpoint_rsp_;
}
 ::Admin_AddPoint_Rsp* Event::mutable_adminaddpoint_rsp() {
  set_has_adminaddpoint_rsp();
  if (adminaddpoint_rsp_ == NULL) {
    adminaddpoint_rsp_ = new ::Admin_AddPoint_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddPoint_rsp)
  return adminaddpoint_rsp_;
}
 ::Admin_AddPoint_Rsp* Event::release_adminaddpoint_rsp() {
  clear_has_adminaddpoint_rsp();
  ::Admin_AddPoint_Rsp* temp = adminaddpoint_rsp_;
  adminaddpoint_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddpoint_rsp(::Admin_AddPoint_Rsp* adminaddpoint_rsp) {
  delete adminaddpoint_rsp_;
  adminaddpoint_rsp_ = adminaddpoint_rsp;
  if (adminaddpoint_rsp) {
    set_has_adminaddpoint_rsp();
  } else {
    clear_has_adminaddpoint_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddPoint_rsp)
}

// optional .Admin_AddIndate_Req adminAddIndate_req = 56;
 bool Event::has_adminaddindate_req() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
 void Event::set_has_adminaddindate_req() {
  _has_bits_[1] |= 0x00004000u;
}
 void Event::clear_has_adminaddindate_req() {
  _has_bits_[1] &= ~0x00004000u;
}
 void Event::clear_adminaddindate_req() {
  if (adminaddindate_req_ != NULL) adminaddindate_req_->::Admin_AddIndate_Req::Clear();
  clear_has_adminaddindate_req();
}
 const ::Admin_AddIndate_Req& Event::adminaddindate_req() const {
  // @@protoc_insertion_point(field_get:Event.adminAddIndate_req)
  return adminaddindate_req_ != NULL ? *adminaddindate_req_ : *default_instance_->adminaddindate_req_;
}
 ::Admin_AddIndate_Req* Event::mutable_adminaddindate_req() {
  set_has_adminaddindate_req();
  if (adminaddindate_req_ == NULL) {
    adminaddindate_req_ = new ::Admin_AddIndate_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddIndate_req)
  return adminaddindate_req_;
}
 ::Admin_AddIndate_Req* Event::release_adminaddindate_req() {
  clear_has_adminaddindate_req();
  ::Admin_AddIndate_Req* temp = adminaddindate_req_;
  adminaddindate_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddindate_req(::Admin_AddIndate_Req* adminaddindate_req) {
  delete adminaddindate_req_;
  adminaddindate_req_ = adminaddindate_req;
  if (adminaddindate_req) {
    set_has_adminaddindate_req();
  } else {
    clear_has_adminaddindate_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddIndate_req)
}

// optional .Admin_AddIndate_Rsp adminAddIndate_rsp = 57;
 bool Event::has_adminaddindate_rsp() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
 void Event::set_has_adminaddindate_rsp() {
  _has_bits_[1] |= 0x00008000u;
}
 void Event::clear_has_adminaddindate_rsp() {
  _has_bits_[1] &= ~0x00008000u;
}
 void Event::clear_adminaddindate_rsp() {
  if (adminaddindate_rsp_ != NULL) adminaddindate_rsp_->::Admin_AddIndate_Rsp::Clear();
  clear_has_adminaddindate_rsp();
}
 const ::Admin_AddIndate_Rsp& Event::adminaddindate_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminAddIndate_rsp)
  return adminaddindate_rsp_ != NULL ? *adminaddindate_rsp_ : *default_instance_->adminaddindate_rsp_;
}
 ::Admin_AddIndate_Rsp* Event::mutable_adminaddindate_rsp() {
  set_has_adminaddindate_rsp();
  if (adminaddindate_rsp_ == NULL) {
    adminaddindate_rsp_ = new ::Admin_AddIndate_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddIndate_rsp)
  return adminaddindate_rsp_;
}
 ::Admin_AddIndate_Rsp* Event::release_adminaddindate_rsp() {
  clear_has_adminaddindate_rsp();
  ::Admin_AddIndate_Rsp* temp = adminaddindate_rsp_;
  adminaddindate_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddindate_rsp(::Admin_AddIndate_Rsp* adminaddindate_rsp) {
  delete adminaddindate_rsp_;
  adminaddindate_rsp_ = adminaddindate_rsp;
  if (adminaddindate_rsp) {
    set_has_adminaddindate_rsp();
  } else {
    clear_has_adminaddindate_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddIndate_rsp)
}

// optional .Admin_FreshUser_Req adminFreshUser_req = 58;
 bool Event::has_adminfreshuser_req() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
 void Event::set_has_adminfreshuser_req() {
  _has_bits_[1] |= 0x00010000u;
}
 void Event::clear_has_adminfreshuser_req() {
  _has_bits_[1] &= ~0x00010000u;
}
 void Event::clear_adminfreshuser_req() {
  if (adminfreshuser_req_ != NULL) adminfreshuser_req_->::Admin_FreshUser_Req::Clear();
  clear_has_adminfreshuser_req();
}
 const ::Admin_FreshUser_Req& Event::adminfreshuser_req() const {
  // @@protoc_insertion_point(field_get:Event.adminFreshUser_req)
  return adminfreshuser_req_ != NULL ? *adminfreshuser_req_ : *default_instance_->adminfreshuser_req_;
}
 ::Admin_FreshUser_Req* Event::mutable_adminfreshuser_req() {
  set_has_adminfreshuser_req();
  if (adminfreshuser_req_ == NULL) {
    adminfreshuser_req_ = new ::Admin_FreshUser_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminFreshUser_req)
  return adminfreshuser_req_;
}
 ::Admin_FreshUser_Req* Event::release_adminfreshuser_req() {
  clear_has_adminfreshuser_req();
  ::Admin_FreshUser_Req* temp = adminfreshuser_req_;
  adminfreshuser_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminfreshuser_req(::Admin_FreshUser_Req* adminfreshuser_req) {
  delete adminfreshuser_req_;
  adminfreshuser_req_ = adminfreshuser_req;
  if (adminfreshuser_req) {
    set_has_adminfreshuser_req();
  } else {
    clear_has_adminfreshuser_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminFreshUser_req)
}

// optional .Admin_FreshUser_Rsp adminFreshUser_rsp = 59;
 bool Event::has_adminfreshuser_rsp() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
 void Event::set_has_adminfreshuser_rsp() {
  _has_bits_[1] |= 0x00020000u;
}
 void Event::clear_has_adminfreshuser_rsp() {
  _has_bits_[1] &= ~0x00020000u;
}
 void Event::clear_adminfreshuser_rsp() {
  if (adminfreshuser_rsp_ != NULL) adminfreshuser_rsp_->::Admin_FreshUser_Rsp::Clear();
  clear_has_adminfreshuser_rsp();
}
 const ::Admin_FreshUser_Rsp& Event::adminfreshuser_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminFreshUser_rsp)
  return adminfreshuser_rsp_ != NULL ? *adminfreshuser_rsp_ : *default_instance_->adminfreshuser_rsp_;
}
 ::Admin_FreshUser_Rsp* Event::mutable_adminfreshuser_rsp() {
  set_has_adminfreshuser_rsp();
  if (adminfreshuser_rsp_ == NULL) {
    adminfreshuser_rsp_ = new ::Admin_FreshUser_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminFreshUser_rsp)
  return adminfreshuser_rsp_;
}
 ::Admin_FreshUser_Rsp* Event::release_adminfreshuser_rsp() {
  clear_has_adminfreshuser_rsp();
  ::Admin_FreshUser_Rsp* temp = adminfreshuser_rsp_;
  adminfreshuser_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminfreshuser_rsp(::Admin_FreshUser_Rsp* adminfreshuser_rsp) {
  delete adminfreshuser_rsp_;
  adminfreshuser_rsp_ = adminfreshuser_rsp;
  if (adminfreshuser_rsp) {
    set_has_adminfreshuser_rsp();
  } else {
    clear_has_adminfreshuser_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminFreshUser_rsp)
}

// optional .Admin_AddMedal_Req adminAddMedal_req = 60;
 bool Event::has_adminaddmedal_req() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
 void Event::set_has_adminaddmedal_req() {
  _has_bits_[1] |= 0x00040000u;
}
 void Event::clear_has_adminaddmedal_req() {
  _has_bits_[1] &= ~0x00040000u;
}
 void Event::clear_adminaddmedal_req() {
  if (adminaddmedal_req_ != NULL) adminaddmedal_req_->::Admin_AddMedal_Req::Clear();
  clear_has_adminaddmedal_req();
}
 const ::Admin_AddMedal_Req& Event::adminaddmedal_req() const {
  // @@protoc_insertion_point(field_get:Event.adminAddMedal_req)
  return adminaddmedal_req_ != NULL ? *adminaddmedal_req_ : *default_instance_->adminaddmedal_req_;
}
 ::Admin_AddMedal_Req* Event::mutable_adminaddmedal_req() {
  set_has_adminaddmedal_req();
  if (adminaddmedal_req_ == NULL) {
    adminaddmedal_req_ = new ::Admin_AddMedal_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddMedal_req)
  return adminaddmedal_req_;
}
 ::Admin_AddMedal_Req* Event::release_adminaddmedal_req() {
  clear_has_adminaddmedal_req();
  ::Admin_AddMedal_Req* temp = adminaddmedal_req_;
  adminaddmedal_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddmedal_req(::Admin_AddMedal_Req* adminaddmedal_req) {
  delete adminaddmedal_req_;
  adminaddmedal_req_ = adminaddmedal_req;
  if (adminaddmedal_req) {
    set_has_adminaddmedal_req();
  } else {
    clear_has_adminaddmedal_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddMedal_req)
}

// optional .Admin_AddMedal_Rsp adminAddMedal_rsp = 61;
 bool Event::has_adminaddmedal_rsp() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
 void Event::set_has_adminaddmedal_rsp() {
  _has_bits_[1] |= 0x00080000u;
}
 void Event::clear_has_adminaddmedal_rsp() {
  _has_bits_[1] &= ~0x00080000u;
}
 void Event::clear_adminaddmedal_rsp() {
  if (adminaddmedal_rsp_ != NULL) adminaddmedal_rsp_->::Admin_AddMedal_Rsp::Clear();
  clear_has_adminaddmedal_rsp();
}
 const ::Admin_AddMedal_Rsp& Event::adminaddmedal_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminAddMedal_rsp)
  return adminaddmedal_rsp_ != NULL ? *adminaddmedal_rsp_ : *default_instance_->adminaddmedal_rsp_;
}
 ::Admin_AddMedal_Rsp* Event::mutable_adminaddmedal_rsp() {
  set_has_adminaddmedal_rsp();
  if (adminaddmedal_rsp_ == NULL) {
    adminaddmedal_rsp_ = new ::Admin_AddMedal_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddMedal_rsp)
  return adminaddmedal_rsp_;
}
 ::Admin_AddMedal_Rsp* Event::release_adminaddmedal_rsp() {
  clear_has_adminaddmedal_rsp();
  ::Admin_AddMedal_Rsp* temp = adminaddmedal_rsp_;
  adminaddmedal_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddmedal_rsp(::Admin_AddMedal_Rsp* adminaddmedal_rsp) {
  delete adminaddmedal_rsp_;
  adminaddmedal_rsp_ = adminaddmedal_rsp;
  if (adminaddmedal_rsp) {
    set_has_adminaddmedal_rsp();
  } else {
    clear_has_adminaddmedal_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddMedal_rsp)
}

// optional .WebLengthenIndate weblengthenindate = 62;
 bool Event::has_weblengthenindate() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
 void Event::set_has_weblengthenindate() {
  _has_bits_[1] |= 0x00100000u;
}
 void Event::clear_has_weblengthenindate() {
  _has_bits_[1] &= ~0x00100000u;
}
 void Event::clear_weblengthenindate() {
  if (weblengthenindate_ != NULL) weblengthenindate_->::WebLengthenIndate::Clear();
  clear_has_weblengthenindate();
}
 const ::WebLengthenIndate& Event::weblengthenindate() const {
  // @@protoc_insertion_point(field_get:Event.weblengthenindate)
  return weblengthenindate_ != NULL ? *weblengthenindate_ : *default_instance_->weblengthenindate_;
}
 ::WebLengthenIndate* Event::mutable_weblengthenindate() {
  set_has_weblengthenindate();
  if (weblengthenindate_ == NULL) {
    weblengthenindate_ = new ::WebLengthenIndate;
  }
  // @@protoc_insertion_point(field_mutable:Event.weblengthenindate)
  return weblengthenindate_;
}
 ::WebLengthenIndate* Event::release_weblengthenindate() {
  clear_has_weblengthenindate();
  ::WebLengthenIndate* temp = weblengthenindate_;
  weblengthenindate_ = NULL;
  return temp;
}
 void Event::set_allocated_weblengthenindate(::WebLengthenIndate* weblengthenindate) {
  delete weblengthenindate_;
  weblengthenindate_ = weblengthenindate;
  if (weblengthenindate) {
    set_has_weblengthenindate();
  } else {
    clear_has_weblengthenindate();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.weblengthenindate)
}

// optional .WebCheckBandCoin webcheckbandcoin = 63;
 bool Event::has_webcheckbandcoin() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
 void Event::set_has_webcheckbandcoin() {
  _has_bits_[1] |= 0x00200000u;
}
 void Event::clear_has_webcheckbandcoin() {
  _has_bits_[1] &= ~0x00200000u;
}
 void Event::clear_webcheckbandcoin() {
  if (webcheckbandcoin_ != NULL) webcheckbandcoin_->::WebCheckBandCoin::Clear();
  clear_has_webcheckbandcoin();
}
 const ::WebCheckBandCoin& Event::webcheckbandcoin() const {
  // @@protoc_insertion_point(field_get:Event.webcheckbandcoin)
  return webcheckbandcoin_ != NULL ? *webcheckbandcoin_ : *default_instance_->webcheckbandcoin_;
}
 ::WebCheckBandCoin* Event::mutable_webcheckbandcoin() {
  set_has_webcheckbandcoin();
  if (webcheckbandcoin_ == NULL) {
    webcheckbandcoin_ = new ::WebCheckBandCoin;
  }
  // @@protoc_insertion_point(field_mutable:Event.webcheckbandcoin)
  return webcheckbandcoin_;
}
 ::WebCheckBandCoin* Event::release_webcheckbandcoin() {
  clear_has_webcheckbandcoin();
  ::WebCheckBandCoin* temp = webcheckbandcoin_;
  webcheckbandcoin_ = NULL;
  return temp;
}
 void Event::set_allocated_webcheckbandcoin(::WebCheckBandCoin* webcheckbandcoin) {
  delete webcheckbandcoin_;
  webcheckbandcoin_ = webcheckbandcoin;
  if (webcheckbandcoin) {
    set_has_webcheckbandcoin();
  } else {
    clear_has_webcheckbandcoin();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.webcheckbandcoin)
}

// optional .Admin_BroadCast_Req adminBroadCast_req = 64;
 bool Event::has_adminbroadcast_req() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
 void Event::set_has_adminbroadcast_req() {
  _has_bits_[1] |= 0x00400000u;
}
 void Event::clear_has_adminbroadcast_req() {
  _has_bits_[1] &= ~0x00400000u;
}
 void Event::clear_adminbroadcast_req() {
  if (adminbroadcast_req_ != NULL) adminbroadcast_req_->::Admin_BroadCast_Req::Clear();
  clear_has_adminbroadcast_req();
}
 const ::Admin_BroadCast_Req& Event::adminbroadcast_req() const {
  // @@protoc_insertion_point(field_get:Event.adminBroadCast_req)
  return adminbroadcast_req_ != NULL ? *adminbroadcast_req_ : *default_instance_->adminbroadcast_req_;
}
 ::Admin_BroadCast_Req* Event::mutable_adminbroadcast_req() {
  set_has_adminbroadcast_req();
  if (adminbroadcast_req_ == NULL) {
    adminbroadcast_req_ = new ::Admin_BroadCast_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminBroadCast_req)
  return adminbroadcast_req_;
}
 ::Admin_BroadCast_Req* Event::release_adminbroadcast_req() {
  clear_has_adminbroadcast_req();
  ::Admin_BroadCast_Req* temp = adminbroadcast_req_;
  adminbroadcast_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminbroadcast_req(::Admin_BroadCast_Req* adminbroadcast_req) {
  delete adminbroadcast_req_;
  adminbroadcast_req_ = adminbroadcast_req;
  if (adminbroadcast_req) {
    set_has_adminbroadcast_req();
  } else {
    clear_has_adminbroadcast_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminBroadCast_req)
}

// optional .Admin_BroadCast_Rsp adminBroadCast_rsp = 65;
 bool Event::has_adminbroadcast_rsp() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
 void Event::set_has_adminbroadcast_rsp() {
  _has_bits_[1] |= 0x00800000u;
}
 void Event::clear_has_adminbroadcast_rsp() {
  _has_bits_[1] &= ~0x00800000u;
}
 void Event::clear_adminbroadcast_rsp() {
  if (adminbroadcast_rsp_ != NULL) adminbroadcast_rsp_->::Admin_BroadCast_Rsp::Clear();
  clear_has_adminbroadcast_rsp();
}
 const ::Admin_BroadCast_Rsp& Event::adminbroadcast_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminBroadCast_rsp)
  return adminbroadcast_rsp_ != NULL ? *adminbroadcast_rsp_ : *default_instance_->adminbroadcast_rsp_;
}
 ::Admin_BroadCast_Rsp* Event::mutable_adminbroadcast_rsp() {
  set_has_adminbroadcast_rsp();
  if (adminbroadcast_rsp_ == NULL) {
    adminbroadcast_rsp_ = new ::Admin_BroadCast_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminBroadCast_rsp)
  return adminbroadcast_rsp_;
}
 ::Admin_BroadCast_Rsp* Event::release_adminbroadcast_rsp() {
  clear_has_adminbroadcast_rsp();
  ::Admin_BroadCast_Rsp* temp = adminbroadcast_rsp_;
  adminbroadcast_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminbroadcast_rsp(::Admin_BroadCast_Rsp* adminbroadcast_rsp) {
  delete adminbroadcast_rsp_;
  adminbroadcast_rsp_ = adminbroadcast_rsp;
  if (adminbroadcast_rsp) {
    set_has_adminbroadcast_rsp();
  } else {
    clear_has_adminbroadcast_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminBroadCast_rsp)
}

// optional .Admin_Reload_Req adminReload_req = 66;
 bool Event::has_adminreload_req() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
 void Event::set_has_adminreload_req() {
  _has_bits_[1] |= 0x01000000u;
}
 void Event::clear_has_adminreload_req() {
  _has_bits_[1] &= ~0x01000000u;
}
 void Event::clear_adminreload_req() {
  if (adminreload_req_ != NULL) adminreload_req_->::Admin_Reload_Req::Clear();
  clear_has_adminreload_req();
}
 const ::Admin_Reload_Req& Event::adminreload_req() const {
  // @@protoc_insertion_point(field_get:Event.adminReload_req)
  return adminreload_req_ != NULL ? *adminreload_req_ : *default_instance_->adminreload_req_;
}
 ::Admin_Reload_Req* Event::mutable_adminreload_req() {
  set_has_adminreload_req();
  if (adminreload_req_ == NULL) {
    adminreload_req_ = new ::Admin_Reload_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminReload_req)
  return adminreload_req_;
}
 ::Admin_Reload_Req* Event::release_adminreload_req() {
  clear_has_adminreload_req();
  ::Admin_Reload_Req* temp = adminreload_req_;
  adminreload_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminreload_req(::Admin_Reload_Req* adminreload_req) {
  delete adminreload_req_;
  adminreload_req_ = adminreload_req;
  if (adminreload_req) {
    set_has_adminreload_req();
  } else {
    clear_has_adminreload_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminReload_req)
}

// optional .Admin_Reload_Rsp adminReload_rsp = 67;
 bool Event::has_adminreload_rsp() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
 void Event::set_has_adminreload_rsp() {
  _has_bits_[1] |= 0x02000000u;
}
 void Event::clear_has_adminreload_rsp() {
  _has_bits_[1] &= ~0x02000000u;
}
 void Event::clear_adminreload_rsp() {
  if (adminreload_rsp_ != NULL) adminreload_rsp_->::Admin_Reload_Rsp::Clear();
  clear_has_adminreload_rsp();
}
 const ::Admin_Reload_Rsp& Event::adminreload_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminReload_rsp)
  return adminreload_rsp_ != NULL ? *adminreload_rsp_ : *default_instance_->adminreload_rsp_;
}
 ::Admin_Reload_Rsp* Event::mutable_adminreload_rsp() {
  set_has_adminreload_rsp();
  if (adminreload_rsp_ == NULL) {
    adminreload_rsp_ = new ::Admin_Reload_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminReload_rsp)
  return adminreload_rsp_;
}
 ::Admin_Reload_Rsp* Event::release_adminreload_rsp() {
  clear_has_adminreload_rsp();
  ::Admin_Reload_Rsp* temp = adminreload_rsp_;
  adminreload_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminreload_rsp(::Admin_Reload_Rsp* adminreload_rsp) {
  delete adminreload_rsp_;
  adminreload_rsp_ = adminreload_rsp;
  if (adminreload_rsp) {
    set_has_adminreload_rsp();
  } else {
    clear_has_adminreload_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminReload_rsp)
}

// optional .UpdateGuestNumber update_guest_number = 68;
 bool Event::has_update_guest_number() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
 void Event::set_has_update_guest_number() {
  _has_bits_[1] |= 0x04000000u;
}
 void Event::clear_has_update_guest_number() {
  _has_bits_[1] &= ~0x04000000u;
}
 void Event::clear_update_guest_number() {
  if (update_guest_number_ != NULL) update_guest_number_->::UpdateGuestNumber::Clear();
  clear_has_update_guest_number();
}
 const ::UpdateGuestNumber& Event::update_guest_number() const {
  // @@protoc_insertion_point(field_get:Event.update_guest_number)
  return update_guest_number_ != NULL ? *update_guest_number_ : *default_instance_->update_guest_number_;
}
 ::UpdateGuestNumber* Event::mutable_update_guest_number() {
  set_has_update_guest_number();
  if (update_guest_number_ == NULL) {
    update_guest_number_ = new ::UpdateGuestNumber;
  }
  // @@protoc_insertion_point(field_mutable:Event.update_guest_number)
  return update_guest_number_;
}
 ::UpdateGuestNumber* Event::release_update_guest_number() {
  clear_has_update_guest_number();
  ::UpdateGuestNumber* temp = update_guest_number_;
  update_guest_number_ = NULL;
  return temp;
}
 void Event::set_allocated_update_guest_number(::UpdateGuestNumber* update_guest_number) {
  delete update_guest_number_;
  update_guest_number_ = update_guest_number;
  if (update_guest_number) {
    set_has_update_guest_number();
  } else {
    clear_has_update_guest_number();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.update_guest_number)
}

// optional .Admin_FluentPrice_Req adminFluentPrice_req = 69;
 bool Event::has_adminfluentprice_req() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
 void Event::set_has_adminfluentprice_req() {
  _has_bits_[1] |= 0x08000000u;
}
 void Event::clear_has_adminfluentprice_req() {
  _has_bits_[1] &= ~0x08000000u;
}
 void Event::clear_adminfluentprice_req() {
  if (adminfluentprice_req_ != NULL) adminfluentprice_req_->::Admin_FluentPrice_Req::Clear();
  clear_has_adminfluentprice_req();
}
 const ::Admin_FluentPrice_Req& Event::adminfluentprice_req() const {
  // @@protoc_insertion_point(field_get:Event.adminFluentPrice_req)
  return adminfluentprice_req_ != NULL ? *adminfluentprice_req_ : *default_instance_->adminfluentprice_req_;
}
 ::Admin_FluentPrice_Req* Event::mutable_adminfluentprice_req() {
  set_has_adminfluentprice_req();
  if (adminfluentprice_req_ == NULL) {
    adminfluentprice_req_ = new ::Admin_FluentPrice_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminFluentPrice_req)
  return adminfluentprice_req_;
}
 ::Admin_FluentPrice_Req* Event::release_adminfluentprice_req() {
  clear_has_adminfluentprice_req();
  ::Admin_FluentPrice_Req* temp = adminfluentprice_req_;
  adminfluentprice_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminfluentprice_req(::Admin_FluentPrice_Req* adminfluentprice_req) {
  delete adminfluentprice_req_;
  adminfluentprice_req_ = adminfluentprice_req;
  if (adminfluentprice_req) {
    set_has_adminfluentprice_req();
  } else {
    clear_has_adminfluentprice_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminFluentPrice_req)
}

// optional .Admin_FluentPrice_Rsp adminFluentPrice_rsp = 70;
 bool Event::has_adminfluentprice_rsp() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
 void Event::set_has_adminfluentprice_rsp() {
  _has_bits_[1] |= 0x10000000u;
}
 void Event::clear_has_adminfluentprice_rsp() {
  _has_bits_[1] &= ~0x10000000u;
}
 void Event::clear_adminfluentprice_rsp() {
  if (adminfluentprice_rsp_ != NULL) adminfluentprice_rsp_->::Admin_FluentPrice_Rsp::Clear();
  clear_has_adminfluentprice_rsp();
}
 const ::Admin_FluentPrice_Rsp& Event::adminfluentprice_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminFluentPrice_rsp)
  return adminfluentprice_rsp_ != NULL ? *adminfluentprice_rsp_ : *default_instance_->adminfluentprice_rsp_;
}
 ::Admin_FluentPrice_Rsp* Event::mutable_adminfluentprice_rsp() {
  set_has_adminfluentprice_rsp();
  if (adminfluentprice_rsp_ == NULL) {
    adminfluentprice_rsp_ = new ::Admin_FluentPrice_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminFluentPrice_rsp)
  return adminfluentprice_rsp_;
}
 ::Admin_FluentPrice_Rsp* Event::release_adminfluentprice_rsp() {
  clear_has_adminfluentprice_rsp();
  ::Admin_FluentPrice_Rsp* temp = adminfluentprice_rsp_;
  adminfluentprice_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminfluentprice_rsp(::Admin_FluentPrice_Rsp* adminfluentprice_rsp) {
  delete adminfluentprice_rsp_;
  adminfluentprice_rsp_ = adminfluentprice_rsp;
  if (adminfluentprice_rsp) {
    set_has_adminfluentprice_rsp();
  } else {
    clear_has_adminfluentprice_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminFluentPrice_rsp)
}

// optional .WebUnlock webunlock = 71;
 bool Event::has_webunlock() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
 void Event::set_has_webunlock() {
  _has_bits_[1] |= 0x20000000u;
}
 void Event::clear_has_webunlock() {
  _has_bits_[1] &= ~0x20000000u;
}
 void Event::clear_webunlock() {
  if (webunlock_ != NULL) webunlock_->::WebUnlock::Clear();
  clear_has_webunlock();
}
 const ::WebUnlock& Event::webunlock() const {
  // @@protoc_insertion_point(field_get:Event.webunlock)
  return webunlock_ != NULL ? *webunlock_ : *default_instance_->webunlock_;
}
 ::WebUnlock* Event::mutable_webunlock() {
  set_has_webunlock();
  if (webunlock_ == NULL) {
    webunlock_ = new ::WebUnlock;
  }
  // @@protoc_insertion_point(field_mutable:Event.webunlock)
  return webunlock_;
}
 ::WebUnlock* Event::release_webunlock() {
  clear_has_webunlock();
  ::WebUnlock* temp = webunlock_;
  webunlock_ = NULL;
  return temp;
}
 void Event::set_allocated_webunlock(::WebUnlock* webunlock) {
  delete webunlock_;
  webunlock_ = webunlock;
  if (webunlock) {
    set_has_webunlock();
  } else {
    clear_has_webunlock();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.webunlock)
}

// optional .WebAddEmployee webaddemployee = 72;
 bool Event::has_webaddemployee() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
 void Event::set_has_webaddemployee() {
  _has_bits_[1] |= 0x40000000u;
}
 void Event::clear_has_webaddemployee() {
  _has_bits_[1] &= ~0x40000000u;
}
 void Event::clear_webaddemployee() {
  if (webaddemployee_ != NULL) webaddemployee_->::WebAddEmployee::Clear();
  clear_has_webaddemployee();
}
 const ::WebAddEmployee& Event::webaddemployee() const {
  // @@protoc_insertion_point(field_get:Event.webaddemployee)
  return webaddemployee_ != NULL ? *webaddemployee_ : *default_instance_->webaddemployee_;
}
 ::WebAddEmployee* Event::mutable_webaddemployee() {
  set_has_webaddemployee();
  if (webaddemployee_ == NULL) {
    webaddemployee_ = new ::WebAddEmployee;
  }
  // @@protoc_insertion_point(field_mutable:Event.webaddemployee)
  return webaddemployee_;
}
 ::WebAddEmployee* Event::release_webaddemployee() {
  clear_has_webaddemployee();
  ::WebAddEmployee* temp = webaddemployee_;
  webaddemployee_ = NULL;
  return temp;
}
 void Event::set_allocated_webaddemployee(::WebAddEmployee* webaddemployee) {
  delete webaddemployee_;
  webaddemployee_ = webaddemployee;
  if (webaddemployee) {
    set_has_webaddemployee();
  } else {
    clear_has_webaddemployee();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.webaddemployee)
}

// optional .Admin_AddGoods_Req adminAddGoods_req = 73;
 bool Event::has_adminaddgoods_req() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
 void Event::set_has_adminaddgoods_req() {
  _has_bits_[1] |= 0x80000000u;
}
 void Event::clear_has_adminaddgoods_req() {
  _has_bits_[1] &= ~0x80000000u;
}
 void Event::clear_adminaddgoods_req() {
  if (adminaddgoods_req_ != NULL) adminaddgoods_req_->::Admin_AddGoods_Req::Clear();
  clear_has_adminaddgoods_req();
}
 const ::Admin_AddGoods_Req& Event::adminaddgoods_req() const {
  // @@protoc_insertion_point(field_get:Event.adminAddGoods_req)
  return adminaddgoods_req_ != NULL ? *adminaddgoods_req_ : *default_instance_->adminaddgoods_req_;
}
 ::Admin_AddGoods_Req* Event::mutable_adminaddgoods_req() {
  set_has_adminaddgoods_req();
  if (adminaddgoods_req_ == NULL) {
    adminaddgoods_req_ = new ::Admin_AddGoods_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddGoods_req)
  return adminaddgoods_req_;
}
 ::Admin_AddGoods_Req* Event::release_adminaddgoods_req() {
  clear_has_adminaddgoods_req();
  ::Admin_AddGoods_Req* temp = adminaddgoods_req_;
  adminaddgoods_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddgoods_req(::Admin_AddGoods_Req* adminaddgoods_req) {
  delete adminaddgoods_req_;
  adminaddgoods_req_ = adminaddgoods_req;
  if (adminaddgoods_req) {
    set_has_adminaddgoods_req();
  } else {
    clear_has_adminaddgoods_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddGoods_req)
}

// optional .Admin_AddGoods_Rsp adminAddGoods_rsp = 74;
 bool Event::has_adminaddgoods_rsp() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
 void Event::set_has_adminaddgoods_rsp() {
  _has_bits_[2] |= 0x00000001u;
}
 void Event::clear_has_adminaddgoods_rsp() {
  _has_bits_[2] &= ~0x00000001u;
}
 void Event::clear_adminaddgoods_rsp() {
  if (adminaddgoods_rsp_ != NULL) adminaddgoods_rsp_->::Admin_AddGoods_Rsp::Clear();
  clear_has_adminaddgoods_rsp();
}
 const ::Admin_AddGoods_Rsp& Event::adminaddgoods_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminAddGoods_rsp)
  return adminaddgoods_rsp_ != NULL ? *adminaddgoods_rsp_ : *default_instance_->adminaddgoods_rsp_;
}
 ::Admin_AddGoods_Rsp* Event::mutable_adminaddgoods_rsp() {
  set_has_adminaddgoods_rsp();
  if (adminaddgoods_rsp_ == NULL) {
    adminaddgoods_rsp_ = new ::Admin_AddGoods_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddGoods_rsp)
  return adminaddgoods_rsp_;
}
 ::Admin_AddGoods_Rsp* Event::release_adminaddgoods_rsp() {
  clear_has_adminaddgoods_rsp();
  ::Admin_AddGoods_Rsp* temp = adminaddgoods_rsp_;
  adminaddgoods_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddgoods_rsp(::Admin_AddGoods_Rsp* adminaddgoods_rsp) {
  delete adminaddgoods_rsp_;
  adminaddgoods_rsp_ = adminaddgoods_rsp;
  if (adminaddgoods_rsp) {
    set_has_adminaddgoods_rsp();
  } else {
    clear_has_adminaddgoods_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddGoods_rsp)
}

// optional .Admin_SetPublicPraise_Req adminSetPublicPraise_req = 75;
 bool Event::has_adminsetpublicpraise_req() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
 void Event::set_has_adminsetpublicpraise_req() {
  _has_bits_[2] |= 0x00000002u;
}
 void Event::clear_has_adminsetpublicpraise_req() {
  _has_bits_[2] &= ~0x00000002u;
}
 void Event::clear_adminsetpublicpraise_req() {
  if (adminsetpublicpraise_req_ != NULL) adminsetpublicpraise_req_->::Admin_SetPublicPraise_Req::Clear();
  clear_has_adminsetpublicpraise_req();
}
 const ::Admin_SetPublicPraise_Req& Event::adminsetpublicpraise_req() const {
  // @@protoc_insertion_point(field_get:Event.adminSetPublicPraise_req)
  return adminsetpublicpraise_req_ != NULL ? *adminsetpublicpraise_req_ : *default_instance_->adminsetpublicpraise_req_;
}
 ::Admin_SetPublicPraise_Req* Event::mutable_adminsetpublicpraise_req() {
  set_has_adminsetpublicpraise_req();
  if (adminsetpublicpraise_req_ == NULL) {
    adminsetpublicpraise_req_ = new ::Admin_SetPublicPraise_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminSetPublicPraise_req)
  return adminsetpublicpraise_req_;
}
 ::Admin_SetPublicPraise_Req* Event::release_adminsetpublicpraise_req() {
  clear_has_adminsetpublicpraise_req();
  ::Admin_SetPublicPraise_Req* temp = adminsetpublicpraise_req_;
  adminsetpublicpraise_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminsetpublicpraise_req(::Admin_SetPublicPraise_Req* adminsetpublicpraise_req) {
  delete adminsetpublicpraise_req_;
  adminsetpublicpraise_req_ = adminsetpublicpraise_req;
  if (adminsetpublicpraise_req) {
    set_has_adminsetpublicpraise_req();
  } else {
    clear_has_adminsetpublicpraise_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminSetPublicPraise_req)
}

// optional .Admin_SetPublicPraise_Rsp adminSetPublicPraise_rsp = 76;
 bool Event::has_adminsetpublicpraise_rsp() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
 void Event::set_has_adminsetpublicpraise_rsp() {
  _has_bits_[2] |= 0x00000004u;
}
 void Event::clear_has_adminsetpublicpraise_rsp() {
  _has_bits_[2] &= ~0x00000004u;
}
 void Event::clear_adminsetpublicpraise_rsp() {
  if (adminsetpublicpraise_rsp_ != NULL) adminsetpublicpraise_rsp_->::Admin_SetPublicPraise_Rsp::Clear();
  clear_has_adminsetpublicpraise_rsp();
}
 const ::Admin_SetPublicPraise_Rsp& Event::adminsetpublicpraise_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminSetPublicPraise_rsp)
  return adminsetpublicpraise_rsp_ != NULL ? *adminsetpublicpraise_rsp_ : *default_instance_->adminsetpublicpraise_rsp_;
}
 ::Admin_SetPublicPraise_Rsp* Event::mutable_adminsetpublicpraise_rsp() {
  set_has_adminsetpublicpraise_rsp();
  if (adminsetpublicpraise_rsp_ == NULL) {
    adminsetpublicpraise_rsp_ = new ::Admin_SetPublicPraise_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminSetPublicPraise_rsp)
  return adminsetpublicpraise_rsp_;
}
 ::Admin_SetPublicPraise_Rsp* Event::release_adminsetpublicpraise_rsp() {
  clear_has_adminsetpublicpraise_rsp();
  ::Admin_SetPublicPraise_Rsp* temp = adminsetpublicpraise_rsp_;
  adminsetpublicpraise_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminsetpublicpraise_rsp(::Admin_SetPublicPraise_Rsp* adminsetpublicpraise_rsp) {
  delete adminsetpublicpraise_rsp_;
  adminsetpublicpraise_rsp_ = adminsetpublicpraise_rsp;
  if (adminsetpublicpraise_rsp) {
    set_has_adminsetpublicpraise_rsp();
  } else {
    clear_has_adminsetpublicpraise_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminSetPublicPraise_rsp)
}

// optional .Admin_AddGuest_Req adminAddGuest_req = 77;
 bool Event::has_adminaddguest_req() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
 void Event::set_has_adminaddguest_req() {
  _has_bits_[2] |= 0x00000008u;
}
 void Event::clear_has_adminaddguest_req() {
  _has_bits_[2] &= ~0x00000008u;
}
 void Event::clear_adminaddguest_req() {
  if (adminaddguest_req_ != NULL) adminaddguest_req_->::Admin_AddGuest_Req::Clear();
  clear_has_adminaddguest_req();
}
 const ::Admin_AddGuest_Req& Event::adminaddguest_req() const {
  // @@protoc_insertion_point(field_get:Event.adminAddGuest_req)
  return adminaddguest_req_ != NULL ? *adminaddguest_req_ : *default_instance_->adminaddguest_req_;
}
 ::Admin_AddGuest_Req* Event::mutable_adminaddguest_req() {
  set_has_adminaddguest_req();
  if (adminaddguest_req_ == NULL) {
    adminaddguest_req_ = new ::Admin_AddGuest_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddGuest_req)
  return adminaddguest_req_;
}
 ::Admin_AddGuest_Req* Event::release_adminaddguest_req() {
  clear_has_adminaddguest_req();
  ::Admin_AddGuest_Req* temp = adminaddguest_req_;
  adminaddguest_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddguest_req(::Admin_AddGuest_Req* adminaddguest_req) {
  delete adminaddguest_req_;
  adminaddguest_req_ = adminaddguest_req;
  if (adminaddguest_req) {
    set_has_adminaddguest_req();
  } else {
    clear_has_adminaddguest_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddGuest_req)
}

// optional .Admin_AddGuest_Rsp adminAddGuest_rsp = 78;
 bool Event::has_adminaddguest_rsp() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
 void Event::set_has_adminaddguest_rsp() {
  _has_bits_[2] |= 0x00000010u;
}
 void Event::clear_has_adminaddguest_rsp() {
  _has_bits_[2] &= ~0x00000010u;
}
 void Event::clear_adminaddguest_rsp() {
  if (adminaddguest_rsp_ != NULL) adminaddguest_rsp_->::Admin_AddGuest_Rsp::Clear();
  clear_has_adminaddguest_rsp();
}
 const ::Admin_AddGuest_Rsp& Event::adminaddguest_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminAddGuest_rsp)
  return adminaddguest_rsp_ != NULL ? *adminaddguest_rsp_ : *default_instance_->adminaddguest_rsp_;
}
 ::Admin_AddGuest_Rsp* Event::mutable_adminaddguest_rsp() {
  set_has_adminaddguest_rsp();
  if (adminaddguest_rsp_ == NULL) {
    adminaddguest_rsp_ = new ::Admin_AddGuest_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminAddGuest_rsp)
  return adminaddguest_rsp_;
}
 ::Admin_AddGuest_Rsp* Event::release_adminaddguest_rsp() {
  clear_has_adminaddguest_rsp();
  ::Admin_AddGuest_Rsp* temp = adminaddguest_rsp_;
  adminaddguest_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminaddguest_rsp(::Admin_AddGuest_Rsp* adminaddguest_rsp) {
  delete adminaddguest_rsp_;
  adminaddguest_rsp_ = adminaddguest_rsp;
  if (adminaddguest_rsp) {
    set_has_adminaddguest_rsp();
  } else {
    clear_has_adminaddguest_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminAddGuest_rsp)
}

// optional .Admin_DelGoods_Req adminDelGoods_req = 79;
 bool Event::has_admindelgoods_req() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
 void Event::set_has_admindelgoods_req() {
  _has_bits_[2] |= 0x00000020u;
}
 void Event::clear_has_admindelgoods_req() {
  _has_bits_[2] &= ~0x00000020u;
}
 void Event::clear_admindelgoods_req() {
  if (admindelgoods_req_ != NULL) admindelgoods_req_->::Admin_DelGoods_Req::Clear();
  clear_has_admindelgoods_req();
}
 const ::Admin_DelGoods_Req& Event::admindelgoods_req() const {
  // @@protoc_insertion_point(field_get:Event.adminDelGoods_req)
  return admindelgoods_req_ != NULL ? *admindelgoods_req_ : *default_instance_->admindelgoods_req_;
}
 ::Admin_DelGoods_Req* Event::mutable_admindelgoods_req() {
  set_has_admindelgoods_req();
  if (admindelgoods_req_ == NULL) {
    admindelgoods_req_ = new ::Admin_DelGoods_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminDelGoods_req)
  return admindelgoods_req_;
}
 ::Admin_DelGoods_Req* Event::release_admindelgoods_req() {
  clear_has_admindelgoods_req();
  ::Admin_DelGoods_Req* temp = admindelgoods_req_;
  admindelgoods_req_ = NULL;
  return temp;
}
 void Event::set_allocated_admindelgoods_req(::Admin_DelGoods_Req* admindelgoods_req) {
  delete admindelgoods_req_;
  admindelgoods_req_ = admindelgoods_req;
  if (admindelgoods_req) {
    set_has_admindelgoods_req();
  } else {
    clear_has_admindelgoods_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminDelGoods_req)
}

// optional .Admin_DelGoods_Rsp adminDelGoods_rsp = 80;
 bool Event::has_admindelgoods_rsp() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
 void Event::set_has_admindelgoods_rsp() {
  _has_bits_[2] |= 0x00000040u;
}
 void Event::clear_has_admindelgoods_rsp() {
  _has_bits_[2] &= ~0x00000040u;
}
 void Event::clear_admindelgoods_rsp() {
  if (admindelgoods_rsp_ != NULL) admindelgoods_rsp_->::Admin_DelGoods_Rsp::Clear();
  clear_has_admindelgoods_rsp();
}
 const ::Admin_DelGoods_Rsp& Event::admindelgoods_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminDelGoods_rsp)
  return admindelgoods_rsp_ != NULL ? *admindelgoods_rsp_ : *default_instance_->admindelgoods_rsp_;
}
 ::Admin_DelGoods_Rsp* Event::mutable_admindelgoods_rsp() {
  set_has_admindelgoods_rsp();
  if (admindelgoods_rsp_ == NULL) {
    admindelgoods_rsp_ = new ::Admin_DelGoods_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminDelGoods_rsp)
  return admindelgoods_rsp_;
}
 ::Admin_DelGoods_Rsp* Event::release_admindelgoods_rsp() {
  clear_has_admindelgoods_rsp();
  ::Admin_DelGoods_Rsp* temp = admindelgoods_rsp_;
  admindelgoods_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_admindelgoods_rsp(::Admin_DelGoods_Rsp* admindelgoods_rsp) {
  delete admindelgoods_rsp_;
  admindelgoods_rsp_ = admindelgoods_rsp;
  if (admindelgoods_rsp) {
    set_has_admindelgoods_rsp();
  } else {
    clear_has_admindelgoods_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminDelGoods_rsp)
}

// optional .Admin_Clear_Req adminClear_req = 81;
 bool Event::has_adminclear_req() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
 void Event::set_has_adminclear_req() {
  _has_bits_[2] |= 0x00000080u;
}
 void Event::clear_has_adminclear_req() {
  _has_bits_[2] &= ~0x00000080u;
}
 void Event::clear_adminclear_req() {
  if (adminclear_req_ != NULL) adminclear_req_->::Admin_Clear_Req::Clear();
  clear_has_adminclear_req();
}
 const ::Admin_Clear_Req& Event::adminclear_req() const {
  // @@protoc_insertion_point(field_get:Event.adminClear_req)
  return adminclear_req_ != NULL ? *adminclear_req_ : *default_instance_->adminclear_req_;
}
 ::Admin_Clear_Req* Event::mutable_adminclear_req() {
  set_has_adminclear_req();
  if (adminclear_req_ == NULL) {
    adminclear_req_ = new ::Admin_Clear_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminClear_req)
  return adminclear_req_;
}
 ::Admin_Clear_Req* Event::release_adminclear_req() {
  clear_has_adminclear_req();
  ::Admin_Clear_Req* temp = adminclear_req_;
  adminclear_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminclear_req(::Admin_Clear_Req* adminclear_req) {
  delete adminclear_req_;
  adminclear_req_ = adminclear_req;
  if (adminclear_req) {
    set_has_adminclear_req();
  } else {
    clear_has_adminclear_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminClear_req)
}

// optional .Admin_Clear_Rsp adminClear_rsp = 82;
 bool Event::has_adminclear_rsp() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
 void Event::set_has_adminclear_rsp() {
  _has_bits_[2] |= 0x00000100u;
}
 void Event::clear_has_adminclear_rsp() {
  _has_bits_[2] &= ~0x00000100u;
}
 void Event::clear_adminclear_rsp() {
  if (adminclear_rsp_ != NULL) adminclear_rsp_->::Admin_Clear_Rsp::Clear();
  clear_has_adminclear_rsp();
}
 const ::Admin_Clear_Rsp& Event::adminclear_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminClear_rsp)
  return adminclear_rsp_ != NULL ? *adminclear_rsp_ : *default_instance_->adminclear_rsp_;
}
 ::Admin_Clear_Rsp* Event::mutable_adminclear_rsp() {
  set_has_adminclear_rsp();
  if (adminclear_rsp_ == NULL) {
    adminclear_rsp_ = new ::Admin_Clear_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminClear_rsp)
  return adminclear_rsp_;
}
 ::Admin_Clear_Rsp* Event::release_adminclear_rsp() {
  clear_has_adminclear_rsp();
  ::Admin_Clear_Rsp* temp = adminclear_rsp_;
  adminclear_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminclear_rsp(::Admin_Clear_Rsp* adminclear_rsp) {
  delete adminclear_rsp_;
  adminclear_rsp_ = adminclear_rsp;
  if (adminclear_rsp) {
    set_has_adminclear_rsp();
  } else {
    clear_has_adminclear_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminClear_rsp)
}

// optional .Admin_StatisticsOnLinePeople_Req adminOnLineNum_req = 83;
 bool Event::has_adminonlinenum_req() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
 void Event::set_has_adminonlinenum_req() {
  _has_bits_[2] |= 0x00000200u;
}
 void Event::clear_has_adminonlinenum_req() {
  _has_bits_[2] &= ~0x00000200u;
}
 void Event::clear_adminonlinenum_req() {
  if (adminonlinenum_req_ != NULL) adminonlinenum_req_->::Admin_StatisticsOnLinePeople_Req::Clear();
  clear_has_adminonlinenum_req();
}
 const ::Admin_StatisticsOnLinePeople_Req& Event::adminonlinenum_req() const {
  // @@protoc_insertion_point(field_get:Event.adminOnLineNum_req)
  return adminonlinenum_req_ != NULL ? *adminonlinenum_req_ : *default_instance_->adminonlinenum_req_;
}
 ::Admin_StatisticsOnLinePeople_Req* Event::mutable_adminonlinenum_req() {
  set_has_adminonlinenum_req();
  if (adminonlinenum_req_ == NULL) {
    adminonlinenum_req_ = new ::Admin_StatisticsOnLinePeople_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminOnLineNum_req)
  return adminonlinenum_req_;
}
 ::Admin_StatisticsOnLinePeople_Req* Event::release_adminonlinenum_req() {
  clear_has_adminonlinenum_req();
  ::Admin_StatisticsOnLinePeople_Req* temp = adminonlinenum_req_;
  adminonlinenum_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminonlinenum_req(::Admin_StatisticsOnLinePeople_Req* adminonlinenum_req) {
  delete adminonlinenum_req_;
  adminonlinenum_req_ = adminonlinenum_req;
  if (adminonlinenum_req) {
    set_has_adminonlinenum_req();
  } else {
    clear_has_adminonlinenum_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminOnLineNum_req)
}

// optional .Admin_StatisticsOnLinePeople_Rsp adminOnLineNum_rsp = 84;
 bool Event::has_adminonlinenum_rsp() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
 void Event::set_has_adminonlinenum_rsp() {
  _has_bits_[2] |= 0x00000400u;
}
 void Event::clear_has_adminonlinenum_rsp() {
  _has_bits_[2] &= ~0x00000400u;
}
 void Event::clear_adminonlinenum_rsp() {
  if (adminonlinenum_rsp_ != NULL) adminonlinenum_rsp_->::Admin_StatisticsOnLinePeople_Rsp::Clear();
  clear_has_adminonlinenum_rsp();
}
 const ::Admin_StatisticsOnLinePeople_Rsp& Event::adminonlinenum_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminOnLineNum_rsp)
  return adminonlinenum_rsp_ != NULL ? *adminonlinenum_rsp_ : *default_instance_->adminonlinenum_rsp_;
}
 ::Admin_StatisticsOnLinePeople_Rsp* Event::mutable_adminonlinenum_rsp() {
  set_has_adminonlinenum_rsp();
  if (adminonlinenum_rsp_ == NULL) {
    adminonlinenum_rsp_ = new ::Admin_StatisticsOnLinePeople_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminOnLineNum_rsp)
  return adminonlinenum_rsp_;
}
 ::Admin_StatisticsOnLinePeople_Rsp* Event::release_adminonlinenum_rsp() {
  clear_has_adminonlinenum_rsp();
  ::Admin_StatisticsOnLinePeople_Rsp* temp = adminonlinenum_rsp_;
  adminonlinenum_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminonlinenum_rsp(::Admin_StatisticsOnLinePeople_Rsp* adminonlinenum_rsp) {
  delete adminonlinenum_rsp_;
  adminonlinenum_rsp_ = adminonlinenum_rsp;
  if (adminonlinenum_rsp) {
    set_has_adminonlinenum_rsp();
  } else {
    clear_has_adminonlinenum_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminOnLineNum_rsp)
}

// optional .Admin_KickPlayer_Req adminKickPlayer_req = 85;
 bool Event::has_adminkickplayer_req() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
 void Event::set_has_adminkickplayer_req() {
  _has_bits_[2] |= 0x00000800u;
}
 void Event::clear_has_adminkickplayer_req() {
  _has_bits_[2] &= ~0x00000800u;
}
 void Event::clear_adminkickplayer_req() {
  if (adminkickplayer_req_ != NULL) adminkickplayer_req_->::Admin_KickPlayer_Req::Clear();
  clear_has_adminkickplayer_req();
}
 const ::Admin_KickPlayer_Req& Event::adminkickplayer_req() const {
  // @@protoc_insertion_point(field_get:Event.adminKickPlayer_req)
  return adminkickplayer_req_ != NULL ? *adminkickplayer_req_ : *default_instance_->adminkickplayer_req_;
}
 ::Admin_KickPlayer_Req* Event::mutable_adminkickplayer_req() {
  set_has_adminkickplayer_req();
  if (adminkickplayer_req_ == NULL) {
    adminkickplayer_req_ = new ::Admin_KickPlayer_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminKickPlayer_req)
  return adminkickplayer_req_;
}
 ::Admin_KickPlayer_Req* Event::release_adminkickplayer_req() {
  clear_has_adminkickplayer_req();
  ::Admin_KickPlayer_Req* temp = adminkickplayer_req_;
  adminkickplayer_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminkickplayer_req(::Admin_KickPlayer_Req* adminkickplayer_req) {
  delete adminkickplayer_req_;
  adminkickplayer_req_ = adminkickplayer_req;
  if (adminkickplayer_req) {
    set_has_adminkickplayer_req();
  } else {
    clear_has_adminkickplayer_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminKickPlayer_req)
}

// optional .Admin_KickPlayer_Rsp adminKickPlayer_rsp = 86;
 bool Event::has_adminkickplayer_rsp() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
 void Event::set_has_adminkickplayer_rsp() {
  _has_bits_[2] |= 0x00001000u;
}
 void Event::clear_has_adminkickplayer_rsp() {
  _has_bits_[2] &= ~0x00001000u;
}
 void Event::clear_adminkickplayer_rsp() {
  if (adminkickplayer_rsp_ != NULL) adminkickplayer_rsp_->::Admin_KickPlayer_Rsp::Clear();
  clear_has_adminkickplayer_rsp();
}
 const ::Admin_KickPlayer_Rsp& Event::adminkickplayer_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminKickPlayer_rsp)
  return adminkickplayer_rsp_ != NULL ? *adminkickplayer_rsp_ : *default_instance_->adminkickplayer_rsp_;
}
 ::Admin_KickPlayer_Rsp* Event::mutable_adminkickplayer_rsp() {
  set_has_adminkickplayer_rsp();
  if (adminkickplayer_rsp_ == NULL) {
    adminkickplayer_rsp_ = new ::Admin_KickPlayer_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminKickPlayer_rsp)
  return adminkickplayer_rsp_;
}
 ::Admin_KickPlayer_Rsp* Event::release_adminkickplayer_rsp() {
  clear_has_adminkickplayer_rsp();
  ::Admin_KickPlayer_Rsp* temp = adminkickplayer_rsp_;
  adminkickplayer_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminkickplayer_rsp(::Admin_KickPlayer_Rsp* adminkickplayer_rsp) {
  delete adminkickplayer_rsp_;
  adminkickplayer_rsp_ = adminkickplayer_rsp;
  if (adminkickplayer_rsp) {
    set_has_adminkickplayer_rsp();
  } else {
    clear_has_adminkickplayer_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminKickPlayer_rsp)
}

// optional .WebInvite webinvite = 87;
 bool Event::has_webinvite() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
 void Event::set_has_webinvite() {
  _has_bits_[2] |= 0x00002000u;
}
 void Event::clear_has_webinvite() {
  _has_bits_[2] &= ~0x00002000u;
}
 void Event::clear_webinvite() {
  if (webinvite_ != NULL) webinvite_->::WebInvite::Clear();
  clear_has_webinvite();
}
 const ::WebInvite& Event::webinvite() const {
  // @@protoc_insertion_point(field_get:Event.webinvite)
  return webinvite_ != NULL ? *webinvite_ : *default_instance_->webinvite_;
}
 ::WebInvite* Event::mutable_webinvite() {
  set_has_webinvite();
  if (webinvite_ == NULL) {
    webinvite_ = new ::WebInvite;
  }
  // @@protoc_insertion_point(field_mutable:Event.webinvite)
  return webinvite_;
}
 ::WebInvite* Event::release_webinvite() {
  clear_has_webinvite();
  ::WebInvite* temp = webinvite_;
  webinvite_ = NULL;
  return temp;
}
 void Event::set_allocated_webinvite(::WebInvite* webinvite) {
  delete webinvite_;
  webinvite_ = webinvite;
  if (webinvite) {
    set_has_webinvite();
  } else {
    clear_has_webinvite();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.webinvite)
}

// optional .Invite invite = 88;
 bool Event::has_invite() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
 void Event::set_has_invite() {
  _has_bits_[2] |= 0x00004000u;
}
 void Event::clear_has_invite() {
  _has_bits_[2] &= ~0x00004000u;
}
 void Event::clear_invite() {
  if (invite_ != NULL) invite_->::Invite::Clear();
  clear_has_invite();
}
 const ::Invite& Event::invite() const {
  // @@protoc_insertion_point(field_get:Event.invite)
  return invite_ != NULL ? *invite_ : *default_instance_->invite_;
}
 ::Invite* Event::mutable_invite() {
  set_has_invite();
  if (invite_ == NULL) {
    invite_ = new ::Invite;
  }
  // @@protoc_insertion_point(field_mutable:Event.invite)
  return invite_;
}
 ::Invite* Event::release_invite() {
  clear_has_invite();
  ::Invite* temp = invite_;
  invite_ = NULL;
  return temp;
}
 void Event::set_allocated_invite(::Invite* invite) {
  delete invite_;
  invite_ = invite;
  if (invite) {
    set_has_invite();
  } else {
    clear_has_invite();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.invite)
}

// optional .Admin_STR_Req adminstr_req = 89;
 bool Event::has_adminstr_req() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
 void Event::set_has_adminstr_req() {
  _has_bits_[2] |= 0x00008000u;
}
 void Event::clear_has_adminstr_req() {
  _has_bits_[2] &= ~0x00008000u;
}
 void Event::clear_adminstr_req() {
  if (adminstr_req_ != NULL) adminstr_req_->::Admin_STR_Req::Clear();
  clear_has_adminstr_req();
}
 const ::Admin_STR_Req& Event::adminstr_req() const {
  // @@protoc_insertion_point(field_get:Event.adminstr_req)
  return adminstr_req_ != NULL ? *adminstr_req_ : *default_instance_->adminstr_req_;
}
 ::Admin_STR_Req* Event::mutable_adminstr_req() {
  set_has_adminstr_req();
  if (adminstr_req_ == NULL) {
    adminstr_req_ = new ::Admin_STR_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminstr_req)
  return adminstr_req_;
}
 ::Admin_STR_Req* Event::release_adminstr_req() {
  clear_has_adminstr_req();
  ::Admin_STR_Req* temp = adminstr_req_;
  adminstr_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminstr_req(::Admin_STR_Req* adminstr_req) {
  delete adminstr_req_;
  adminstr_req_ = adminstr_req;
  if (adminstr_req) {
    set_has_adminstr_req();
  } else {
    clear_has_adminstr_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminstr_req)
}

// optional .Admin_STR_Rsp adminstr_rsp = 90;
 bool Event::has_adminstr_rsp() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
 void Event::set_has_adminstr_rsp() {
  _has_bits_[2] |= 0x00010000u;
}
 void Event::clear_has_adminstr_rsp() {
  _has_bits_[2] &= ~0x00010000u;
}
 void Event::clear_adminstr_rsp() {
  if (adminstr_rsp_ != NULL) adminstr_rsp_->::Admin_STR_Rsp::Clear();
  clear_has_adminstr_rsp();
}
 const ::Admin_STR_Rsp& Event::adminstr_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminstr_rsp)
  return adminstr_rsp_ != NULL ? *adminstr_rsp_ : *default_instance_->adminstr_rsp_;
}
 ::Admin_STR_Rsp* Event::mutable_adminstr_rsp() {
  set_has_adminstr_rsp();
  if (adminstr_rsp_ == NULL) {
    adminstr_rsp_ = new ::Admin_STR_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminstr_rsp)
  return adminstr_rsp_;
}
 ::Admin_STR_Rsp* Event::release_adminstr_rsp() {
  clear_has_adminstr_rsp();
  ::Admin_STR_Rsp* temp = adminstr_rsp_;
  adminstr_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminstr_rsp(::Admin_STR_Rsp* adminstr_rsp) {
  delete adminstr_rsp_;
  adminstr_rsp_ = adminstr_rsp;
  if (adminstr_rsp) {
    set_has_adminstr_rsp();
  } else {
    clear_has_adminstr_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminstr_rsp)
}

// optional .WebBuyCfm webbugcfm = 91;
 bool Event::has_webbugcfm() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
 void Event::set_has_webbugcfm() {
  _has_bits_[2] |= 0x00020000u;
}
 void Event::clear_has_webbugcfm() {
  _has_bits_[2] &= ~0x00020000u;
}
 void Event::clear_webbugcfm() {
  if (webbugcfm_ != NULL) webbugcfm_->::WebBuyCfm::Clear();
  clear_has_webbugcfm();
}
 const ::WebBuyCfm& Event::webbugcfm() const {
  // @@protoc_insertion_point(field_get:Event.webbugcfm)
  return webbugcfm_ != NULL ? *webbugcfm_ : *default_instance_->webbugcfm_;
}
 ::WebBuyCfm* Event::mutable_webbugcfm() {
  set_has_webbugcfm();
  if (webbugcfm_ == NULL) {
    webbugcfm_ = new ::WebBuyCfm;
  }
  // @@protoc_insertion_point(field_mutable:Event.webbugcfm)
  return webbugcfm_;
}
 ::WebBuyCfm* Event::release_webbugcfm() {
  clear_has_webbugcfm();
  ::WebBuyCfm* temp = webbugcfm_;
  webbugcfm_ = NULL;
  return temp;
}
 void Event::set_allocated_webbugcfm(::WebBuyCfm* webbugcfm) {
  delete webbugcfm_;
  webbugcfm_ = webbugcfm;
  if (webbugcfm) {
    set_has_webbugcfm();
  } else {
    clear_has_webbugcfm();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.webbugcfm)
}

// optional .Admin_SetVal_Req adminSetVal_req = 92;
 bool Event::has_adminsetval_req() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
 void Event::set_has_adminsetval_req() {
  _has_bits_[2] |= 0x00040000u;
}
 void Event::clear_has_adminsetval_req() {
  _has_bits_[2] &= ~0x00040000u;
}
 void Event::clear_adminsetval_req() {
  if (adminsetval_req_ != NULL) adminsetval_req_->::Admin_SetVal_Req::Clear();
  clear_has_adminsetval_req();
}
 const ::Admin_SetVal_Req& Event::adminsetval_req() const {
  // @@protoc_insertion_point(field_get:Event.adminSetVal_req)
  return adminsetval_req_ != NULL ? *adminsetval_req_ : *default_instance_->adminsetval_req_;
}
 ::Admin_SetVal_Req* Event::mutable_adminsetval_req() {
  set_has_adminsetval_req();
  if (adminsetval_req_ == NULL) {
    adminsetval_req_ = new ::Admin_SetVal_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminSetVal_req)
  return adminsetval_req_;
}
 ::Admin_SetVal_Req* Event::release_adminsetval_req() {
  clear_has_adminsetval_req();
  ::Admin_SetVal_Req* temp = adminsetval_req_;
  adminsetval_req_ = NULL;
  return temp;
}
 void Event::set_allocated_adminsetval_req(::Admin_SetVal_Req* adminsetval_req) {
  delete adminsetval_req_;
  adminsetval_req_ = adminsetval_req;
  if (adminsetval_req) {
    set_has_adminsetval_req();
  } else {
    clear_has_adminsetval_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminSetVal_req)
}

// optional .Admin_SetVal_Rsp adminSetVal_rsp = 93;
 bool Event::has_adminsetval_rsp() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
 void Event::set_has_adminsetval_rsp() {
  _has_bits_[2] |= 0x00080000u;
}
 void Event::clear_has_adminsetval_rsp() {
  _has_bits_[2] &= ~0x00080000u;
}
 void Event::clear_adminsetval_rsp() {
  if (adminsetval_rsp_ != NULL) adminsetval_rsp_->::Admin_SetVal_Rsp::Clear();
  clear_has_adminsetval_rsp();
}
 const ::Admin_SetVal_Rsp& Event::adminsetval_rsp() const {
  // @@protoc_insertion_point(field_get:Event.adminSetVal_rsp)
  return adminsetval_rsp_ != NULL ? *adminsetval_rsp_ : *default_instance_->adminsetval_rsp_;
}
 ::Admin_SetVal_Rsp* Event::mutable_adminsetval_rsp() {
  set_has_adminsetval_rsp();
  if (adminsetval_rsp_ == NULL) {
    adminsetval_rsp_ = new ::Admin_SetVal_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.adminSetVal_rsp)
  return adminsetval_rsp_;
}
 ::Admin_SetVal_Rsp* Event::release_adminsetval_rsp() {
  clear_has_adminsetval_rsp();
  ::Admin_SetVal_Rsp* temp = adminsetval_rsp_;
  adminsetval_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_adminsetval_rsp(::Admin_SetVal_Rsp* adminsetval_rsp) {
  delete adminsetval_rsp_;
  adminsetval_rsp_ = adminsetval_rsp;
  if (adminsetval_rsp) {
    set_has_adminsetval_rsp();
  } else {
    clear_has_adminsetval_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.adminSetVal_rsp)
}

// optional string sid = 94;
 bool Event::has_sid() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
 void Event::set_has_sid() {
  _has_bits_[2] |= 0x00100000u;
}
 void Event::clear_has_sid() {
  _has_bits_[2] &= ~0x00100000u;
}
 void Event::clear_sid() {
  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sid();
}
 const ::std::string& Event::sid() const {
  // @@protoc_insertion_point(field_get:Event.sid)
  return sid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_sid(const ::std::string& value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Event.sid)
}
 void Event::set_sid(const char* value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Event.sid)
}
 void Event::set_sid(const char* value, size_t size) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Event.sid)
}
 ::std::string* Event::mutable_sid() {
  set_has_sid();
  // @@protoc_insertion_point(field_mutable:Event.sid)
  return sid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_sid() {
  clear_has_sid();
  return sid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_sid(::std::string* sid) {
  if (sid != NULL) {
    set_has_sid();
  } else {
    clear_has_sid();
  }
  sid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:Event.sid)
}

// optional .WebAskFor webAsk = 95;
 bool Event::has_webask() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
 void Event::set_has_webask() {
  _has_bits_[2] |= 0x00200000u;
}
 void Event::clear_has_webask() {
  _has_bits_[2] &= ~0x00200000u;
}
 void Event::clear_webask() {
  if (webask_ != NULL) webask_->::WebAskFor::Clear();
  clear_has_webask();
}
 const ::WebAskFor& Event::webask() const {
  // @@protoc_insertion_point(field_get:Event.webAsk)
  return webask_ != NULL ? *webask_ : *default_instance_->webask_;
}
 ::WebAskFor* Event::mutable_webask() {
  set_has_webask();
  if (webask_ == NULL) {
    webask_ = new ::WebAskFor;
  }
  // @@protoc_insertion_point(field_mutable:Event.webAsk)
  return webask_;
}
 ::WebAskFor* Event::release_webask() {
  clear_has_webask();
  ::WebAskFor* temp = webask_;
  webask_ = NULL;
  return temp;
}
 void Event::set_allocated_webask(::WebAskFor* webask) {
  delete webask_;
  webask_ = webask;
  if (webask) {
    set_has_webask();
  } else {
    clear_has_webask();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.webAsk)
}

// optional .WebGiveFor webGive = 96;
 bool Event::has_webgive() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
 void Event::set_has_webgive() {
  _has_bits_[2] |= 0x00400000u;
}
 void Event::clear_has_webgive() {
  _has_bits_[2] &= ~0x00400000u;
}
 void Event::clear_webgive() {
  if (webgive_ != NULL) webgive_->::WebGiveFor::Clear();
  clear_has_webgive();
}
 const ::WebGiveFor& Event::webgive() const {
  // @@protoc_insertion_point(field_get:Event.webGive)
  return webgive_ != NULL ? *webgive_ : *default_instance_->webgive_;
}
 ::WebGiveFor* Event::mutable_webgive() {
  set_has_webgive();
  if (webgive_ == NULL) {
    webgive_ = new ::WebGiveFor;
  }
  // @@protoc_insertion_point(field_mutable:Event.webGive)
  return webgive_;
}
 ::WebGiveFor* Event::release_webgive() {
  clear_has_webgive();
  ::WebGiveFor* temp = webgive_;
  webgive_ = NULL;
  return temp;
}
 void Event::set_allocated_webgive(::WebGiveFor* webgive) {
  delete webgive_;
  webgive_ = webgive;
  if (webgive) {
    set_has_webgive();
  } else {
    clear_has_webgive();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.webGive)
}

// optional int32 pushbackcnt = 97 [default = 0];
 bool Event::has_pushbackcnt() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
 void Event::set_has_pushbackcnt() {
  _has_bits_[2] |= 0x00800000u;
}
 void Event::clear_has_pushbackcnt() {
  _has_bits_[2] &= ~0x00800000u;
}
 void Event::clear_pushbackcnt() {
  pushbackcnt_ = 0;
  clear_has_pushbackcnt();
}
 ::google::protobuf::int32 Event::pushbackcnt() const {
  // @@protoc_insertion_point(field_get:Event.pushbackcnt)
  return pushbackcnt_;
}
 void Event::set_pushbackcnt(::google::protobuf::int32 value) {
  set_has_pushbackcnt();
  pushbackcnt_ = value;
  // @@protoc_insertion_point(field_set:Event.pushbackcnt)
}

// optional .QQUnionAddItem qqunion_additem = 98;
 bool Event::has_qqunion_additem() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
 void Event::set_has_qqunion_additem() {
  _has_bits_[2] |= 0x01000000u;
}
 void Event::clear_has_qqunion_additem() {
  _has_bits_[2] &= ~0x01000000u;
}
 void Event::clear_qqunion_additem() {
  if (qqunion_additem_ != NULL) qqunion_additem_->::QQUnionAddItem::Clear();
  clear_has_qqunion_additem();
}
 const ::QQUnionAddItem& Event::qqunion_additem() const {
  // @@protoc_insertion_point(field_get:Event.qqunion_additem)
  return qqunion_additem_ != NULL ? *qqunion_additem_ : *default_instance_->qqunion_additem_;
}
 ::QQUnionAddItem* Event::mutable_qqunion_additem() {
  set_has_qqunion_additem();
  if (qqunion_additem_ == NULL) {
    qqunion_additem_ = new ::QQUnionAddItem;
  }
  // @@protoc_insertion_point(field_mutable:Event.qqunion_additem)
  return qqunion_additem_;
}
 ::QQUnionAddItem* Event::release_qqunion_additem() {
  clear_has_qqunion_additem();
  ::QQUnionAddItem* temp = qqunion_additem_;
  qqunion_additem_ = NULL;
  return temp;
}
 void Event::set_allocated_qqunion_additem(::QQUnionAddItem* qqunion_additem) {
  delete qqunion_additem_;
  qqunion_additem_ = qqunion_additem;
  if (qqunion_additem) {
    set_has_qqunion_additem();
  } else {
    clear_has_qqunion_additem();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.qqunion_additem)
}

// optional .QQUnionCheckOpenId qqunion_checkopenid = 99;
 bool Event::has_qqunion_checkopenid() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
 void Event::set_has_qqunion_checkopenid() {
  _has_bits_[2] |= 0x02000000u;
}
 void Event::clear_has_qqunion_checkopenid() {
  _has_bits_[2] &= ~0x02000000u;
}
 void Event::clear_qqunion_checkopenid() {
  if (qqunion_checkopenid_ != NULL) qqunion_checkopenid_->::QQUnionCheckOpenId::Clear();
  clear_has_qqunion_checkopenid();
}
 const ::QQUnionCheckOpenId& Event::qqunion_checkopenid() const {
  // @@protoc_insertion_point(field_get:Event.qqunion_checkopenid)
  return qqunion_checkopenid_ != NULL ? *qqunion_checkopenid_ : *default_instance_->qqunion_checkopenid_;
}
 ::QQUnionCheckOpenId* Event::mutable_qqunion_checkopenid() {
  set_has_qqunion_checkopenid();
  if (qqunion_checkopenid_ == NULL) {
    qqunion_checkopenid_ = new ::QQUnionCheckOpenId;
  }
  // @@protoc_insertion_point(field_mutable:Event.qqunion_checkopenid)
  return qqunion_checkopenid_;
}
 ::QQUnionCheckOpenId* Event::release_qqunion_checkopenid() {
  clear_has_qqunion_checkopenid();
  ::QQUnionCheckOpenId* temp = qqunion_checkopenid_;
  qqunion_checkopenid_ = NULL;
  return temp;
}
 void Event::set_allocated_qqunion_checkopenid(::QQUnionCheckOpenId* qqunion_checkopenid) {
  delete qqunion_checkopenid_;
  qqunion_checkopenid_ = qqunion_checkopenid;
  if (qqunion_checkopenid) {
    set_has_qqunion_checkopenid();
  } else {
    clear_has_qqunion_checkopenid();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.qqunion_checkopenid)
}

// optional .QQUnionCheckKey qqunion_checkkey = 100;
 bool Event::has_qqunion_checkkey() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
 void Event::set_has_qqunion_checkkey() {
  _has_bits_[2] |= 0x04000000u;
}
 void Event::clear_has_qqunion_checkkey() {
  _has_bits_[2] &= ~0x04000000u;
}
 void Event::clear_qqunion_checkkey() {
  if (qqunion_checkkey_ != NULL) qqunion_checkkey_->::QQUnionCheckKey::Clear();
  clear_has_qqunion_checkkey();
}
 const ::QQUnionCheckKey& Event::qqunion_checkkey() const {
  // @@protoc_insertion_point(field_get:Event.qqunion_checkkey)
  return qqunion_checkkey_ != NULL ? *qqunion_checkkey_ : *default_instance_->qqunion_checkkey_;
}
 ::QQUnionCheckKey* Event::mutable_qqunion_checkkey() {
  set_has_qqunion_checkkey();
  if (qqunion_checkkey_ == NULL) {
    qqunion_checkkey_ = new ::QQUnionCheckKey;
  }
  // @@protoc_insertion_point(field_mutable:Event.qqunion_checkkey)
  return qqunion_checkkey_;
}
 ::QQUnionCheckKey* Event::release_qqunion_checkkey() {
  clear_has_qqunion_checkkey();
  ::QQUnionCheckKey* temp = qqunion_checkkey_;
  qqunion_checkkey_ = NULL;
  return temp;
}
 void Event::set_allocated_qqunion_checkkey(::QQUnionCheckKey* qqunion_checkkey) {
  delete qqunion_checkkey_;
  qqunion_checkkey_ = qqunion_checkkey;
  if (qqunion_checkkey) {
    set_has_qqunion_checkkey();
  } else {
    clear_has_qqunion_checkkey();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.qqunion_checkkey)
}

// optional .MultiLevelFriendPoint multi_level_friend_point = 101;
 bool Event::has_multi_level_friend_point() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
 void Event::set_has_multi_level_friend_point() {
  _has_bits_[2] |= 0x08000000u;
}
 void Event::clear_has_multi_level_friend_point() {
  _has_bits_[2] &= ~0x08000000u;
}
 void Event::clear_multi_level_friend_point() {
  if (multi_level_friend_point_ != NULL) multi_level_friend_point_->::MultiLevelFriendPoint::Clear();
  clear_has_multi_level_friend_point();
}
 const ::MultiLevelFriendPoint& Event::multi_level_friend_point() const {
  // @@protoc_insertion_point(field_get:Event.multi_level_friend_point)
  return multi_level_friend_point_ != NULL ? *multi_level_friend_point_ : *default_instance_->multi_level_friend_point_;
}
 ::MultiLevelFriendPoint* Event::mutable_multi_level_friend_point() {
  set_has_multi_level_friend_point();
  if (multi_level_friend_point_ == NULL) {
    multi_level_friend_point_ = new ::MultiLevelFriendPoint;
  }
  // @@protoc_insertion_point(field_mutable:Event.multi_level_friend_point)
  return multi_level_friend_point_;
}
 ::MultiLevelFriendPoint* Event::release_multi_level_friend_point() {
  clear_has_multi_level_friend_point();
  ::MultiLevelFriendPoint* temp = multi_level_friend_point_;
  multi_level_friend_point_ = NULL;
  return temp;
}
 void Event::set_allocated_multi_level_friend_point(::MultiLevelFriendPoint* multi_level_friend_point) {
  delete multi_level_friend_point_;
  multi_level_friend_point_ = multi_level_friend_point;
  if (multi_level_friend_point) {
    set_has_multi_level_friend_point();
  } else {
    clear_has_multi_level_friend_point();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.multi_level_friend_point)
}

// optional .Admin_Common_Req admin_common_req = 102;
 bool Event::has_admin_common_req() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
 void Event::set_has_admin_common_req() {
  _has_bits_[2] |= 0x10000000u;
}
 void Event::clear_has_admin_common_req() {
  _has_bits_[2] &= ~0x10000000u;
}
 void Event::clear_admin_common_req() {
  if (admin_common_req_ != NULL) admin_common_req_->::Admin_Common_Req::Clear();
  clear_has_admin_common_req();
}
 const ::Admin_Common_Req& Event::admin_common_req() const {
  // @@protoc_insertion_point(field_get:Event.admin_common_req)
  return admin_common_req_ != NULL ? *admin_common_req_ : *default_instance_->admin_common_req_;
}
 ::Admin_Common_Req* Event::mutable_admin_common_req() {
  set_has_admin_common_req();
  if (admin_common_req_ == NULL) {
    admin_common_req_ = new ::Admin_Common_Req;
  }
  // @@protoc_insertion_point(field_mutable:Event.admin_common_req)
  return admin_common_req_;
}
 ::Admin_Common_Req* Event::release_admin_common_req() {
  clear_has_admin_common_req();
  ::Admin_Common_Req* temp = admin_common_req_;
  admin_common_req_ = NULL;
  return temp;
}
 void Event::set_allocated_admin_common_req(::Admin_Common_Req* admin_common_req) {
  delete admin_common_req_;
  admin_common_req_ = admin_common_req;
  if (admin_common_req) {
    set_has_admin_common_req();
  } else {
    clear_has_admin_common_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.admin_common_req)
}

// optional .Admin_Common_Rsp admin_common_rsp = 103;
 bool Event::has_admin_common_rsp() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
 void Event::set_has_admin_common_rsp() {
  _has_bits_[2] |= 0x20000000u;
}
 void Event::clear_has_admin_common_rsp() {
  _has_bits_[2] &= ~0x20000000u;
}
 void Event::clear_admin_common_rsp() {
  if (admin_common_rsp_ != NULL) admin_common_rsp_->::Admin_Common_Rsp::Clear();
  clear_has_admin_common_rsp();
}
 const ::Admin_Common_Rsp& Event::admin_common_rsp() const {
  // @@protoc_insertion_point(field_get:Event.admin_common_rsp)
  return admin_common_rsp_ != NULL ? *admin_common_rsp_ : *default_instance_->admin_common_rsp_;
}
 ::Admin_Common_Rsp* Event::mutable_admin_common_rsp() {
  set_has_admin_common_rsp();
  if (admin_common_rsp_ == NULL) {
    admin_common_rsp_ = new ::Admin_Common_Rsp;
  }
  // @@protoc_insertion_point(field_mutable:Event.admin_common_rsp)
  return admin_common_rsp_;
}
 ::Admin_Common_Rsp* Event::release_admin_common_rsp() {
  clear_has_admin_common_rsp();
  ::Admin_Common_Rsp* temp = admin_common_rsp_;
  admin_common_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_admin_common_rsp(::Admin_Common_Rsp* admin_common_rsp) {
  delete admin_common_rsp_;
  admin_common_rsp_ = admin_common_rsp;
  if (admin_common_rsp) {
    set_has_admin_common_rsp();
  } else {
    clear_has_admin_common_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.admin_common_rsp)
}

// optional .TalentShow talent_show = 104;
 bool Event::has_talent_show() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
 void Event::set_has_talent_show() {
  _has_bits_[2] |= 0x40000000u;
}
 void Event::clear_has_talent_show() {
  _has_bits_[2] &= ~0x40000000u;
}
 void Event::clear_talent_show() {
  if (talent_show_ != NULL) talent_show_->::TalentShow::Clear();
  clear_has_talent_show();
}
 const ::TalentShow& Event::talent_show() const {
  // @@protoc_insertion_point(field_get:Event.talent_show)
  return talent_show_ != NULL ? *talent_show_ : *default_instance_->talent_show_;
}
 ::TalentShow* Event::mutable_talent_show() {
  set_has_talent_show();
  if (talent_show_ == NULL) {
    talent_show_ = new ::TalentShow;
  }
  // @@protoc_insertion_point(field_mutable:Event.talent_show)
  return talent_show_;
}
 ::TalentShow* Event::release_talent_show() {
  clear_has_talent_show();
  ::TalentShow* temp = talent_show_;
  talent_show_ = NULL;
  return temp;
}
 void Event::set_allocated_talent_show(::TalentShow* talent_show) {
  delete talent_show_;
  talent_show_ = talent_show;
  if (talent_show) {
    set_has_talent_show();
  } else {
    clear_has_talent_show();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.talent_show)
}

// optional .TalentShowList talent_show_list = 105;
 bool Event::has_talent_show_list() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
 void Event::set_has_talent_show_list() {
  _has_bits_[2] |= 0x80000000u;
}
 void Event::clear_has_talent_show_list() {
  _has_bits_[2] &= ~0x80000000u;
}
 void Event::clear_talent_show_list() {
  if (talent_show_list_ != NULL) talent_show_list_->::TalentShowList::Clear();
  clear_has_talent_show_list();
}
 const ::TalentShowList& Event::talent_show_list() const {
  // @@protoc_insertion_point(field_get:Event.talent_show_list)
  return talent_show_list_ != NULL ? *talent_show_list_ : *default_instance_->talent_show_list_;
}
 ::TalentShowList* Event::mutable_talent_show_list() {
  set_has_talent_show_list();
  if (talent_show_list_ == NULL) {
    talent_show_list_ = new ::TalentShowList;
  }
  // @@protoc_insertion_point(field_mutable:Event.talent_show_list)
  return talent_show_list_;
}
 ::TalentShowList* Event::release_talent_show_list() {
  clear_has_talent_show_list();
  ::TalentShowList* temp = talent_show_list_;
  talent_show_list_ = NULL;
  return temp;
}
 void Event::set_allocated_talent_show_list(::TalentShowList* talent_show_list) {
  delete talent_show_list_;
  talent_show_list_ = talent_show_list;
  if (talent_show_list) {
    set_has_talent_show_list();
  } else {
    clear_has_talent_show_list();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.talent_show_list)
}

// optional int32 gameid = 106;
 bool Event::has_gameid() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
 void Event::set_has_gameid() {
  _has_bits_[3] |= 0x00000001u;
}
 void Event::clear_has_gameid() {
  _has_bits_[3] &= ~0x00000001u;
}
 void Event::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
 ::google::protobuf::int32 Event::gameid() const {
  // @@protoc_insertion_point(field_get:Event.gameid)
  return gameid_;
}
 void Event::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Event.gameid)
}

// optional int32 worldid = 107;
 bool Event::has_worldid() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
 void Event::set_has_worldid() {
  _has_bits_[3] |= 0x00000002u;
}
 void Event::clear_has_worldid() {
  _has_bits_[3] &= ~0x00000002u;
}
 void Event::clear_worldid() {
  worldid_ = 0;
  clear_has_worldid();
}
 ::google::protobuf::int32 Event::worldid() const {
  // @@protoc_insertion_point(field_get:Event.worldid)
  return worldid_;
}
 void Event::set_worldid(::google::protobuf::int32 value) {
  set_has_worldid();
  worldid_ = value;
  // @@protoc_insertion_point(field_set:Event.worldid)
}

// optional int32 rankKind = 108;
 bool Event::has_rankkind() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
 void Event::set_has_rankkind() {
  _has_bits_[3] |= 0x00000004u;
}
 void Event::clear_has_rankkind() {
  _has_bits_[3] &= ~0x00000004u;
}
 void Event::clear_rankkind() {
  rankkind_ = 0;
  clear_has_rankkind();
}
 ::google::protobuf::int32 Event::rankkind() const {
  // @@protoc_insertion_point(field_get:Event.rankKind)
  return rankkind_;
}
 void Event::set_rankkind(::google::protobuf::int32 value) {
  set_has_rankkind();
  rankkind_ = value;
  // @@protoc_insertion_point(field_set:Event.rankKind)
}

// optional .WebFreeGift freegift = 109;
 bool Event::has_freegift() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
 void Event::set_has_freegift() {
  _has_bits_[3] |= 0x00000008u;
}
 void Event::clear_has_freegift() {
  _has_bits_[3] &= ~0x00000008u;
}
 void Event::clear_freegift() {
  if (freegift_ != NULL) freegift_->::WebFreeGift::Clear();
  clear_has_freegift();
}
 const ::WebFreeGift& Event::freegift() const {
  // @@protoc_insertion_point(field_get:Event.freegift)
  return freegift_ != NULL ? *freegift_ : *default_instance_->freegift_;
}
 ::WebFreeGift* Event::mutable_freegift() {
  set_has_freegift();
  if (freegift_ == NULL) {
    freegift_ = new ::WebFreeGift;
  }
  // @@protoc_insertion_point(field_mutable:Event.freegift)
  return freegift_;
}
 ::WebFreeGift* Event::release_freegift() {
  clear_has_freegift();
  ::WebFreeGift* temp = freegift_;
  freegift_ = NULL;
  return temp;
}
 void Event::set_allocated_freegift(::WebFreeGift* freegift) {
  delete freegift_;
  freegift_ = freegift;
  if (freegift) {
    set_has_freegift();
  } else {
    clear_has_freegift();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.freegift)
}

// optional .FriendSendGift friend_send_gift = 110;
 bool Event::has_friend_send_gift() const {
  return (_has_bits_[3] & 0x00000010u) != 0;
}
 void Event::set_has_friend_send_gift() {
  _has_bits_[3] |= 0x00000010u;
}
 void Event::clear_has_friend_send_gift() {
  _has_bits_[3] &= ~0x00000010u;
}
 void Event::clear_friend_send_gift() {
  if (friend_send_gift_ != NULL) friend_send_gift_->::FriendSendGift::Clear();
  clear_has_friend_send_gift();
}
 const ::FriendSendGift& Event::friend_send_gift() const {
  // @@protoc_insertion_point(field_get:Event.friend_send_gift)
  return friend_send_gift_ != NULL ? *friend_send_gift_ : *default_instance_->friend_send_gift_;
}
 ::FriendSendGift* Event::mutable_friend_send_gift() {
  set_has_friend_send_gift();
  if (friend_send_gift_ == NULL) {
    friend_send_gift_ = new ::FriendSendGift;
  }
  // @@protoc_insertion_point(field_mutable:Event.friend_send_gift)
  return friend_send_gift_;
}
 ::FriendSendGift* Event::release_friend_send_gift() {
  clear_has_friend_send_gift();
  ::FriendSendGift* temp = friend_send_gift_;
  friend_send_gift_ = NULL;
  return temp;
}
 void Event::set_allocated_friend_send_gift(::FriendSendGift* friend_send_gift) {
  delete friend_send_gift_;
  friend_send_gift_ = friend_send_gift;
  if (friend_send_gift) {
    set_has_friend_send_gift();
  } else {
    clear_has_friend_send_gift();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.friend_send_gift)
}

// optional .FortuneSteal fortune_steal = 111;
 bool Event::has_fortune_steal() const {
  return (_has_bits_[3] & 0x00000020u) != 0;
}
 void Event::set_has_fortune_steal() {
  _has_bits_[3] |= 0x00000020u;
}
 void Event::clear_has_fortune_steal() {
  _has_bits_[3] &= ~0x00000020u;
}
 void Event::clear_fortune_steal() {
  if (fortune_steal_ != NULL) fortune_steal_->::FortuneSteal::Clear();
  clear_has_fortune_steal();
}
 const ::FortuneSteal& Event::fortune_steal() const {
  // @@protoc_insertion_point(field_get:Event.fortune_steal)
  return fortune_steal_ != NULL ? *fortune_steal_ : *default_instance_->fortune_steal_;
}
 ::FortuneSteal* Event::mutable_fortune_steal() {
  set_has_fortune_steal();
  if (fortune_steal_ == NULL) {
    fortune_steal_ = new ::FortuneSteal;
  }
  // @@protoc_insertion_point(field_mutable:Event.fortune_steal)
  return fortune_steal_;
}
 ::FortuneSteal* Event::release_fortune_steal() {
  clear_has_fortune_steal();
  ::FortuneSteal* temp = fortune_steal_;
  fortune_steal_ = NULL;
  return temp;
}
 void Event::set_allocated_fortune_steal(::FortuneSteal* fortune_steal) {
  delete fortune_steal_;
  fortune_steal_ = fortune_steal;
  if (fortune_steal) {
    set_has_fortune_steal();
  } else {
    clear_has_fortune_steal();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.fortune_steal)
}

// optional .Wap_Str_Request wap_req = 112;
 bool Event::has_wap_req() const {
  return (_has_bits_[3] & 0x00000040u) != 0;
}
 void Event::set_has_wap_req() {
  _has_bits_[3] |= 0x00000040u;
}
 void Event::clear_has_wap_req() {
  _has_bits_[3] &= ~0x00000040u;
}
 void Event::clear_wap_req() {
  if (wap_req_ != NULL) wap_req_->::Wap_Str_Request::Clear();
  clear_has_wap_req();
}
 const ::Wap_Str_Request& Event::wap_req() const {
  // @@protoc_insertion_point(field_get:Event.wap_req)
  return wap_req_ != NULL ? *wap_req_ : *default_instance_->wap_req_;
}
 ::Wap_Str_Request* Event::mutable_wap_req() {
  set_has_wap_req();
  if (wap_req_ == NULL) {
    wap_req_ = new ::Wap_Str_Request;
  }
  // @@protoc_insertion_point(field_mutable:Event.wap_req)
  return wap_req_;
}
 ::Wap_Str_Request* Event::release_wap_req() {
  clear_has_wap_req();
  ::Wap_Str_Request* temp = wap_req_;
  wap_req_ = NULL;
  return temp;
}
 void Event::set_allocated_wap_req(::Wap_Str_Request* wap_req) {
  delete wap_req_;
  wap_req_ = wap_req;
  if (wap_req) {
    set_has_wap_req();
  } else {
    clear_has_wap_req();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.wap_req)
}

// optional .Wap_Str_Response wap_rsp = 113;
 bool Event::has_wap_rsp() const {
  return (_has_bits_[3] & 0x00000080u) != 0;
}
 void Event::set_has_wap_rsp() {
  _has_bits_[3] |= 0x00000080u;
}
 void Event::clear_has_wap_rsp() {
  _has_bits_[3] &= ~0x00000080u;
}
 void Event::clear_wap_rsp() {
  if (wap_rsp_ != NULL) wap_rsp_->::Wap_Str_Response::Clear();
  clear_has_wap_rsp();
}
 const ::Wap_Str_Response& Event::wap_rsp() const {
  // @@protoc_insertion_point(field_get:Event.wap_rsp)
  return wap_rsp_ != NULL ? *wap_rsp_ : *default_instance_->wap_rsp_;
}
 ::Wap_Str_Response* Event::mutable_wap_rsp() {
  set_has_wap_rsp();
  if (wap_rsp_ == NULL) {
    wap_rsp_ = new ::Wap_Str_Response;
  }
  // @@protoc_insertion_point(field_mutable:Event.wap_rsp)
  return wap_rsp_;
}
 ::Wap_Str_Response* Event::release_wap_rsp() {
  clear_has_wap_rsp();
  ::Wap_Str_Response* temp = wap_rsp_;
  wap_rsp_ = NULL;
  return temp;
}
 void Event::set_allocated_wap_rsp(::Wap_Str_Response* wap_rsp) {
  delete wap_rsp_;
  wap_rsp_ = wap_rsp;
  if (wap_rsp) {
    set_has_wap_rsp();
  } else {
    clear_has_wap_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.wap_rsp)
}

// optional .FriendRecallMsg friend_recall = 114;
 bool Event::has_friend_recall() const {
  return (_has_bits_[3] & 0x00000100u) != 0;
}
 void Event::set_has_friend_recall() {
  _has_bits_[3] |= 0x00000100u;
}
 void Event::clear_has_friend_recall() {
  _has_bits_[3] &= ~0x00000100u;
}
 void Event::clear_friend_recall() {
  if (friend_recall_ != NULL) friend_recall_->::FriendRecallMsg::Clear();
  clear_has_friend_recall();
}
 const ::FriendRecallMsg& Event::friend_recall() const {
  // @@protoc_insertion_point(field_get:Event.friend_recall)
  return friend_recall_ != NULL ? *friend_recall_ : *default_instance_->friend_recall_;
}
 ::FriendRecallMsg* Event::mutable_friend_recall() {
  set_has_friend_recall();
  if (friend_recall_ == NULL) {
    friend_recall_ = new ::FriendRecallMsg;
  }
  // @@protoc_insertion_point(field_mutable:Event.friend_recall)
  return friend_recall_;
}
 ::FriendRecallMsg* Event::release_friend_recall() {
  clear_has_friend_recall();
  ::FriendRecallMsg* temp = friend_recall_;
  friend_recall_ = NULL;
  return temp;
}
 void Event::set_allocated_friend_recall(::FriendRecallMsg* friend_recall) {
  delete friend_recall_;
  friend_recall_ = friend_recall;
  if (friend_recall) {
    set_has_friend_recall();
  } else {
    clear_has_friend_recall();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.friend_recall)
}

// optional string openid = 115;
 bool Event::has_openid() const {
  return (_has_bits_[3] & 0x00000200u) != 0;
}
 void Event::set_has_openid() {
  _has_bits_[3] |= 0x00000200u;
}
 void Event::clear_has_openid() {
  _has_bits_[3] &= ~0x00000200u;
}
 void Event::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& Event::openid() const {
  // @@protoc_insertion_point(field_get:Event.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Event.openid)
}
 void Event::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Event.openid)
}
 void Event::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Event.openid)
}
 ::std::string* Event::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:Event.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:Event.openid)
}

// repeated .SimpleMarkUser SimpleMare = 116;
 int Event::simplemare_size() const {
  return simplemare_.size();
}
 void Event::clear_simplemare() {
  simplemare_.Clear();
}
 const ::SimpleMarkUser& Event::simplemare(int index) const {
  // @@protoc_insertion_point(field_get:Event.SimpleMare)
  return simplemare_.Get(index);
}
 ::SimpleMarkUser* Event::mutable_simplemare(int index) {
  // @@protoc_insertion_point(field_mutable:Event.SimpleMare)
  return simplemare_.Mutable(index);
}
 ::SimpleMarkUser* Event::add_simplemare() {
  // @@protoc_insertion_point(field_add:Event.SimpleMare)
  return simplemare_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::SimpleMarkUser >&
Event::simplemare() const {
  // @@protoc_insertion_point(field_list:Event.SimpleMare)
  return simplemare_;
}
 ::google::protobuf::RepeatedPtrField< ::SimpleMarkUser >*
Event::mutable_simplemare() {
  // @@protoc_insertion_point(field_mutable_list:Event.SimpleMare)
  return &simplemare_;
}

// optional .WebBuy3 webbuy3 = 117;
 bool Event::has_webbuy3() const {
  return (_has_bits_[3] & 0x00000800u) != 0;
}
 void Event::set_has_webbuy3() {
  _has_bits_[3] |= 0x00000800u;
}
 void Event::clear_has_webbuy3() {
  _has_bits_[3] &= ~0x00000800u;
}
 void Event::clear_webbuy3() {
  if (webbuy3_ != NULL) webbuy3_->::WebBuy3::Clear();
  clear_has_webbuy3();
}
 const ::WebBuy3& Event::webbuy3() const {
  // @@protoc_insertion_point(field_get:Event.webbuy3)
  return webbuy3_ != NULL ? *webbuy3_ : *default_instance_->webbuy3_;
}
 ::WebBuy3* Event::mutable_webbuy3() {
  set_has_webbuy3();
  if (webbuy3_ == NULL) {
    webbuy3_ = new ::WebBuy3;
  }
  // @@protoc_insertion_point(field_mutable:Event.webbuy3)
  return webbuy3_;
}
 ::WebBuy3* Event::release_webbuy3() {
  clear_has_webbuy3();
  ::WebBuy3* temp = webbuy3_;
  webbuy3_ = NULL;
  return temp;
}
 void Event::set_allocated_webbuy3(::WebBuy3* webbuy3) {
  delete webbuy3_;
  webbuy3_ = webbuy3;
  if (webbuy3) {
    set_has_webbuy3();
  } else {
    clear_has_webbuy3();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.webbuy3)
}

// optional .CenterLogicValue center_logic_value = 118;
 bool Event::has_center_logic_value() const {
  return (_has_bits_[3] & 0x00001000u) != 0;
}
 void Event::set_has_center_logic_value() {
  _has_bits_[3] |= 0x00001000u;
}
 void Event::clear_has_center_logic_value() {
  _has_bits_[3] &= ~0x00001000u;
}
 void Event::clear_center_logic_value() {
  if (center_logic_value_ != NULL) center_logic_value_->::CenterLogicValue::Clear();
  clear_has_center_logic_value();
}
 const ::CenterLogicValue& Event::center_logic_value() const {
  // @@protoc_insertion_point(field_get:Event.center_logic_value)
  return center_logic_value_ != NULL ? *center_logic_value_ : *default_instance_->center_logic_value_;
}
 ::CenterLogicValue* Event::mutable_center_logic_value() {
  set_has_center_logic_value();
  if (center_logic_value_ == NULL) {
    center_logic_value_ = new ::CenterLogicValue;
  }
  // @@protoc_insertion_point(field_mutable:Event.center_logic_value)
  return center_logic_value_;
}
 ::CenterLogicValue* Event::release_center_logic_value() {
  clear_has_center_logic_value();
  ::CenterLogicValue* temp = center_logic_value_;
  center_logic_value_ = NULL;
  return temp;
}
 void Event::set_allocated_center_logic_value(::CenterLogicValue* center_logic_value) {
  delete center_logic_value_;
  center_logic_value_ = center_logic_value;
  if (center_logic_value) {
    set_has_center_logic_value();
  } else {
    clear_has_center_logic_value();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.center_logic_value)
}

// optional .InviteFriendLvlSucc inviteFridData = 119;
 bool Event::has_invitefriddata() const {
  return (_has_bits_[3] & 0x00002000u) != 0;
}
 void Event::set_has_invitefriddata() {
  _has_bits_[3] |= 0x00002000u;
}
 void Event::clear_has_invitefriddata() {
  _has_bits_[3] &= ~0x00002000u;
}
 void Event::clear_invitefriddata() {
  if (invitefriddata_ != NULL) invitefriddata_->::InviteFriendLvlSucc::Clear();
  clear_has_invitefriddata();
}
 const ::InviteFriendLvlSucc& Event::invitefriddata() const {
  // @@protoc_insertion_point(field_get:Event.inviteFridData)
  return invitefriddata_ != NULL ? *invitefriddata_ : *default_instance_->invitefriddata_;
}
 ::InviteFriendLvlSucc* Event::mutable_invitefriddata() {
  set_has_invitefriddata();
  if (invitefriddata_ == NULL) {
    invitefriddata_ = new ::InviteFriendLvlSucc;
  }
  // @@protoc_insertion_point(field_mutable:Event.inviteFridData)
  return invitefriddata_;
}
 ::InviteFriendLvlSucc* Event::release_invitefriddata() {
  clear_has_invitefriddata();
  ::InviteFriendLvlSucc* temp = invitefriddata_;
  invitefriddata_ = NULL;
  return temp;
}
 void Event::set_allocated_invitefriddata(::InviteFriendLvlSucc* invitefriddata) {
  delete invitefriddata_;
  invitefriddata_ = invitefriddata;
  if (invitefriddata) {
    set_has_invitefriddata();
  } else {
    clear_has_invitefriddata();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.inviteFridData)
}

// optional .MseAuthState Mse_MseAuthState = 129;
 bool Event::has_mse_mseauthstate() const {
  return (_has_bits_[3] & 0x00004000u) != 0;
}
 void Event::set_has_mse_mseauthstate() {
  _has_bits_[3] |= 0x00004000u;
}
 void Event::clear_has_mse_mseauthstate() {
  _has_bits_[3] &= ~0x00004000u;
}
 void Event::clear_mse_mseauthstate() {
  if (mse_mseauthstate_ != NULL) mse_mseauthstate_->::MseAuthState::Clear();
  clear_has_mse_mseauthstate();
}
 const ::MseAuthState& Event::mse_mseauthstate() const {
  // @@protoc_insertion_point(field_get:Event.Mse_MseAuthState)
  return mse_mseauthstate_ != NULL ? *mse_mseauthstate_ : *default_instance_->mse_mseauthstate_;
}
 ::MseAuthState* Event::mutable_mse_mseauthstate() {
  set_has_mse_mseauthstate();
  if (mse_mseauthstate_ == NULL) {
    mse_mseauthstate_ = new ::MseAuthState;
  }
  // @@protoc_insertion_point(field_mutable:Event.Mse_MseAuthState)
  return mse_mseauthstate_;
}
 ::MseAuthState* Event::release_mse_mseauthstate() {
  clear_has_mse_mseauthstate();
  ::MseAuthState* temp = mse_mseauthstate_;
  mse_mseauthstate_ = NULL;
  return temp;
}
 void Event::set_allocated_mse_mseauthstate(::MseAuthState* mse_mseauthstate) {
  delete mse_mseauthstate_;
  mse_mseauthstate_ = mse_mseauthstate;
  if (mse_mseauthstate) {
    set_has_mse_mseauthstate();
  } else {
    clear_has_mse_mseauthstate();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.Mse_MseAuthState)
}

// optional .MseFuncSwich Mse_MseFuncSwich = 130;
 bool Event::has_mse_msefuncswich() const {
  return (_has_bits_[3] & 0x00008000u) != 0;
}
 void Event::set_has_mse_msefuncswich() {
  _has_bits_[3] |= 0x00008000u;
}
 void Event::clear_has_mse_msefuncswich() {
  _has_bits_[3] &= ~0x00008000u;
}
 void Event::clear_mse_msefuncswich() {
  if (mse_msefuncswich_ != NULL) mse_msefuncswich_->::MseFuncSwich::Clear();
  clear_has_mse_msefuncswich();
}
 const ::MseFuncSwich& Event::mse_msefuncswich() const {
  // @@protoc_insertion_point(field_get:Event.Mse_MseFuncSwich)
  return mse_msefuncswich_ != NULL ? *mse_msefuncswich_ : *default_instance_->mse_msefuncswich_;
}
 ::MseFuncSwich* Event::mutable_mse_msefuncswich() {
  set_has_mse_msefuncswich();
  if (mse_msefuncswich_ == NULL) {
    mse_msefuncswich_ = new ::MseFuncSwich;
  }
  // @@protoc_insertion_point(field_mutable:Event.Mse_MseFuncSwich)
  return mse_msefuncswich_;
}
 ::MseFuncSwich* Event::release_mse_msefuncswich() {
  clear_has_mse_msefuncswich();
  ::MseFuncSwich* temp = mse_msefuncswich_;
  mse_msefuncswich_ = NULL;
  return temp;
}
 void Event::set_allocated_mse_msefuncswich(::MseFuncSwich* mse_msefuncswich) {
  delete mse_msefuncswich_;
  mse_msefuncswich_ = mse_msefuncswich;
  if (mse_msefuncswich) {
    set_has_mse_msefuncswich();
  } else {
    clear_has_mse_msefuncswich();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.Mse_MseFuncSwich)
}

// optional .MceGatewayFunction Mce_MceGatewayFunction = 131;
 bool Event::has_mce_mcegatewayfunction() const {
  return (_has_bits_[3] & 0x00010000u) != 0;
}
 void Event::set_has_mce_mcegatewayfunction() {
  _has_bits_[3] |= 0x00010000u;
}
 void Event::clear_has_mce_mcegatewayfunction() {
  _has_bits_[3] &= ~0x00010000u;
}
 void Event::clear_mce_mcegatewayfunction() {
  if (mce_mcegatewayfunction_ != NULL) mce_mcegatewayfunction_->::MceGatewayFunction::Clear();
  clear_has_mce_mcegatewayfunction();
}
 const ::MceGatewayFunction& Event::mce_mcegatewayfunction() const {
  // @@protoc_insertion_point(field_get:Event.Mce_MceGatewayFunction)
  return mce_mcegatewayfunction_ != NULL ? *mce_mcegatewayfunction_ : *default_instance_->mce_mcegatewayfunction_;
}
 ::MceGatewayFunction* Event::mutable_mce_mcegatewayfunction() {
  set_has_mce_mcegatewayfunction();
  if (mce_mcegatewayfunction_ == NULL) {
    mce_mcegatewayfunction_ = new ::MceGatewayFunction;
  }
  // @@protoc_insertion_point(field_mutable:Event.Mce_MceGatewayFunction)
  return mce_mcegatewayfunction_;
}
 ::MceGatewayFunction* Event::release_mce_mcegatewayfunction() {
  clear_has_mce_mcegatewayfunction();
  ::MceGatewayFunction* temp = mce_mcegatewayfunction_;
  mce_mcegatewayfunction_ = NULL;
  return temp;
}
 void Event::set_allocated_mce_mcegatewayfunction(::MceGatewayFunction* mce_mcegatewayfunction) {
  delete mce_mcegatewayfunction_;
  mce_mcegatewayfunction_ = mce_mcegatewayfunction;
  if (mce_mcegatewayfunction) {
    set_has_mce_mcegatewayfunction();
  } else {
    clear_has_mce_mcegatewayfunction();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.Mce_MceGatewayFunction)
}

// optional .MseGatewayFunction Mse_MseGatewayFunction = 132;
 bool Event::has_mse_msegatewayfunction() const {
  return (_has_bits_[3] & 0x00020000u) != 0;
}
 void Event::set_has_mse_msegatewayfunction() {
  _has_bits_[3] |= 0x00020000u;
}
 void Event::clear_has_mse_msegatewayfunction() {
  _has_bits_[3] &= ~0x00020000u;
}
 void Event::clear_mse_msegatewayfunction() {
  if (mse_msegatewayfunction_ != NULL) mse_msegatewayfunction_->::MseGatewayFunction::Clear();
  clear_has_mse_msegatewayfunction();
}
 const ::MseGatewayFunction& Event::mse_msegatewayfunction() const {
  // @@protoc_insertion_point(field_get:Event.Mse_MseGatewayFunction)
  return mse_msegatewayfunction_ != NULL ? *mse_msegatewayfunction_ : *default_instance_->mse_msegatewayfunction_;
}
 ::MseGatewayFunction* Event::mutable_mse_msegatewayfunction() {
  set_has_mse_msegatewayfunction();
  if (mse_msegatewayfunction_ == NULL) {
    mse_msegatewayfunction_ = new ::MseGatewayFunction;
  }
  // @@protoc_insertion_point(field_mutable:Event.Mse_MseGatewayFunction)
  return mse_msegatewayfunction_;
}
 ::MseGatewayFunction* Event::release_mse_msegatewayfunction() {
  clear_has_mse_msegatewayfunction();
  ::MseGatewayFunction* temp = mse_msegatewayfunction_;
  mse_msegatewayfunction_ = NULL;
  return temp;
}
 void Event::set_allocated_mse_msegatewayfunction(::MseGatewayFunction* mse_msegatewayfunction) {
  delete mse_msegatewayfunction_;
  mse_msegatewayfunction_ = mse_msegatewayfunction;
  if (mse_msegatewayfunction) {
    set_has_mse_msegatewayfunction();
  } else {
    clear_has_mse_msegatewayfunction();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.Mse_MseGatewayFunction)
}

// optional .MseFriendList Mse_MseFriendList = 133;
 bool Event::has_mse_msefriendlist() const {
  return (_has_bits_[3] & 0x00040000u) != 0;
}
 void Event::set_has_mse_msefriendlist() {
  _has_bits_[3] |= 0x00040000u;
}
 void Event::clear_has_mse_msefriendlist() {
  _has_bits_[3] &= ~0x00040000u;
}
 void Event::clear_mse_msefriendlist() {
  if (mse_msefriendlist_ != NULL) mse_msefriendlist_->::MseFriendList::Clear();
  clear_has_mse_msefriendlist();
}
 const ::MseFriendList& Event::mse_msefriendlist() const {
  // @@protoc_insertion_point(field_get:Event.Mse_MseFriendList)
  return mse_msefriendlist_ != NULL ? *mse_msefriendlist_ : *default_instance_->mse_msefriendlist_;
}
 ::MseFriendList* Event::mutable_mse_msefriendlist() {
  set_has_mse_msefriendlist();
  if (mse_msefriendlist_ == NULL) {
    mse_msefriendlist_ = new ::MseFriendList;
  }
  // @@protoc_insertion_point(field_mutable:Event.Mse_MseFriendList)
  return mse_msefriendlist_;
}
 ::MseFriendList* Event::release_mse_msefriendlist() {
  clear_has_mse_msefriendlist();
  ::MseFriendList* temp = mse_msefriendlist_;
  mse_msefriendlist_ = NULL;
  return temp;
}
 void Event::set_allocated_mse_msefriendlist(::MseFriendList* mse_msefriendlist) {
  delete mse_msefriendlist_;
  mse_msefriendlist_ = mse_msefriendlist;
  if (mse_msefriendlist) {
    set_has_mse_msefriendlist();
  } else {
    clear_has_mse_msefriendlist();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.Mse_MseFriendList)
}

// optional .MceHeartbeat Mce_MceHeartbeat = 134;
 bool Event::has_mce_mceheartbeat() const {
  return (_has_bits_[3] & 0x00080000u) != 0;
}
 void Event::set_has_mce_mceheartbeat() {
  _has_bits_[3] |= 0x00080000u;
}
 void Event::clear_has_mce_mceheartbeat() {
  _has_bits_[3] &= ~0x00080000u;
}
 void Event::clear_mce_mceheartbeat() {
  if (mce_mceheartbeat_ != NULL) mce_mceheartbeat_->::MceHeartbeat::Clear();
  clear_has_mce_mceheartbeat();
}
 const ::MceHeartbeat& Event::mce_mceheartbeat() const {
  // @@protoc_insertion_point(field_get:Event.Mce_MceHeartbeat)
  return mce_mceheartbeat_ != NULL ? *mce_mceheartbeat_ : *default_instance_->mce_mceheartbeat_;
}
 ::MceHeartbeat* Event::mutable_mce_mceheartbeat() {
  set_has_mce_mceheartbeat();
  if (mce_mceheartbeat_ == NULL) {
    mce_mceheartbeat_ = new ::MceHeartbeat;
  }
  // @@protoc_insertion_point(field_mutable:Event.Mce_MceHeartbeat)
  return mce_mceheartbeat_;
}
 ::MceHeartbeat* Event::release_mce_mceheartbeat() {
  clear_has_mce_mceheartbeat();
  ::MceHeartbeat* temp = mce_mceheartbeat_;
  mce_mceheartbeat_ = NULL;
  return temp;
}
 void Event::set_allocated_mce_mceheartbeat(::MceHeartbeat* mce_mceheartbeat) {
  delete mce_mceheartbeat_;
  mce_mceheartbeat_ = mce_mceheartbeat;
  if (mce_mceheartbeat) {
    set_has_mce_mceheartbeat();
  } else {
    clear_has_mce_mceheartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.Mce_MceHeartbeat)
}

// optional .MceActionInfo Mce_MceActionInfo = 135;
 bool Event::has_mce_mceactioninfo() const {
  return (_has_bits_[3] & 0x00100000u) != 0;
}
 void Event::set_has_mce_mceactioninfo() {
  _has_bits_[3] |= 0x00100000u;
}
 void Event::clear_has_mce_mceactioninfo() {
  _has_bits_[3] &= ~0x00100000u;
}
 void Event::clear_mce_mceactioninfo() {
  if (mce_mceactioninfo_ != NULL) mce_mceactioninfo_->::MceActionInfo::Clear();
  clear_has_mce_mceactioninfo();
}
 const ::MceActionInfo& Event::mce_mceactioninfo() const {
  // @@protoc_insertion_point(field_get:Event.Mce_MceActionInfo)
  return mce_mceactioninfo_ != NULL ? *mce_mceactioninfo_ : *default_instance_->mce_mceactioninfo_;
}
 ::MceActionInfo* Event::mutable_mce_mceactioninfo() {
  set_has_mce_mceactioninfo();
  if (mce_mceactioninfo_ == NULL) {
    mce_mceactioninfo_ = new ::MceActionInfo;
  }
  // @@protoc_insertion_point(field_mutable:Event.Mce_MceActionInfo)
  return mce_mceactioninfo_;
}
 ::MceActionInfo* Event::release_mce_mceactioninfo() {
  clear_has_mce_mceactioninfo();
  ::MceActionInfo* temp = mce_mceactioninfo_;
  mce_mceactioninfo_ = NULL;
  return temp;
}
 void Event::set_allocated_mce_mceactioninfo(::MceActionInfo* mce_mceactioninfo) {
  delete mce_mceactioninfo_;
  mce_mceactioninfo_ = mce_mceactioninfo;
  if (mce_mceactioninfo) {
    set_has_mce_mceactioninfo();
  } else {
    clear_has_mce_mceactioninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.Mce_MceActionInfo)
}

// optional .MseActionInfo Mse_MseActionInfo = 136;
 bool Event::has_mse_mseactioninfo() const {
  return (_has_bits_[3] & 0x00200000u) != 0;
}
 void Event::set_has_mse_mseactioninfo() {
  _has_bits_[3] |= 0x00200000u;
}
 void Event::clear_has_mse_mseactioninfo() {
  _has_bits_[3] &= ~0x00200000u;
}
 void Event::clear_mse_mseactioninfo() {
  if (mse_mseactioninfo_ != NULL) mse_mseactioninfo_->::MseActionInfo::Clear();
  clear_has_mse_mseactioninfo();
}
 const ::MseActionInfo& Event::mse_mseactioninfo() const {
  // @@protoc_insertion_point(field_get:Event.Mse_MseActionInfo)
  return mse_mseactioninfo_ != NULL ? *mse_mseactioninfo_ : *default_instance_->mse_mseactioninfo_;
}
 ::MseActionInfo* Event::mutable_mse_mseactioninfo() {
  set_has_mse_mseactioninfo();
  if (mse_mseactioninfo_ == NULL) {
    mse_mseactioninfo_ = new ::MseActionInfo;
  }
  // @@protoc_insertion_point(field_mutable:Event.Mse_MseActionInfo)
  return mse_mseactioninfo_;
}
 ::MseActionInfo* Event::release_mse_mseactioninfo() {
  clear_has_mse_mseactioninfo();
  ::MseActionInfo* temp = mse_mseactioninfo_;
  mse_mseactioninfo_ = NULL;
  return temp;
}
 void Event::set_allocated_mse_mseactioninfo(::MseActionInfo* mse_mseactioninfo) {
  delete mse_mseactioninfo_;
  mse_mseactioninfo_ = mse_mseactioninfo;
  if (mse_mseactioninfo) {
    set_has_mse_mseactioninfo();
  } else {
    clear_has_mse_mseactioninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.Mse_MseActionInfo)
}

// optional .MseRank Mse_MseRank = 137;
 bool Event::has_mse_mserank() const {
  return (_has_bits_[3] & 0x00400000u) != 0;
}
 void Event::set_has_mse_mserank() {
  _has_bits_[3] |= 0x00400000u;
}
 void Event::clear_has_mse_mserank() {
  _has_bits_[3] &= ~0x00400000u;
}
 void Event::clear_mse_mserank() {
  if (mse_mserank_ != NULL) mse_mserank_->::MseRank::Clear();
  clear_has_mse_mserank();
}
 const ::MseRank& Event::mse_mserank() const {
  // @@protoc_insertion_point(field_get:Event.Mse_MseRank)
  return mse_mserank_ != NULL ? *mse_mserank_ : *default_instance_->mse_mserank_;
}
 ::MseRank* Event::mutable_mse_mserank() {
  set_has_mse_mserank();
  if (mse_mserank_ == NULL) {
    mse_mserank_ = new ::MseRank;
  }
  // @@protoc_insertion_point(field_mutable:Event.Mse_MseRank)
  return mse_mserank_;
}
 ::MseRank* Event::release_mse_mserank() {
  clear_has_mse_mserank();
  ::MseRank* temp = mse_mserank_;
  mse_mserank_ = NULL;
  return temp;
}
 void Event::set_allocated_mse_mserank(::MseRank* mse_mserank) {
  delete mse_mserank_;
  mse_mserank_ = mse_mserank;
  if (mse_mserank) {
    set_has_mse_mserank();
  } else {
    clear_has_mse_mserank();
  }
  // @@protoc_insertion_point(field_set_allocated:Event.Mse_MseRank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
