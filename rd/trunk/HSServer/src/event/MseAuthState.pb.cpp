// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MseAuthState.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MseAuthState.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MseAuthState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MseAuthState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MseAuthState_2eproto() {
  protobuf_AddDesc_MseAuthState_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MseAuthState.proto");
  GOOGLE_CHECK(file != NULL);
  MseAuthState_descriptor_ = file->message_type(0);
  static const int MseAuthState_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseAuthState, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseAuthState, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseAuthState, leftmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseAuthState, banmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseAuthState, adpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseAuthState, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseAuthState, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseAuthState, adval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseAuthState, sw_),
  };
  MseAuthState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MseAuthState_descriptor_,
      MseAuthState::default_instance_,
      MseAuthState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseAuthState, _has_bits_[0]),
      -1,
      -1,
      sizeof(MseAuthState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MseAuthState, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MseAuthState_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MseAuthState_descriptor_, &MseAuthState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MseAuthState_2eproto() {
  delete MseAuthState::default_instance_;
  delete MseAuthState_reflection_;
}

void protobuf_AddDesc_MseAuthState_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022MseAuthState.proto\"\223\001\n\014MseAuthState\022\014\n"
    "\004pass\030\001 \002(\010\022\014\n\004type\030\002 \002(\005\022\017\n\007leftMin\030\003 \002"
    "(\005\022\016\n\006banMin\030\004 \001(\005\022\016\n\006adpath\030\005 \001(\t\022\016\n\006op"
    "enid\030\006 \001(\t\022\013\n\003uid\030\007 \001(\t\022\r\n\005adval\030\010 \001(\005\022\n"
    "\n\002sw\030\t \001(\005", 170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MseAuthState.proto", &protobuf_RegisterTypes);
  MseAuthState::default_instance_ = new MseAuthState();
  MseAuthState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MseAuthState_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MseAuthState_2eproto {
  StaticDescriptorInitializer_MseAuthState_2eproto() {
    protobuf_AddDesc_MseAuthState_2eproto();
  }
} static_descriptor_initializer_MseAuthState_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int MseAuthState::kPassFieldNumber;
const int MseAuthState::kTypeFieldNumber;
const int MseAuthState::kLeftMinFieldNumber;
const int MseAuthState::kBanMinFieldNumber;
const int MseAuthState::kAdpathFieldNumber;
const int MseAuthState::kOpenidFieldNumber;
const int MseAuthState::kUidFieldNumber;
const int MseAuthState::kAdvalFieldNumber;
const int MseAuthState::kSwFieldNumber;
#endif  // !_MSC_VER

MseAuthState::MseAuthState()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MseAuthState)
}

void MseAuthState::InitAsDefaultInstance() {
}

MseAuthState::MseAuthState(const MseAuthState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MseAuthState)
}

void MseAuthState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pass_ = false;
  type_ = 0;
  leftmin_ = 0;
  banmin_ = 0;
  adpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adval_ = 0;
  sw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MseAuthState::~MseAuthState() {
  // @@protoc_insertion_point(destructor:MseAuthState)
  SharedDtor();
}

void MseAuthState::SharedDtor() {
  adpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MseAuthState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MseAuthState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MseAuthState_descriptor_;
}

const MseAuthState& MseAuthState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MseAuthState_2eproto();
  return *default_instance_;
}

MseAuthState* MseAuthState::default_instance_ = NULL;

MseAuthState* MseAuthState::New(::google::protobuf::Arena* arena) const {
  MseAuthState* n = new MseAuthState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MseAuthState::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MseAuthState*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(pass_, banmin_);
    if (has_adpath()) {
      adpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uid()) {
      uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    adval_ = 0;
  }
  sw_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MseAuthState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MseAuthState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool pass = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_leftMin;
        break;
      }

      // required int32 leftMin = 3;
      case 3: {
        if (tag == 24) {
         parse_leftMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftmin_)));
          set_has_leftmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_banMin;
        break;
      }

      // optional int32 banMin = 4;
      case 4: {
        if (tag == 32) {
         parse_banMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banmin_)));
          set_has_banmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_adpath;
        break;
      }

      // optional string adpath = 5;
      case 5: {
        if (tag == 42) {
         parse_adpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adpath().data(), this->adpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MseAuthState.adpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_openid;
        break;
      }

      // optional string openid = 6;
      case 6: {
        if (tag == 50) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MseAuthState.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_uid;
        break;
      }

      // optional string uid = 7;
      case 7: {
        if (tag == 58) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MseAuthState.uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_adval;
        break;
      }

      // optional int32 adval = 8;
      case 8: {
        if (tag == 64) {
         parse_adval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adval_)));
          set_has_adval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sw;
        break;
      }

      // optional int32 sw = 9;
      case 9: {
        if (tag == 72) {
         parse_sw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sw_)));
          set_has_sw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MseAuthState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MseAuthState)
  return false;
#undef DO_
}

void MseAuthState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MseAuthState)
  // required bool pass = 1;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->pass(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 leftMin = 3;
  if (has_leftmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leftmin(), output);
  }

  // optional int32 banMin = 4;
  if (has_banmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->banmin(), output);
  }

  // optional string adpath = 5;
  if (has_adpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adpath().data(), this->adpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MseAuthState.adpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->adpath(), output);
  }

  // optional string openid = 6;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MseAuthState.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->openid(), output);
  }

  // optional string uid = 7;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MseAuthState.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->uid(), output);
  }

  // optional int32 adval = 8;
  if (has_adval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->adval(), output);
  }

  // optional int32 sw = 9;
  if (has_sw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MseAuthState)
}

::google::protobuf::uint8* MseAuthState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MseAuthState)
  // required bool pass = 1;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->pass(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 leftMin = 3;
  if (has_leftmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leftmin(), target);
  }

  // optional int32 banMin = 4;
  if (has_banmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->banmin(), target);
  }

  // optional string adpath = 5;
  if (has_adpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adpath().data(), this->adpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MseAuthState.adpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->adpath(), target);
  }

  // optional string openid = 6;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MseAuthState.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->openid(), target);
  }

  // optional string uid = 7;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MseAuthState.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->uid(), target);
  }

  // optional int32 adval = 8;
  if (has_adval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->adval(), target);
  }

  // optional int32 sw = 9;
  if (has_sw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MseAuthState)
  return target;
}

int MseAuthState::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_pass()) {
    // required bool pass = 1;
    total_size += 1 + 1;
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_leftmin()) {
    // required int32 leftMin = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leftmin());
  }

  return total_size;
}
int MseAuthState::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bool pass = 1;
    total_size += 1 + 1;

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 leftMin = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leftmin());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248) {
    // optional int32 banMin = 4;
    if (has_banmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banmin());
    }

    // optional string adpath = 5;
    if (has_adpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adpath());
    }

    // optional string openid = 6;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string uid = 7;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional int32 adval = 8;
    if (has_adval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adval());
    }

  }
  // optional int32 sw = 9;
  if (has_sw()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sw());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MseAuthState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MseAuthState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MseAuthState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MseAuthState::MergeFrom(const MseAuthState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_leftmin()) {
      set_leftmin(from.leftmin());
    }
    if (from.has_banmin()) {
      set_banmin(from.banmin());
    }
    if (from.has_adpath()) {
      set_has_adpath();
      adpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adpath_);
    }
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_uid()) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (from.has_adval()) {
      set_adval(from.adval());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sw()) {
      set_sw(from.sw());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MseAuthState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MseAuthState::CopyFrom(const MseAuthState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MseAuthState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MseAuthState::Swap(MseAuthState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MseAuthState::InternalSwap(MseAuthState* other) {
  std::swap(pass_, other->pass_);
  std::swap(type_, other->type_);
  std::swap(leftmin_, other->leftmin_);
  std::swap(banmin_, other->banmin_);
  adpath_.Swap(&other->adpath_);
  openid_.Swap(&other->openid_);
  uid_.Swap(&other->uid_);
  std::swap(adval_, other->adval_);
  std::swap(sw_, other->sw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MseAuthState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MseAuthState_descriptor_;
  metadata.reflection = MseAuthState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MseAuthState

// required bool pass = 1;
 bool MseAuthState::has_pass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void MseAuthState::set_has_pass() {
  _has_bits_[0] |= 0x00000001u;
}
 void MseAuthState::clear_has_pass() {
  _has_bits_[0] &= ~0x00000001u;
}
 void MseAuthState::clear_pass() {
  pass_ = false;
  clear_has_pass();
}
 bool MseAuthState::pass() const {
  // @@protoc_insertion_point(field_get:MseAuthState.pass)
  return pass_;
}
 void MseAuthState::set_pass(bool value) {
  set_has_pass();
  pass_ = value;
  // @@protoc_insertion_point(field_set:MseAuthState.pass)
}

// required int32 type = 2;
 bool MseAuthState::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void MseAuthState::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
 void MseAuthState::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
 void MseAuthState::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 MseAuthState::type() const {
  // @@protoc_insertion_point(field_get:MseAuthState.type)
  return type_;
}
 void MseAuthState::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:MseAuthState.type)
}

// required int32 leftMin = 3;
 bool MseAuthState::has_leftmin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void MseAuthState::set_has_leftmin() {
  _has_bits_[0] |= 0x00000004u;
}
 void MseAuthState::clear_has_leftmin() {
  _has_bits_[0] &= ~0x00000004u;
}
 void MseAuthState::clear_leftmin() {
  leftmin_ = 0;
  clear_has_leftmin();
}
 ::google::protobuf::int32 MseAuthState::leftmin() const {
  // @@protoc_insertion_point(field_get:MseAuthState.leftMin)
  return leftmin_;
}
 void MseAuthState::set_leftmin(::google::protobuf::int32 value) {
  set_has_leftmin();
  leftmin_ = value;
  // @@protoc_insertion_point(field_set:MseAuthState.leftMin)
}

// optional int32 banMin = 4;
 bool MseAuthState::has_banmin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void MseAuthState::set_has_banmin() {
  _has_bits_[0] |= 0x00000008u;
}
 void MseAuthState::clear_has_banmin() {
  _has_bits_[0] &= ~0x00000008u;
}
 void MseAuthState::clear_banmin() {
  banmin_ = 0;
  clear_has_banmin();
}
 ::google::protobuf::int32 MseAuthState::banmin() const {
  // @@protoc_insertion_point(field_get:MseAuthState.banMin)
  return banmin_;
}
 void MseAuthState::set_banmin(::google::protobuf::int32 value) {
  set_has_banmin();
  banmin_ = value;
  // @@protoc_insertion_point(field_set:MseAuthState.banMin)
}

// optional string adpath = 5;
 bool MseAuthState::has_adpath() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void MseAuthState::set_has_adpath() {
  _has_bits_[0] |= 0x00000010u;
}
 void MseAuthState::clear_has_adpath() {
  _has_bits_[0] &= ~0x00000010u;
}
 void MseAuthState::clear_adpath() {
  adpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adpath();
}
 const ::std::string& MseAuthState::adpath() const {
  // @@protoc_insertion_point(field_get:MseAuthState.adpath)
  return adpath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MseAuthState::set_adpath(const ::std::string& value) {
  set_has_adpath();
  adpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MseAuthState.adpath)
}
 void MseAuthState::set_adpath(const char* value) {
  set_has_adpath();
  adpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MseAuthState.adpath)
}
 void MseAuthState::set_adpath(const char* value, size_t size) {
  set_has_adpath();
  adpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MseAuthState.adpath)
}
 ::std::string* MseAuthState::mutable_adpath() {
  set_has_adpath();
  // @@protoc_insertion_point(field_mutable:MseAuthState.adpath)
  return adpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MseAuthState::release_adpath() {
  clear_has_adpath();
  return adpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MseAuthState::set_allocated_adpath(::std::string* adpath) {
  if (adpath != NULL) {
    set_has_adpath();
  } else {
    clear_has_adpath();
  }
  adpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adpath);
  // @@protoc_insertion_point(field_set_allocated:MseAuthState.adpath)
}

// optional string openid = 6;
 bool MseAuthState::has_openid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void MseAuthState::set_has_openid() {
  _has_bits_[0] |= 0x00000020u;
}
 void MseAuthState::clear_has_openid() {
  _has_bits_[0] &= ~0x00000020u;
}
 void MseAuthState::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& MseAuthState::openid() const {
  // @@protoc_insertion_point(field_get:MseAuthState.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MseAuthState::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MseAuthState.openid)
}
 void MseAuthState::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MseAuthState.openid)
}
 void MseAuthState::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MseAuthState.openid)
}
 ::std::string* MseAuthState::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:MseAuthState.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MseAuthState::release_openid() {
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MseAuthState::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:MseAuthState.openid)
}

// optional string uid = 7;
 bool MseAuthState::has_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void MseAuthState::set_has_uid() {
  _has_bits_[0] |= 0x00000040u;
}
 void MseAuthState::clear_has_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
 void MseAuthState::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
 const ::std::string& MseAuthState::uid() const {
  // @@protoc_insertion_point(field_get:MseAuthState.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MseAuthState::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MseAuthState.uid)
}
 void MseAuthState::set_uid(const char* value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MseAuthState.uid)
}
 void MseAuthState::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MseAuthState.uid)
}
 ::std::string* MseAuthState::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:MseAuthState.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MseAuthState::release_uid() {
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MseAuthState::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:MseAuthState.uid)
}

// optional int32 adval = 8;
 bool MseAuthState::has_adval() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void MseAuthState::set_has_adval() {
  _has_bits_[0] |= 0x00000080u;
}
 void MseAuthState::clear_has_adval() {
  _has_bits_[0] &= ~0x00000080u;
}
 void MseAuthState::clear_adval() {
  adval_ = 0;
  clear_has_adval();
}
 ::google::protobuf::int32 MseAuthState::adval() const {
  // @@protoc_insertion_point(field_get:MseAuthState.adval)
  return adval_;
}
 void MseAuthState::set_adval(::google::protobuf::int32 value) {
  set_has_adval();
  adval_ = value;
  // @@protoc_insertion_point(field_set:MseAuthState.adval)
}

// optional int32 sw = 9;
 bool MseAuthState::has_sw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void MseAuthState::set_has_sw() {
  _has_bits_[0] |= 0x00000100u;
}
 void MseAuthState::clear_has_sw() {
  _has_bits_[0] &= ~0x00000100u;
}
 void MseAuthState::clear_sw() {
  sw_ = 0;
  clear_has_sw();
}
 ::google::protobuf::int32 MseAuthState::sw() const {
  // @@protoc_insertion_point(field_get:MseAuthState.sw)
  return sw_;
}
 void MseAuthState::set_sw(::google::protobuf::int32 value) {
  set_has_sw();
  sw_ = value;
  // @@protoc_insertion_point(field_set:MseAuthState.sw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
