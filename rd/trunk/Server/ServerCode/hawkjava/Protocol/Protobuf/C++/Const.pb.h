// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Const.proto

#ifndef PROTOBUF_Const_2eproto__INCLUDED
#define PROTOBUF_Const_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Const_2eproto();
void protobuf_AssignDesc_Const_2eproto();
void protobuf_ShutdownFile_Const_2eproto();


enum chatType {
  CHAT_WORLD = 1,
  CHAT_BROADCAST = 2,
  WORLD_BROADCAST = 3
};
bool chatType_IsValid(int value);
const chatType chatType_MIN = CHAT_WORLD;
const chatType chatType_MAX = WORLD_BROADCAST;
const int chatType_ARRAYSIZE = chatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* chatType_descriptor();
inline const ::std::string& chatType_Name(chatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    chatType_descriptor(), value);
}
inline bool chatType_Parse(
    const ::std::string& name, chatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<chatType>(
    chatType_descriptor(), name, value);
}
enum kickReason {
  DUPLICATE_LOGIN = 1,
  SERVER_SHUTDOWN = 2,
  LOGIN_FORBIDEN = 3,
  KICKED_OUT = 4,
  SERVER_RESTART = 5
};
bool kickReason_IsValid(int value);
const kickReason kickReason_MIN = DUPLICATE_LOGIN;
const kickReason kickReason_MAX = SERVER_RESTART;
const int kickReason_ARRAYSIZE = kickReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* kickReason_descriptor();
inline const ::std::string& kickReason_Name(kickReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    kickReason_descriptor(), value);
}
inline bool kickReason_Parse(
    const ::std::string& name, kickReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<kickReason>(
    kickReason_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chatType>() {
  return ::chatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kickReason>() {
  return ::kickReason_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Const_2eproto__INCLUDED
